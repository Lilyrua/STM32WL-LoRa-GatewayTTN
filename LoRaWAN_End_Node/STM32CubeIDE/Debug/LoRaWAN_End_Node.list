
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012338  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  08012478  08012478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133f8  080133f8  000155d8  2**0
                  CONTENTS
  4 .ARM          00000008  080133f8  080133f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013400  08013400  000155d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013400  08013400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013408  08013408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000168  20000000  08013410  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b88  20008000  20008000  00016000  2**2
                  ALLOC
 11 .bss          000016a0  20000168  20000168  00016168  2**2
                  ALLOC
 12 RAM1_region   00000000  20001808  20001808  000155d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  000155d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001808  20001808  00016168  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00053632  00000000  00000000  00015602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b748  00000000  00000000  00068c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000185a4  00000000  00000000  0007437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002ce0  00000000  00000000  0008c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000240e  00000000  00000000  0008f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c03e  00000000  00000000  00091a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004aaef  00000000  00000000  000bda4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e0c4a  00000000  00000000  0010853b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  001e9185  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000082e4  00000000  00000000  001e91c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000006d  00000000  00000000  001f14ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000168 	.word	0x20000168
 800015c:	00000000 	.word	0x00000000
 8000160:	08012460 	.word	0x08012460

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000016c 	.word	0x2000016c
 800017c:	08012460 	.word	0x08012460

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000976:	2afd      	cmp	r2, #253	@ 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	@ 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	@ 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	@ 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_f2iz>:
 8000bc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bcc:	d30f      	bcc.n	8000bee <__aeabi_f2iz+0x2a>
 8000bce:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bd6:	d90d      	bls.n	8000bf4 <__aeabi_f2iz+0x30>
 8000bd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be4:	fa23 f002 	lsr.w	r0, r3, r2
 8000be8:	bf18      	it	ne
 8000bea:	4240      	negne	r0, r0
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_f2iz+0x3a>
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_f2iz+0x46>
 8000bfe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c02:	bf08      	it	eq
 8000c04:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_f2uiz>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	d20e      	bcs.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c18:	d30b      	bcc.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c22:	d409      	bmi.n	8000c38 <__aeabi_f2uiz+0x28>
 8000c24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
 8000c38:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c3c:	d101      	bne.n	8000c42 <__aeabi_f2uiz+0x32>
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	d102      	bne.n	8000c48 <__aeabi_f2uiz+0x38>
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b988 	b.w	8000f78 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9d08      	ldr	r5, [sp, #32]
 8000c86:	468e      	mov	lr, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14a      	bne.n	8000d26 <__udivmoddi4+0xa6>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4617      	mov	r7, r2
 8000c94:	d962      	bls.n	8000d5c <__udivmoddi4+0xdc>
 8000c96:	fab2 f682 	clz	r6, r2
 8000c9a:	b14e      	cbz	r6, 8000cb0 <__udivmoddi4+0x30>
 8000c9c:	f1c6 0320 	rsb	r3, r6, #32
 8000ca0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	40b7      	lsls	r7, r6
 8000caa:	ea43 0808 	orr.w	r8, r3, r8
 8000cae:	40b4      	lsls	r4, r6
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cbc:	0c23      	lsrs	r3, r4, #16
 8000cbe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc6:	fb01 f20c 	mul.w	r2, r1, ip
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d909      	bls.n	8000ce2 <__udivmoddi4+0x62>
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd4:	f080 80ea 	bcs.w	8000eac <__udivmoddi4+0x22c>
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	f240 80e7 	bls.w	8000eac <__udivmoddi4+0x22c>
 8000cde:	3902      	subs	r1, #2
 8000ce0:	443b      	add	r3, r7
 8000ce2:	1a9a      	subs	r2, r3, r2
 8000ce4:	b2a3      	uxth	r3, r4
 8000ce6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf6:	459c      	cmp	ip, r3
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0x8e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	f080 80d6 	bcs.w	8000eb0 <__udivmoddi4+0x230>
 8000d04:	459c      	cmp	ip, r3
 8000d06:	f240 80d3 	bls.w	8000eb0 <__udivmoddi4+0x230>
 8000d0a:	443b      	add	r3, r7
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d12:	eba3 030c 	sub.w	r3, r3, ip
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11d      	cbz	r5, 8000d22 <__udivmoddi4+0xa2>
 8000d1a:	40f3      	lsrs	r3, r6
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d905      	bls.n	8000d36 <__udivmoddi4+0xb6>
 8000d2a:	b10d      	cbz	r5, 8000d30 <__udivmoddi4+0xb0>
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	e7f5      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d146      	bne.n	8000dcc <__udivmoddi4+0x14c>
 8000d3e:	4573      	cmp	r3, lr
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xc8>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 8105 	bhi.w	8000f52 <__udivmoddi4+0x2d2>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4690      	mov	r8, r2
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0e5      	beq.n	8000d22 <__udivmoddi4+0xa2>
 8000d56:	e9c5 4800 	strd	r4, r8, [r5]
 8000d5a:	e7e2      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f000 8090 	beq.w	8000e82 <__udivmoddi4+0x202>
 8000d62:	fab2 f682 	clz	r6, r2
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f040 80a4 	bne.w	8000eb4 <__udivmoddi4+0x234>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	0c03      	lsrs	r3, r0, #16
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	b280      	uxth	r0, r0
 8000d76:	b2bc      	uxth	r4, r7
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d7e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d86:	fb04 f20c 	mul.w	r2, r4, ip
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x11e>
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x11c>
 8000d96:	429a      	cmp	r2, r3
 8000d98:	f200 80e0 	bhi.w	8000f5c <__udivmoddi4+0x2dc>
 8000d9c:	46c4      	mov	ip, r8
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000da4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dac:	fb02 f404 	mul.w	r4, r2, r4
 8000db0:	429c      	cmp	r4, r3
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x144>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x142>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f200 80ca 	bhi.w	8000f56 <__udivmoddi4+0x2d6>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	1b1b      	subs	r3, r3, r4
 8000dc6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0x98>
 8000dcc:	f1c1 0620 	rsb	r6, r1, #32
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	fa0e f401 	lsl.w	r4, lr, r1
 8000ddc:	fa20 f306 	lsr.w	r3, r0, r6
 8000de0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000de4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de8:	4323      	orrs	r3, r4
 8000dea:	fa00 f801 	lsl.w	r8, r0, r1
 8000dee:	fa1f fc87 	uxth.w	ip, r7
 8000df2:	fbbe f0f9 	udiv	r0, lr, r9
 8000df6:	0c1c      	lsrs	r4, r3, #16
 8000df8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dfc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e00:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x1a0>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e12:	f080 809c 	bcs.w	8000f4e <__udivmoddi4+0x2ce>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f240 8099 	bls.w	8000f4e <__udivmoddi4+0x2ce>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	eba4 040e 	sub.w	r4, r4, lr
 8000e24:	fa1f fe83 	uxth.w	lr, r3
 8000e28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e30:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e34:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e38:	45a4      	cmp	ip, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x1ce>
 8000e3c:	193c      	adds	r4, r7, r4
 8000e3e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e42:	f080 8082 	bcs.w	8000f4a <__udivmoddi4+0x2ca>
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d97f      	bls.n	8000f4a <__udivmoddi4+0x2ca>
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e5a:	4564      	cmp	r4, ip
 8000e5c:	4673      	mov	r3, lr
 8000e5e:	46e1      	mov	r9, ip
 8000e60:	d362      	bcc.n	8000f28 <__udivmoddi4+0x2a8>
 8000e62:	d05f      	beq.n	8000f24 <__udivmoddi4+0x2a4>
 8000e64:	b15d      	cbz	r5, 8000e7e <__udivmoddi4+0x1fe>
 8000e66:	ebb8 0203 	subs.w	r2, r8, r3
 8000e6a:	eb64 0409 	sbc.w	r4, r4, r9
 8000e6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e72:	fa22 f301 	lsr.w	r3, r2, r1
 8000e76:	431e      	orrs	r6, r3
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	e9c5 6400 	strd	r6, r4, [r5]
 8000e7e:	2100      	movs	r1, #0
 8000e80:	e74f      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000e82:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e86:	0c01      	lsrs	r1, r0, #16
 8000e88:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e8c:	b280      	uxth	r0, r0
 8000e8e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e92:	463b      	mov	r3, r7
 8000e94:	4638      	mov	r0, r7
 8000e96:	463c      	mov	r4, r7
 8000e98:	46b8      	mov	r8, r7
 8000e9a:	46be      	mov	lr, r7
 8000e9c:	2620      	movs	r6, #32
 8000e9e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ea2:	eba2 0208 	sub.w	r2, r2, r8
 8000ea6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eaa:	e766      	b.n	8000d7a <__udivmoddi4+0xfa>
 8000eac:	4601      	mov	r1, r0
 8000eae:	e718      	b.n	8000ce2 <__udivmoddi4+0x62>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	e72c      	b.n	8000d0e <__udivmoddi4+0x8e>
 8000eb4:	f1c6 0220 	rsb	r2, r6, #32
 8000eb8:	fa2e f302 	lsr.w	r3, lr, r2
 8000ebc:	40b7      	lsls	r7, r6
 8000ebe:	40b1      	lsls	r1, r6
 8000ec0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ece:	b2bc      	uxth	r4, r7
 8000ed0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed4:	0c11      	lsrs	r1, r2, #16
 8000ed6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eda:	fb08 f904 	mul.w	r9, r8, r4
 8000ede:	40b0      	lsls	r0, r6
 8000ee0:	4589      	cmp	r9, r1
 8000ee2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ee6:	b280      	uxth	r0, r0
 8000ee8:	d93e      	bls.n	8000f68 <__udivmoddi4+0x2e8>
 8000eea:	1879      	adds	r1, r7, r1
 8000eec:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef0:	d201      	bcs.n	8000ef6 <__udivmoddi4+0x276>
 8000ef2:	4589      	cmp	r9, r1
 8000ef4:	d81f      	bhi.n	8000f36 <__udivmoddi4+0x2b6>
 8000ef6:	eba1 0109 	sub.w	r1, r1, r9
 8000efa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efe:	fb09 f804 	mul.w	r8, r9, r4
 8000f02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f06:	b292      	uxth	r2, r2
 8000f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0c:	4542      	cmp	r2, r8
 8000f0e:	d229      	bcs.n	8000f64 <__udivmoddi4+0x2e4>
 8000f10:	18ba      	adds	r2, r7, r2
 8000f12:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f16:	d2c4      	bcs.n	8000ea2 <__udivmoddi4+0x222>
 8000f18:	4542      	cmp	r2, r8
 8000f1a:	d2c2      	bcs.n	8000ea2 <__udivmoddi4+0x222>
 8000f1c:	f1a9 0102 	sub.w	r1, r9, #2
 8000f20:	443a      	add	r2, r7
 8000f22:	e7be      	b.n	8000ea2 <__udivmoddi4+0x222>
 8000f24:	45f0      	cmp	r8, lr
 8000f26:	d29d      	bcs.n	8000e64 <__udivmoddi4+0x1e4>
 8000f28:	ebbe 0302 	subs.w	r3, lr, r2
 8000f2c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f30:	3801      	subs	r0, #1
 8000f32:	46e1      	mov	r9, ip
 8000f34:	e796      	b.n	8000e64 <__udivmoddi4+0x1e4>
 8000f36:	eba7 0909 	sub.w	r9, r7, r9
 8000f3a:	4449      	add	r1, r9
 8000f3c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f40:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f44:	fb09 f804 	mul.w	r8, r9, r4
 8000f48:	e7db      	b.n	8000f02 <__udivmoddi4+0x282>
 8000f4a:	4673      	mov	r3, lr
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1ce>
 8000f4e:	4650      	mov	r0, sl
 8000f50:	e766      	b.n	8000e20 <__udivmoddi4+0x1a0>
 8000f52:	4608      	mov	r0, r1
 8000f54:	e6fd      	b.n	8000d52 <__udivmoddi4+0xd2>
 8000f56:	443b      	add	r3, r7
 8000f58:	3a02      	subs	r2, #2
 8000f5a:	e733      	b.n	8000dc4 <__udivmoddi4+0x144>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	443b      	add	r3, r7
 8000f62:	e71c      	b.n	8000d9e <__udivmoddi4+0x11e>
 8000f64:	4649      	mov	r1, r9
 8000f66:	e79c      	b.n	8000ea2 <__udivmoddi4+0x222>
 8000f68:	eba1 0109 	sub.w	r1, r1, r9
 8000f6c:	46c4      	mov	ip, r8
 8000f6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f72:	fb09 f804 	mul.w	r8, r9, r4
 8000f76:	e7c4      	b.n	8000f02 <__udivmoddi4+0x282>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f7c:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_ADC_Init+0x50>)
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <MX_ADC_Init+0x54>)
 8000f82:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f88:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f90:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	2204      	movs	r2, #4
 8000f94:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f96:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f98:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f9a:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fa8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fb0:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000fb6:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fb8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fbc:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fbe:	f001 fe9b 	bl	8002cf8 <HAL_ADC_Init>
 8000fc2:	b900      	cbnz	r0, 8000fc6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fc4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fc6:	f000 fb2f 	bl	8001628 <Error_Handler>
}
 8000fca:	e7fb      	b.n	8000fc4 <MX_ADC_Init+0x48>
 8000fcc:	20000184 	.word	0x20000184
 8000fd0:	40012400 	.word	0x40012400

08000fd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000fd4:	6802      	ldr	r2, [r0, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_ADC_MspInit+0x28>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d000      	beq.n	8000fde <HAL_ADC_MspInit+0xa>
 8000fdc:	4770      	bx	lr
{
 8000fde:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fea:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ff4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000ff6:	b002      	add	sp, #8
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40012400 	.word	0x40012400

08001000 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001000:	6802      	ldr	r2, [r0, #0]
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_ADC_MspDeInit+0x18>)
 8001004:	429a      	cmp	r2, r3
 8001006:	d000      	beq.n	800100a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001008:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800100a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800100e:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	e7f7      	b.n	8001008 <HAL_ADC_MspDeInit+0x8>
 8001018:	40012400 	.word	0x40012400

0800101c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800101c:	b530      	push	{r4, r5, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800102a:	f7ff ffa7 	bl	8000f7c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800102e:	4816      	ldr	r0, [pc, #88]	@ (8001088 <ADC_ReadChannels+0x6c>)
 8001030:	f002 fa9a 	bl	8003568 <HAL_ADCEx_Calibration_Start>
 8001034:	b9f8      	cbnz	r0, 8001076 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001036:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001038:	2300      	movs	r3, #0
 800103a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800103c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800103e:	a901      	add	r1, sp, #4
 8001040:	4811      	ldr	r0, [pc, #68]	@ (8001088 <ADC_ReadChannels+0x6c>)
 8001042:	f001 ffd3 	bl	8002fec <HAL_ADC_ConfigChannel>
 8001046:	b9c8      	cbnz	r0, 800107c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001048:	480f      	ldr	r0, [pc, #60]	@ (8001088 <ADC_ReadChannels+0x6c>)
 800104a:	f002 f991 	bl	8003370 <HAL_ADC_Start>
 800104e:	b9c0      	cbnz	r0, 8001082 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001050:	4c0d      	ldr	r4, [pc, #52]	@ (8001088 <ADC_ReadChannels+0x6c>)
 8001052:	f04f 31ff 	mov.w	r1, #4294967295
 8001056:	4620      	mov	r0, r4
 8001058:	f001 ff66 	bl	8002f28 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800105c:	4620      	mov	r0, r4
 800105e:	f002 fa63 	bl	8003528 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001062:	4620      	mov	r0, r4
 8001064:	f001 ffbf 	bl	8002fe6 <HAL_ADC_GetValue>
 8001068:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800106a:	4620      	mov	r0, r4
 800106c:	f002 f9fc 	bl	8003468 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001070:	4628      	mov	r0, r5
 8001072:	b005      	add	sp, #20
 8001074:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001076:	f000 fad7 	bl	8001628 <Error_Handler>
 800107a:	e7dc      	b.n	8001036 <ADC_ReadChannels+0x1a>
    Error_Handler();
 800107c:	f000 fad4 	bl	8001628 <Error_Handler>
 8001080:	e7e2      	b.n	8001048 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001082:	f000 fad1 	bl	8001628 <Error_Handler>
 8001086:	e7e3      	b.n	8001050 <ADC_ReadChannels+0x34>
 8001088:	20000184 	.word	0x20000184

0800108c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 800108c:	4b01      	ldr	r3, [pc, #4]	@ (8001094 <SYS_InitMeasurement+0x8>)
 800108e:	4a02      	ldr	r2, [pc, #8]	@ (8001098 <SYS_InitMeasurement+0xc>)
 8001090:	601a      	str	r2, [r3, #0]
}
 8001092:	4770      	bx	lr
 8001094:	20000184 	.word	0x20000184
 8001098:	40012400 	.word	0x40012400

0800109c <SYS_GetBatteryLevel>:
{
 800109c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <SYS_GetBatteryLevel+0x38>)
 80010a0:	f7ff ffbc 	bl	800101c <ADC_ReadChannels>
  if (measuredLevel == 0)
 80010a4:	b1a0      	cbz	r0, 80010d0 <SYS_GetBatteryLevel+0x34>
 80010a6:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <SYS_GetBatteryLevel+0x3c>)
 80010aa:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 80010ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b2:	4290      	cmp	r0, r2
 80010b4:	d007      	beq.n	80010c6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010b6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80010ba:	fb02 f000 	mul.w	r0, r2, r0
 80010be:	fbb0 f0f3 	udiv	r0, r0, r3
 80010c2:	b280      	uxth	r0, r0
 80010c4:	e005      	b.n	80010d2 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <SYS_GetBatteryLevel+0x40>)
 80010c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010cc:	b280      	uxth	r0, r0
 80010ce:	e000      	b.n	80010d2 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	bd08      	pop	{r3, pc}
 80010d4:	b4002000 	.word	0xb4002000
 80010d8:	1fff7500 	.word	0x1fff7500
 80010dc:	004c08d8 	.word	0x004c08d8

080010e0 <SYS_GetTemperatureLevel>:
{
 80010e0:	b510      	push	{r4, lr}
 80010e2:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010ea:	f7ff ffd7 	bl	800109c <SYS_GetBatteryLevel>
 80010ee:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010f0:	4821      	ldr	r0, [pc, #132]	@ (8001178 <SYS_GetTemperatureLevel+0x98>)
 80010f2:	f7ff ff93 	bl	800101c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010f6:	4b21      	ldr	r3, [pc, #132]	@ (800117c <SYS_GetTemperatureLevel+0x9c>)
 80010f8:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 80010fc:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 8001100:	428a      	cmp	r2, r1
 8001102:	d01d      	beq.n	8001140 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001104:	fb00 f304 	mul.w	r3, r0, r4
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	481d      	ldr	r0, [pc, #116]	@ (8001180 <SYS_GetTemperatureLevel+0xa0>)
 800110c:	fba0 0303 	umull	r0, r3, r0, r3
 8001110:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001114:	2064      	movs	r0, #100	@ 0x64
 8001116:	fb00 f303 	mul.w	r3, r0, r3
 800111a:	1a52      	subs	r2, r2, r1
 800111c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001120:	331e      	adds	r3, #30
 8001122:	b21b      	sxth	r3, r3
 8001124:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001128:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800112c:	b21b      	sxth	r3, r3
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21b      	sxth	r3, r3
 8001132:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001136:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800113a:	b200      	sxth	r0, r0
 800113c:	b002      	add	sp, #8
 800113e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001140:	fb04 f000 	mul.w	r0, r4, r0
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <SYS_GetTemperatureLevel+0xa4>)
 8001146:	fba3 2300 	umull	r2, r3, r3, r0
 800114a:	1ac4      	subs	r4, r0, r3
 800114c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001150:	0adb      	lsrs	r3, r3, #11
 8001152:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800115e:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <SYS_GetTemperatureLevel+0xa8>)
 8001164:	fb82 1203 	smull	r1, r2, r2, r3
 8001168:	17db      	asrs	r3, r3, #31
 800116a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800116e:	331e      	adds	r3, #30
 8001170:	b21b      	sxth	r3, r3
 8001172:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001176:	e7d7      	b.n	8001128 <SYS_GetTemperatureLevel+0x48>
 8001178:	b0001000 	.word	0xb0001000
 800117c:	1fff7500 	.word	0x1fff7500
 8001180:	09ee009f 	.word	0x09ee009f
 8001184:	00100101 	.word	0x00100101
 8001188:	68db8bad 	.word	0x68db8bad

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800118c:	b500      	push	{lr}
 800118e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001194:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001196:	f042 0204 	orr.w	r2, r2, #4
 800119a:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800119c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800119e:	f002 0204 	and.w	r2, r2, #4
 80011a2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80011a4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011b6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2102      	movs	r1, #2
 80011bc:	200f      	movs	r0, #15
 80011be:	f002 fad9 	bl	8003774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f002 fae6 	bl	8003794 <HAL_NVIC_EnableIRQ>

}
 80011c8:	b003      	add	sp, #12
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4

080011ce <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80011ce:	2300      	movs	r3, #0
 80011d0:	e001      	b.n	80011d6 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80011d2:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 80011d4:	3308      	adds	r3, #8
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d20a      	bcs.n	80011f0 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 80011da:	6842      	ldr	r2, [r0, #4]
 80011dc:	f8d0 c000 	ldr.w	ip, [r0]
 80011e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80011e4:	bf08      	it	eq
 80011e6:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 80011ea:	d0f2      	beq.n	80011d2 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 80011ec:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 80011ee:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 80011f0:	2000      	movs	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 80011f4:	b130      	cbz	r0, 8001204 <FLASH_IF_INT_Read+0x10>
{
 80011f6:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 80011f8:	b139      	cbz	r1, 800120a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80011fa:	b292      	uxth	r2, r2
 80011fc:	f00f fcd8 	bl	8010bb0 <UTIL_MEM_cpy_8>
  return ret_status;
 8001200:	2000      	movs	r0, #0
}
 8001202:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001204:	f06f 0005 	mvn.w	r0, #5
}
 8001208:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800120a:	f06f 0005 	mvn.w	r0, #5
 800120e:	e7f8      	b.n	8001202 <FLASH_IF_INT_Read+0xe>

08001210 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001210:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001212:	f002 fd75 	bl	8003d00 <HAL_FLASH_Unlock>
 8001216:	b978      	cbnz	r0, 8001238 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <FLASH_IF_INT_Clear_Error+0x30>)
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001226:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001228:	f002 fd82 	bl	8003d30 <HAL_FLASH_Lock>
 800122c:	b908      	cbnz	r0, 8001232 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800122e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001230:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001232:	f06f 0004 	mvn.w	r0, #4
 8001236:	e7fb      	b.n	8001230 <FLASH_IF_INT_Clear_Error+0x20>
 8001238:	f06f 0004 	mvn.w	r0, #4
 800123c:	e7f8      	b.n	8001230 <FLASH_IF_INT_Clear_Error+0x20>
 800123e:	bf00      	nop
 8001240:	58004000 	.word	0x58004000

08001244 <FLASH_IF_INT_Erase>:
{
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800124c:	2800      	cmp	r0, #0
 800124e:	d039      	beq.n	80012c4 <FLASH_IF_INT_Erase+0x80>
 8001250:	460e      	mov	r6, r1
 8001252:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001254:	f7ff ffdc 	bl	8001210 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001258:	4605      	mov	r5, r0
 800125a:	b110      	cbz	r0, 8001262 <FLASH_IF_INT_Erase+0x1e>
}
 800125c:	4628      	mov	r0, r5
 800125e:	b004      	add	sp, #16
 8001260:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001262:	f002 fd4d 	bl	8003d00 <HAL_FLASH_Unlock>
 8001266:	bb80      	cbnz	r0, 80012ca <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001268:	2302      	movs	r3, #2
 800126a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800126c:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 8001270:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <FLASH_IF_INT_Erase+0x8c>)
 8001272:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	@ 0x5e0
 8001276:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <FLASH_IF_INT_Erase+0x90>)
 8001278:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 800127c:	fbb3 fcf1 	udiv	ip, r3, r1
 8001280:	fb01 331c 	mls	r3, r1, ip, r3
 8001284:	0adb      	lsrs	r3, r3, #11
 8001286:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001288:	19a1      	adds	r1, r4, r6
 800128a:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 800128e:	3901      	subs	r1, #1
 8001290:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	@ 0x5e0
 8001294:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8001298:	fbb1 f0f2 	udiv	r0, r1, r2
 800129c:	fb02 1110 	mls	r1, r2, r0, r1
 80012a0:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 80012a4:	3301      	adds	r3, #1
 80012a6:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80012a8:	a903      	add	r1, sp, #12
 80012aa:	4668      	mov	r0, sp
 80012ac:	f002 fe16 	bl	8003edc <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80012b0:	b118      	cbz	r0, 80012ba <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80012b2:	2802      	cmp	r0, #2
 80012b4:	d004      	beq.n	80012c0 <FLASH_IF_INT_Erase+0x7c>
 80012b6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80012ba:	f002 fd39 	bl	8003d30 <HAL_FLASH_Lock>
 80012be:	e7cd      	b.n	800125c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80012c0:	2501      	movs	r5, #1
 80012c2:	e7fa      	b.n	80012ba <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80012c4:	f06f 0505 	mvn.w	r5, #5
 80012c8:	e7c8      	b.n	800125c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80012ca:	f06f 0504 	mvn.w	r5, #4
 80012ce:	e7c5      	b.n	800125c <FLASH_IF_INT_Erase+0x18>
 80012d0:	1fff7000 	.word	0x1fff7000
 80012d4:	03fffc00 	.word	0x03fffc00

080012d8 <FLASH_IF_INT_Write>:
{
 80012d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012dc:	b089      	sub	sp, #36	@ 0x24
 80012de:	9003      	str	r0, [sp, #12]
 80012e0:	9204      	str	r2, [sp, #16]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012e2:	2800      	cmp	r0, #0
 80012e4:	f000 80b4 	beq.w	8001450 <FLASH_IF_INT_Write+0x178>
 80012e8:	4683      	mov	fp, r0
 80012ea:	460e      	mov	r6, r1
 80012ec:	2900      	cmp	r1, #0
 80012ee:	f000 80b3 	beq.w	8001458 <FLASH_IF_INT_Write+0x180>
 80012f2:	f012 0f07 	tst.w	r2, #7
 80012f6:	f040 80b3 	bne.w	8001460 <FLASH_IF_INT_Write+0x188>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80012fa:	f010 0307 	ands.w	r3, r0, #7
 80012fe:	9305      	str	r3, [sp, #20]
 8001300:	f040 80b2 	bne.w	8001468 <FLASH_IF_INT_Write+0x190>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001304:	f7ff ff84 	bl	8001210 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	b118      	cbz	r0, 8001314 <FLASH_IF_INT_Write+0x3c>
}
 800130c:	9801      	ldr	r0, [sp, #4]
 800130e:	b009      	add	sp, #36	@ 0x24
 8001310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001314:	f002 fcf4 	bl	8003d00 <HAL_FLASH_Unlock>
 8001318:	2800      	cmp	r0, #0
 800131a:	f040 80a9 	bne.w	8001470 <FLASH_IF_INT_Write+0x198>
      start_page_index = PAGE_INDEX(uDest);
 800131e:	9c03      	ldr	r4, [sp, #12]
 8001320:	f104 4278 	add.w	r2, r4, #4160749568	@ 0xf8000000
 8001324:	4b54      	ldr	r3, [pc, #336]	@ (8001478 <FLASH_IF_INT_Write+0x1a0>)
 8001326:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 800132a:	4954      	ldr	r1, [pc, #336]	@ (800147c <FLASH_IF_INT_Write+0x1a4>)
 800132c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001330:	fbb2 f3f1 	udiv	r3, r2, r1
 8001334:	fb01 2213 	mls	r2, r1, r3, r2
 8001338:	0ad3      	lsrs	r3, r2, #11
 800133a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800133c:	9b04      	ldr	r3, [sp, #16]
 800133e:	18e3      	adds	r3, r4, r3
 8001340:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001344:	3b01      	subs	r3, #1
 8001346:	fbb3 f0f1 	udiv	r0, r3, r1
 800134a:	fb01 3310 	mls	r3, r1, r0, r3
 800134e:	0adb      	lsrs	r3, r3, #11
 8001350:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001354:	3301      	adds	r3, #1
      if (number_pages > 1)
 8001356:	2b01      	cmp	r3, #1
 8001358:	d907      	bls.n	800136a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800135a:	f3c4 090a 	ubfx	r9, r4, #0, #11
 800135e:	f5c9 6900 	rsb	r9, r9, #2048	@ 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001362:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001366:	9307      	str	r3, [sp, #28]
 8001368:	e031      	b.n	80013ce <FLASH_IF_INT_Write+0xf6>
  uint32_t length = uLength;
 800136a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800136e:	e7f8      	b.n	8001362 <FLASH_IF_INT_Write+0x8a>
          current_length = length;
 8001370:	46c8      	mov	r8, r9
          current_source = uSource;
 8001372:	4637      	mov	r7, r6
          current_dest = uDest;
 8001374:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001376:	9d05      	ldr	r5, [sp, #20]
 8001378:	f8cd b008 	str.w	fp, [sp, #8]
 800137c:	4545      	cmp	r5, r8
 800137e:	d215      	bcs.n	80013ac <FLASH_IF_INT_Write+0xd4>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001380:	eb05 0b07 	add.w	fp, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001384:	e9db 2300 	ldrd	r2, r3, [fp]
 8001388:	4621      	mov	r1, r4
 800138a:	2001      	movs	r0, #1
 800138c:	f002 fd1e 	bl	8003dcc <HAL_FLASH_Program>
 8001390:	2800      	cmp	r0, #0
 8001392:	d147      	bne.n	8001424 <FLASH_IF_INT_Write+0x14c>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	6862      	ldr	r2, [r4, #4]
 8001398:	59e9      	ldr	r1, [r5, r7]
 800139a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	bf08      	it	eq
 80013a2:	4288      	cmpeq	r0, r1
 80013a4:	d144      	bne.n	8001430 <FLASH_IF_INT_Write+0x158>
            current_dest = current_dest + 8U;
 80013a6:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013a8:	3508      	adds	r5, #8
 80013aa:	e7e7      	b.n	800137c <FLASH_IF_INT_Write+0xa4>
 80013ac:	f8dd b008 	ldr.w	fp, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80013b0:	9b01      	ldr	r3, [sp, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d145      	bne.n	8001442 <FLASH_IF_INT_Write+0x16a>
        uDest += length;
 80013b6:	44cb      	add	fp, r9
        uSource += length;
 80013b8:	444e      	add	r6, r9
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80013ba:	9b04      	ldr	r3, [sp, #16]
 80013bc:	eba3 0909 	sub.w	r9, r3, r9
 80013c0:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 80013c4:	bf28      	it	cs
 80013c6:	f44f 6900 	movcs.w	r9, #2048	@ 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80013ca:	f10a 0a01 	add.w	sl, sl, #1
 80013ce:	9b06      	ldr	r3, [sp, #24]
 80013d0:	9a07      	ldr	r2, [sp, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	4553      	cmp	r3, sl
 80013d6:	d934      	bls.n	8001442 <FLASH_IF_INT_Write+0x16a>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80013d8:	f50a 3480 	add.w	r4, sl, #65536	@ 0x10000
 80013dc:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80013de:	4649      	mov	r1, r9
 80013e0:	9803      	ldr	r0, [sp, #12]
 80013e2:	f7ff fef4 	bl	80011ce <FLASH_IF_INT_IsEmpty>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0c2      	beq.n	8001370 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <FLASH_IF_INT_Write+0x1a8>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	b328      	cbz	r0, 800143c <FLASH_IF_INT_Write+0x164>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80013f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff fefd 	bl	80011f4 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <FLASH_IF_INT_Write+0x1a8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f3cb 000a 	ubfx	r0, fp, #0, #11
 8001402:	fa1f f289 	uxth.w	r2, r9
 8001406:	4631      	mov	r1, r6
 8001408:	4418      	add	r0, r3
 800140a:	f00f fbd1 	bl	8010bb0 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800140e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001412:	4620      	mov	r0, r4
 8001414:	f7ff ff16 	bl	8001244 <FLASH_IF_INT_Erase>
 8001418:	b9b0      	cbnz	r0, 8001448 <FLASH_IF_INT_Write+0x170>
          current_source = (uint32_t)pAllocatedBuffer;
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <FLASH_IF_INT_Write+0x1a8>)
 800141c:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800141e:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 8001422:	e7a8      	b.n	8001376 <FLASH_IF_INT_Write+0x9e>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001424:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001428:	f06f 0303 	mvn.w	r3, #3
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	e7bf      	b.n	80013b0 <FLASH_IF_INT_Write+0xd8>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001430:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001434:	f06f 0303 	mvn.w	r3, #3
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	e7b9      	b.n	80013b0 <FLASH_IF_INT_Write+0xd8>
            ret_status = FLASH_IF_PARAM_ERROR;
 800143c:	f06f 0305 	mvn.w	r3, #5
 8001440:	9301      	str	r3, [sp, #4]
      HAL_FLASH_Lock();
 8001442:	f002 fc75 	bl	8003d30 <HAL_FLASH_Lock>
 8001446:	e761      	b.n	800130c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001448:	f06f 0301 	mvn.w	r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	e7f8      	b.n	8001442 <FLASH_IF_INT_Write+0x16a>
    return FLASH_IF_PARAM_ERROR;
 8001450:	f06f 0305 	mvn.w	r3, #5
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	e759      	b.n	800130c <FLASH_IF_INT_Write+0x34>
 8001458:	f06f 0305 	mvn.w	r3, #5
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	e755      	b.n	800130c <FLASH_IF_INT_Write+0x34>
 8001460:	f06f 0305 	mvn.w	r3, #5
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	e751      	b.n	800130c <FLASH_IF_INT_Write+0x34>
 8001468:	f06f 0305 	mvn.w	r3, #5
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	e74d      	b.n	800130c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001470:	f06f 0304 	mvn.w	r3, #4
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	e749      	b.n	800130c <FLASH_IF_INT_Write+0x34>
 8001478:	1fff7000 	.word	0x1fff7000
 800147c:	03fffc00 	.word	0x03fffc00
 8001480:	200001e8 	.word	0x200001e8

08001484 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001484:	4b01      	ldr	r3, [pc, #4]	@ (800148c <FLASH_IF_Init+0x8>)
 8001486:	6018      	str	r0, [r3, #0]
}
 8001488:	2000      	movs	r0, #0
 800148a:	4770      	bx	lr
 800148c:	200001e8 	.word	0x200001e8

08001490 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001490:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001494:	d30e      	bcc.n	80014b4 <FLASH_IF_Write+0x24>
{
 8001496:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <FLASH_IF_Write+0x30>)
 800149a:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <FLASH_IF_Write+0x34>)
 80014a0:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80014a4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014a8:	3b01      	subs	r3, #1
 80014aa:	4298      	cmp	r0, r3
 80014ac:	d805      	bhi.n	80014ba <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80014ae:	f7ff ff13 	bl	80012d8 <FLASH_IF_INT_Write>
}
 80014b2:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014b8:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295
 80014be:	e7f8      	b.n	80014b2 <FLASH_IF_Write+0x22>
 80014c0:	1fff7000 	.word	0x1fff7000
 80014c4:	03fffc00 	.word	0x03fffc00

080014c8 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014c8:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 80014cc:	d30e      	bcc.n	80014ec <FLASH_IF_Read+0x24>
{
 80014ce:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <FLASH_IF_Read+0x30>)
 80014d2:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <FLASH_IF_Read+0x34>)
 80014d8:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80014dc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4299      	cmp	r1, r3
 80014e4:	d805      	bhi.n	80014f2 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80014e6:	f7ff fe85 	bl	80011f4 <FLASH_IF_INT_Read>
}
 80014ea:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014f0:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	e7f8      	b.n	80014ea <FLASH_IF_Read+0x22>
 80014f8:	1fff7000 	.word	0x1fff7000
 80014fc:	03fffc00 	.word	0x03fffc00

08001500 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001500:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001504:	d30e      	bcc.n	8001524 <FLASH_IF_Erase+0x24>
{
 8001506:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <FLASH_IF_Erase+0x30>)
 800150a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	@ 0x5e0
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <FLASH_IF_Erase+0x34>)
 8001510:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001514:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001518:	3b01      	subs	r3, #1
 800151a:	4298      	cmp	r0, r3
 800151c:	d805      	bhi.n	800152a <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800151e:	f7ff fe91 	bl	8001244 <FLASH_IF_INT_Erase>
}
 8001522:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001528:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	e7f8      	b.n	8001522 <FLASH_IF_Erase+0x22>
 8001530:	1fff7000 	.word	0x1fff7000
 8001534:	03fffc00 	.word	0x03fffc00

08001538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	2400      	movs	r4, #0
 8001540:	9403      	str	r4, [sp, #12]
 8001542:	9404      	str	r4, [sp, #16]
 8001544:	9405      	str	r4, [sp, #20]
 8001546:	9406      	str	r4, [sp, #24]
 8001548:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001550:	f042 0202 	orr.w	r2, r2, #2
 8001554:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001558:	f002 0202 	and.w	r2, r2, #2
 800155c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800155e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001560:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001562:	f042 0204 	orr.w	r2, r2, #4
 8001566:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800156a:	f002 0204 	and.w	r2, r2, #4
 800156e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001570:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800157a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001582:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001584:	4e26      	ldr	r6, [pc, #152]	@ (8001620 <MX_GPIO_Init+0xe8>)
 8001586:	4622      	mov	r2, r4
 8001588:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 800158c:	4630      	mov	r0, r6
 800158e:	f002 fe35 	bl	80041fc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001592:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8001596:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2501      	movs	r5, #1
 800159a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159e:	2302      	movs	r3, #2
 80015a0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	a903      	add	r1, sp, #12
 80015a4:	4630      	mov	r0, r6
 80015a6:	f002 fcd9 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80015aa:	f04f 0803 	mov.w	r8, #3
 80015ae:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b2:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 80015b6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	a903      	add	r1, sp, #12
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f002 fccc 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80015c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	a903      	add	r1, sp, #12
 80015d4:	4630      	mov	r0, r6
 80015d6:	f002 fcc1 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80015da:	2340      	movs	r3, #64	@ 0x40
 80015dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015de:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80015e2:	a903      	add	r1, sp, #12
 80015e4:	480f      	ldr	r0, [pc, #60]	@ (8001624 <MX_GPIO_Init+0xec>)
 80015e6:	f002 fcb9 	bl	8003f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015ea:	4622      	mov	r2, r4
 80015ec:	4621      	mov	r1, r4
 80015ee:	2006      	movs	r0, #6
 80015f0:	f002 f8c0 	bl	8003774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015f4:	2006      	movs	r0, #6
 80015f6:	f002 f8cd 	bl	8003794 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015fa:	4622      	mov	r2, r4
 80015fc:	4621      	mov	r1, r4
 80015fe:	2007      	movs	r0, #7
 8001600:	f002 f8b8 	bl	8003774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001604:	2007      	movs	r0, #7
 8001606:	f002 f8c5 	bl	8003794 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800160a:	4622      	mov	r2, r4
 800160c:	4621      	mov	r1, r4
 800160e:	2016      	movs	r0, #22
 8001610:	f002 f8b0 	bl	8003774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001614:	2016      	movs	r0, #22
 8001616:	f002 f8bd 	bl	8003794 <HAL_NVIC_EnableIRQ>

}
 800161a:	b008      	add	sp, #32
 800161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800

08001628 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162a:	e7fe      	b.n	800162a <Error_Handler+0x2>

0800162c <SystemClock_Config>:
{
 800162c:	b510      	push	{r4, lr}
 800162e:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001630:	2248      	movs	r2, #72	@ 0x48
 8001632:	2100      	movs	r1, #0
 8001634:	a808      	add	r0, sp, #32
 8001636:	f010 f917 	bl	8011868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163a:	2400      	movs	r4, #0
 800163c:	9401      	str	r4, [sp, #4]
 800163e:	9402      	str	r4, [sp, #8]
 8001640:	9403      	str	r4, [sp, #12]
 8001642:	9404      	str	r4, [sp, #16]
 8001644:	9405      	str	r4, [sp, #20]
 8001646:	9406      	str	r4, [sp, #24]
 8001648:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800164a:	f002 fdf3 	bl	8004234 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001652:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001656:	f023 0318 	bic.w	r3, r3, #24
 800165a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800165e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001668:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001678:	2324      	movs	r3, #36	@ 0x24
 800167a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800167c:	2381      	movs	r3, #129	@ 0x81
 800167e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001680:	2301      	movs	r3, #1
 8001682:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001684:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001686:	23b0      	movs	r3, #176	@ 0xb0
 8001688:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800168a:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	a808      	add	r0, sp, #32
 800168e:	f002 ff6b 	bl	8004568 <HAL_RCC_OscConfig>
 8001692:	b970      	cbnz	r0, 80016b2 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001694:	234f      	movs	r3, #79	@ 0x4f
 8001696:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001698:	2300      	movs	r3, #0
 800169a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016a2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a4:	2102      	movs	r1, #2
 80016a6:	a801      	add	r0, sp, #4
 80016a8:	f003 fa90 	bl	8004bcc <HAL_RCC_ClockConfig>
 80016ac:	b918      	cbnz	r0, 80016b6 <SystemClock_Config+0x8a>
}
 80016ae:	b01a      	add	sp, #104	@ 0x68
 80016b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016b2:	f7ff ffb9 	bl	8001628 <Error_Handler>
    Error_Handler();
 80016b6:	f7ff ffb7 	bl	8001628 <Error_Handler>

080016ba <main>:
{
 80016ba:	b508      	push	{r3, lr}
  HAL_Init();
 80016bc:	f001 face 	bl	8002c5c <HAL_Init>
  SystemClock_Config();
 80016c0:	f7ff ffb4 	bl	800162c <SystemClock_Config>
  MX_GPIO_Init();
 80016c4:	f7ff ff38 	bl	8001538 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80016c8:	f000 fd48 	bl	800215c <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80016cc:	f000 fd4c 	bl	8002168 <MX_LoRaWAN_Process>
  while (1)
 80016d0:	e7fc      	b.n	80016cc <main+0x12>
	...

080016d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016d4:	b500      	push	{lr}
 80016d6:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016d8:	222c      	movs	r2, #44	@ 0x2c
 80016da:	2100      	movs	r1, #0
 80016dc:	a801      	add	r0, sp, #4
 80016de:	f010 f8c3 	bl	8011868 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016e2:	4819      	ldr	r0, [pc, #100]	@ (8001748 <MX_RTC_Init+0x74>)
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <MX_RTC_Init+0x78>)
 80016e6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016e8:	231f      	movs	r3, #31
 80016ea:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016f0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016f2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f8:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016fa:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80016fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001700:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001702:	f003 fdad 	bl	8005260 <HAL_RTC_Init>
 8001706:	b9a8      	cbnz	r0, 8001734 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001708:	480f      	ldr	r0, [pc, #60]	@ (8001748 <MX_RTC_Init+0x74>)
 800170a:	f003 feed 	bl	80054e8 <HAL_RTCEx_SetSSRU_IT>
 800170e:	b9a0      	cbnz	r0, 800173a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001710:	2200      	movs	r2, #0
 8001712:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001714:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001716:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001718:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800171c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001724:	a901      	add	r1, sp, #4
 8001726:	4808      	ldr	r0, [pc, #32]	@ (8001748 <MX_RTC_Init+0x74>)
 8001728:	f003 fe02 	bl	8005330 <HAL_RTC_SetAlarm_IT>
 800172c:	b940      	cbnz	r0, 8001740 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800172e:	b00d      	add	sp, #52	@ 0x34
 8001730:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001734:	f7ff ff78 	bl	8001628 <Error_Handler>
 8001738:	e7e6      	b.n	8001708 <MX_RTC_Init+0x34>
    Error_Handler();
 800173a:	f7ff ff75 	bl	8001628 <Error_Handler>
 800173e:	e7e7      	b.n	8001710 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001740:	f7ff ff72 	bl	8001628 <Error_Handler>
}
 8001744:	e7f3      	b.n	800172e <MX_RTC_Init+0x5a>
 8001746:	bf00      	nop
 8001748:	200001ec 	.word	0x200001ec
 800174c:	40002800 	.word	0x40002800

08001750 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001750:	b510      	push	{r4, lr}
 8001752:	b090      	sub	sp, #64	@ 0x40
 8001754:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001756:	2238      	movs	r2, #56	@ 0x38
 8001758:	2100      	movs	r1, #0
 800175a:	a802      	add	r0, sp, #8
 800175c:	f010 f884 	bl	8011868 <memset>
  if(rtcHandle->Instance==RTC)
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_RTC_MspInit+0x7c>)
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001768:	b010      	add	sp, #64	@ 0x40
 800176a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800176c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001770:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001776:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001778:	a802      	add	r0, sp, #8
 800177a:	f003 fb8b 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	bb08      	cbnz	r0, 80017c4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001784:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001788:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800178c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001790:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001792:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001796:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	4611      	mov	r1, r2
 80017a6:	2002      	movs	r0, #2
 80017a8:	f001 ffe4 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f001 fff1 	bl	8003794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	4611      	mov	r1, r2
 80017b6:	202a      	movs	r0, #42	@ 0x2a
 80017b8:	f001 ffdc 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017bc:	202a      	movs	r0, #42	@ 0x2a
 80017be:	f001 ffe9 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 80017c2:	e7d1      	b.n	8001768 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80017c4:	f7ff ff30 	bl	8001628 <Error_Handler>
 80017c8:	e7da      	b.n	8001780 <HAL_RTC_MspInit+0x30>
 80017ca:	bf00      	nop
 80017cc:	40002800 	.word	0x40002800

080017d0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80017d0:	4770      	bx	lr

080017d2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80017d2:	4770      	bx	lr

080017d4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80017d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80017d6:	f001 fa57 	bl	8002c88 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80017da:	2001      	movs	r0, #1
 80017dc:	4b02      	ldr	r3, [pc, #8]	@ (80017e8 <PWR_EnterStopMode+0x14>)
 80017de:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80017e2:	f002 fd8b 	bl	80042fc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80017e6:	bd08      	pop	{r3, pc}
 80017e8:	58000400 	.word	0x58000400

080017ec <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80017ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80017ee:	f001 fa52 	bl	8002c96 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80017f2:	bd08      	pop	{r3, pc}

080017f4 <PWR_ExitStopMode>:
{
 80017f4:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80017f6:	f001 fa4e 	bl	8002c96 <HAL_ResumeTick>
  vcom_Resume();
 80017fa:	f000 fc6f 	bl	80020dc <vcom_Resume>
}
 80017fe:	bd08      	pop	{r3, pc}

08001800 <PWR_EnterSleepMode>:
{
 8001800:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001802:	f001 fa41 	bl	8002c88 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001806:	2101      	movs	r1, #1
 8001808:	2000      	movs	r0, #0
 800180a:	f002 fd1b 	bl	8004244 <HAL_PWR_EnterSLEEPMode>
}
 800180e:	bd08      	pop	{r3, pc}

08001810 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001810:	4770      	bx	lr

08001812 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <NMI_Handler>

08001814 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <HardFault_Handler>

08001816 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <MemManage_Handler>

08001818 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <BusFault_Handler>

0800181a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <UsageFault_Handler>

0800181c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001820:	4770      	bx	lr

08001822 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001822:	4770      	bx	lr

08001824 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001826:	4802      	ldr	r0, [pc, #8]	@ (8001830 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001828:	f003 fe8a 	bl	8005540 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800182c:	bd08      	pop	{r3, pc}
 800182e:	bf00      	nop
 8001830:	200001ec 	.word	0x200001ec

08001834 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001834:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001836:	2001      	movs	r0, #1
 8001838:	f002 fcee 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800183c:	bd08      	pop	{r3, pc}

0800183e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800183e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001840:	2002      	movs	r0, #2
 8001842:	f002 fce9 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001846:	bd08      	pop	{r3, pc}

08001848 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800184a:	4802      	ldr	r0, [pc, #8]	@ (8001854 <DMA1_Channel5_IRQHandler+0xc>)
 800184c:	f002 f9a6 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001850:	bd08      	pop	{r3, pc}
 8001852:	bf00      	nop
 8001854:	20000240 	.word	0x20000240

08001858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800185a:	2040      	movs	r0, #64	@ 0x40
 800185c:	f002 fcdc 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001860:	bd08      	pop	{r3, pc}
	...

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001866:	4802      	ldr	r0, [pc, #8]	@ (8001870 <USART2_IRQHandler+0xc>)
 8001868:	f004 fb30 	bl	8005ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186c:	bd08      	pop	{r3, pc}
 800186e:	bf00      	nop
 8001870:	200002a0 	.word	0x200002a0

08001874 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001876:	4802      	ldr	r0, [pc, #8]	@ (8001880 <RTC_Alarm_IRQHandler+0xc>)
 8001878:	f003 fc6c 	bl	8005154 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800187c:	bd08      	pop	{r3, pc}
 800187e:	bf00      	nop
 8001880:	200001ec 	.word	0x200001ec

08001884 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001886:	4802      	ldr	r0, [pc, #8]	@ (8001890 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001888:	f004 f912 	bl	8005ab0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800188c:	bd08      	pop	{r3, pc}
 800188e:	bf00      	nop
 8001890:	20000224 	.word	0x20000224

08001894 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001894:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_SUBGHZ_Init+0x18>)
 8001898:	2308      	movs	r3, #8
 800189a:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800189c:	f003 fe86 	bl	80055ac <HAL_SUBGHZ_Init>
 80018a0:	b900      	cbnz	r0, 80018a4 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018a4:	f7ff fec0 	bl	8001628 <Error_Handler>
}
 80018a8:	e7fb      	b.n	80018a2 <MX_SUBGHZ_Init+0xe>
 80018aa:	bf00      	nop
 80018ac:	20000224 	.word	0x20000224

080018b0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018b0:	b500      	push	{lr}
 80018b2:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018c8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4611      	mov	r1, r2
 80018ce:	2032      	movs	r0, #50	@ 0x32
 80018d0:	f001 ff50 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018d4:	2032      	movs	r0, #50	@ 0x32
 80018d6:	f001 ff5d 	bl	8003794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018da:	b003      	add	sp, #12
 80018dc:	f85d fb04 	ldr.w	pc, [sp], #4

080018e0 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80018e0:	b40c      	push	{r2, r3}
 80018e2:	b500      	push	{lr}
 80018e4:	b083      	sub	sp, #12
 80018e6:	ab04      	add	r3, sp, #16
 80018e8:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80018ec:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80018ee:	f00f fced 	bl	80112cc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80018f2:	b003      	add	sp, #12
 80018f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80018f8:	b002      	add	sp, #8
 80018fa:	4770      	bx	lr

080018fc <TimestampNow>:
{
 80018fc:	b530      	push	{r4, r5, lr}
 80018fe:	b085      	sub	sp, #20
 8001900:	4604      	mov	r4, r0
 8001902:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001904:	a802      	add	r0, sp, #8
 8001906:	f00f faa1 	bl	8010e4c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800190a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	9b02      	ldr	r3, [sp, #8]
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <TimestampNow+0x2c>)
 8001914:	2110      	movs	r1, #16
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff ffe2 	bl	80018e0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800191c:	4620      	mov	r0, r4
 800191e:	f7fe fc2f 	bl	8000180 <strlen>
 8001922:	8028      	strh	r0, [r5, #0]
}
 8001924:	b005      	add	sp, #20
 8001926:	bd30      	pop	{r4, r5, pc}
 8001928:	080124f8 	.word	0x080124f8

0800192c <SystemApp_Init>:
{
 800192c:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800192e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001932:	6893      	ldr	r3, [r2, #8]
 8001934:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001938:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800193a:	f00f fabf 	bl	8010ebc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800193e:	2401      	movs	r4, #1
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <SystemApp_Init+0x4c>)
 8001942:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001944:	f000 f8bc 	bl	8001ac0 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001948:	f00e ffa8 	bl	801089c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <SystemApp_Init+0x50>)
 800194e:	f00e ffbf 	bl	80108d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <SystemApp_Init+0x54>)
 8001954:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001958:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800195a:	2002      	movs	r0, #2
 800195c:	f00e ffbe 	bl	80108dc <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001960:	f7ff fb94 	bl	800108c <SYS_InitMeasurement>
  EnvSensors_Init();
 8001964:	f000 f90c 	bl	8001b80 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001968:	f00f f8c8 	bl	8010afc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800196c:	4621      	mov	r1, r4
 800196e:	4620      	mov	r0, r4
 8001970:	f00f f8e4 	bl	8010b3c <UTIL_LPM_SetOffMode>
}
 8001974:	bd10      	pop	{r4, pc}
 8001976:	bf00      	nop
 8001978:	20000230 	.word	0x20000230
 800197c:	080018fd 	.word	0x080018fd
 8001980:	58004000 	.word	0x58004000

08001984 <UTIL_SEQ_Idle>:
{
 8001984:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001986:	f00f f8ef 	bl	8010b68 <UTIL_LPM_EnterLowPower>
}
 800198a:	bd08      	pop	{r3, pc}

0800198c <GetBatteryLevel>:
{
 800198c:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800198e:	f7ff fb85 	bl	800109c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001992:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001996:	4298      	cmp	r0, r3
 8001998:	d80d      	bhi.n	80019b6 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 800199a:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 800199e:	d30c      	bcc.n	80019ba <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019a0:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 80019a4:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80019a8:	0040      	lsls	r0, r0, #1
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <GetBatteryLevel+0x34>)
 80019ac:	fba3 3000 	umull	r3, r0, r3, r0
 80019b0:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80019b4:	e000      	b.n	80019b8 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80019b6:	20fe      	movs	r0, #254	@ 0xfe
}
 80019b8:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80019ba:	2000      	movs	r0, #0
 80019bc:	e7fc      	b.n	80019b8 <GetBatteryLevel+0x2c>
 80019be:	bf00      	nop
 80019c0:	1b4e81b5 	.word	0x1b4e81b5

080019c4 <GetTemperatureLevel>:
{
 80019c4:	b500      	push	{lr}
 80019c6:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80019c8:	4668      	mov	r0, sp
 80019ca:	f000 f8bd 	bl	8001b48 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80019ce:	9801      	ldr	r0, [sp, #4]
 80019d0:	f7ff f8f8 	bl	8000bc4 <__aeabi_f2iz>
}
 80019d4:	b200      	sxth	r0, r0
 80019d6:	b007      	add	sp, #28
 80019d8:	f85d fb04 	ldr.w	pc, [sp], #4

080019dc <GetUniqueId>:
{
 80019dc:	b538      	push	{r3, r4, r5, lr}
 80019de:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <GetUniqueId+0x68>)
 80019e2:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ea:	d013      	beq.n	8001a14 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80019ec:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80019ee:	0a1a      	lsrs	r2, r3, #8
 80019f0:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80019f2:	0c1a      	lsrs	r2, r3, #16
 80019f4:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80019f6:	0e1b      	lsrs	r3, r3, #24
 80019f8:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <GetUniqueId+0x68>)
 80019fc:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 8001a00:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a02:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 8001a06:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001a08:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001a0a:	0c1a      	lsrs	r2, r3, #16
 8001a0c:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001a0e:	0e1b      	lsrs	r3, r3, #24
 8001a10:	7003      	strb	r3, [r0, #0]
}
 8001a12:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a14:	f001 f946 	bl	8002ca4 <HAL_GetUIDw0>
 8001a18:	4605      	mov	r5, r0
 8001a1a:	f001 f94f 	bl	8002cbc <HAL_GetUIDw2>
 8001a1e:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a20:	f001 f946 	bl	8002cb0 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001a24:	0e2b      	lsrs	r3, r5, #24
 8001a26:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001a28:	0c2b      	lsrs	r3, r5, #16
 8001a2a:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001a2c:	0a2b      	lsrs	r3, r5, #8
 8001a2e:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001a30:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001a32:	0e03      	lsrs	r3, r0, #24
 8001a34:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001a36:	0c03      	lsrs	r3, r0, #16
 8001a38:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001a3a:	0a03      	lsrs	r3, r0, #8
 8001a3c:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001a3e:	7020      	strb	r0, [r4, #0]
 8001a40:	e7e7      	b.n	8001a12 <GetUniqueId+0x36>
 8001a42:	bf00      	nop
 8001a44:	1fff7000 	.word	0x1fff7000

08001a48 <GetDevAddr>:
{
 8001a48:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <GetDevAddr+0x2c>)
 8001a4c:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001a50:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d000      	beq.n	8001a5a <GetDevAddr+0x12>
}
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001a5c:	f001 f922 	bl	8002ca4 <HAL_GetUIDw0>
 8001a60:	4605      	mov	r5, r0
 8001a62:	f001 f925 	bl	8002cb0 <HAL_GetUIDw1>
 8001a66:	4045      	eors	r5, r0
 8001a68:	f001 f928 	bl	8002cbc <HAL_GetUIDw2>
 8001a6c:	4045      	eors	r5, r0
 8001a6e:	6025      	str	r5, [r4, #0]
}
 8001a70:	e7f2      	b.n	8001a58 <GetDevAddr+0x10>
 8001a72:	bf00      	nop
 8001a74:	1fff7000 	.word	0x1fff7000

08001a78 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001a78:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f00f f847 	bl	8010b10 <UTIL_LPM_SetStopMode>
}
 8001a82:	bd08      	pop	{r3, pc}

08001a84 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001a84:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001a86:	2100      	movs	r1, #0
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f00f f841 	bl	8010b10 <UTIL_LPM_SetStopMode>
}
 8001a8e:	bd08      	pop	{r3, pc}

08001a90 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001a90:	2000      	movs	r0, #0
 8001a92:	4770      	bx	lr

08001a94 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001a94:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001a96:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b90b      	cbnz	r3, 8001aa0 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001a9c:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001a9e:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001aa0:	f000 f8e8 	bl	8001c74 <TIMER_IF_GetTimerValue>
 8001aa4:	e7fb      	b.n	8001a9e <HAL_GetTick+0xa>
 8001aa6:	bf00      	nop
 8001aa8:	20000230 	.word	0x20000230

08001aac <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001aac:	b500      	push	{lr}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ab2:	9801      	ldr	r0, [sp, #4]
 8001ab4:	f000 f9c4 	bl	8001e40 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001ab8:	b003      	add	sp, #12
 8001aba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ac0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001ac4:	f001 f900 	bl	8002cc8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001ac8:	f001 f906 	bl	8002cd8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001acc:	f001 f90c 	bl	8002ce8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	9403      	str	r4, [sp, #12]
 8001ad4:	9404      	str	r4, [sp, #16]
 8001ad6:	9405      	str	r4, [sp, #20]
 8001ad8:	9406      	str	r4, [sp, #24]
 8001ada:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aea:	f042 0202 	orr.w	r2, r2, #2
 8001aee:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001af0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001af2:	f002 0202 	and.w	r2, r2, #2
 8001af6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001af8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001afc:	f042 0202 	orr.w	r2, r2, #2
 8001b00:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b0a:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001b0c:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8001b10:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001b12:	4d0c      	ldr	r5, [pc, #48]	@ (8001b44 <DBG_Init+0x84>)
 8001b14:	a903      	add	r1, sp, #12
 8001b16:	4628      	mov	r0, r5
 8001b18:	f002 fa20 	bl	8003f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001b1c:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8001b20:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001b22:	a903      	add	r1, sp, #12
 8001b24:	4628      	mov	r0, r5
 8001b26:	f002 fa19 	bl	8003f5c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	4639      	mov	r1, r7
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f002 fb64 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001b34:	4622      	mov	r2, r4
 8001b36:	4631      	mov	r1, r6
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f002 fb5f 	bl	80041fc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001b3e:	b009      	add	sp, #36	@ 0x24
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	48000400 	.word	0x48000400

08001b48 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001b4c:	f7ff fac8 	bl	80010e0 <SYS_GetTemperatureLevel>
 8001b50:	f340 200f 	sbfx	r0, r0, #8, #16
 8001b54:	f7fe fe92 	bl	800087c <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <EnvSensors_Read+0x28>)
 8001b5a:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001b5c:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001b5e:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <EnvSensors_Read+0x2c>)
 8001b60:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <EnvSensors_Read+0x30>)
 8001b64:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <EnvSensors_Read+0x34>)
 8001b68:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	42480000 	.word	0x42480000
 8001b74:	447a0000 	.word	0x447a0000
 8001b78:	003e090d 	.word	0x003e090d
 8001b7c:	000503ab 	.word	0x000503ab

08001b80 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	4770      	bx	lr

08001b84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	460c      	mov	r4, r1
 8001b88:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	e006      	b.n	8001b9c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4621      	mov	r1, r4
 8001b94:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001b9a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	42b5      	cmp	r5, r6
 8001b9e:	dbf6      	blt.n	8001b8e <_read+0xa>
  }

  return len;
}
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}

08001ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2500      	movs	r5, #0
 8001bac:	e004      	b.n	8001bb8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001bae:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	3501      	adds	r5, #1
 8001bb8:	42b5      	cmp	r5, r6
 8001bba:	dbf8      	blt.n	8001bae <_write+0xa>
  }
  return len;
}
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}

08001bc0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	4770      	bx	lr

08001bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bca:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4770      	bx	lr

08001bd0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	4770      	bx	lr

08001bd4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	4770      	bx	lr

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <_sbrk+0x38>)
 8001bde:	490d      	ldr	r1, [pc, #52]	@ (8001c14 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be0:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <_sbrk+0x40>)
 8001be2:	6800      	ldr	r0, [r0, #0]
 8001be4:	b140      	cbz	r0, 8001bf8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <_sbrk+0x40>)
 8001be8:	6800      	ldr	r0, [r0, #0]
 8001bea:	4403      	add	r3, r0
 8001bec:	1a52      	subs	r2, r2, r1
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d806      	bhi.n	8001c00 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <_sbrk+0x40>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001bf6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <_sbrk+0x40>)
 8001bfa:	4c08      	ldr	r4, [pc, #32]	@ (8001c1c <_sbrk+0x44>)
 8001bfc:	6004      	str	r4, [r0, #0]
 8001bfe:	e7f2      	b.n	8001be6 <_sbrk+0xe>
    errno = ENOMEM;
 8001c00:	f00f fe80 	bl	8011904 <__errno>
 8001c04:	230c      	movs	r3, #12
 8001c06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	e7f3      	b.n	8001bf6 <_sbrk+0x1e>
 8001c0e:	bf00      	nop
 8001c10:	20008000 	.word	0x20008000
 8001c14:	00000800 	.word	0x00000800
 8001c18:	20000234 	.word	0x20000234
 8001c1c:	20001808 	.word	0x20001808

08001c20 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <TIMER_IF_SetTimerContext+0x1c>)
 8001c22:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c24:	e001      	b.n	8001c2a <TIMER_IF_SetTimerContext+0xa>
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <TIMER_IF_SetTimerContext+0x1c>)
 8001c28:	6898      	ldr	r0, [r3, #8]
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <TIMER_IF_SetTimerContext+0x1c>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4283      	cmp	r3, r0
 8001c30:	d1f9      	bne.n	8001c26 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001c32:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001c34:	4b02      	ldr	r3, [pc, #8]	@ (8001c40 <TIMER_IF_SetTimerContext+0x20>)
 8001c36:	6018      	str	r0, [r3, #0]
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40002800 	.word	0x40002800
 8001c40:	20000238 	.word	0x20000238

08001c44 <TIMER_IF_GetTimerContext>:
}
 8001c44:	4b01      	ldr	r3, [pc, #4]	@ (8001c4c <TIMER_IF_GetTimerContext+0x8>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000238 	.word	0x20000238

08001c50 <TIMER_IF_GetTimerElapsedTime>:
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001c52:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c54:	e001      	b.n	8001c5a <TIMER_IF_GetTimerElapsedTime+0xa>
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001c58:	6898      	ldr	r0, [r3, #8]
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4283      	cmp	r3, r0
 8001c60:	d1f9      	bne.n	8001c56 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001c62:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001c64:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	1ac0      	subs	r0, r0, r3
 8001c6a:	4770      	bx	lr
 8001c6c:	40002800 	.word	0x40002800
 8001c70:	20000238 	.word	0x20000238

08001c74 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001c74:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <TIMER_IF_GetTimerValue+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b153      	cbz	r3, 8001c90 <TIMER_IF_GetTimerValue+0x1c>
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <TIMER_IF_GetTimerValue+0x24>)
 8001c7c:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c7e:	e001      	b.n	8001c84 <TIMER_IF_GetTimerValue+0x10>
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <TIMER_IF_GetTimerValue+0x24>)
 8001c82:	6898      	ldr	r0, [r3, #8]
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <TIMER_IF_GetTimerValue+0x24>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4283      	cmp	r3, r0
 8001c8a:	d1f9      	bne.n	8001c80 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001c8c:	43c0      	mvns	r0, r0
 8001c8e:	4770      	bx	lr
  uint32_t ret = 0;
 8001c90:	2000      	movs	r0, #0
}
 8001c92:	4770      	bx	lr
 8001c94:	2000023c 	.word	0x2000023c
 8001c98:	40002800 	.word	0x40002800

08001c9c <TIMER_IF_GetMinimumTimeout>:
}
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	4770      	bx	lr

08001ca0 <TIMER_IF_Convert_ms2Tick>:
{
 8001ca0:	b508      	push	{r3, lr}
 8001ca2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001ca4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ca8:	2300      	movs	r3, #0
 8001caa:	0280      	lsls	r0, r0, #10
 8001cac:	0d89      	lsrs	r1, r1, #22
 8001cae:	f7fe ffcf 	bl	8000c50 <__aeabi_uldivmod>
}
 8001cb2:	bd08      	pop	{r3, pc}

08001cb4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001cb4:	0ec2      	lsrs	r2, r0, #27
 8001cb6:	0143      	lsls	r3, r0, #5
 8001cb8:	1a1b      	subs	r3, r3, r0
 8001cba:	f162 0200 	sbc.w	r2, r2, #0
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	181b      	adds	r3, r3, r0
 8001cc8:	f142 0000 	adc.w	r0, r2, #0
 8001ccc:	00c0      	lsls	r0, r0, #3
 8001cce:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001cd2:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001cd6:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001cda:	4770      	bx	lr

08001cdc <TIMER_IF_StopTimer>:
{
 8001cdc:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <TIMER_IF_StopTimer+0x20>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ce4:	4c06      	ldr	r4, [pc, #24]	@ (8001d00 <TIMER_IF_StopTimer+0x24>)
 8001ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cea:	4620      	mov	r0, r4
 8001cec:	f003 f9f2 	bl	80050d4 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40002800 	.word	0x40002800
 8001d00:	200001ec 	.word	0x200001ec

08001d04 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001d04:	b508      	push	{r3, lr}
 8001d06:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001d0c:	f003 fc2d 	bl	800556a <HAL_RTCEx_BKUPWrite>
}
 8001d10:	bd08      	pop	{r3, pc}
 8001d12:	bf00      	nop
 8001d14:	200001ec 	.word	0x200001ec

08001d18 <TIMER_IF_Init>:
{
 8001d18:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <TIMER_IF_Init+0x40>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b10b      	cbz	r3, 8001d24 <TIMER_IF_Init+0xc>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d24:	4c0d      	ldr	r4, [pc, #52]	@ (8001d5c <TIMER_IF_Init+0x44>)
 8001d26:	f04f 35ff 	mov.w	r5, #4294967295
 8001d2a:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001d2c:	f7ff fcd2 	bl	80016d4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001d30:	f7ff ffd4 	bl	8001cdc <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f003 f9cb 	bl	80050d4 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d3e:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f003 fbb1 	bl	80054a8 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ffdc 	bl	8001d04 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001d4c:	f7ff ff68 	bl	8001c20 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001d50:	4b01      	ldr	r3, [pc, #4]	@ (8001d58 <TIMER_IF_Init+0x40>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e7e3      	b.n	8001d20 <TIMER_IF_Init+0x8>
 8001d58:	2000023c 	.word	0x2000023c
 8001d5c:	200001ec 	.word	0x200001ec

08001d60 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001d60:	b508      	push	{r3, lr}
 8001d62:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001d64:	2100      	movs	r1, #0
 8001d66:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001d68:	f003 fbff 	bl	800556a <HAL_RTCEx_BKUPWrite>
}
 8001d6c:	bd08      	pop	{r3, pc}
 8001d6e:	bf00      	nop
 8001d70:	200001ec 	.word	0x200001ec

08001d74 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001d74:	b508      	push	{r3, lr}
 8001d76:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001d7c:	f003 fbf5 	bl	800556a <HAL_RTCEx_BKUPWrite>
}
 8001d80:	bd08      	pop	{r3, pc}
 8001d82:	bf00      	nop
 8001d84:	200001ec 	.word	0x200001ec

08001d88 <TIMER_IF_StartTimer>:
{
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	b08c      	sub	sp, #48	@ 0x30
 8001d8c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001d8e:	222c      	movs	r2, #44	@ 0x2c
 8001d90:	2100      	movs	r1, #0
 8001d92:	a801      	add	r0, sp, #4
 8001d94:	f00f fd68 	bl	8011868 <memset>
  TIMER_IF_StopTimer();
 8001d98:	f7ff ffa0 	bl	8001cdc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <TIMER_IF_StartTimer+0x48>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001da2:	2300      	movs	r3, #0
 8001da4:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001da6:	43e4      	mvns	r4, r4
 8001da8:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001daa:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001dac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001db0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001db8:	2201      	movs	r2, #1
 8001dba:	a901      	add	r1, sp, #4
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <TIMER_IF_StartTimer+0x4c>)
 8001dbe:	f003 fab7 	bl	8005330 <HAL_RTC_SetAlarm_IT>
 8001dc2:	b910      	cbnz	r0, 8001dca <TIMER_IF_StartTimer+0x42>
}
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	b00c      	add	sp, #48	@ 0x30
 8001dc8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001dca:	f7ff fc2d 	bl	8001628 <Error_Handler>
 8001dce:	e7f9      	b.n	8001dc4 <TIMER_IF_StartTimer+0x3c>
 8001dd0:	20000238 	.word	0x20000238
 8001dd4:	200001ec 	.word	0x200001ec

08001dd8 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001dd8:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4801      	ldr	r0, [pc, #4]	@ (8001de4 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001dde:	f003 fbcb 	bl	8005578 <HAL_RTCEx_BKUPRead>
}
 8001de2:	bd08      	pop	{r3, pc}
 8001de4:	200001ec 	.word	0x200001ec

08001de8 <TIMER_IF_GetTime>:
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	4605      	mov	r5, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <TIMER_IF_GetTime+0x34>)
 8001dee:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001df0:	e001      	b.n	8001df6 <TIMER_IF_GetTime+0xe>
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <TIMER_IF_GetTime+0x34>)
 8001df4:	689c      	ldr	r4, [r3, #8]
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <TIMER_IF_GetTime+0x34>)
 8001df8:	6892      	ldr	r2, [r2, #8]
 8001dfa:	42a2      	cmp	r2, r4
 8001dfc:	d1f9      	bne.n	8001df2 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001dfe:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001e00:	f7ff ffea 	bl	8001dd8 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001e04:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001e06:	0aa4      	lsrs	r4, r4, #10
 8001e08:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001e0c:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001e10:	f7ff ff50 	bl	8001cb4 <TIMER_IF_Convert_Tick2ms>
 8001e14:	8028      	strh	r0, [r5, #0]
}
 8001e16:	4620      	mov	r0, r4
 8001e18:	bd38      	pop	{r3, r4, r5, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40002800 	.word	0x40002800

08001e20 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001e20:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001e22:	2100      	movs	r1, #0
 8001e24:	4801      	ldr	r0, [pc, #4]	@ (8001e2c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001e26:	f003 fba7 	bl	8005578 <HAL_RTCEx_BKUPRead>
}
 8001e2a:	bd08      	pop	{r3, pc}
 8001e2c:	200001ec 	.word	0x200001ec

08001e30 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001e30:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001e32:	2101      	movs	r1, #1
 8001e34:	4801      	ldr	r0, [pc, #4]	@ (8001e3c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001e36:	f003 fb9f 	bl	8005578 <HAL_RTCEx_BKUPRead>
}
 8001e3a:	bd08      	pop	{r3, pc}
 8001e3c:	200001ec 	.word	0x200001ec

08001e40 <TIMER_IF_DelayMs>:
{
 8001e40:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001e42:	f7ff ff2d 	bl	8001ca0 <TIMER_IF_Convert_ms2Tick>
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <TIMER_IF_DelayMs+0x38>)
 8001e48:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e4a:	e001      	b.n	8001e50 <TIMER_IF_DelayMs+0x10>
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <TIMER_IF_DelayMs+0x38>)
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <TIMER_IF_DelayMs+0x38>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d1f9      	bne.n	8001e4c <TIMER_IF_DelayMs+0xc>
 8001e58:	e009      	b.n	8001e6e <TIMER_IF_DelayMs+0x2e>
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <TIMER_IF_DelayMs+0x38>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4a06      	ldr	r2, [pc, #24]	@ (8001e78 <TIMER_IF_DelayMs+0x38>)
 8001e60:	6892      	ldr	r2, [r2, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d1f9      	bne.n	8001e5a <TIMER_IF_DelayMs+0x1a>
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e66:	1acb      	subs	r3, r1, r3
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	d903      	bls.n	8001e74 <TIMER_IF_DelayMs+0x34>
    __NOP();
 8001e6c:	bf00      	nop
 8001e6e:	4b02      	ldr	r3, [pc, #8]	@ (8001e78 <TIMER_IF_DelayMs+0x38>)
 8001e70:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e72:	e7f4      	b.n	8001e5e <TIMER_IF_DelayMs+0x1e>
}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	bf00      	nop
 8001e78:	40002800 	.word	0x40002800

08001e7c <HAL_RTC_AlarmAEventCallback>:
{
 8001e7c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001e7e:	f00f f941 	bl	8011104 <UTIL_TIMER_IRQ_Handler>
}
 8001e82:	bd08      	pop	{r3, pc}

08001e84 <HAL_RTCEx_SSRUEventCallback>:
{
 8001e84:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001e86:	f7ff ffa7 	bl	8001dd8 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001e8a:	3001      	adds	r0, #1
 8001e8c:	f7ff ff3a 	bl	8001d04 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001e90:	bd08      	pop	{r3, pc}
	...

08001e94 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e94:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e96:	4817      	ldr	r0, [pc, #92]	@ (8001ef4 <MX_USART2_UART_Init+0x60>)
 8001e98:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_USART2_UART_Init+0x64>)
 8001e9a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001e9c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001ea0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eaa:	220c      	movs	r2, #12
 8001eac:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb2:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eb4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb8:	f004 fec4 	bl	8006c44 <HAL_UART_Init>
 8001ebc:	b970      	cbnz	r0, 8001edc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <MX_USART2_UART_Init+0x60>)
 8001ec2:	f005 f874 	bl	8006fae <HAL_UARTEx_SetTxFifoThreshold>
 8001ec6:	b960      	cbnz	r0, 8001ee2 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480a      	ldr	r0, [pc, #40]	@ (8001ef4 <MX_USART2_UART_Init+0x60>)
 8001ecc:	f005 f894 	bl	8006ff8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ed0:	b950      	cbnz	r0, 8001ee8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001ed2:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <MX_USART2_UART_Init+0x60>)
 8001ed4:	f005 f847 	bl	8006f66 <HAL_UARTEx_EnableFifoMode>
 8001ed8:	b948      	cbnz	r0, 8001eee <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eda:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001edc:	f7ff fba4 	bl	8001628 <Error_Handler>
 8001ee0:	e7ed      	b.n	8001ebe <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001ee2:	f7ff fba1 	bl	8001628 <Error_Handler>
 8001ee6:	e7ef      	b.n	8001ec8 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001ee8:	f7ff fb9e 	bl	8001628 <Error_Handler>
 8001eec:	e7f1      	b.n	8001ed2 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001eee:	f7ff fb9b 	bl	8001628 <Error_Handler>
}
 8001ef2:	e7f2      	b.n	8001eda <MX_USART2_UART_Init+0x46>
 8001ef4:	200002a0 	.word	0x200002a0
 8001ef8:	40004400 	.word	0x40004400

08001efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001efc:	b530      	push	{r4, r5, lr}
 8001efe:	b097      	sub	sp, #92	@ 0x5c
 8001f00:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	2100      	movs	r1, #0
 8001f04:	9111      	str	r1, [sp, #68]	@ 0x44
 8001f06:	9112      	str	r1, [sp, #72]	@ 0x48
 8001f08:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001f0a:	9114      	str	r1, [sp, #80]	@ 0x50
 8001f0c:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0e:	2238      	movs	r2, #56	@ 0x38
 8001f10:	a803      	add	r0, sp, #12
 8001f12:	f00f fca9 	bl	8011868 <memset>
  if(uartHandle->Instance==USART2)
 8001f16:	6822      	ldr	r2, [r4, #0]
 8001f18:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <HAL_UART_MspInit+0xd4>)
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f1e:	b017      	add	sp, #92	@ 0x5c
 8001f20:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f22:	2302      	movs	r3, #2
 8001f24:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_UART_MspInit+0xd8>)
 8001f28:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2a:	a803      	add	r0, sp, #12
 8001f2c:	f002 ffb2 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d144      	bne.n	8001fbe <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f42:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001f46:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001f48:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2500      	movs	r5, #0
 8001f66:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	a911      	add	r1, sp, #68	@ 0x44
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f76:	f001 fff1 	bl	8003f5c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001f7a:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <HAL_UART_MspInit+0xdc>)
 8001f7c:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <HAL_UART_MspInit+0xe0>)
 8001f7e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f80:	2314      	movs	r3, #20
 8001f82:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f84:	2310      	movs	r3, #16
 8001f86:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f88:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f90:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f92:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f94:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f96:	f001 fc75 	bl	8003884 <HAL_DMA_Init>
 8001f9a:	b998      	cbnz	r0, 8001fc4 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	480e      	ldr	r0, [pc, #56]	@ (8001fd8 <HAL_UART_MspInit+0xdc>)
 8001fa0:	f001 fe70 	bl	8003c84 <HAL_DMA_ConfigChannelAttributes>
 8001fa4:	b988      	cbnz	r0, 8001fca <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_UART_MspInit+0xdc>)
 8001fa8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001faa:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2102      	movs	r1, #2
 8001fb0:	2025      	movs	r0, #37	@ 0x25
 8001fb2:	f001 fbdf 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb6:	2025      	movs	r0, #37	@ 0x25
 8001fb8:	f001 fbec 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 8001fbc:	e7af      	b.n	8001f1e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001fbe:	f7ff fb33 	bl	8001628 <Error_Handler>
 8001fc2:	e7b7      	b.n	8001f34 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001fc4:	f7ff fb30 	bl	8001628 <Error_Handler>
 8001fc8:	e7e8      	b.n	8001f9c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001fca:	f7ff fb2d 	bl	8001628 <Error_Handler>
 8001fce:	e7ea      	b.n	8001fa6 <HAL_UART_MspInit+0xaa>
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	000c0004 	.word	0x000c0004
 8001fd8:	20000240 	.word	0x20000240
 8001fdc:	40020058 	.word	0x40020058

08001fe0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001fe0:	6802      	ldr	r2, [r0, #0]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_UART_MspDeInit+0x34>)
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d000      	beq.n	8001fea <HAL_UART_MspDeInit+0xa>
 8001fe8:	4770      	bx	lr
{
 8001fea:	b510      	push	{r4, lr}
 8001fec:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001ff4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001ffa:	210c      	movs	r1, #12
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002000:	f002 f87e 	bl	8004100 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002004:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002006:	f001 fcad 	bl	8003964 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800200a:	2025      	movs	r0, #37	@ 0x25
 800200c:	f001 fbc6 	bl	800379c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	40004400 	.word	0x40004400

08002018 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <vcom_Init+0x20>)
 800201c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800201e:	f7ff f8b5 	bl	800118c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002022:	f7ff ff37 	bl	8001e94 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <vcom_Init+0x24>)
 8002028:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 800202c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002034:	2000      	movs	r0, #0
 8002036:	bd08      	pop	{r3, pc}
 8002038:	20000338 	.word	0x20000338
 800203c:	58000800 	.word	0x58000800

08002040 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002040:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002048:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800204e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002050:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002054:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002056:	4804      	ldr	r0, [pc, #16]	@ (8002068 <vcom_DeInit+0x28>)
 8002058:	f7ff ffc2 	bl	8001fe0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800205c:	200f      	movs	r0, #15
 800205e:	f001 fb9d 	bl	800379c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002062:	2000      	movs	r0, #0
 8002064:	bd08      	pop	{r3, pc}
 8002066:	bf00      	nop
 8002068:	200002a0 	.word	0x200002a0

0800206c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800206c:	b508      	push	{r3, lr}
 800206e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002070:	4601      	mov	r1, r0
 8002072:	4802      	ldr	r0, [pc, #8]	@ (800207c <vcom_Trace_DMA+0x10>)
 8002074:	f003 fe66 	bl	8005d44 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002078:	2000      	movs	r0, #0
 800207a:	bd08      	pop	{r3, pc}
 800207c:	200002a0 	.word	0x200002a0

08002080 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002080:	b510      	push	{r4, lr}
 8002082:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <vcom_ReceiveInit+0x50>)
 8002086:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002088:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800208c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800208e:	ab02      	add	r3, sp, #8
 8002090:	e913 0006 	ldmdb	r3, {r1, r2}
 8002094:	480f      	ldr	r0, [pc, #60]	@ (80020d4 <vcom_ReceiveInit+0x54>)
 8002096:	f004 ff0e 	bl	8006eb6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <vcom_ReceiveInit+0x54>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80020a4:	d1f9      	bne.n	800209a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80020ac:	d0fb      	beq.n	80020a6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80020b4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80020b6:	4c07      	ldr	r4, [pc, #28]	@ (80020d4 <vcom_ReceiveInit+0x54>)
 80020b8:	4620      	mov	r0, r4
 80020ba:	f004 ff3d 	bl	8006f38 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80020be:	2201      	movs	r2, #1
 80020c0:	4905      	ldr	r1, [pc, #20]	@ (80020d8 <vcom_ReceiveInit+0x58>)
 80020c2:	4620      	mov	r0, r4
 80020c4:	f004 fe90 	bl	8006de8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80020c8:	2000      	movs	r0, #0
 80020ca:	b002      	add	sp, #8
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	bf00      	nop
 80020d0:	20000334 	.word	0x20000334
 80020d4:	200002a0 	.word	0x200002a0
 80020d8:	2000033c 	.word	0x2000033c

080020dc <vcom_Resume>:

void vcom_Resume(void)
{
 80020dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020de:	4807      	ldr	r0, [pc, #28]	@ (80020fc <vcom_Resume+0x20>)
 80020e0:	f004 fdb0 	bl	8006c44 <HAL_UART_Init>
 80020e4:	b920      	cbnz	r0, 80020f0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020e6:	4806      	ldr	r0, [pc, #24]	@ (8002100 <vcom_Resume+0x24>)
 80020e8:	f001 fbcc 	bl	8003884 <HAL_DMA_Init>
 80020ec:	b918      	cbnz	r0, 80020f6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80020ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020f0:	f7ff fa9a 	bl	8001628 <Error_Handler>
 80020f4:	e7f7      	b.n	80020e6 <vcom_Resume+0xa>
    Error_Handler();
 80020f6:	f7ff fa97 	bl	8001628 <Error_Handler>
}
 80020fa:	e7f8      	b.n	80020ee <vcom_Resume+0x12>
 80020fc:	200002a0 	.word	0x200002a0
 8002100:	20000240 	.word	0x20000240

08002104 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002104:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002106:	6802      	ldr	r2, [r0, #0]
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <HAL_UART_TxCpltCallback+0x18>)
 800210a:	429a      	cmp	r2, r3
 800210c:	d000      	beq.n	8002110 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800210e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_UART_TxCpltCallback+0x1c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2000      	movs	r0, #0
 8002116:	4798      	blx	r3
}
 8002118:	e7f9      	b.n	800210e <HAL_UART_TxCpltCallback+0xa>
 800211a:	bf00      	nop
 800211c:	40004400 	.word	0x40004400
 8002120:	20000338 	.word	0x20000338

08002124 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002124:	6802      	ldr	r2, [r0, #0]
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_UART_RxCpltCallback+0x2c>)
 8002128:	429a      	cmp	r2, r3
 800212a:	d000      	beq.n	800212e <HAL_UART_RxCpltCallback+0xa>
 800212c:	4770      	bx	lr
{
 800212e:	b510      	push	{r4, lr}
 8002130:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_UART_RxCpltCallback+0x30>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b12b      	cbz	r3, 8002144 <HAL_UART_RxCpltCallback+0x20>
 8002138:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 800213c:	b912      	cbnz	r2, 8002144 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800213e:	2101      	movs	r1, #1
 8002140:	4805      	ldr	r0, [pc, #20]	@ (8002158 <HAL_UART_RxCpltCallback+0x34>)
 8002142:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002144:	2201      	movs	r2, #1
 8002146:	4904      	ldr	r1, [pc, #16]	@ (8002158 <HAL_UART_RxCpltCallback+0x34>)
 8002148:	4620      	mov	r0, r4
 800214a:	f004 fe4d 	bl	8006de8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800214e:	bd10      	pop	{r4, pc}
 8002150:	40004400 	.word	0x40004400
 8002154:	20000334 	.word	0x20000334
 8002158:	2000033c 	.word	0x2000033c

0800215c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800215c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800215e:	f7ff fbe5 	bl	800192c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002162:	f000 fba5 	bl	80028b0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002166:	bd08      	pop	{r3, pc}

08002168 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800216a:	f04f 30ff 	mov.w	r0, #4294967295
 800216e:	f00e fd67 	bl	8010c40 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002172:	bd08      	pop	{r3, pc}

08002174 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002174:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002178:	4905      	ldr	r1, [pc, #20]	@ (8002190 <__NVIC_SystemReset+0x1c>)
 800217a:	68ca      	ldr	r2, [r1, #12]
 800217c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_SystemReset+0x20>)
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
 8002186:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800218a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800218c:	e7fd      	b.n	800218a <__NVIC_SystemReset+0x16>
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	05fa0004 	.word	0x05fa0004

08002198 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002198:	4770      	bx	lr
	...

0800219c <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800219c:	4b01      	ldr	r3, [pc, #4]	@ (80021a4 <OnTxFrameCtrlChanged+0x8>)
 800219e:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80021a8:	4b01      	ldr	r3, [pc, #4]	@ (80021b0 <OnPingSlotPeriodicityChanged+0x8>)
 80021aa:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <OnBeaconStatusChange>:
  if (params != NULL)
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d03f      	beq.n	8002238 <OnBeaconStatusChange+0x84>
{
 80021b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021bc:	b08c      	sub	sp, #48	@ 0x30
 80021be:	4603      	mov	r3, r0
    switch (params->State)
 80021c0:	7842      	ldrb	r2, [r0, #1]
 80021c2:	2a02      	cmp	r2, #2
 80021c4:	d00a      	beq.n	80021dc <OnBeaconStatusChange+0x28>
 80021c6:	2a03      	cmp	r2, #3
 80021c8:	d02f      	beq.n	800222a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <OnBeaconStatusChange+0x88>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	4611      	mov	r1, r2
 80021d0:	2002      	movs	r0, #2
 80021d2:	f00e fbd7 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 80021d6:	b00c      	add	sp, #48	@ 0x30
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 80021dc:	7c02      	ldrb	r2, [r0, #16]
 80021de:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80021e2:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80021e6:	7d9c      	ldrb	r4, [r3, #22]
 80021e8:	7ddd      	ldrb	r5, [r3, #23]
 80021ea:	7e1e      	ldrb	r6, [r3, #24]
 80021ec:	7e5f      	ldrb	r7, [r3, #25]
 80021ee:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80021f2:	f893 e01b 	ldrb.w	lr, [r3, #27]
 80021f6:	f893 801c 	ldrb.w	r8, [r3, #28]
 80021fa:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80021fe:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 8002202:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8002206:	9708      	str	r7, [sp, #32]
 8002208:	9607      	str	r6, [sp, #28]
 800220a:	9506      	str	r5, [sp, #24]
 800220c:	9405      	str	r4, [sp, #20]
 800220e:	685c      	ldr	r4, [r3, #4]
 8002210:	9404      	str	r4, [sp, #16]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	9303      	str	r3, [sp, #12]
 8002216:	9002      	str	r0, [sp, #8]
 8002218:	9101      	str	r1, [sp, #4]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <OnBeaconStatusChange+0x8c>)
 800221e:	2200      	movs	r2, #0
 8002220:	4611      	mov	r1, r2
 8002222:	2002      	movs	r0, #2
 8002224:	f00e fbae 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002228:	e7d5      	b.n	80021d6 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <OnBeaconStatusChange+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	4611      	mov	r1, r2
 8002230:	2002      	movs	r0, #2
 8002232:	f00e fba7 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8002236:	e7ce      	b.n	80021d6 <OnBeaconStatusChange+0x22>
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	08012504 	.word	0x08012504
 8002240:	0801251c 	.word	0x0801251c
 8002244:	08012590 	.word	0x08012590

08002248 <OnClassChange>:
{
 8002248:	b500      	push	{lr}
 800224a:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <OnClassChange+0x1c>)
 800224e:	5c1b      	ldrb	r3, [r3, r0]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <OnClassChange+0x20>)
 8002254:	2200      	movs	r2, #0
 8002256:	4611      	mov	r1, r2
 8002258:	2002      	movs	r0, #2
 800225a:	f00e fb93 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 800225e:	b003      	add	sp, #12
 8002260:	f85d fb04 	ldr.w	pc, [sp], #4
 8002264:	080125cc 	.word	0x080125cc
 8002268:	080125b0 	.word	0x080125b0

0800226c <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800226c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800226e:	2801      	cmp	r0, #1
 8002270:	d006      	beq.n	8002280 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <OnNvmDataChange+0x24>)
 8002274:	2200      	movs	r2, #0
 8002276:	4611      	mov	r1, r2
 8002278:	2002      	movs	r0, #2
 800227a:	f00e fb83 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800227e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <OnNvmDataChange+0x28>)
 8002282:	2200      	movs	r2, #0
 8002284:	4611      	mov	r1, r2
 8002286:	2002      	movs	r0, #2
 8002288:	f00e fb7c 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
 800228c:	e7f7      	b.n	800227e <OnNvmDataChange+0x12>
 800228e:	bf00      	nop
 8002290:	080125e4 	.word	0x080125e4
 8002294:	080125d0 	.word	0x080125d0

08002298 <OnTxTimerEvent>:
{
 8002298:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800229a:	2100      	movs	r1, #0
 800229c:	2002      	movs	r0, #2
 800229e:	f00e fc9b 	bl	8010bd8 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80022a2:	4802      	ldr	r0, [pc, #8]	@ (80022ac <OnTxTimerEvent+0x14>)
 80022a4:	f00e fece 	bl	8011044 <UTIL_TIMER_Start>
}
 80022a8:	bd08      	pop	{r3, pc}
 80022aa:	bf00      	nop
 80022ac:	20000498 	.word	0x20000498

080022b0 <OnMacProcessNotify>:
{
 80022b0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80022b2:	2100      	movs	r1, #0
 80022b4:	2001      	movs	r0, #1
 80022b6:	f00e fc8f 	bl	8010bd8 <UTIL_SEQ_SetTask>
}
 80022ba:	bd08      	pop	{r3, pc}

080022bc <OnSystemReset>:
{
 80022bc:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022be:	f005 fb87 	bl	80079d0 <LmHandlerHalt>
 80022c2:	b100      	cbz	r0, 80022c6 <OnSystemReset+0xa>
}
 80022c4:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022c6:	f005 f833 	bl	8007330 <LmHandlerJoinStatus>
 80022ca:	2801      	cmp	r0, #1
 80022cc:	d1fa      	bne.n	80022c4 <OnSystemReset+0x8>
    NVIC_SystemReset();
 80022ce:	f7ff ff51 	bl	8002174 <__NVIC_SystemReset>
	...

080022d4 <OnTxPeriodicityChanged>:
{
 80022d4:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <OnTxPeriodicityChanged+0x28>)
 80022d8:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 80022da:	b910      	cbnz	r0, 80022e2 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 80022dc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80022e0:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 80022e2:	4c07      	ldr	r4, [pc, #28]	@ (8002300 <OnTxPeriodicityChanged+0x2c>)
 80022e4:	4620      	mov	r0, r4
 80022e6:	f00e fe53 	bl	8010f90 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 80022ea:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <OnTxPeriodicityChanged+0x28>)
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	4620      	mov	r0, r4
 80022f0:	f00e feee 	bl	80110d0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f00e fea5 	bl	8011044 <UTIL_TIMER_Start>
}
 80022fa:	bd10      	pop	{r4, pc}
 80022fc:	20000008 	.word	0x20000008
 8002300:	20000498 	.word	0x20000498

08002304 <OnTxData>:
  if ((params != NULL))
 8002304:	2800      	cmp	r0, #0
 8002306:	d042      	beq.n	800238e <OnTxData+0x8a>
{
 8002308:	b510      	push	{r4, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800230e:	7803      	ldrb	r3, [r0, #0]
 8002310:	b90b      	cbnz	r3, 8002316 <OnTxData+0x12>
}
 8002312:	b004      	add	sp, #16
 8002314:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800231c:	481c      	ldr	r0, [pc, #112]	@ (8002390 <OnTxData+0x8c>)
 800231e:	f001 ff6d 	bl	80041fc <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002322:	481c      	ldr	r0, [pc, #112]	@ (8002394 <OnTxData+0x90>)
 8002324:	f00e fe8e 	bl	8011044 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <OnTxData+0x94>)
 800232a:	2200      	movs	r2, #0
 800232c:	4611      	mov	r1, r2
 800232e:	2002      	movs	r0, #2
 8002330:	f00e fb28 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002334:	7c23      	ldrb	r3, [r4, #16]
 8002336:	f994 200a 	ldrsb.w	r2, [r4, #10]
 800233a:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800233e:	9103      	str	r1, [sp, #12]
 8002340:	9202      	str	r2, [sp, #8]
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	68e3      	ldr	r3, [r4, #12]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <OnTxData+0x98>)
 800234a:	2200      	movs	r2, #0
 800234c:	4611      	mov	r1, r2
 800234e:	2003      	movs	r0, #3
 8002350:	f00e fb18 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <OnTxData+0x9c>)
 8002356:	2200      	movs	r2, #0
 8002358:	4611      	mov	r1, r2
 800235a:	2003      	movs	r0, #3
 800235c:	f00e fb12 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002360:	7a23      	ldrb	r3, [r4, #8]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10c      	bne.n	8002380 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002366:	7a63      	ldrb	r3, [r4, #9]
 8002368:	b143      	cbz	r3, 800237c <OnTxData+0x78>
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <OnTxData+0xa0>)
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <OnTxData+0xa4>)
 8002370:	2200      	movs	r2, #0
 8002372:	4611      	mov	r1, r2
 8002374:	2003      	movs	r0, #3
 8002376:	f00e fb05 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
 800237a:	e7ca      	b.n	8002312 <OnTxData+0xe>
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <OnTxData+0xa8>)
 800237e:	e7f5      	b.n	800236c <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <OnTxData+0xac>)
 8002382:	2200      	movs	r2, #0
 8002384:	4611      	mov	r1, r2
 8002386:	2003      	movs	r0, #3
 8002388:	f00e fafc 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 800238c:	e7c1      	b.n	8002312 <OnTxData+0xe>
 800238e:	4770      	bx	lr
 8002390:	48000400 	.word	0x48000400
 8002394:	20000370 	.word	0x20000370
 8002398:	08012604 	.word	0x08012604
 800239c:	08012638 	.word	0x08012638
 80023a0:	0801266c 	.word	0x0801266c
 80023a4:	080125f8 	.word	0x080125f8
 80023a8:	0801267c 	.word	0x0801267c
 80023ac:	080125fc 	.word	0x080125fc
 80023b0:	08012690 	.word	0x08012690

080023b4 <OnStopJoinTimerEvent>:
{
 80023b4:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <OnStopJoinTimerEvent+0x3c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d013      	beq.n	80023e6 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80023be:	4c0d      	ldr	r4, [pc, #52]	@ (80023f4 <OnStopJoinTimerEvent+0x40>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c6:	4620      	mov	r0, r4
 80023c8:	f001 ff18 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80023cc:	2200      	movs	r2, #0
 80023ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023d2:	4620      	mov	r0, r4
 80023d4:	f001 ff12 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80023d8:	2200      	movs	r2, #0
 80023da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023de:	4620      	mov	r0, r4
 80023e0:	f001 ff0c 	bl	80041fc <HAL_GPIO_WritePin>
}
 80023e4:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80023e6:	2100      	movs	r1, #0
 80023e8:	2008      	movs	r0, #8
 80023ea:	f00e fbf5 	bl	8010bd8 <UTIL_SEQ_SetTask>
 80023ee:	e7e6      	b.n	80023be <OnStopJoinTimerEvent+0xa>
 80023f0:	20000070 	.word	0x20000070
 80023f4:	48000400 	.word	0x48000400

080023f8 <OnRxTimerLedEvent>:
{
 80023f8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002400:	4801      	ldr	r0, [pc, #4]	@ (8002408 <OnRxTimerLedEvent+0x10>)
 8002402:	f001 fefb 	bl	80041fc <HAL_GPIO_WritePin>
}
 8002406:	bd08      	pop	{r3, pc}
 8002408:	48000400 	.word	0x48000400

0800240c <OnTxTimerLedEvent>:
{
 800240c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002414:	4801      	ldr	r0, [pc, #4]	@ (800241c <OnTxTimerLedEvent+0x10>)
 8002416:	f001 fef1 	bl	80041fc <HAL_GPIO_WritePin>
}
 800241a:	bd08      	pop	{r3, pc}
 800241c:	48000400 	.word	0x48000400

08002420 <OnRxData>:
  if (params != NULL)
 8002420:	2900      	cmp	r1, #0
 8002422:	d06e      	beq.n	8002502 <OnRxData+0xe2>
{
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	4604      	mov	r4, r0
 800242a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002432:	4834      	ldr	r0, [pc, #208]	@ (8002504 <OnRxData+0xe4>)
 8002434:	f001 fee2 	bl	80041fc <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002438:	4833      	ldr	r0, [pc, #204]	@ (8002508 <OnRxData+0xe8>)
 800243a:	f00e fe03 	bl	8011044 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800243e:	782e      	ldrb	r6, [r5, #0]
 8002440:	2e00      	cmp	r6, #0
 8002442:	d042      	beq.n	80024ca <OnRxData+0xaa>
      if (appData != NULL)
 8002444:	2c00      	cmp	r4, #0
 8002446:	d03f      	beq.n	80024c8 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002448:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800244a:	6863      	ldr	r3, [r4, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d03c      	beq.n	80024ca <OnRxData+0xaa>
          switch (appData->Port)
 8002450:	2e02      	cmp	r6, #2
 8002452:	d016      	beq.n	8002482 <OnRxData+0x62>
 8002454:	2e03      	cmp	r6, #3
 8002456:	d138      	bne.n	80024ca <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002458:	7862      	ldrb	r2, [r4, #1]
 800245a:	2a01      	cmp	r2, #1
 800245c:	d135      	bne.n	80024ca <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d006      	beq.n	8002472 <OnRxData+0x52>
 8002464:	2b02      	cmp	r3, #2
 8002466:	d008      	beq.n	800247a <OnRxData+0x5a>
 8002468:	bb7b      	cbnz	r3, 80024ca <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800246a:	2000      	movs	r0, #0
 800246c:	f005 f832 	bl	80074d4 <LmHandlerRequestClass>
                    break;
 8002470:	e02b      	b.n	80024ca <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002472:	2001      	movs	r0, #1
 8002474:	f005 f82e 	bl	80074d4 <LmHandlerRequestClass>
                    break;
 8002478:	e027      	b.n	80024ca <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800247a:	2002      	movs	r0, #2
 800247c:	f005 f82a 	bl	80074d4 <LmHandlerRequestClass>
                    break;
 8002480:	e023      	b.n	80024ca <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002482:	7862      	ldrb	r2, [r4, #1]
 8002484:	2a01      	cmp	r2, #1
 8002486:	d120      	bne.n	80024ca <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <OnRxData+0xec>)
 8002490:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002492:	b963      	cbnz	r3, 80024ae <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002494:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <OnRxData+0xf0>)
 8002496:	2200      	movs	r2, #0
 8002498:	4611      	mov	r1, r2
 800249a:	2003      	movs	r0, #3
 800249c:	f00e fa72 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80024a0:	2200      	movs	r2, #0
 80024a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024a6:	4817      	ldr	r0, [pc, #92]	@ (8002504 <OnRxData+0xe4>)
 80024a8:	f001 fea8 	bl	80041fc <HAL_GPIO_WritePin>
 80024ac:	e00d      	b.n	80024ca <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <OnRxData+0xf4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	4611      	mov	r1, r2
 80024b4:	2003      	movs	r0, #3
 80024b6:	f00e fa65 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024c0:	4810      	ldr	r0, [pc, #64]	@ (8002504 <OnRxData+0xe4>)
 80024c2:	f001 fe9b 	bl	80041fc <HAL_GPIO_WritePin>
 80024c6:	e000      	b.n	80024ca <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80024c8:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80024ca:	7c2b      	ldrb	r3, [r5, #16]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d901      	bls.n	80024d4 <OnRxData+0xb4>
}
 80024d0:	b006      	add	sp, #24
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80024d4:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80024d8:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80024dc:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80024e0:	9005      	str	r0, [sp, #20]
 80024e2:	9104      	str	r1, [sp, #16]
 80024e4:	490c      	ldr	r1, [pc, #48]	@ (8002518 <OnRxData+0xf8>)
 80024e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024ea:	9303      	str	r3, [sp, #12]
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	9601      	str	r6, [sp, #4]
 80024f0:	68eb      	ldr	r3, [r5, #12]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <OnRxData+0xfc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	4611      	mov	r1, r2
 80024fa:	2003      	movs	r0, #3
 80024fc:	f00e fa42 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8002500:	e7e6      	b.n	80024d0 <OnRxData+0xb0>
 8002502:	4770      	bx	lr
 8002504:	48000400 	.word	0x48000400
 8002508:	20000358 	.word	0x20000358
 800250c:	20000388 	.word	0x20000388
 8002510:	080126a0 	.word	0x080126a0
 8002514:	080126ac 	.word	0x080126ac
 8002518:	08012d24 	.word	0x08012d24
 800251c:	080126b8 	.word	0x080126b8

08002520 <OnJoinRequest>:
  if (joinParams != NULL)
 8002520:	2800      	cmp	r0, #0
 8002522:	d046      	beq.n	80025b2 <OnJoinRequest+0x92>
{
 8002524:	b510      	push	{r4, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800252a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d135      	bne.n	800259e <OnJoinRequest+0x7e>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002532:	4820      	ldr	r0, [pc, #128]	@ (80025b4 <OnJoinRequest+0x94>)
 8002534:	f00e fd2c 	bl	8010f90 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800253e:	481e      	ldr	r0, [pc, #120]	@ (80025b8 <OnJoinRequest+0x98>)
 8002540:	f001 fe5c 	bl	80041fc <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <OnJoinRequest+0x9c>)
 8002546:	2200      	movs	r2, #0
 8002548:	4611      	mov	r1, r2
 800254a:	2002      	movs	r0, #2
 800254c:	f00e fa1a 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002550:	79e3      	ldrb	r3, [r4, #7]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d01a      	beq.n	800258c <OnJoinRequest+0x6c>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <OnJoinRequest+0xa0>)
 8002558:	2200      	movs	r2, #0
 800255a:	4611      	mov	r1, r2
 800255c:	2002      	movs	r0, #2
 800255e:	f00e fa11 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
          joinParams->Mode == ACTIVATION_TYPE_OTAA ? "OTAA" : "ABP");
 8002562:	79e3      	ldrb	r3, [r4, #7]
      printf("✅ TTN JOIN SUCCESS via %s\r\n",
 8002564:	2b02      	cmp	r3, #2
 8002566:	d018      	beq.n	800259a <OnJoinRequest+0x7a>
 8002568:	4916      	ldr	r1, [pc, #88]	@ (80025c4 <OnJoinRequest+0xa4>)
 800256a:	4817      	ldr	r0, [pc, #92]	@ (80025c8 <OnJoinRequest+0xa8>)
 800256c:	f00f f834 	bl	80115d8 <iprintf>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n",
 8002570:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002574:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002578:	9201      	str	r2, [sp, #4]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <OnJoinRequest+0xac>)
 800257e:	2200      	movs	r2, #0
 8002580:	4611      	mov	r1, r2
 8002582:	2003      	movs	r0, #3
 8002584:	f00e f9fe 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8002588:	b002      	add	sp, #8
 800258a:	bd10      	pop	{r4, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <OnJoinRequest+0xb0>)
 800258e:	2200      	movs	r2, #0
 8002590:	4611      	mov	r1, r2
 8002592:	2002      	movs	r0, #2
 8002594:	f00e f9f6 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
 8002598:	e7e3      	b.n	8002562 <OnJoinRequest+0x42>
      printf("✅ TTN JOIN SUCCESS via %s\r\n",
 800259a:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <OnJoinRequest+0xb4>)
 800259c:	e7e5      	b.n	800256a <OnJoinRequest+0x4a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <OnJoinRequest+0xb8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	4611      	mov	r1, r2
 80025a4:	2002      	movs	r0, #2
 80025a6:	f00e f9ed 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
      printf("❌ TTN JOIN FAILED\r\n");
 80025aa:	480c      	ldr	r0, [pc, #48]	@ (80025dc <OnJoinRequest+0xbc>)
 80025ac:	f00f f87c 	bl	80116a8 <puts>
 80025b0:	e7de      	b.n	8002570 <OnJoinRequest+0x50>
 80025b2:	4770      	bx	lr
 80025b4:	20000340 	.word	0x20000340
 80025b8:	48000400 	.word	0x48000400
 80025bc:	0801270c 	.word	0x0801270c
 80025c0:	08012744 	.word	0x08012744
 80025c4:	08012708 	.word	0x08012708
 80025c8:	08012764 	.word	0x08012764
 80025cc:	080127b8 	.word	0x080127b8
 80025d0:	08012724 	.word	0x08012724
 80025d4:	08012700 	.word	0x08012700
 80025d8:	08012784 	.word	0x08012784
 80025dc:	080127a0 	.word	0x080127a0

080025e0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4604      	mov	r4, r0
 80025e4:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 80025e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025ea:	4805      	ldr	r0, [pc, #20]	@ (8002600 <OnStoreContextRequest+0x20>)
 80025ec:	f7fe ff88 	bl	8001500 <FLASH_IF_Erase>
 80025f0:	b100      	cbz	r0, 80025f4 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 80025f2:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 80025f4:	462a      	mov	r2, r5
 80025f6:	4621      	mov	r1, r4
 80025f8:	4801      	ldr	r0, [pc, #4]	@ (8002600 <OnStoreContextRequest+0x20>)
 80025fa:	f7fe ff49 	bl	8001490 <FLASH_IF_Write>
}
 80025fe:	e7f8      	b.n	80025f2 <OnStoreContextRequest+0x12>
 8002600:	0803f000 	.word	0x0803f000

08002604 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002604:	b508      	push	{r3, lr}
 8002606:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002608:	4901      	ldr	r1, [pc, #4]	@ (8002610 <OnRestoreContextRequest+0xc>)
 800260a:	f7fe ff5d 	bl	80014c8 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800260e:	bd08      	pop	{r3, pc}
 8002610:	0803f000 	.word	0x0803f000

08002614 <StopJoin>:
{
 8002614:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002616:	4c1e      	ldr	r4, [pc, #120]	@ (8002690 <StopJoin+0x7c>)
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800261e:	4620      	mov	r0, r4
 8002620:	f001 fdec 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800262a:	4620      	mov	r0, r4
 800262c:	f001 fde6 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002630:	2201      	movs	r2, #1
 8002632:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002636:	4620      	mov	r0, r4
 8002638:	f001 fde0 	bl	80041fc <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 800263c:	4815      	ldr	r0, [pc, #84]	@ (8002694 <StopJoin+0x80>)
 800263e:	f00e fca7 	bl	8010f90 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002642:	f005 f9bd 	bl	80079c0 <LmHandlerStop>
 8002646:	b148      	cbz	r0, 800265c <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002648:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <StopJoin+0x84>)
 800264a:	2200      	movs	r2, #0
 800264c:	4611      	mov	r1, r2
 800264e:	2002      	movs	r0, #2
 8002650:	f00e f998 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002654:	4811      	ldr	r0, [pc, #68]	@ (800269c <StopJoin+0x88>)
 8002656:	f00e fcf5 	bl	8011044 <UTIL_TIMER_Start>
}
 800265a:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <StopJoin+0x8c>)
 800265e:	2200      	movs	r2, #0
 8002660:	4611      	mov	r1, r2
 8002662:	2002      	movs	r0, #2
 8002664:	f00e f98e 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002668:	4c0e      	ldr	r4, [pc, #56]	@ (80026a4 <StopJoin+0x90>)
 800266a:	2501      	movs	r5, #1
 800266c:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <StopJoin+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	2002      	movs	r0, #2
 8002676:	f00e f985 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 800267a:	480c      	ldr	r0, [pc, #48]	@ (80026ac <StopJoin+0x98>)
 800267c:	f005 f80a 	bl	8007694 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002680:	4629      	mov	r1, r5
 8002682:	7820      	ldrb	r0, [r4, #0]
 8002684:	f004 fdc2 	bl	800720c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <StopJoin+0x80>)
 800268a:	f00e fcdb 	bl	8011044 <UTIL_TIMER_Start>
 800268e:	e7e1      	b.n	8002654 <StopJoin+0x40>
 8002690:	48000400 	.word	0x48000400
 8002694:	20000498 	.word	0x20000498
 8002698:	080127e4 	.word	0x080127e4
 800269c:	20000480 	.word	0x20000480
 80026a0:	08012804 	.word	0x08012804
 80026a4:	20000070 	.word	0x20000070
 80026a8:	08012818 	.word	0x08012818
 80026ac:	2000000c 	.word	0x2000000c

080026b0 <StoreContext>:
{
 80026b0:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80026b2:	f005 fa17 	bl	8007ae4 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80026b6:	f110 0f08 	cmn.w	r0, #8
 80026ba:	d003      	beq.n	80026c4 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80026bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026c0:	d007      	beq.n	80026d2 <StoreContext+0x22>
}
 80026c2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <StoreContext+0x30>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	4611      	mov	r1, r2
 80026ca:	2002      	movs	r0, #2
 80026cc:	f00e f95a 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
 80026d0:	e7f7      	b.n	80026c2 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <StoreContext+0x34>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	4611      	mov	r1, r2
 80026d8:	2002      	movs	r0, #2
 80026da:	f00e f953 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 80026de:	e7f0      	b.n	80026c2 <StoreContext+0x12>
 80026e0:	08012838 	.word	0x08012838
 80026e4:	08012850 	.word	0x08012850

080026e8 <SendTxData>:
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	b089      	sub	sp, #36	@ 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 80026ec:	f7ff f94e 	bl	800198c <GetBatteryLevel>
 80026f0:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 80026f2:	f004 fe2f 	bl	8007354 <LmHandlerIsBusy>
 80026f6:	b190      	cbz	r0, 800271e <SendTxData+0x36>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80026f8:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 80026fa:	4c5a      	ldr	r4, [pc, #360]	@ (8002864 <SendTxData+0x17c>)
 80026fc:	4620      	mov	r0, r4
 80026fe:	f00e fc47 	bl	8010f90 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002702:	4b59      	ldr	r3, [pc, #356]	@ (8002868 <SendTxData+0x180>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4629      	mov	r1, r5
 8002708:	429d      	cmp	r5, r3
 800270a:	bf38      	it	cc
 800270c:	4619      	movcc	r1, r3
 800270e:	4620      	mov	r0, r4
 8002710:	f00e fcde 	bl	80110d0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002714:	4620      	mov	r0, r4
 8002716:	f00e fc95 	bl	8011044 <UTIL_TIMER_Start>
}
 800271a:	b009      	add	sp, #36	@ 0x24
 800271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 800271e:	a802      	add	r0, sp, #8
 8002720:	f7ff fa12 	bl	8001b48 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002724:	9400      	str	r4, [sp, #0]
 8002726:	4b51      	ldr	r3, [pc, #324]	@ (800286c <SendTxData+0x184>)
 8002728:	2201      	movs	r2, #1
 800272a:	2100      	movs	r1, #0
 800272c:	2002      	movs	r0, #2
 800272e:	f00e f929 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002732:	9803      	ldr	r0, [sp, #12]
 8002734:	f7fe fa46 	bl	8000bc4 <__aeabi_f2iz>
 8002738:	b200      	sxth	r0, r0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	4b4c      	ldr	r3, [pc, #304]	@ (8002870 <SendTxData+0x188>)
 800273e:	2201      	movs	r2, #1
 8002740:	2100      	movs	r1, #0
 8002742:	2002      	movs	r0, #2
 8002744:	f00e f91e 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8002748:	4c4a      	ldr	r4, [pc, #296]	@ (8002874 <SendTxData+0x18c>)
 800274a:	2302      	movs	r3, #2
 800274c:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800274e:	494a      	ldr	r1, [pc, #296]	@ (8002878 <SendTxData+0x190>)
 8002750:	9804      	ldr	r0, [sp, #16]
 8002752:	f7fe f8e7 	bl	8000924 <__aeabi_fmul>
 8002756:	f7fe fa5b 	bl	8000c10 <__aeabi_f2uiz>
 800275a:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 800275c:	9803      	ldr	r0, [sp, #12]
 800275e:	f7fe fa31 	bl	8000bc4 <__aeabi_f2iz>
 8002762:	b206      	sxth	r6, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8002764:	4945      	ldr	r1, [pc, #276]	@ (800287c <SendTxData+0x194>)
 8002766:	9802      	ldr	r0, [sp, #8]
 8002768:	f7fe f8dc 	bl	8000924 <__aeabi_fmul>
 800276c:	4942      	ldr	r1, [pc, #264]	@ (8002878 <SendTxData+0x190>)
 800276e:	f7fe f98d 	bl	8000a8c <__aeabi_fdiv>
 8002772:	f7fe fa4d 	bl	8000c10 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <SendTxData+0x198>)
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800277e:	6863      	ldr	r3, [r4, #4]
 8002780:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002784:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002786:	6863      	ldr	r3, [r4, #4]
 8002788:	7098      	strb	r0, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800278a:	6863      	ldr	r3, [r4, #4]
 800278c:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800278e:	6863      	ldr	r3, [r4, #4]
 8002790:	0a2a      	lsrs	r2, r5, #8
 8002792:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002794:	6863      	ldr	r3, [r4, #4]
 8002796:	715d      	strb	r5, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <SendTxData+0x19c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d002      	beq.n	80027a6 <SendTxData+0xbe>
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d000      	beq.n	80027a6 <SendTxData+0xbe>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80027a4:	b9d3      	cbnz	r3, 80027dc <SendTxData+0xf4>
      AppData.Buffer[i++] = 0;
 80027a6:	4a33      	ldr	r2, [pc, #204]	@ (8002874 <SendTxData+0x18c>)
 80027a8:	6851      	ldr	r1, [r2, #4]
 80027aa:	2300      	movs	r3, #0
 80027ac:	718b      	strb	r3, [r1, #6]
      AppData.Buffer[i++] = 0;
 80027ae:	6851      	ldr	r1, [r2, #4]
 80027b0:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 80027b2:	6852      	ldr	r2, [r2, #4]
 80027b4:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 80027b6:	7253      	strb	r3, [r2, #9]
 80027b8:	220a      	movs	r2, #10
    AppData.BufferSize = i;
 80027ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002874 <SendTxData+0x18c>)
 80027bc:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80027be:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <SendTxData+0x1a0>)
 80027c0:	7a5b      	ldrb	r3, [r3, #9]
 80027c2:	bb3b      	cbnz	r3, 8002814 <SendTxData+0x12c>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80027c4:	2200      	movs	r2, #0
 80027c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002884 <SendTxData+0x19c>)
 80027c8:	78d9      	ldrb	r1, [r3, #3]
 80027ca:	482a      	ldr	r0, [pc, #168]	@ (8002874 <SendTxData+0x18c>)
 80027cc:	f004 fdd8 	bl	8007380 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 80027d0:	b370      	cbz	r0, 8002830 <SendTxData+0x148>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 80027d2:	f110 0f06 	cmn.w	r0, #6
 80027d6:	d033      	beq.n	8002840 <SendTxData+0x158>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80027d8:	2500      	movs	r5, #0
 80027da:	e78e      	b.n	80026fa <SendTxData+0x12>
      latitude = sensor_data.latitude;
 80027dc:	9d05      	ldr	r5, [sp, #20]
      longitude = sensor_data.longitude;
 80027de:	9c06      	ldr	r4, [sp, #24]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 80027e0:	4e24      	ldr	r6, [pc, #144]	@ (8002874 <SendTxData+0x18c>)
 80027e2:	6877      	ldr	r7, [r6, #4]
 80027e4:	f7ff f8d2 	bl	800198c <GetBatteryLevel>
 80027e8:	71b8      	strb	r0, [r7, #6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 80027ea:	6873      	ldr	r3, [r6, #4]
 80027ec:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80027f0:	71da      	strb	r2, [r3, #7]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 80027f2:	6873      	ldr	r3, [r6, #4]
 80027f4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80027f8:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 80027fa:	725d      	strb	r5, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 80027fc:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002800:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002802:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002806:	72da      	strb	r2, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002808:	731c      	strb	r4, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800280a:	2200      	movs	r2, #0
 800280c:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800280e:	739a      	strb	r2, [r3, #14]
 8002810:	220f      	movs	r2, #15
 8002812:	e7d2      	b.n	80027ba <SendTxData+0xd2>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002814:	f004 fd8c 	bl	8007330 <LmHandlerJoinStatus>
 8002818:	2801      	cmp	r0, #1
 800281a:	d1d3      	bne.n	80027c4 <SendTxData+0xdc>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800281c:	481a      	ldr	r0, [pc, #104]	@ (8002888 <SendTxData+0x1a0>)
 800281e:	f00e fbb7 	bl	8010f90 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002828:	4818      	ldr	r0, [pc, #96]	@ (800288c <SendTxData+0x1a4>)
 800282a:	f001 fce7 	bl	80041fc <HAL_GPIO_WritePin>
 800282e:	e7c9      	b.n	80027c4 <SendTxData+0xdc>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002830:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <SendTxData+0x1a8>)
 8002832:	2201      	movs	r2, #1
 8002834:	2100      	movs	r1, #0
 8002836:	4610      	mov	r0, r2
 8002838:	f00e f8a4 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800283c:	2500      	movs	r5, #0
 800283e:	e75c      	b.n	80026fa <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002840:	f004 fd70 	bl	8007324 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002844:	4605      	mov	r5, r0
 8002846:	2800      	cmp	r0, #0
 8002848:	f43f af57 	beq.w	80026fa <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <SendTxData+0x1ac>)
 800284e:	fba3 2300 	umull	r2, r3, r3, r0
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <SendTxData+0x1b0>)
 8002858:	2201      	movs	r2, #1
 800285a:	2100      	movs	r1, #0
 800285c:	4610      	mov	r0, r2
 800285e:	f00e f891 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
 8002862:	e74a      	b.n	80026fa <SendTxData+0x12>
 8002864:	20000498 	.word	0x20000498
 8002868:	20000008 	.word	0x20000008
 800286c:	08012868 	.word	0x08012868
 8002870:	08012874 	.word	0x08012874
 8002874:	20000000 	.word	0x20000000
 8002878:	41200000 	.word	0x41200000
 800287c:	42c80000 	.word	0x42c80000
 8002880:	20000388 	.word	0x20000388
 8002884:	2000000c 	.word	0x2000000c
 8002888:	20000340 	.word	0x20000340
 800288c:	48000400 	.word	0x48000400
 8002890:	08012880 	.word	0x08012880
 8002894:	10624dd3 	.word	0x10624dd3
 8002898:	08012890 	.word	0x08012890

0800289c <OnJoinTimerLedEvent>:
{
 800289c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800289e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028a2:	4802      	ldr	r0, [pc, #8]	@ (80028ac <OnJoinTimerLedEvent+0x10>)
 80028a4:	f001 fcaf 	bl	8004206 <HAL_GPIO_TogglePin>
}
 80028a8:	bd08      	pop	{r3, pc}
 80028aa:	bf00      	nop
 80028ac:	48000400 	.word	0x48000400

080028b0 <LoRaWAN_Init>:
{
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80028b4:	2400      	movs	r4, #0
 80028b6:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80028b8:	2501      	movs	r5, #1
 80028ba:	9502      	str	r5, [sp, #8]
 80028bc:	2703      	movs	r7, #3
 80028be:	9701      	str	r7, [sp, #4]
 80028c0:	9500      	str	r5, [sp, #0]
 80028c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a00 <LoRaWAN_Init+0x150>)
 80028c4:	4622      	mov	r2, r4
 80028c6:	4621      	mov	r1, r4
 80028c8:	2002      	movs	r0, #2
 80028ca:	f00e f85b 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80028ce:	9502      	str	r5, [sp, #8]
 80028d0:	2306      	movs	r3, #6
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	2602      	movs	r6, #2
 80028d6:	9600      	str	r6, [sp, #0]
 80028d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <LoRaWAN_Init+0x154>)
 80028da:	4622      	mov	r2, r4
 80028dc:	4621      	mov	r1, r4
 80028de:	4630      	mov	r0, r6
 80028e0:	f00e f850 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80028e4:	9502      	str	r5, [sp, #8]
 80028e6:	9701      	str	r7, [sp, #4]
 80028e8:	9500      	str	r5, [sp, #0]
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <LoRaWAN_Init+0x158>)
 80028ec:	4622      	mov	r2, r4
 80028ee:	4621      	mov	r1, r4
 80028f0:	4630      	mov	r0, r6
 80028f2:	f00e f847 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80028f6:	a905      	add	r1, sp, #20
 80028f8:	4620      	mov	r0, r4
 80028fa:	f005 f84b 	bl	8007994 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80028fe:	9b05      	ldr	r3, [sp, #20]
 8002900:	0e1a      	lsrs	r2, r3, #24
 8002902:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002906:	9102      	str	r1, [sp, #8]
 8002908:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <LoRaWAN_Init+0x15c>)
 8002912:	4622      	mov	r2, r4
 8002914:	4621      	mov	r1, r4
 8002916:	4630      	mov	r0, r6
 8002918:	f00e f834 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800291c:	a905      	add	r1, sp, #20
 800291e:	4628      	mov	r0, r5
 8002920:	f005 f838 	bl	8007994 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002924:	9b05      	ldr	r3, [sp, #20]
 8002926:	0e1a      	lsrs	r2, r3, #24
 8002928:	b2d9      	uxtb	r1, r3
 800292a:	9103      	str	r1, [sp, #12]
 800292c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002930:	9102      	str	r1, [sp, #8]
 8002932:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	9200      	str	r2, [sp, #0]
 800293a:	4b35      	ldr	r3, [pc, #212]	@ (8002a10 <LoRaWAN_Init+0x160>)
 800293c:	4622      	mov	r2, r4
 800293e:	4621      	mov	r1, r4
 8002940:	4630      	mov	r0, r6
 8002942:	f00e f81f 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002946:	9400      	str	r4, [sp, #0]
 8002948:	4b32      	ldr	r3, [pc, #200]	@ (8002a14 <LoRaWAN_Init+0x164>)
 800294a:	4622      	mov	r2, r4
 800294c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002950:	4831      	ldr	r0, [pc, #196]	@ (8002a18 <LoRaWAN_Init+0x168>)
 8002952:	f00e fabf 	bl	8010ed4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002956:	9400      	str	r4, [sp, #0]
 8002958:	4b30      	ldr	r3, [pc, #192]	@ (8002a1c <LoRaWAN_Init+0x16c>)
 800295a:	4622      	mov	r2, r4
 800295c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002960:	482f      	ldr	r0, [pc, #188]	@ (8002a20 <LoRaWAN_Init+0x170>)
 8002962:	f00e fab7 	bl	8010ed4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002966:	9400      	str	r4, [sp, #0]
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <LoRaWAN_Init+0x174>)
 800296a:	462a      	mov	r2, r5
 800296c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002970:	482d      	ldr	r0, [pc, #180]	@ (8002a28 <LoRaWAN_Init+0x178>)
 8002972:	f00e faaf 	bl	8010ed4 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002976:	4620      	mov	r0, r4
 8002978:	f7fe fd84 	bl	8001484 <FLASH_IF_Init>
 800297c:	2800      	cmp	r0, #0
 800297e:	d13b      	bne.n	80029f8 <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002980:	2400      	movs	r4, #0
 8002982:	9400      	str	r4, [sp, #0]
 8002984:	4b29      	ldr	r3, [pc, #164]	@ (8002a2c <LoRaWAN_Init+0x17c>)
 8002986:	4622      	mov	r2, r4
 8002988:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800298c:	4828      	ldr	r0, [pc, #160]	@ (8002a30 <LoRaWAN_Init+0x180>)
 800298e:	f00e faa1 	bl	8010ed4 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002992:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <LoRaWAN_Init+0x184>)
 8002994:	4621      	mov	r1, r4
 8002996:	2001      	movs	r0, #1
 8002998:	f00e f9e8 	bl	8010d6c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800299c:	4a26      	ldr	r2, [pc, #152]	@ (8002a38 <LoRaWAN_Init+0x188>)
 800299e:	4621      	mov	r1, r4
 80029a0:	2002      	movs	r0, #2
 80029a2:	f00e f9e3 	bl	8010d6c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80029a6:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <LoRaWAN_Init+0x18c>)
 80029a8:	4621      	mov	r1, r4
 80029aa:	2004      	movs	r0, #4
 80029ac:	f00e f9de 	bl	8010d6c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80029b0:	4a23      	ldr	r2, [pc, #140]	@ (8002a40 <LoRaWAN_Init+0x190>)
 80029b2:	4621      	mov	r1, r4
 80029b4:	2008      	movs	r0, #8
 80029b6:	f00e f9d9 	bl	8010d6c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80029ba:	f000 f861 	bl	8002a80 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80029be:	4921      	ldr	r1, [pc, #132]	@ (8002a44 <LoRaWAN_Init+0x194>)
 80029c0:	4821      	ldr	r0, [pc, #132]	@ (8002a48 <LoRaWAN_Init+0x198>)
 80029c2:	f004 ff9b 	bl	80078fc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80029c6:	4821      	ldr	r0, [pc, #132]	@ (8002a4c <LoRaWAN_Init+0x19c>)
 80029c8:	f004 fe64 	bl	8007694 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80029cc:	4816      	ldr	r0, [pc, #88]	@ (8002a28 <LoRaWAN_Init+0x178>)
 80029ce:	f00e fb39 	bl	8011044 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80029d2:	4621      	mov	r1, r4
 80029d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <LoRaWAN_Init+0x1a0>)
 80029d6:	7818      	ldrb	r0, [r3, #0]
 80029d8:	f004 fc18 	bl	800720c <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80029dc:	4d1d      	ldr	r5, [pc, #116]	@ (8002a54 <LoRaWAN_Init+0x1a4>)
 80029de:	9400      	str	r4, [sp, #0]
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <LoRaWAN_Init+0x1a8>)
 80029e2:	4622      	mov	r2, r4
 80029e4:	491d      	ldr	r1, [pc, #116]	@ (8002a5c <LoRaWAN_Init+0x1ac>)
 80029e6:	6809      	ldr	r1, [r1, #0]
 80029e8:	4628      	mov	r0, r5
 80029ea:	f00e fa73 	bl	8010ed4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80029ee:	4628      	mov	r0, r5
 80029f0:	f00e fb28 	bl	8011044 <UTIL_TIMER_Start>
}
 80029f4:	b007      	add	sp, #28
 80029f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80029f8:	f7fe fe16 	bl	8001628 <Error_Handler>
 80029fc:	e7c0      	b.n	8002980 <LoRaWAN_Init+0xd0>
 80029fe:	bf00      	nop
 8002a00:	080128b0 	.word	0x080128b0
 8002a04:	080128d4 	.word	0x080128d4
 8002a08:	080128f8 	.word	0x080128f8
 8002a0c:	0801291c 	.word	0x0801291c
 8002a10:	08012940 	.word	0x08012940
 8002a14:	0800240d 	.word	0x0800240d
 8002a18:	20000370 	.word	0x20000370
 8002a1c:	080023f9 	.word	0x080023f9
 8002a20:	20000358 	.word	0x20000358
 8002a24:	0800289d 	.word	0x0800289d
 8002a28:	20000340 	.word	0x20000340
 8002a2c:	080023b5 	.word	0x080023b5
 8002a30:	20000480 	.word	0x20000480
 8002a34:	0800748d 	.word	0x0800748d
 8002a38:	080026e9 	.word	0x080026e9
 8002a3c:	080026b1 	.word	0x080026b1
 8002a40:	08002615 	.word	0x08002615
 8002a44:	01030100 	.word	0x01030100
 8002a48:	20000024 	.word	0x20000024
 8002a4c:	2000000c 	.word	0x2000000c
 8002a50:	20000070 	.word	0x20000070
 8002a54:	20000498 	.word	0x20000498
 8002a58:	08002299 	.word	0x08002299
 8002a5c:	20000008 	.word	0x20000008

08002a60 <HAL_GPIO_EXTI_Callback>:
{
 8002a60:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002a62:	2802      	cmp	r0, #2
 8002a64:	d002      	beq.n	8002a6c <HAL_GPIO_EXTI_Callback+0xc>
 8002a66:	2840      	cmp	r0, #64	@ 0x40
 8002a68:	d005      	beq.n	8002a76 <HAL_GPIO_EXTI_Callback+0x16>
}
 8002a6a:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2008      	movs	r0, #8
 8002a70:	f00e f8b2 	bl	8010bd8 <UTIL_SEQ_SetTask>
      break;
 8002a74:	e7f9      	b.n	8002a6a <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002a76:	2100      	movs	r1, #0
 8002a78:	2004      	movs	r0, #4
 8002a7a:	f00e f8ad 	bl	8010bd8 <UTIL_SEQ_SetTask>
}
 8002a7e:	e7f4      	b.n	8002a6a <HAL_GPIO_EXTI_Callback+0xa>

08002a80 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002a80:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <LoraInfo_Init+0x14>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002a86:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002a88:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002a8a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002a90:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002a92:	4770      	bx	lr
 8002a94:	200004b0 	.word	0x200004b0

08002a98 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002a98:	4800      	ldr	r0, [pc, #0]	@ (8002a9c <LoraInfo_GetPtr+0x4>)
 8002a9a:	4770      	bx	lr
 8002a9c:	200004b0 	.word	0x200004b0

08002aa0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002aa0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002aa2:	f000 f83f 	bl	8002b24 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002aa6:	bd08      	pop	{r3, pc}

08002aa8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002aa8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002aaa:	f000 f87d 	bl	8002ba8 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002aae:	bd08      	pop	{r3, pc}

08002ab0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002ab0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002ab2:	f000 f8c7 	bl	8002c44 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002ab6:	bd08      	pop	{r3, pc}

08002ab8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002ab8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002aba:	f000 f8c5 	bl	8002c48 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002abe:	bd08      	pop	{r3, pc}

08002ac0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002ac0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002ac2:	f000 f8c3 	bl	8002c4c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002ac6:	bd08      	pop	{r3, pc}

08002ac8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002ac8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002aca:	f000 f8c1 	bl	8002c50 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002ace:	bd08      	pop	{r3, pc}

08002ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ad0:	480d      	ldr	r0, [pc, #52]	@ (8002b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ad4:	f000 f8c1 	bl	8002c5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	@ (8002b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <LoopForever+0xe>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <LoopForever+0x16>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002afe:	f00e ff07 	bl	8011910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b02:	f7fe fdda 	bl	80016ba <main>

08002b06 <LoopForever>:

LoopForever:
    b LoopForever
 8002b06:	e7fe      	b.n	8002b06 <LoopForever>
  ldr   r0, =_estack
 8002b08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002b14:	08013410 	.word	0x08013410
  ldr r2, =_sbss
 8002b18:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002b1c:	20001808 	.word	0x20001808

08002b20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b28:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002b2a:	2400      	movs	r4, #0
 8002b2c:	9401      	str	r4, [sp, #4]
 8002b2e:	9402      	str	r4, [sp, #8]
 8002b30:	9403      	str	r4, [sp, #12]
 8002b32:	9404      	str	r4, [sp, #16]
 8002b34:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b3c:	f042 0204 	orr.w	r2, r2, #4
 8002b40:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002b4a:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002b4c:	2710      	movs	r7, #16
 8002b4e:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002b58:	4d12      	ldr	r5, [pc, #72]	@ (8002ba4 <BSP_RADIO_Init+0x80>)
 8002b5a:	a901      	add	r1, sp, #4
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f001 f9fd 	bl	8003f5c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002b62:	f04f 0820 	mov.w	r8, #32
 8002b66:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002b6a:	a901      	add	r1, sp, #4
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f001 f9f5 	bl	8003f5c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002b72:	2608      	movs	r6, #8
 8002b74:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002b76:	a901      	add	r1, sp, #4
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f001 f9ef 	bl	8003f5c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002b7e:	4622      	mov	r2, r4
 8002b80:	4641      	mov	r1, r8
 8002b82:	4628      	mov	r0, r5
 8002b84:	f001 fb3a 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002b88:	4622      	mov	r2, r4
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f001 fb35 	bl	80041fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002b92:	4622      	mov	r2, r4
 8002b94:	4631      	mov	r1, r6
 8002b96:	4628      	mov	r0, r5
 8002b98:	f001 fb30 	bl	80041fc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	b006      	add	sp, #24
 8002ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ba4:	48000800 	.word	0x48000800

08002ba8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002ba8:	b510      	push	{r4, lr}
  switch (Config)
 8002baa:	2803      	cmp	r0, #3
 8002bac:	d813      	bhi.n	8002bd6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002bae:	e8df f000 	tbb	[pc, r0]
 8002bb2:	1402      	.short	0x1402
 8002bb4:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002bb6:	4c22      	ldr	r4, [pc, #136]	@ (8002c40 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f001 fb1d 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2110      	movs	r1, #16
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f001 fb18 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2120      	movs	r1, #32
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f001 fb13 	bl	80041fc <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002bda:	4c19      	ldr	r4, [pc, #100]	@ (8002c40 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2108      	movs	r1, #8
 8002be0:	4620      	mov	r0, r4
 8002be2:	f001 fb0b 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002be6:	2201      	movs	r2, #1
 8002be8:	2110      	movs	r1, #16
 8002bea:	4620      	mov	r0, r4
 8002bec:	f001 fb06 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f001 fb01 	bl	80041fc <HAL_GPIO_WritePin>
      break;
 8002bfa:	e7ec      	b.n	8002bd6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002bfc:	4c10      	ldr	r4, [pc, #64]	@ (8002c40 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2108      	movs	r1, #8
 8002c02:	4620      	mov	r0, r4
 8002c04:	f001 fafa 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f001 faf5 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002c12:	2201      	movs	r2, #1
 8002c14:	2120      	movs	r1, #32
 8002c16:	4620      	mov	r0, r4
 8002c18:	f001 faf0 	bl	80041fc <HAL_GPIO_WritePin>
      break;
 8002c1c:	e7db      	b.n	8002bd6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002c1e:	4c08      	ldr	r4, [pc, #32]	@ (8002c40 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	2108      	movs	r1, #8
 8002c24:	4620      	mov	r0, r4
 8002c26:	f001 fae9 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 fae4 	bl	80041fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002c34:	2201      	movs	r2, #1
 8002c36:	2120      	movs	r1, #32
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f001 fadf 	bl	80041fc <HAL_GPIO_WritePin>
      break;
 8002c3e:	e7ca      	b.n	8002bd6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002c40:	48000800 	.word	0x48000800

08002c44 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002c44:	2000      	movs	r0, #0
 8002c46:	4770      	bx	lr

08002c48 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002c48:	2001      	movs	r0, #1
 8002c4a:	4770      	bx	lr

08002c4c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	4770      	bx	lr

08002c50 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002c50:	b908      	cbnz	r0, 8002c56 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002c52:	200f      	movs	r0, #15
 8002c54:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002c56:	2016      	movs	r0, #22
  }

  return ret;
}
 8002c58:	4770      	bx	lr

08002c5a <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c5c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5e:	2003      	movs	r0, #3
 8002c60:	f000 fd76 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c64:	f001 fc70 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_Init+0x28>)
 8002c6a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c6c:	200f      	movs	r0, #15
 8002c6e:	f7fe ff0f 	bl	8001a90 <HAL_InitTick>
 8002c72:	b110      	cbz	r0, 8002c7a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002c74:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002c76:	4620      	mov	r0, r4
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	4604      	mov	r4, r0
    HAL_MspInit();
 8002c7c:	f7fe fdc8 	bl	8001810 <HAL_MspInit>
 8002c80:	e7f9      	b.n	8002c76 <HAL_Init+0x1a>
 8002c82:	bf00      	nop
 8002c84:	20000074 	.word	0x20000074

08002c88 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c88:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002c8c:	6913      	ldr	r3, [r2, #16]
 8002c8e:	f023 0302 	bic.w	r3, r3, #2
 8002c92:	6113      	str	r3, [r2, #16]
}
 8002c94:	4770      	bx	lr

08002c96 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c96:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002c9a:	6913      	ldr	r3, [r2, #16]
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6113      	str	r3, [r2, #16]
}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002ca4:	4b01      	ldr	r3, [pc, #4]	@ (8002cac <HAL_GetUIDw0+0x8>)
 8002ca6:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 8002caa:	4770      	bx	lr
 8002cac:	1fff7000 	.word	0x1fff7000

08002cb0 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002cb0:	4b01      	ldr	r3, [pc, #4]	@ (8002cb8 <HAL_GetUIDw1+0x8>)
 8002cb2:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 8002cb6:	4770      	bx	lr
 8002cb8:	1fff7000 	.word	0x1fff7000

08002cbc <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002cbc:	4b01      	ldr	r3, [pc, #4]	@ (8002cc4 <HAL_GetUIDw2+0x8>)
 8002cbe:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 8002cc2:	4770      	bx	lr
 8002cc4:	1fff7000 	.word	0x1fff7000

08002cc8 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002cc8:	4a02      	ldr	r2, [pc, #8]	@ (8002cd4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002cca:	6853      	ldr	r3, [r2, #4]
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002cd2:	4770      	bx	lr
 8002cd4:	e0042000 	.word	0xe0042000

08002cd8 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002cd8:	4a02      	ldr	r2, [pc, #8]	@ (8002ce4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002cda:	6853      	ldr	r3, [r2, #4]
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002ce2:	4770      	bx	lr
 8002ce4:	e0042000 	.word	0xe0042000

08002ce8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ce8:	4a02      	ldr	r2, [pc, #8]	@ (8002cf4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002cea:	6853      	ldr	r3, [r2, #4]
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002cf2:	4770      	bx	lr
 8002cf4:	e0042000 	.word	0xe0042000

08002cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b530      	push	{r4, r5, lr}
 8002cfa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d00:	2800      	cmp	r0, #0
 8002d02:	f000 8106 	beq.w	8002f12 <HAL_ADC_Init+0x21a>
 8002d06:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d08:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002d0a:	b1bb      	cbz	r3, 8002d3c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d0e:	6893      	ldr	r3, [r2, #8]
 8002d10:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d14:	d11f      	bne.n	8002d56 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002d16:	6893      	ldr	r3, [r2, #8]
 8002d18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d1c:	f023 0317 	bic.w	r3, r3, #23
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d26:	4b7c      	ldr	r3, [pc, #496]	@ (8002f18 <HAL_ADC_Init+0x220>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	4a7b      	ldr	r2, [pc, #492]	@ (8002f1c <HAL_ADC_Init+0x224>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	3301      	adds	r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d3a:	e009      	b.n	8002d50 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002d3c:	f7fe f94a 	bl	8000fd4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d40:	2300      	movs	r3, #0
 8002d42:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002d44:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8002d48:	e7e0      	b.n	8002d0c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002d4a:	9b01      	ldr	r3, [sp, #4]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f9      	bne.n	8002d4a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d56:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d58:	6893      	ldr	r3, [r2, #8]
 8002d5a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d5e:	f040 809a 	bne.w	8002e96 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d64:	f043 0310 	orr.w	r3, r3, #16
 8002d68:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d74:	6893      	ldr	r3, [r2, #8]
 8002d76:	f013 0304 	ands.w	r3, r3, #4
 8002d7a:	d000      	beq.n	8002d7e <HAL_ADC_Init+0x86>
 8002d7c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d7e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002d80:	f011 0f10 	tst.w	r1, #16
 8002d84:	f040 80be 	bne.w	8002f04 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 80bb 	bne.w	8002f04 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d9a:	6893      	ldr	r3, [r2, #8]
 8002d9c:	f013 0f01 	tst.w	r3, #1
 8002da0:	d14f      	bne.n	8002e42 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002da2:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002da4:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002da6:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002daa:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002dac:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002db0:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002db2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002db6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002db8:	b109      	cbz	r1, 8002dbe <HAL_ADC_Init+0xc6>
 8002dba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002dbe:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8002dc0:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002dc2:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002dc4:	6921      	ldr	r1, [r4, #16]
 8002dc6:	2900      	cmp	r1, #0
 8002dc8:	db67      	blt.n	8002e9a <HAL_ADC_Init+0x1a2>
 8002dca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002dce:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dd0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002dd4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dd8:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002ddc:	2901      	cmp	r1, #1
 8002dde:	d05f      	beq.n	8002ea0 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002de0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002de2:	b121      	cbz	r1, 8002dee <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002de4:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002de8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002dea:	4329      	orrs	r1, r5
 8002dec:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002dee:	68d1      	ldr	r1, [r2, #12]
 8002df0:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8002df4:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 8002df8:	4319      	orrs	r1, r3
 8002dfa:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dfc:	6863      	ldr	r3, [r4, #4]
 8002dfe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002e02:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e04:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e06:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8002e0a:	2901      	cmp	r1, #1
 8002e0c:	d055      	beq.n	8002eba <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002e0e:	6821      	ldr	r1, [r4, #0]
 8002e10:	690d      	ldr	r5, [r1, #16]
 8002e12:	4b43      	ldr	r3, [pc, #268]	@ (8002f20 <HAL_ADC_Init+0x228>)
 8002e14:	402b      	ands	r3, r5
 8002e16:	4313      	orrs	r3, r2
 8002e18:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e1a:	6863      	ldr	r3, [r4, #4]
 8002e1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002e20:	d00f      	beq.n	8002e42 <HAL_ADC_Init+0x14a>
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e26:	d00c      	beq.n	8002e42 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e2c:	d009      	beq.n	8002e42 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e2e:	493d      	ldr	r1, [pc, #244]	@ (8002f24 <HAL_ADC_Init+0x22c>)
 8002e30:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8002e34:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 8002e38:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e42:	6821      	ldr	r1, [r4, #0]
 8002e44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8002e46:	694a      	ldr	r2, [r1, #20]
 8002e48:	f022 0207 	bic.w	r2, r2, #7
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002e54:	6953      	ldr	r3, [r2, #20]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002e5e:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d133      	bne.n	8002ece <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8002e6a:	f063 030f 	orn	r3, r3, #15
 8002e6e:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e70:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002e78:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d039      	beq.n	8002ef2 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e80:	f023 0312 	bic.w	r3, r3, #18
 8002e84:	f043 0310 	orr.w	r3, r3, #16
 8002e88:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002e92:	2001      	movs	r0, #1
 8002e94:	e03b      	b.n	8002f0e <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e96:	2000      	movs	r0, #0
 8002e98:	e76c      	b.n	8002d74 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e9a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002e9e:	e796      	b.n	8002dce <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ea0:	b915      	cbnz	r5, 8002ea8 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea6:	e79b      	b.n	8002de0 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002eaa:	f041 0120 	orr.w	r1, r1, #32
 8002eae:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002eb2:	f041 0101 	orr.w	r1, r1, #1
 8002eb6:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8002eb8:	e792      	b.n	8002de0 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002eba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ebc:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002ebe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002ec0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002ec2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002ec4:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	e79f      	b.n	8002e0e <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed2:	d1cd      	bne.n	8002e70 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002ed4:	6821      	ldr	r1, [r4, #0]
 8002ed6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002ed8:	69e3      	ldr	r3, [r4, #28]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	f003 031c 	and.w	r3, r3, #28
 8002ee2:	f06f 020f 	mvn.w	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002eec:	4313      	orrs	r3, r2
 8002eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ef0:	e7be      	b.n	8002e70 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002f02:	e004      	b.n	8002f0e <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002f0e:	b003      	add	sp, #12
 8002f10:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
 8002f14:	e7fb      	b.n	8002f0e <HAL_ADC_Init+0x216>
 8002f16:	bf00      	nop
 8002f18:	20000074 	.word	0x20000074
 8002f1c:	053e2d63 	.word	0x053e2d63
 8002f20:	1ffffc02 	.word	0x1ffffc02
 8002f24:	40012000 	.word	0x40012000

08002f28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f2e:	6946      	ldr	r6, [r0, #20]
 8002f30:	2e08      	cmp	r6, #8
 8002f32:	d005      	beq.n	8002f40 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002f34:	6803      	ldr	r3, [r0, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f013 0f01 	tst.w	r3, #1
 8002f3c:	d11e      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002f3e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f40:	f7fe fda8 	bl	8001a94 <HAL_GetTick>
 8002f44:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4232      	tst	r2, r6
 8002f4c:	d11c      	bne.n	8002f88 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002f52:	d0f8      	beq.n	8002f46 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f54:	f7fe fd9e 	bl	8001a94 <HAL_GetTick>
 8002f58:	1bc3      	subs	r3, r0, r7
 8002f5a:	42ab      	cmp	r3, r5
 8002f5c:	d801      	bhi.n	8002f62 <HAL_ADC_PollForConversion+0x3a>
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	d1f1      	bne.n	8002f46 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4233      	tst	r3, r6
 8002f68:	d1ed      	bne.n	8002f46 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002f72:	2300      	movs	r3, #0
 8002f74:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002f78:	2003      	movs	r0, #3
 8002f7a:	e028      	b.n	8002fce <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f7c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
 8002f86:	e022      	b.n	8002fce <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f88:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8e:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002f96:	d115      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f98:	7ea2      	ldrb	r2, [r4, #26]
 8002f9a:	b99a      	cbnz	r2, 8002fc4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f012 0f08 	tst.w	r2, #8
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	f012 0f04 	tst.w	r2, #4
 8002faa:	d111      	bne.n	8002fd0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	f022 020c 	bic.w	r2, r2, #12
 8002fb2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002fc4:	7e20      	ldrb	r0, [r4, #24]
 8002fc6:	b960      	cbnz	r0, 8002fe2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002fe0:	e7f0      	b.n	8002fc4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e7f3      	b.n	8002fce <HAL_ADC_PollForConversion+0xa6>

08002fe6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002fe6:	6803      	ldr	r3, [r0, #0]
 8002fe8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002fea:	4770      	bx	lr

08002fec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002fec:	b470      	push	{r4, r5, r6}
 8002fee:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ff4:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002ff6:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8002ffa:	2a01      	cmp	r2, #1
 8002ffc:	f000 8103 	beq.w	8003206 <HAL_ADC_ConfigChannel+0x21a>
 8003000:	4603      	mov	r3, r0
 8003002:	2201      	movs	r2, #1
 8003004:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003008:	6802      	ldr	r2, [r0, #0]
 800300a:	6890      	ldr	r0, [r2, #8]
 800300c:	f010 0f04 	tst.w	r0, #4
 8003010:	d00a      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003012:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003014:	f042 0220 	orr.w	r2, r2, #32
 8003018:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800301a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8003022:	b003      	add	sp, #12
 8003024:	bc70      	pop	{r4, r5, r6}
 8003026:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003028:	6848      	ldr	r0, [r1, #4]
 800302a:	2802      	cmp	r0, #2
 800302c:	f000 809c 	beq.w	8003168 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003030:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8003034:	d027      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x9a>
 8003036:	4d75      	ldr	r5, [pc, #468]	@ (800320c <HAL_ADC_ConfigChannel+0x220>)
 8003038:	42ac      	cmp	r4, r5
 800303a:	d024      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800303c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800303e:	f000 001f 	and.w	r0, r0, #31
 8003042:	250f      	movs	r5, #15
 8003044:	4085      	lsls	r5, r0
 8003046:	ea24 0505 	bic.w	r5, r4, r5
 800304a:	680c      	ldr	r4, [r1, #0]
 800304c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003050:	2e00      	cmp	r6, #0
 8003052:	d131      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0xcc>
 8003054:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003058:	4084      	lsls	r4, r0
 800305a:	432c      	orrs	r4, r5
 800305c:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800305e:	684c      	ldr	r4, [r1, #4]
 8003060:	08a0      	lsrs	r0, r4, #2
 8003062:	3001      	adds	r0, #1
 8003064:	69dd      	ldr	r5, [r3, #28]
 8003066:	42a8      	cmp	r0, r5
 8003068:	d813      	bhi.n	8003092 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800306a:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800306c:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800306e:	f004 041f 	and.w	r4, r4, #31
 8003072:	260f      	movs	r6, #15
 8003074:	40a6      	lsls	r6, r4
 8003076:	ea20 0006 	bic.w	r0, r0, r6
 800307a:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800307e:	40a5      	lsls	r5, r4
 8003080:	4328      	orrs	r0, r5
 8003082:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8003084:	e005      	b.n	8003092 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003086:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003088:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800308a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800308e:	4320      	orrs	r0, r4
 8003090:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003092:	681c      	ldr	r4, [r3, #0]
 8003094:	680d      	ldr	r5, [r1, #0]
 8003096:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003098:	6960      	ldr	r0, [r4, #20]
 800309a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800309e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80030a2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80030a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030aa:	4302      	orrs	r2, r0
 80030ac:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030ae:	680a      	ldr	r2, [r1, #0]
 80030b0:	2a00      	cmp	r2, #0
 80030b2:	db09      	blt.n	80030c8 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b4:	2000      	movs	r0, #0
 80030b6:	e7b1      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030bc:	b114      	cbz	r4, 80030c4 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80030be:	fab4 f484 	clz	r4, r4
 80030c2:	e7c9      	b.n	8003058 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80030c4:	2420      	movs	r4, #32
 80030c6:	e7c7      	b.n	8003058 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030c8:	4951      	ldr	r1, [pc, #324]	@ (8003210 <HAL_ADC_ConfigChannel+0x224>)
 80030ca:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 80030ce:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030d2:	4c50      	ldr	r4, [pc, #320]	@ (8003214 <HAL_ADC_ConfigChannel+0x228>)
 80030d4:	42a2      	cmp	r2, r4
 80030d6:	d007      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030d8:	4c4f      	ldr	r4, [pc, #316]	@ (8003218 <HAL_ADC_ConfigChannel+0x22c>)
 80030da:	42a2      	cmp	r2, r4
 80030dc:	d026      	beq.n	800312c <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030de:	4c4f      	ldr	r4, [pc, #316]	@ (800321c <HAL_ADC_ConfigChannel+0x230>)
 80030e0:	42a2      	cmp	r2, r4
 80030e2:	d032      	beq.n	800314a <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e4:	2000      	movs	r0, #0
 80030e6:	e799      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e8:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80030ec:	d1f4      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030f2:	4847      	ldr	r0, [pc, #284]	@ (8003210 <HAL_ADC_ConfigChannel+0x224>)
 80030f4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80030f8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80030fc:	4311      	orrs	r1, r2
 80030fe:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003102:	4a47      	ldr	r2, [pc, #284]	@ (8003220 <HAL_ADC_ConfigChannel+0x234>)
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	0992      	lsrs	r2, r2, #6
 8003108:	4946      	ldr	r1, [pc, #280]	@ (8003224 <HAL_ADC_ConfigChannel+0x238>)
 800310a:	fba1 1202 	umull	r1, r2, r1, r2
 800310e:	0992      	lsrs	r2, r2, #6
 8003110:	3201      	adds	r2, #1
 8003112:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800311a:	e002      	b.n	8003122 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 800311c:	9a01      	ldr	r2, [sp, #4]
 800311e:	3a01      	subs	r2, #1
 8003120:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003122:	9a01      	ldr	r2, [sp, #4]
 8003124:	2a00      	cmp	r2, #0
 8003126:	d1f9      	bne.n	800311c <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2000      	movs	r0, #0
 800312a:	e777      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800312c:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8003130:	d1d5      	bne.n	80030de <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003132:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8003136:	4836      	ldr	r0, [pc, #216]	@ (8003210 <HAL_ADC_ConfigChannel+0x224>)
 8003138:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 800313c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003140:	4311      	orrs	r1, r2
 8003142:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003146:	2000      	movs	r0, #0
}
 8003148:	e768      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800314a:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 800314e:	d158      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003150:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003154:	482e      	ldr	r0, [pc, #184]	@ (8003210 <HAL_ADC_ConfigChannel+0x224>)
 8003156:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800315a:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800315e:	430a      	orrs	r2, r1
 8003160:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003164:	2000      	movs	r0, #0
}
 8003166:	e759      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003168:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800316c:	d002      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x188>
 800316e:	4827      	ldr	r0, [pc, #156]	@ (800320c <HAL_ADC_ConfigChannel+0x220>)
 8003170:	4284      	cmp	r4, r0
 8003172:	d106      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003174:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003176:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8003178:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800317c:	ea20 0004 	bic.w	r0, r0, r4
 8003180:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003182:	680a      	ldr	r2, [r1, #0]
 8003184:	2a00      	cmp	r2, #0
 8003186:	db01      	blt.n	800318c <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2000      	movs	r0, #0
 800318a:	e747      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800318c:	4920      	ldr	r1, [pc, #128]	@ (8003210 <HAL_ADC_ConfigChannel+0x224>)
 800318e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003192:	4820      	ldr	r0, [pc, #128]	@ (8003214 <HAL_ADC_ConfigChannel+0x228>)
 8003194:	4282      	cmp	r2, r0
 8003196:	d007      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003198:	481f      	ldr	r0, [pc, #124]	@ (8003218 <HAL_ADC_ConfigChannel+0x22c>)
 800319a:	4282      	cmp	r2, r0
 800319c:	d013      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800319e:	481f      	ldr	r0, [pc, #124]	@ (800321c <HAL_ADC_ConfigChannel+0x230>)
 80031a0:	4282      	cmp	r2, r0
 80031a2:	d01f      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a4:	2000      	movs	r0, #0
 80031a6:	e739      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a8:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031ac:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 80031b0:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80031b4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80031b8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80031bc:	4311      	orrs	r1, r2
 80031be:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c2:	2000      	movs	r0, #0
}
 80031c4:	e72a      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c6:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031ca:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 80031ce:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 80031d2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80031d6:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80031da:	430a      	orrs	r2, r1
 80031dc:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2000      	movs	r0, #0
}
 80031e2:	e71b      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e4:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031e8:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 80031ec:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 80031f0:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80031f4:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80031f8:	430a      	orrs	r2, r1
 80031fa:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fe:	2000      	movs	r0, #0
}
 8003200:	e70c      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
 8003202:	2000      	movs	r0, #0
 8003204:	e70a      	b.n	800301c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003206:	2002      	movs	r0, #2
 8003208:	e70b      	b.n	8003022 <HAL_ADC_ConfigChannel+0x36>
 800320a:	bf00      	nop
 800320c:	80000004 	.word	0x80000004
 8003210:	40012000 	.word	0x40012000
 8003214:	b0001000 	.word	0xb0001000
 8003218:	b8004000 	.word	0xb8004000
 800321c:	b4002000 	.word	0xb4002000
 8003220:	20000074 	.word	0x20000074
 8003224:	053e2d63 	.word	0x053e2d63

08003228 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003228:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800322a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	f012 0f04 	tst.w	r2, #4
 8003232:	d02a      	beq.n	800328a <ADC_ConversionStop+0x62>
 8003234:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	f012 0f02 	tst.w	r2, #2
 800323c:	d107      	bne.n	800324e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003244:	f022 0217 	bic.w	r2, r2, #23
 8003248:	f042 0210 	orr.w	r2, r2, #16
 800324c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800324e:	f7fe fc21 	bl	8001a94 <HAL_GetTick>
 8003252:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f013 0f04 	tst.w	r3, #4
 800325c:	d013      	beq.n	8003286 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800325e:	f7fe fc19 	bl	8001a94 <HAL_GetTick>
 8003262:	1b43      	subs	r3, r0, r5
 8003264:	2b02      	cmp	r3, #2
 8003266:	d9f5      	bls.n	8003254 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f013 0f04 	tst.w	r3, #4
 8003270:	d0f0      	beq.n	8003254 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
 8003284:	e002      	b.n	800328c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003286:	2000      	movs	r0, #0
 8003288:	e000      	b.n	800328c <ADC_ConversionStop+0x64>
 800328a:	2000      	movs	r0, #0
}
 800328c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003290 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003294:	2300      	movs	r3, #0
 8003296:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003298:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f012 0f01 	tst.w	r2, #1
 80032a0:	d15b      	bne.n	800335a <ADC_Enable+0xca>
 80032a2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <ADC_Enable+0xd0>)
 80032a8:	4211      	tst	r1, r2
 80032aa:	d117      	bne.n	80032dc <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032b2:	f022 0217 	bic.w	r2, r2, #23
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032bc:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <ADC_Enable+0xd4>)
 80032be:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80032c2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80032c6:	d019      	beq.n	80032fc <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c8:	4b27      	ldr	r3, [pc, #156]	@ (8003368 <ADC_Enable+0xd8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	4a27      	ldr	r2, [pc, #156]	@ (800336c <ADC_Enable+0xdc>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80032d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80032da:	e00c      	b.n	80032f6 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80032de:	f043 0310 	orr.w	r3, r3, #16
 80032e2:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 80032ec:	2001      	movs	r0, #1
 80032ee:	e035      	b.n	800335c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80032f0:	9b01      	ldr	r3, [sp, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80032f6:	9b01      	ldr	r3, [sp, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f9      	bne.n	80032f0 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032fc:	7e63      	ldrb	r3, [r4, #25]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003302:	2000      	movs	r0, #0
 8003304:	e02a      	b.n	800335c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003306:	f7fe fbc5 	bl	8001a94 <HAL_GetTick>
 800330a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f012 0f01 	tst.w	r2, #1
 8003314:	d11f      	bne.n	8003356 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f012 0f01 	tst.w	r2, #1
 800331c:	d107      	bne.n	800332e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003324:	f022 0217 	bic.w	r2, r2, #23
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800332e:	f7fe fbb1 	bl	8001a94 <HAL_GetTick>
 8003332:	1b40      	subs	r0, r0, r5
 8003334:	2802      	cmp	r0, #2
 8003336:	d9e9      	bls.n	800330c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f013 0f01 	tst.w	r3, #1
 8003340:	d1e4      	bne.n	800330c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003344:	f043 0310 	orr.w	r3, r3, #16
 8003348:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003352:	2001      	movs	r0, #1
 8003354:	e002      	b.n	800335c <ADC_Enable+0xcc>
  return HAL_OK;
 8003356:	2000      	movs	r0, #0
 8003358:	e000      	b.n	800335c <ADC_Enable+0xcc>
 800335a:	2000      	movs	r0, #0
}
 800335c:	b003      	add	sp, #12
 800335e:	bd30      	pop	{r4, r5, pc}
 8003360:	80000017 	.word	0x80000017
 8003364:	40012000 	.word	0x40012000
 8003368:	20000074 	.word	0x20000074
 800336c:	053e2d63 	.word	0x053e2d63

08003370 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003370:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f013 0f04 	tst.w	r3, #4
 8003378:	d128      	bne.n	80033cc <HAL_ADC_Start+0x5c>
{
 800337a:	b510      	push	{r4, lr}
 800337c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800337e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003382:	2b01      	cmp	r3, #1
 8003384:	d024      	beq.n	80033d0 <HAL_ADC_Start+0x60>
 8003386:	2301      	movs	r3, #1
 8003388:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800338c:	f7ff ff80 	bl	8003290 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003390:	b9c0      	cbnz	r0, 80033c4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003394:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a0:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80033a2:	2300      	movs	r3, #0
 80033a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	211c      	movs	r1, #28
 80033aa:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80033ac:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80033b0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80033b2:	6893      	ldr	r3, [r2, #8]
 80033b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b8:	f023 0317 	bic.w	r3, r3, #23
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6093      	str	r3, [r2, #8]
}
 80033c2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80033c4:	2300      	movs	r3, #0
 80033c6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80033ca:	e7fa      	b.n	80033c2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80033cc:	2002      	movs	r0, #2
}
 80033ce:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80033d0:	2002      	movs	r0, #2
 80033d2:	e7f6      	b.n	80033c2 <HAL_ADC_Start+0x52>

080033d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033d8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033da:	6893      	ldr	r3, [r2, #8]
 80033dc:	f013 0302 	ands.w	r3, r3, #2
 80033e0:	d000      	beq.n	80033e4 <ADC_Disable+0x10>
 80033e2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033e4:	6891      	ldr	r1, [r2, #8]
 80033e6:	f011 0f01 	tst.w	r1, #1
 80033ea:	d039      	beq.n	8003460 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d139      	bne.n	8003464 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033f0:	6893      	ldr	r3, [r2, #8]
 80033f2:	f003 0305 	and.w	r3, r3, #5
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d009      	beq.n	800340e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033fc:	f043 0310 	orr.w	r3, r3, #16
 8003400:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
 800340c:	e029      	b.n	8003462 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800340e:	6893      	ldr	r3, [r2, #8]
 8003410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003414:	f023 0317 	bic.w	r3, r3, #23
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	2203      	movs	r2, #3
 8003422:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003424:	f7fe fb36 	bl	8001a94 <HAL_GetTick>
 8003428:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f013 0f01 	tst.w	r3, #1
 8003432:	d013      	beq.n	800345c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003434:	f7fe fb2e 	bl	8001a94 <HAL_GetTick>
 8003438:	1b40      	subs	r0, r0, r5
 800343a:	2802      	cmp	r0, #2
 800343c:	d9f5      	bls.n	800342a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f013 0f01 	tst.w	r3, #1
 8003446:	d0f0      	beq.n	800342a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003448:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e002      	b.n	8003462 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800345c:	2000      	movs	r0, #0
 800345e:	e000      	b.n	8003462 <ADC_Disable+0x8e>
 8003460:	2000      	movs	r0, #0
}
 8003462:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003464:	2000      	movs	r0, #0
 8003466:	e7fc      	b.n	8003462 <ADC_Disable+0x8e>

08003468 <HAL_ADC_DeInit>:
{
 8003468:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800346a:	2800      	cmp	r0, #0
 800346c:	d056      	beq.n	800351c <HAL_ADC_DeInit+0xb4>
 800346e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003470:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003478:	f7ff fed6 	bl	8003228 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800347c:	4606      	mov	r6, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d03d      	beq.n	80034fe <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6853      	ldr	r3, [r2, #4]
 8003486:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	f240 329f 	movw	r2, #927	@ 0x39f
 8003496:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	68d1      	ldr	r1, [r2, #12]
 800349c:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_ADC_DeInit+0xb8>)
 800349e:	400b      	ands	r3, r1
 80034a0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	6953      	ldr	r3, [r2, #20]
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	6153      	str	r3, [r2, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b0:	2500      	movs	r5, #0
 80034b2:	629d      	str	r5, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80034b4:	6822      	ldr	r2, [r4, #0]
 80034b6:	6a13      	ldr	r3, [r2, #32]
 80034b8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80034bc:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80034c2:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80034c6:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80034cc:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80034d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	6913      	ldr	r3, [r2, #16]
 80034d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80034da:	6113      	str	r3, [r2, #16]
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80034dc:	4a11      	ldr	r2, [pc, #68]	@ (8003524 <HAL_ADC_DeInit+0xbc>)
 80034de:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 80034e2:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80034e6:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fd fd88 	bl	8001000 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80034f0:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80034f4:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80034f6:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80034fa:	4630      	mov	r0, r6
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff ff68 	bl	80033d4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003504:	4606      	mov	r6, r0
 8003506:	b908      	cbnz	r0, 800350c <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003508:	2301      	movs	r3, #1
 800350a:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800350c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800350e:	6893      	ldr	r3, [r2, #8]
 8003510:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003514:	f023 0317 	bic.w	r3, r3, #23
 8003518:	6093      	str	r3, [r2, #8]
}
 800351a:	e7b2      	b.n	8003482 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800351c:	2601      	movs	r6, #1
 800351e:	e7ec      	b.n	80034fa <HAL_ADC_DeInit+0x92>
 8003520:	833e0200 	.word	0x833e0200
 8003524:	40012000 	.word	0x40012000

08003528 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003528:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800352c:	2b01      	cmp	r3, #1
 800352e:	d019      	beq.n	8003564 <HAL_ADC_Stop+0x3c>
{
 8003530:	b510      	push	{r4, lr}
 8003532:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003534:	2301      	movs	r3, #1
 8003536:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800353a:	f7ff fe75 	bl	8003228 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800353e:	b118      	cbz	r0, 8003548 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003540:	2300      	movs	r3, #0
 8003542:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003546:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff ff43 	bl	80033d4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800354e:	2800      	cmp	r0, #0
 8003550:	d1f6      	bne.n	8003540 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003552:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003562:	e7ed      	b.n	8003540 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003564:	2002      	movs	r0, #2
}
 8003566:	4770      	bx	lr

08003568 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800356c:	2300      	movs	r3, #0
 800356e:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003570:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003574:	2b01      	cmp	r3, #1
 8003576:	f000 8094 	beq.w	80036a2 <HAL_ADCEx_Calibration_Start+0x13a>
 800357a:	4604      	mov	r4, r0
 800357c:	2301      	movs	r3, #1
 800357e:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003582:	f7ff ff27 	bl	80033d4 <ADC_Disable>
 8003586:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003588:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	f012 0201 	ands.w	r2, r2, #1
 8003590:	d009      	beq.n	80035a6 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800359a:	2300      	movs	r3, #0
 800359c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 80035a0:	4628      	mov	r0, r5
 80035a2:	b003      	add	sp, #12
 80035a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80035a6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80035a8:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 80035ac:	f041 0102 	orr.w	r1, r1, #2
 80035b0:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80035b2:	68de      	ldr	r6, [r3, #12]
 80035b4:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 80035b8:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 80035bc:	0436      	lsls	r6, r6, #16
 80035be:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80035c0:	68d9      	ldr	r1, [r3, #12]
 80035c2:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80035c6:	f021 0103 	bic.w	r1, r1, #3
 80035ca:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80035cc:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80035ce:	e005      	b.n	80035dc <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80035d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80035d8:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80035da:	3201      	adds	r2, #1
 80035dc:	2a07      	cmp	r2, #7
 80035de:	d81e      	bhi.n	800361e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80035e0:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80035e2:	688b      	ldr	r3, [r1, #8]
 80035e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035e8:	f023 0317 	bic.w	r3, r3, #23
 80035ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035f0:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035f2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	2900      	cmp	r1, #0
 80035f8:	daea      	bge.n	80035d0 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80035fa:	9b01      	ldr	r3, [sp, #4]
 80035fc:	3301      	adds	r3, #1
 80035fe:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003600:	9b01      	ldr	r3, [sp, #4]
 8003602:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003606:	d3f4      	bcc.n	80035f2 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003608:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800360a:	f023 0312 	bic.w	r3, r3, #18
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8003614:	2300      	movs	r3, #0
 8003616:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 800361a:	2501      	movs	r5, #1
 800361c:	e7c0      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800361e:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003622:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003624:	6893      	ldr	r3, [r2, #8]
 8003626:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800362a:	f023 0317 	bic.w	r3, r3, #23
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003634:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003636:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 800363a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800363e:	4318      	orrs	r0, r3
 8003640:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003644:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003646:	6893      	ldr	r3, [r2, #8]
 8003648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800364c:	f023 0317 	bic.w	r3, r3, #23
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003656:	f7fe fa1d 	bl	8001a94 <HAL_GetTick>
 800365a:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800365c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	f012 0f01 	tst.w	r2, #1
 8003664:	d109      	bne.n	800367a <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4332      	orrs	r2, r6
 800366a:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800366c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003678:	e78f      	b.n	800359a <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800367a:	f7fe fa0b 	bl	8001a94 <HAL_GetTick>
 800367e:	1bc3      	subs	r3, r0, r7
 8003680:	2b02      	cmp	r3, #2
 8003682:	d9eb      	bls.n	800365c <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f013 0f01 	tst.w	r3, #1
 800368c:	d0e6      	beq.n	800365c <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003690:	f043 0310 	orr.w	r3, r3, #16
 8003694:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800369e:	2501      	movs	r5, #1
 80036a0:	e77e      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80036a2:	2502      	movs	r5, #2
 80036a4:	e77c      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x38>
	...

080036a8 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036a8:	2800      	cmp	r0, #0
 80036aa:	db07      	blt.n	80036bc <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ac:	f000 021f 	and.w	r2, r0, #31
 80036b0:	0940      	lsrs	r0, r0, #5
 80036b2:	2301      	movs	r3, #1
 80036b4:	4093      	lsls	r3, r2
 80036b6:	4a02      	ldr	r2, [pc, #8]	@ (80036c0 <__NVIC_EnableIRQ+0x18>)
 80036b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100

080036c4 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036c4:	2800      	cmp	r0, #0
 80036c6:	db0c      	blt.n	80036e2 <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c8:	f000 021f 	and.w	r2, r0, #31
 80036cc:	0940      	lsrs	r0, r0, #5
 80036ce:	2301      	movs	r3, #1
 80036d0:	4093      	lsls	r3, r2
 80036d2:	3020      	adds	r0, #32
 80036d4:	4a03      	ldr	r2, [pc, #12]	@ (80036e4 <__NVIC_DisableIRQ+0x20>)
 80036d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036de:	f3bf 8f6f 	isb	sy
}
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100

080036e8 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 80036e8:	2800      	cmp	r0, #0
 80036ea:	db08      	blt.n	80036fe <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	0109      	lsls	r1, r1, #4
 80036ee:	b2c9      	uxtb	r1, r1
 80036f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80036f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80036f8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80036fc:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	f000 000f 	and.w	r0, r0, #15
 8003702:	0109      	lsls	r1, r1, #4
 8003704:	b2c9      	uxtb	r1, r1
 8003706:	4b01      	ldr	r3, [pc, #4]	@ (800370c <__NVIC_SetPriority+0x24>)
 8003708:	5419      	strb	r1, [r3, r0]
}
 800370a:	4770      	bx	lr
 800370c:	e000ed14 	.word	0xe000ed14

08003710 <NVIC_EncodePriority>:
{
 8003710:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003712:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003716:	f1c0 0c07 	rsb	ip, r0, #7
 800371a:	f1bc 0f04 	cmp.w	ip, #4
 800371e:	bf28      	it	cs
 8003720:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003724:	1d03      	adds	r3, r0, #4
 8003726:	2b06      	cmp	r3, #6
 8003728:	d90f      	bls.n	800374a <NVIC_EncodePriority+0x3a>
 800372a:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	f04f 3eff 	mov.w	lr, #4294967295
 8003730:	fa0e f00c 	lsl.w	r0, lr, ip
 8003734:	ea21 0100 	bic.w	r1, r1, r0
 8003738:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800373a:	fa0e fe03 	lsl.w	lr, lr, r3
 800373e:	ea22 020e 	bic.w	r2, r2, lr
}
 8003742:	ea41 0002 	orr.w	r0, r1, r2
 8003746:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	2300      	movs	r3, #0
 800374c:	e7ee      	b.n	800372c <NVIC_EncodePriority+0x1c>
	...

08003750 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003750:	4a07      	ldr	r2, [pc, #28]	@ (8003770 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003752:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003754:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800375c:	0200      	lsls	r0, r0, #8
 800375e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003762:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800376c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003774:	b510      	push	{r4, lr}
 8003776:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_NVIC_SetPriority+0x1c>)
 800377a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003780:	f7ff ffc6 	bl	8003710 <NVIC_EncodePriority>
 8003784:	4601      	mov	r1, r0
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff ffae 	bl	80036e8 <__NVIC_SetPriority>
}
 800378c:	bd10      	pop	{r4, pc}
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003796:	f7ff ff87 	bl	80036a8 <__NVIC_EnableIRQ>
}
 800379a:	bd08      	pop	{r3, pc}

0800379c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800379c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800379e:	f7ff ff91 	bl	80036c4 <__NVIC_DisableIRQ>
}
 80037a2:	bd08      	pop	{r3, pc}

080037a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a4:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a6:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80037a8:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 80037ac:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80037b0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80037b2:	b124      	cbz	r4, 80037be <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b4:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80037b6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 80037ba:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037be:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80037c0:	f004 0c1c 	and.w	ip, r4, #28
 80037c4:	2401      	movs	r4, #1
 80037c6:	fa04 f40c 	lsl.w	r4, r4, ip
 80037ca:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 80037ce:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037d2:	6804      	ldr	r4, [r0, #0]
 80037d4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037d6:	6883      	ldr	r3, [r0, #8]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d005      	beq.n	80037e8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80037dc:	6803      	ldr	r3, [r0, #0]
 80037de:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80037e0:	6803      	ldr	r3, [r0, #0]
 80037e2:	60da      	str	r2, [r3, #12]
  }
}
 80037e4:	bc10      	pop	{r4}
 80037e6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80037e8:	6803      	ldr	r3, [r0, #0]
 80037ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80037ec:	6803      	ldr	r3, [r0, #0]
 80037ee:	60d9      	str	r1, [r3, #12]
 80037f0:	e7f8      	b.n	80037e4 <DMA_SetConfig+0x40>
	...

080037f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	4a14      	ldr	r2, [pc, #80]	@ (8003848 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d816      	bhi.n	800382a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037fc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80037fe:	f022 0203 	bic.w	r2, r2, #3
 8003802:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003806:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 800380a:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3b08      	subs	r3, #8
 8003810:	4a0e      	ldr	r2, [pc, #56]	@ (800384c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003818:	4a0d      	ldr	r2, [pc, #52]	@ (8003850 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800381a:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2201      	movs	r2, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003828:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800382a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800382c:	f022 0103 	bic.w	r1, r2, #3
 8003830:	4a08      	ldr	r2, [pc, #32]	@ (8003854 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003832:	440a      	add	r2, r1
 8003834:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3b08      	subs	r3, #8
 800383a:	4a04      	ldr	r2, [pc, #16]	@ (800384c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	3307      	adds	r3, #7
 8003844:	e7e8      	b.n	8003818 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003846:	bf00      	nop
 8003848:	40020407 	.word	0x40020407
 800384c:	cccccccd 	.word	0xcccccccd
 8003850:	40020880 	.word	0x40020880
 8003854:	4002081c 	.word	0x4002081c

08003858 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003858:	6843      	ldr	r3, [r0, #4]
 800385a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800385e:	4a07      	ldr	r2, [pc, #28]	@ (800387c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003860:	441a      	add	r2, r3
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003866:	4a06      	ldr	r2, [pc, #24]	@ (8003880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003868:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800386a:	3b01      	subs	r3, #1
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2201      	movs	r2, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	1000823f 	.word	0x1000823f
 8003880:	40020940 	.word	0x40020940

08003884 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003884:	2800      	cmp	r0, #0
 8003886:	d05e      	beq.n	8003946 <HAL_DMA_Init+0xc2>
{
 8003888:	b510      	push	{r4, lr}
 800388a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800388c:	6803      	ldr	r3, [r0, #0]
 800388e:	4a2f      	ldr	r2, [pc, #188]	@ (800394c <HAL_DMA_Init+0xc8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d840      	bhi.n	8003916 <HAL_DMA_Init+0x92>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003894:	4a2e      	ldr	r2, [pc, #184]	@ (8003950 <HAL_DMA_Init+0xcc>)
 8003896:	441a      	add	r2, r3
 8003898:	492e      	ldr	r1, [pc, #184]	@ (8003954 <HAL_DMA_Init+0xd0>)
 800389a:	fba1 1202 	umull	r1, r2, r1, r2
 800389e:	0912      	lsrs	r2, r2, #4
 80038a0:	0092      	lsls	r2, r2, #2
 80038a2:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <HAL_DMA_Init+0xd4>)
 80038a6:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80038a8:	2202      	movs	r2, #2
 80038aa:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f36f 120e 	bfc	r2, #4, #11
 80038b4:	601a      	str	r2, [r3, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	680a      	ldr	r2, [r1, #0]
 80038ba:	68a3      	ldr	r3, [r4, #8]
 80038bc:	68e0      	ldr	r0, [r4, #12]
 80038be:	4303      	orrs	r3, r0
 80038c0:	6920      	ldr	r0, [r4, #16]
 80038c2:	4303      	orrs	r3, r0
 80038c4:	6960      	ldr	r0, [r4, #20]
 80038c6:	4303      	orrs	r3, r0
 80038c8:	69a0      	ldr	r0, [r4, #24]
 80038ca:	4303      	orrs	r3, r0
 80038cc:	69e0      	ldr	r0, [r4, #28]
 80038ce:	4303      	orrs	r3, r0
 80038d0:	6a20      	ldr	r0, [r4, #32]
 80038d2:	4303      	orrs	r3, r0
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff ff8b 	bl	80037f4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e4:	d022      	beq.n	800392c <HAL_DMA_Init+0xa8>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038e6:	6863      	ldr	r3, [r4, #4]
 80038e8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80038ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ee:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80038f2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80038f4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038f6:	6863      	ldr	r3, [r4, #4]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d919      	bls.n	8003932 <HAL_DMA_Init+0xae>
    hdma->DMAmuxRequestGen = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003902:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003904:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003906:	2000      	movs	r0, #0
 8003908:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800390a:	2301      	movs	r3, #1
 800390c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003910:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8003914:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003916:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HAL_DMA_Init+0xd8>)
 8003918:	441a      	add	r2, r3
 800391a:	490e      	ldr	r1, [pc, #56]	@ (8003954 <HAL_DMA_Init+0xd0>)
 800391c:	fba1 1202 	umull	r1, r2, r1, r2
 8003920:	0912      	lsrs	r2, r2, #4
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003926:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <HAL_DMA_Init+0xdc>)
 8003928:	6402      	str	r2, [r0, #64]	@ 0x40
 800392a:	e7bd      	b.n	80038a8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800392c:	2300      	movs	r3, #0
 800392e:	6063      	str	r3, [r4, #4]
 8003930:	e7d9      	b.n	80038e6 <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff ff90 	bl	8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003938:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800393e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003940:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	e7df      	b.n	8003906 <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 8003946:	2001      	movs	r0, #1
}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40020407 	.word	0x40020407
 8003950:	bffdfff8 	.word	0xbffdfff8
 8003954:	cccccccd 	.word	0xcccccccd
 8003958:	40020000 	.word	0x40020000
 800395c:	bffdfbf8 	.word	0xbffdfbf8
 8003960:	40020400 	.word	0x40020400

08003964 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003964:	2800      	cmp	r0, #0
 8003966:	d04b      	beq.n	8003a00 <HAL_DMA_DeInit+0x9c>
{
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800396c:	6802      	ldr	r2, [r0, #0]
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003976:	6802      	ldr	r2, [r0, #0]
 8003978:	4b22      	ldr	r3, [pc, #136]	@ (8003a04 <HAL_DMA_DeInit+0xa0>)
 800397a:	429a      	cmp	r2, r3
 800397c:	d82c      	bhi.n	80039d8 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800397e:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <HAL_DMA_DeInit+0xa4>)
 8003980:	4413      	add	r3, r2
 8003982:	4922      	ldr	r1, [pc, #136]	@ (8003a0c <HAL_DMA_DeInit+0xa8>)
 8003984:	fba1 1303 	umull	r1, r3, r1, r3
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800398e:	4b20      	ldr	r3, [pc, #128]	@ (8003a10 <HAL_DMA_DeInit+0xac>)
 8003990:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8003992:	2500      	movs	r5, #0
 8003994:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003996:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003998:	f003 021c 	and.w	r2, r3, #28
 800399c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800399e:	2301      	movs	r3, #1
 80039a0:	4093      	lsls	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff ff25 	bl	80037f4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80039aa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80039ac:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80039b0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80039b2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d918      	bls.n	80039ee <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80039bc:	2000      	movs	r0, #0
 80039be:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80039c0:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80039c2:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 80039c4:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80039c6:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80039c8:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80039ca:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80039ce:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80039d2:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <HAL_DMA_DeInit+0xb0>)
 80039da:	4413      	add	r3, r2
 80039dc:	490b      	ldr	r1, [pc, #44]	@ (8003a0c <HAL_DMA_DeInit+0xa8>)
 80039de:	fba1 1303 	umull	r1, r3, r1, r3
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_DMA_DeInit+0xb4>)
 80039ea:	6403      	str	r3, [r0, #64]	@ 0x40
 80039ec:	e7d1      	b.n	8003992 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff ff32 	bl	8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039f6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039fa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	e7dd      	b.n	80039bc <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003a00:	2001      	movs	r0, #1
}
 8003a02:	4770      	bx	lr
 8003a04:	40020407 	.word	0x40020407
 8003a08:	bffdfff8 	.word	0xbffdfff8
 8003a0c:	cccccccd 	.word	0xcccccccd
 8003a10:	40020000 	.word	0x40020000
 8003a14:	bffdfbf8 	.word	0xbffdfbf8
 8003a18:	40020400 	.word	0x40020400

08003a1c <HAL_DMA_Start_IT>:
{
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003a20:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003a24:	2801      	cmp	r0, #1
 8003a26:	d043      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x94>
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003a2e:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003a32:	b2c0      	uxtb	r0, r0
 8003a34:	2801      	cmp	r0, #1
 8003a36:	d006      	beq.n	8003a46 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 8003a42:	2001      	movs	r0, #1
}
 8003a44:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a46:	2002      	movs	r0, #2
 8003a48:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	6828      	ldr	r0, [r5, #0]
 8003a54:	f020 0001 	bic.w	r0, r0, #1
 8003a58:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff fea2 	bl	80037a4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003a60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a62:	b1d3      	cbz	r3, 8003a9a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a64:	6822      	ldr	r2, [r4, #0]
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	f043 030e 	orr.w	r3, r3, #14
 8003a6c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003a76:	d003      	beq.n	8003a80 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003a80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a82:	b11b      	cbz	r3, 8003a8c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a8a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2000      	movs	r0, #0
 8003a98:	e7d4      	b.n	8003a44 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	f043 030a 	orr.w	r3, r3, #10
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e7de      	b.n	8003a6e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	e7c7      	b.n	8003a44 <HAL_DMA_Start_IT+0x28>

08003ab4 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d034      	beq.n	8003b24 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003aba:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	2a02      	cmp	r2, #2
 8003ac2:	d006      	beq.n	8003ad2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
 8003ad0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad2:	6801      	ldr	r1, [r0, #0]
 8003ad4:	680a      	ldr	r2, [r1, #0]
 8003ad6:	f022 020e 	bic.w	r2, r2, #14
 8003ada:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003adc:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003ade:	680a      	ldr	r2, [r1, #0]
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ae6:	6801      	ldr	r1, [r0, #0]
 8003ae8:	680a      	ldr	r2, [r1, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003af0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003af2:	f002 011c 	and.w	r1, r2, #28
 8003af6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003af8:	2201      	movs	r2, #1
 8003afa:	408a      	lsls	r2, r1
 8003afc:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003b02:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003b04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b06:	b132      	cbz	r2, 8003b16 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b08:	6811      	ldr	r1, [r2, #0]
 8003b0a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8003b0e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b12:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003b14:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8003b22:	4770      	bx	lr
    return HAL_ERROR;
 8003b24:	2001      	movs	r0, #1
}
 8003b26:	4770      	bx	lr

08003b28 <HAL_DMA_Abort_IT>:
{
 8003b28:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b2a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b34:	2304      	movs	r3, #4
 8003b36:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8003b38:	2001      	movs	r0, #1
}
 8003b3a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3c:	6802      	ldr	r2, [r0, #0]
 8003b3e:	6813      	ldr	r3, [r2, #0]
 8003b40:	f023 030e 	bic.w	r3, r3, #14
 8003b44:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b46:	6802      	ldr	r2, [r0, #0]
 8003b48:	6813      	ldr	r3, [r2, #0]
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b50:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b58:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b5a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003b5c:	f003 021c 	and.w	r2, r3, #28
 8003b60:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003b62:	2301      	movs	r3, #1
 8003b64:	4093      	lsls	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b68:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003b6a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003b6c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003b6e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003b70:	b133      	cbz	r3, 8003b80 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b78:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b7a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003b7c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003b7e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003b86:	2300      	movs	r3, #0
 8003b88:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8003b8c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003b8e:	b113      	cbz	r3, 8003b96 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003b90:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2000      	movs	r0, #0
 8003b94:	e7d1      	b.n	8003b3a <HAL_DMA_Abort_IT+0x12>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e7cf      	b.n	8003b3a <HAL_DMA_Abort_IT+0x12>
	...

08003b9c <HAL_DMA_IRQHandler>:
{
 8003b9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b9e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ba0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003ba2:	6804      	ldr	r4, [r0, #0]
 8003ba4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ba6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003ba8:	f003 031c 	and.w	r3, r3, #28
 8003bac:	2204      	movs	r2, #4
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	420a      	tst	r2, r1
 8003bb2:	d015      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x44>
 8003bb4:	f015 0f04 	tst.w	r5, #4
 8003bb8:	d012      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	f013 0f20 	tst.w	r3, #32
 8003bc0:	d103      	bne.n	8003bca <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003bcc:	f003 021c 	and.w	r2, r3, #28
 8003bd0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003bd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003bda:	b103      	cbz	r3, 8003bde <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003bdc:	4798      	blx	r3
}
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003be0:	2202      	movs	r2, #2
 8003be2:	409a      	lsls	r2, r3
 8003be4:	420a      	tst	r2, r1
 8003be6:	d028      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x9e>
 8003be8:	f015 0f02 	tst.w	r5, #2
 8003bec:	d025      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	f013 0f20 	tst.w	r3, #32
 8003bf4:	d106      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f023 030a 	bic.w	r3, r3, #10
 8003bfc:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003c04:	6802      	ldr	r2, [r0, #0]
 8003c06:	4b1c      	ldr	r3, [pc, #112]	@ (8003c78 <HAL_DMA_IRQHandler+0xdc>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d90e      	bls.n	8003c2a <HAL_DMA_IRQHandler+0x8e>
 8003c0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003c0e:	f003 021c 	and.w	r2, r3, #28
 8003c12:	2302      	movs	r3, #2
 8003c14:	4093      	lsls	r3, r2
 8003c16:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_DMA_IRQHandler+0xe0>)
 8003c18:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8003c20:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0db      	beq.n	8003bde <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003c26:	4798      	blx	r3
 8003c28:	e7d9      	b.n	8003bde <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003c2a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003c2c:	f003 021c 	and.w	r2, r3, #28
 8003c30:	2302      	movs	r3, #2
 8003c32:	4093      	lsls	r3, r2
 8003c34:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <HAL_DMA_IRQHandler+0xe4>)
 8003c36:	6053      	str	r3, [r2, #4]
 8003c38:	e7ef      	b.n	8003c1a <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	420b      	tst	r3, r1
 8003c42:	d0cc      	beq.n	8003bde <HAL_DMA_IRQHandler+0x42>
 8003c44:	f015 0f08 	tst.w	r5, #8
 8003c48:	d0c9      	beq.n	8003bde <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	f023 030e 	bic.w	r3, r3, #14
 8003c50:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c52:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003c54:	f003 031c 	and.w	r3, r3, #28
 8003c58:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c62:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003c64:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003c6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0b4      	beq.n	8003bde <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003c74:	4798      	blx	r3
  return;
 8003c76:	e7b2      	b.n	8003bde <HAL_DMA_IRQHandler+0x42>
 8003c78:	40020080 	.word	0x40020080
 8003c7c:	40020400 	.word	0x40020400
 8003c80:	40020000 	.word	0x40020000

08003c84 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003c84:	b178      	cbz	r0, 8003ca6 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003c86:	6803      	ldr	r3, [r0, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003c8a:	f011 0f10 	tst.w	r1, #16
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003c90:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8003c94:	d004      	beq.n	8003ca0 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003c96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003c9a:	601a      	str	r2, [r3, #0]
  return status;
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003ca0:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003ca4:	e7f9      	b.n	8003c9a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003ca6:	2001      	movs	r0, #1
}
 8003ca8:	4770      	bx	lr
	...

08003cac <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003cac:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003cae:	4c05      	ldr	r4, [pc, #20]	@ (8003cc4 <FLASH_Program_DoubleWord+0x18>)
 8003cb0:	6961      	ldr	r1, [r4, #20]
 8003cb2:	f041 0101 	orr.w	r1, r1, #1
 8003cb6:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003cb8:	6002      	str	r2, [r0, #0]
 8003cba:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003cbe:	6043      	str	r3, [r0, #4]
}
 8003cc0:	bc10      	pop	{r4}
 8003cc2:	4770      	bx	lr
 8003cc4:	58004000 	.word	0x58004000

08003cc8 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <FLASH_Program_Fast+0x34>)
 8003cca:	6953      	ldr	r3, [r2, #20]
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd6:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003cd8:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003cda:	f851 2b04 	ldr.w	r2, [r1], #4
 8003cde:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003ce2:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003ce4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8003ce8:	d1f7      	bne.n	8003cda <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003cea:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <FLASH_Program_Fast+0x34>)
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003cf2:	d1fa      	bne.n	8003cea <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	58004000 	.word	0x58004000

08003d00 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_FLASH_Unlock+0x28>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db01      	blt.n	8003d0c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2000      	movs	r0, #0
 8003d0a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d0c:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_FLASH_Unlock+0x28>)
 8003d0e:	4a07      	ldr	r2, [pc, #28]	@ (8003d2c <HAL_FLASH_Unlock+0x2c>)
 8003d10:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d12:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8003d16:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	db01      	blt.n	8003d22 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2000      	movs	r0, #0
 8003d20:	4770      	bx	lr
      status = HAL_ERROR;
 8003d22:	2001      	movs	r0, #1
}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	58004000 	.word	0x58004000
 8003d2c:	45670123 	.word	0x45670123

08003d30 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_FLASH_Lock+0x18>)
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d38:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db01      	blt.n	8003d44 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003d40:	2001      	movs	r0, #1
}
 8003d42:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2000      	movs	r0, #0
 8003d46:	4770      	bx	lr
 8003d48:	58004000 	.word	0x58004000

08003d4c <FLASH_WaitForLastOperation>:
{
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7fd fea0 	bl	8001a94 <HAL_GetTick>
 8003d54:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d56:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <FLASH_WaitForLastOperation+0x78>)
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003d5e:	d006      	beq.n	8003d6e <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003d60:	f7fd fe98 	bl	8001a94 <HAL_GetTick>
 8003d64:	1b00      	subs	r0, r0, r4
 8003d66:	42a8      	cmp	r0, r5
 8003d68:	d3f5      	bcc.n	8003d56 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003d6a:	2003      	movs	r0, #3
}
 8003d6c:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <FLASH_WaitForLastOperation+0x78>)
 8003d70:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003d72:	f013 0f01 	tst.w	r3, #1
 8003d76:	d115      	bne.n	8003da4 <FLASH_WaitForLastOperation+0x58>
  error &= FLASH_FLAG_SR_ERRORS;
 8003d78:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003d7c:	f023 0305 	bic.w	r3, r3, #5
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8003d84:	b10b      	cbz	r3, 8003d8a <FLASH_WaitForLastOperation+0x3e>
 8003d86:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc4 <FLASH_WaitForLastOperation+0x78>)
 8003d88:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003d8a:	b9ab      	cbnz	r3, 8003db8 <FLASH_WaitForLastOperation+0x6c>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <FLASH_WaitForLastOperation+0x78>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003d94:	d014      	beq.n	8003dc0 <FLASH_WaitForLastOperation+0x74>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003d96:	f7fd fe7d 	bl	8001a94 <HAL_GetTick>
 8003d9a:	1b00      	subs	r0, r0, r4
 8003d9c:	42a8      	cmp	r0, r5
 8003d9e:	d3f5      	bcc.n	8003d8c <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003da0:	2003      	movs	r0, #3
 8003da2:	e7e3      	b.n	8003d6c <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003da4:	4a07      	ldr	r2, [pc, #28]	@ (8003dc4 <FLASH_WaitForLastOperation+0x78>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003daa:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003dae:	f023 0305 	bic.w	r3, r3, #5
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8003db6:	e7e5      	b.n	8003d84 <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode = error;
 8003db8:	4a03      	ldr	r2, [pc, #12]	@ (8003dc8 <FLASH_WaitForLastOperation+0x7c>)
 8003dba:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e7d5      	b.n	8003d6c <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	e7d3      	b.n	8003d6c <FLASH_WaitForLastOperation+0x20>
 8003dc4:	58004000 	.word	0x58004000
 8003dc8:	200004c0 	.word	0x200004c0

08003dcc <HAL_FLASH_Program>:
{
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <HAL_FLASH_Program+0x5c>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d025      	beq.n	8003e24 <HAL_FLASH_Program+0x58>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	460d      	mov	r5, r1
 8003ddc:	4616      	mov	r6, r2
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <HAL_FLASH_Program+0x5c>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003de4:	2200      	movs	r2, #0
 8003de6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dec:	f7ff ffae 	bl	8003d4c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003df0:	b970      	cbnz	r0, 8003e10 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003df2:	2c01      	cmp	r4, #1
 8003df4:	d010      	beq.n	8003e18 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f7ff ff65 	bl	8003cc8 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e02:	f7ff ffa3 	bl	8003d4c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003e06:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <HAL_FLASH_Program+0x60>)
 8003e08:	6953      	ldr	r3, [r2, #20]
 8003e0a:	ea23 0304 	bic.w	r3, r3, r4
 8003e0e:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_FLASH_Program+0x5c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
}
 8003e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003e18:	4632      	mov	r2, r6
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f7ff ff45 	bl	8003cac <FLASH_Program_DoubleWord>
 8003e22:	e7ec      	b.n	8003dfe <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003e24:	2002      	movs	r0, #2
 8003e26:	e7f6      	b.n	8003e16 <HAL_FLASH_Program+0x4a>
 8003e28:	200004c0 	.word	0x200004c0
 8003e2c:	58004000 	.word	0x58004000

08003e30 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003e30:	4a03      	ldr	r2, [pc, #12]	@ (8003e40 <FLASH_MassErase+0x10>)
 8003e32:	6953      	ldr	r3, [r2, #20]
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	6153      	str	r3, [r2, #20]
#endif
}
 8003e3e:	4770      	bx	lr
 8003e40:	58004000 	.word	0x58004000

08003e44 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003e44:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <FLASH_FlushCaches+0x64>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d006      	beq.n	8003e5e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003e50:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <FLASH_FlushCaches+0x64>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d012      	beq.n	8003e82 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003e5c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <FLASH_FlushCaches+0x64>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e76:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e7e6      	b.n	8003e50 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <FLASH_FlushCaches+0x64>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e9a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	e7da      	b.n	8003e5c <FLASH_FlushCaches+0x18>
 8003ea6:	bf00      	nop
 8003ea8:	58004000 	.word	0x58004000

08003eac <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003eac:	4a03      	ldr	r2, [pc, #12]	@ (8003ebc <FLASH_AcknowledgePageErase+0x10>)
 8003eae:	6953      	ldr	r3, [r2, #20]
 8003eb0:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003eb4:	f023 0302 	bic.w	r3, r3, #2
 8003eb8:	6153      	str	r3, [r2, #20]
#endif
}
 8003eba:	4770      	bx	lr
 8003ebc:	58004000 	.word	0x58004000

08003ec0 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003ec0:	4a05      	ldr	r2, [pc, #20]	@ (8003ed8 <FLASH_PageErase+0x18>)
 8003ec2:	6953      	ldr	r3, [r2, #20]
 8003ec4:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003ec8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003ecc:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003ed0:	f040 0002 	orr.w	r0, r0, #2
 8003ed4:	6150      	str	r0, [r2, #20]
}
 8003ed6:	4770      	bx	lr
 8003ed8:	58004000 	.word	0x58004000

08003edc <HAL_FLASHEx_Erase>:
{
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003ede:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <HAL_FLASHEx_Erase+0x7c>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d035      	beq.n	8003f52 <HAL_FLASHEx_Erase+0x76>
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	460f      	mov	r7, r1
 8003eea:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_FLASHEx_Erase+0x7c>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ef4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ef8:	f7ff ff28 	bl	8003d4c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003efc:	4606      	mov	r6, r0
 8003efe:	bb18      	cbnz	r0, 8003f48 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d013      	beq.n	8003f2e <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003f0c:	686c      	ldr	r4, [r5, #4]
 8003f0e:	686b      	ldr	r3, [r5, #4]
 8003f10:	68aa      	ldr	r2, [r5, #8]
 8003f12:	4413      	add	r3, r2
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d913      	bls.n	8003f40 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7ff ffd1 	bl	8003ec0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f22:	f7ff ff13 	bl	8003d4c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003f26:	4606      	mov	r6, r0
 8003f28:	b948      	cbnz	r0, 8003f3e <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003f2a:	3401      	adds	r4, #1
 8003f2c:	e7ef      	b.n	8003f0e <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003f2e:	f7ff ff7f 	bl	8003e30 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f36:	f7ff ff09 	bl	8003d4c <FLASH_WaitForLastOperation>
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	e002      	b.n	8003f44 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003f3e:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003f40:	f7ff ffb4 	bl	8003eac <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003f44:	f7ff ff7e 	bl	8003e44 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_FLASHEx_Erase+0x7c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
}
 8003f4e:	4630      	mov	r0, r6
 8003f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003f52:	2602      	movs	r6, #2
 8003f54:	e7fb      	b.n	8003f4e <HAL_FLASHEx_Erase+0x72>
 8003f56:	bf00      	nop
 8003f58:	200004c0 	.word	0x200004c0

08003f5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003f5e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f60:	e069      	b.n	8004036 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f62:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f64:	005e      	lsls	r6, r3, #1
 8003f66:	2403      	movs	r4, #3
 8003f68:	40b4      	lsls	r4, r6
 8003f6a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6e:	68cc      	ldr	r4, [r1, #12]
 8003f70:	40b4      	lsls	r4, r6
 8003f72:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003f74:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f76:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f78:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f7c:	684c      	ldr	r4, [r1, #4]
 8003f7e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003f82:	409c      	lsls	r4, r3
 8003f84:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003f86:	6044      	str	r4, [r0, #4]
 8003f88:	e066      	b.n	8004058 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f8a:	08dd      	lsrs	r5, r3, #3
 8003f8c:	3508      	adds	r5, #8
 8003f8e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f92:	f003 0c07 	and.w	ip, r3, #7
 8003f96:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f9a:	f04f 0e0f 	mov.w	lr, #15
 8003f9e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003fa2:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fa6:	690c      	ldr	r4, [r1, #16]
 8003fa8:	fa04 f40c 	lsl.w	r4, r4, ip
 8003fac:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003fb0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003fb4:	e067      	b.n	8004086 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fb6:	2402      	movs	r4, #2
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_Init+0x60>
 8003fba:	2400      	movs	r4, #0
 8003fbc:	fa04 f40e 	lsl.w	r4, r4, lr
 8003fc0:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fc2:	f10c 0c02 	add.w	ip, ip, #2
 8003fc6:	4d4b      	ldr	r5, [pc, #300]	@ (80040f4 <HAL_GPIO_Init+0x198>)
 8003fc8:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fcc:	4c4a      	ldr	r4, [pc, #296]	@ (80040f8 <HAL_GPIO_Init+0x19c>)
 8003fce:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003fd0:	43d4      	mvns	r4, r2
 8003fd2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fd6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003fda:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8003fde:	d001      	beq.n	8003fe4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003fe0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003fe4:	4d44      	ldr	r5, [pc, #272]	@ (80040f8 <HAL_GPIO_Init+0x19c>)
 8003fe6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003fe8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003fea:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fee:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003ff2:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 8003ff6:	d001      	beq.n	8003ffc <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003ff8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003ffc:	4d3e      	ldr	r5, [pc, #248]	@ (80040f8 <HAL_GPIO_Init+0x19c>)
 8003ffe:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004000:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004004:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004008:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800400c:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8004010:	d001      	beq.n	8004016 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004012:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004016:	4d38      	ldr	r5, [pc, #224]	@ (80040f8 <HAL_GPIO_Init+0x19c>)
 8004018:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800401c:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004020:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004022:	684e      	ldr	r6, [r1, #4]
 8004024:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8004028:	d001      	beq.n	800402e <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800402a:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800402e:	4a32      	ldr	r2, [pc, #200]	@ (80040f8 <HAL_GPIO_Init+0x19c>)
 8004030:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004034:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004036:	680a      	ldr	r2, [r1, #0]
 8004038:	fa32 f403 	lsrs.w	r4, r2, r3
 800403c:	d058      	beq.n	80040f0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800403e:	f04f 0c01 	mov.w	ip, #1
 8004042:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004046:	ea1c 0202 	ands.w	r2, ip, r2
 800404a:	d0f3      	beq.n	8004034 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800404c:	684c      	ldr	r4, [r1, #4]
 800404e:	f004 0403 	and.w	r4, r4, #3
 8004052:	3c01      	subs	r4, #1
 8004054:	2c01      	cmp	r4, #1
 8004056:	d984      	bls.n	8003f62 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004058:	684c      	ldr	r4, [r1, #4]
 800405a:	f004 0403 	and.w	r4, r4, #3
 800405e:	2c03      	cmp	r4, #3
 8004060:	d00c      	beq.n	800407c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004062:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004064:	005d      	lsls	r5, r3, #1
 8004066:	f04f 0c03 	mov.w	ip, #3
 800406a:	fa0c fc05 	lsl.w	ip, ip, r5
 800406e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004072:	688c      	ldr	r4, [r1, #8]
 8004074:	40ac      	lsls	r4, r5
 8004076:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800407a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407c:	684c      	ldr	r4, [r1, #4]
 800407e:	f004 0403 	and.w	r4, r4, #3
 8004082:	2c02      	cmp	r4, #2
 8004084:	d081      	beq.n	8003f8a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004086:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004088:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800408c:	f04f 0c03 	mov.w	ip, #3
 8004090:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004094:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004098:	684c      	ldr	r4, [r1, #4]
 800409a:	f004 0403 	and.w	r4, r4, #3
 800409e:	fa04 f40e 	lsl.w	r4, r4, lr
 80040a2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80040a6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040a8:	684c      	ldr	r4, [r1, #4]
 80040aa:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80040ae:	d0c1      	beq.n	8004034 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80040b0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80040b4:	f10c 0502 	add.w	r5, ip, #2
 80040b8:	4c0e      	ldr	r4, [pc, #56]	@ (80040f4 <HAL_GPIO_Init+0x198>)
 80040ba:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80040be:	f003 0e03 	and.w	lr, r3, #3
 80040c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80040c6:	2407      	movs	r4, #7
 80040c8:	fa04 f40e 	lsl.w	r4, r4, lr
 80040cc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040d0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80040d4:	f43f af71 	beq.w	8003fba <HAL_GPIO_Init+0x5e>
 80040d8:	4c08      	ldr	r4, [pc, #32]	@ (80040fc <HAL_GPIO_Init+0x1a0>)
 80040da:	42a0      	cmp	r0, r4
 80040dc:	d006      	beq.n	80040ec <HAL_GPIO_Init+0x190>
 80040de:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80040e2:	42a0      	cmp	r0, r4
 80040e4:	f43f af67 	beq.w	8003fb6 <HAL_GPIO_Init+0x5a>
 80040e8:	2407      	movs	r4, #7
 80040ea:	e767      	b.n	8003fbc <HAL_GPIO_Init+0x60>
 80040ec:	2401      	movs	r4, #1
 80040ee:	e765      	b.n	8003fbc <HAL_GPIO_Init+0x60>
  }
}
 80040f0:	bd70      	pop	{r4, r5, r6, pc}
 80040f2:	bf00      	nop
 80040f4:	40010000 	.word	0x40010000
 80040f8:	58000800 	.word	0x58000800
 80040fc:	48000400 	.word	0x48000400

08004100 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004100:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004102:	fa31 f203 	lsrs.w	r2, r1, r3
 8004106:	d071      	beq.n	80041ec <HAL_GPIO_DeInit+0xec>
{
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410a:	e02e      	b.n	800416a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800410c:	2502      	movs	r5, #2
 800410e:	e000      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
 8004110:	2500      	movs	r5, #0
 8004112:	fa05 f50c 	lsl.w	r5, r5, ip
 8004116:	42a5      	cmp	r5, r4
 8004118:	d049      	beq.n	80041ae <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800411a:	6804      	ldr	r4, [r0, #0]
 800411c:	005d      	lsls	r5, r3, #1
 800411e:	f04f 0c03 	mov.w	ip, #3
 8004122:	fa0c fc05 	lsl.w	ip, ip, r5
 8004126:	ea44 040c 	orr.w	r4, r4, ip
 800412a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800412c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004130:	f10e 0e08 	add.w	lr, lr, #8
 8004134:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004138:	f003 0607 	and.w	r6, r3, #7
 800413c:	00b6      	lsls	r6, r6, #2
 800413e:	250f      	movs	r5, #15
 8004140:	40b5      	lsls	r5, r6
 8004142:	ea24 0405 	bic.w	r4, r4, r5
 8004146:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800414a:	6884      	ldr	r4, [r0, #8]
 800414c:	ea24 040c 	bic.w	r4, r4, ip
 8004150:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004152:	6844      	ldr	r4, [r0, #4]
 8004154:	ea24 0202 	bic.w	r2, r4, r2
 8004158:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800415a:	68c2      	ldr	r2, [r0, #12]
 800415c:	ea22 020c 	bic.w	r2, r2, ip
 8004160:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004162:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004164:	fa31 f203 	lsrs.w	r2, r1, r3
 8004168:	d03f      	beq.n	80041ea <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800416e:	ea12 0701 	ands.w	r7, r2, r1
 8004172:	d0f6      	beq.n	8004162 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004174:	089e      	lsrs	r6, r3, #2
 8004176:	1cb5      	adds	r5, r6, #2
 8004178:	4c1d      	ldr	r4, [pc, #116]	@ (80041f0 <HAL_GPIO_DeInit+0xf0>)
 800417a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800417e:	f003 0c03 	and.w	ip, r3, #3
 8004182:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004186:	f04f 0e07 	mov.w	lr, #7
 800418a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800418e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004192:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004196:	d0bb      	beq.n	8004110 <HAL_GPIO_DeInit+0x10>
 8004198:	4d16      	ldr	r5, [pc, #88]	@ (80041f4 <HAL_GPIO_DeInit+0xf4>)
 800419a:	42a8      	cmp	r0, r5
 800419c:	d005      	beq.n	80041aa <HAL_GPIO_DeInit+0xaa>
 800419e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80041a2:	42a8      	cmp	r0, r5
 80041a4:	d0b2      	beq.n	800410c <HAL_GPIO_DeInit+0xc>
 80041a6:	2507      	movs	r5, #7
 80041a8:	e7b3      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
 80041aa:	2501      	movs	r5, #1
 80041ac:	e7b1      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80041ae:	4c12      	ldr	r4, [pc, #72]	@ (80041f8 <HAL_GPIO_DeInit+0xf8>)
 80041b0:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 80041b4:	ea25 0507 	bic.w	r5, r5, r7
 80041b8:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80041bc:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 80041c0:	ea25 0507 	bic.w	r5, r5, r7
 80041c4:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	ea25 0507 	bic.w	r5, r5, r7
 80041ce:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80041d0:	6865      	ldr	r5, [r4, #4]
 80041d2:	ea25 0507 	bic.w	r5, r5, r7
 80041d6:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80041d8:	4d05      	ldr	r5, [pc, #20]	@ (80041f0 <HAL_GPIO_DeInit+0xf0>)
 80041da:	3602      	adds	r6, #2
 80041dc:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80041e0:	ea24 040e 	bic.w	r4, r4, lr
 80041e4:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80041e8:	e797      	b.n	800411a <HAL_GPIO_DeInit+0x1a>
  }
}
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	48000400 	.word	0x48000400
 80041f8:	58000800 	.word	0x58000800

080041fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041fc:	b10a      	cbz	r2, 8004202 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041fe:	6181      	str	r1, [r0, #24]
 8004200:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004202:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004204:	4770      	bx	lr

08004206 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004206:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004208:	ea01 0203 	and.w	r2, r1, r3
 800420c:	ea21 0103 	bic.w	r1, r1, r3
 8004210:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004214:	6181      	str	r1, [r0, #24]
}
 8004216:	4770      	bx	lr

08004218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004218:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800421a:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4203      	tst	r3, r0
 8004220:	d100      	bne.n	8004224 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004222:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004224:	4b02      	ldr	r3, [pc, #8]	@ (8004230 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004226:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004228:	f7fe fc1a 	bl	8002a60 <HAL_GPIO_EXTI_Callback>
}
 800422c:	e7f9      	b.n	8004222 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800422e:	bf00      	nop
 8004230:	58000800 	.word	0x58000800

08004234 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004234:	4a02      	ldr	r2, [pc, #8]	@ (8004240 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	4770      	bx	lr
 8004240:	58000400 	.word	0x58000400

08004244 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004244:	b510      	push	{r4, lr}
 8004246:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004248:	b9a0      	cbnz	r0, 8004274 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800424a:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <HAL_PWR_EnterSLEEPMode+0x44>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004252:	d10a      	bne.n	800426a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004254:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <HAL_PWR_EnterSLEEPMode+0x48>)
 8004256:	6913      	ldr	r3, [r2, #16]
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800425e:	2c01      	cmp	r4, #1
 8004260:	d010      	beq.n	8004284 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004262:	bf40      	sev
    __WFE();
 8004264:	bf20      	wfe
    __WFE();
 8004266:	bf20      	wfe
  }
}
 8004268:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800426a:	f000 f821 	bl	80042b0 <HAL_PWREx_DisableLowPowerRunMode>
 800426e:	2800      	cmp	r0, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_PWR_EnterSLEEPMode+0x10>
 8004272:	e7f9      	b.n	8004268 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004274:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800427c:	d1ea      	bne.n	8004254 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800427e:	f000 f80f 	bl	80042a0 <HAL_PWREx_EnableLowPowerRunMode>
 8004282:	e7e7      	b.n	8004254 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004284:	bf30      	wfi
 8004286:	e7ef      	b.n	8004268 <HAL_PWR_EnterSLEEPMode+0x24>
 8004288:	58000400 	.word	0x58000400
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004290:	4b02      	ldr	r3, [pc, #8]	@ (800429c <HAL_PWREx_GetVoltageRange+0xc>)
 8004292:	6818      	ldr	r0, [r3, #0]
}
 8004294:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	58000400 	.word	0x58000400

080042a0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80042a0:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	4770      	bx	lr
 80042ac:	58000400 	.word	0x58000400

080042b0 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80042b0:	4a0f      	ldr	r2, [pc, #60]	@ (80042f0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042b8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2232      	movs	r2, #50	@ 0x32
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	4a0c      	ldr	r2, [pc, #48]	@ (80042f8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042cc:	e000      	b.n	80042d0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80042ce:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042d0:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80042d2:	6952      	ldr	r2, [r2, #20]
 80042d4:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80042d8:	d001      	beq.n	80042de <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f7      	bne.n	80042ce <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80042de:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80042e6:	d101      	bne.n	80042ec <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80042e8:	2000      	movs	r0, #0
 80042ea:	4770      	bx	lr
    return HAL_TIMEOUT;
 80042ec:	2003      	movs	r0, #3
}
 80042ee:	4770      	bx	lr
 80042f0:	58000400 	.word	0x58000400
 80042f4:	20000074 	.word	0x20000074
 80042f8:	431bde83 	.word	0x431bde83

080042fc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80042fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	f023 0307 	bic.w	r3, r3, #7
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800430a:	4a0a      	ldr	r2, [pc, #40]	@ (8004334 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800430c:	6913      	ldr	r3, [r2, #16]
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004314:	2801      	cmp	r0, #1
 8004316:	d008      	beq.n	800432a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004318:	bf40      	sev
    __WFE();
 800431a:	bf20      	wfe
    __WFE();
 800431c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800431e:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004320:	6913      	ldr	r3, [r2, #16]
 8004322:	f023 0304 	bic.w	r3, r3, #4
 8004326:	6113      	str	r3, [r2, #16]
}
 8004328:	4770      	bx	lr
    __WFI();
 800432a:	bf30      	wfi
 800432c:	e7f7      	b.n	800431e <HAL_PWREx_EnterSTOP2Mode+0x22>
 800432e:	bf00      	nop
 8004330:	58000400 	.word	0x58000400
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004338:	b530      	push	{r4, r5, lr}
 800433a:	b089      	sub	sp, #36	@ 0x24
 800433c:	4604      	mov	r4, r0
 800433e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <RCC_SetFlashLatency+0xb4>)
 8004342:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004346:	9006      	str	r0, [sp, #24]
 8004348:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800434c:	f103 0208 	add.w	r2, r3, #8
 8004350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004354:	9004      	str	r0, [sp, #16]
 8004356:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800435a:	ad01      	add	r5, sp, #4
 800435c:	3310      	adds	r3, #16
 800435e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004362:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004366:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800436a:	d007      	beq.n	800437c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800436c:	2300      	movs	r3, #0
 800436e:	e014      	b.n	800439a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004370:	aa08      	add	r2, sp, #32
 8004372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004376:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800437a:	e01e      	b.n	80043ba <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800437c:	2300      	movs	r3, #0
 800437e:	2b02      	cmp	r3, #2
 8004380:	d808      	bhi.n	8004394 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004382:	aa08      	add	r2, sp, #32
 8004384:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004388:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800438c:	42a2      	cmp	r2, r4
 800438e:	d2ef      	bcs.n	8004370 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004390:	3301      	adds	r3, #1
 8004392:	e7f4      	b.n	800437e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004394:	2500      	movs	r5, #0
 8004396:	e010      	b.n	80043ba <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004398:	3301      	adds	r3, #1
 800439a:	2b02      	cmp	r3, #2
 800439c:	d80c      	bhi.n	80043b8 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800439e:	aa08      	add	r2, sp, #32
 80043a0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80043a4:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 80043a8:	42a2      	cmp	r2, r4
 80043aa:	d3f5      	bcc.n	8004398 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80043ac:	aa08      	add	r2, sp, #32
 80043ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80043b2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80043b6:	e000      	b.n	80043ba <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80043b8:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043ba:	4a0d      	ldr	r2, [pc, #52]	@ (80043f0 <RCC_SetFlashLatency+0xb8>)
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	f023 0307 	bic.w	r3, r3, #7
 80043c2:	432b      	orrs	r3, r5
 80043c4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043c6:	f7fd fb65 	bl	8001a94 <HAL_GetTick>
 80043ca:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80043cc:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <RCC_SetFlashLatency+0xb8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	42ab      	cmp	r3, r5
 80043d6:	d006      	beq.n	80043e6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80043d8:	f7fd fb5c 	bl	8001a94 <HAL_GetTick>
 80043dc:	1b00      	subs	r0, r0, r4
 80043de:	2802      	cmp	r0, #2
 80043e0:	d9f4      	bls.n	80043cc <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80043e2:	2003      	movs	r0, #3
 80043e4:	e000      	b.n	80043e8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80043e6:	2000      	movs	r0, #0
}
 80043e8:	b009      	add	sp, #36	@ 0x24
 80043ea:	bd30      	pop	{r4, r5, pc}
 80043ec:	08012478 	.word	0x08012478
 80043f0:	58004000 	.word	0x58004000

080043f4 <RCC_SetFlashLatencyFromMSIRange>:
{
 80043f4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80043f6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80043fa:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80043fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004404:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 800440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004412:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004416:	f7ff ff3b 	bl	8004290 <HAL_PWREx_GetVoltageRange>
 800441a:	4601      	mov	r1, r0
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800441e:	fba3 3404 	umull	r3, r4, r3, r4
 8004422:	0ca0      	lsrs	r0, r4, #18
 8004424:	f7ff ff88 	bl	8004338 <RCC_SetFlashLatency>
}
 8004428:	bd10      	pop	{r4, pc}
 800442a:	bf00      	nop
 800442c:	08012d3c 	.word	0x08012d3c
 8004430:	08012d9c 	.word	0x08012d9c
 8004434:	431bde83 	.word	0x431bde83

08004438 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800443c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004444:	f011 010c 	ands.w	r1, r1, #12
 8004448:	d00a      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x28>
 800444a:	290c      	cmp	r1, #12
 800444c:	d006      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800444e:	2904      	cmp	r1, #4
 8004450:	d047      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004452:	2908      	cmp	r1, #8
 8004454:	d03b      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004456:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004458:	4610      	mov	r0, r2
 800445a:	e026      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800445c:	2b01      	cmp	r3, #1
 800445e:	d1f6      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f013 0308 	ands.w	r3, r3, #8
 800446a:	d00d      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x50>
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f013 0308 	ands.w	r3, r3, #8
 8004476:	d124      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800447c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004480:	4a2e      	ldr	r2, [pc, #184]	@ (800453c <HAL_RCC_GetSysClockFreq+0x104>)
 8004482:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004486:	e00e      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	f012 0f08 	tst.w	r2, #8
 8004492:	d112      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80044a0:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_RCC_GetSysClockFreq+0x104>)
 80044a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044a6:	b1d1      	cbz	r1, 80044de <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 80044a8:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	d01a      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0xb6>
}
 80044b8:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80044ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	e7ee      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x68>
 80044c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c6:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80044c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044cc:	e7d8      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80044da:	4819      	ldr	r0, [pc, #100]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 80044dc:	e7e5      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80044de:	4610      	mov	r0, r2
 80044e0:	e7e3      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80044e2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80044e4:	4817      	ldr	r0, [pc, #92]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044e6:	e7e0      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80044e8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80044ea:	4816      	ldr	r0, [pc, #88]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ec:	e7dd      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d009      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0xd8>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d108      	bne.n	8004512 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800450a:	d115      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800450c:	4a0c      	ldr	r2, [pc, #48]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x108>)
 800450e:	e000      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8004510:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004516:	68cb      	ldr	r3, [r1, #12]
 8004518:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800451c:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004520:	68cb      	ldr	r3, [r1, #12]
 8004522:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004526:	3301      	adds	r3, #1
 8004528:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800452c:	68c8      	ldr	r0, [r1, #12]
 800452e:	0f40      	lsrs	r0, r0, #29
 8004530:	3001      	adds	r0, #1
 8004532:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004536:	e7bf      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x10c>)
 800453a:	e7ea      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0xda>
 800453c:	08012d3c 	.word	0x08012d3c
 8004540:	01e84800 	.word	0x01e84800
 8004544:	00f42400 	.word	0x00f42400

08004548 <HAL_RCC_GetHCLKFreq>:
{
 8004548:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800454a:	f7ff ff75 	bl	8004438 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004558:	4a02      	ldr	r2, [pc, #8]	@ (8004564 <HAL_RCC_GetHCLKFreq+0x1c>)
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800455e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004562:	bd08      	pop	{r3, pc}
 8004564:	08012d9c 	.word	0x08012d9c

08004568 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004568:	2800      	cmp	r0, #0
 800456a:	f000 8311 	beq.w	8004b90 <HAL_RCC_OscConfig+0x628>
{
 800456e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004570:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004576:	689d      	ldr	r5, [r3, #8]
 8004578:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800457c:	68de      	ldr	r6, [r3, #12]
 800457e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004582:	6803      	ldr	r3, [r0, #0]
 8004584:	f013 0f20 	tst.w	r3, #32
 8004588:	d02a      	beq.n	80045e0 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800458a:	2d00      	cmp	r5, #0
 800458c:	d065      	beq.n	800465a <HAL_RCC_OscConfig+0xf2>
 800458e:	2d0c      	cmp	r5, #12
 8004590:	d061      	beq.n	8004656 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004592:	6a23      	ldr	r3, [r4, #32]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80bf 	beq.w	8004718 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800459a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045a6:	f7fd fa75 	bl	8001a94 <HAL_GetTick>
 80045aa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f013 0f02 	tst.w	r3, #2
 80045b6:	f000 80a7 	beq.w	8004708 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	f042 0208 	orr.w	r2, r2, #8
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80045cc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80045da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80045de:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	f013 0f01 	tst.w	r3, #1
 80045e6:	f000 80b5 	beq.w	8004754 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80045ea:	2d08      	cmp	r5, #8
 80045ec:	f000 80ae 	beq.w	800474c <HAL_RCC_OscConfig+0x1e4>
 80045f0:	2d0c      	cmp	r5, #12
 80045f2:	f000 80a8 	beq.w	8004746 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80045f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004600:	68a1      	ldr	r1, [r4, #8]
 8004602:	430b      	orrs	r3, r1
 8004604:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460c:	f000 80c4 	beq.w	8004798 <HAL_RCC_OscConfig+0x230>
 8004610:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004614:	f000 80c5 	beq.w	80047a2 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004622:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800462a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80c2 	beq.w	80047b8 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8004634:	f7fd fa2e 	bl	8001a94 <HAL_GetTick>
 8004638:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800463a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004644:	f040 8086 	bne.w	8004754 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd fa24 	bl	8001a94 <HAL_GetTick>
 800464c:	1bc0      	subs	r0, r0, r7
 800464e:	2864      	cmp	r0, #100	@ 0x64
 8004650:	d9f3      	bls.n	800463a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8004652:	2003      	movs	r0, #3
 8004654:	e2a9      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004656:	2e01      	cmp	r6, #1
 8004658:	d19b      	bne.n	8004592 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800465a:	6a23      	ldr	r3, [r4, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8299 	beq.w	8004b94 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004662:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f013 0f08 	tst.w	r3, #8
 800466e:	d029      	beq.n	80046c4 <HAL_RCC_OscConfig+0x15c>
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800467a:	4298      	cmp	r0, r3
 800467c:	d92a      	bls.n	80046d4 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800467e:	f7ff feb9 	bl	80043f4 <RCC_SetFlashLatencyFromMSIRange>
 8004682:	2800      	cmp	r0, #0
 8004684:	f040 8288 	bne.w	8004b98 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	f042 0208 	orr.w	r2, r2, #8
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800469a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80046a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046ac:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046ae:	f7ff ff4b 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 80046b2:	4bba      	ldr	r3, [pc, #744]	@ (800499c <HAL_RCC_OscConfig+0x434>)
 80046b4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80046b6:	4bba      	ldr	r3, [pc, #744]	@ (80049a0 <HAL_RCC_OscConfig+0x438>)
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	f7fd f9e9 	bl	8001a90 <HAL_InitTick>
        if (status != HAL_OK)
 80046be:	2800      	cmp	r0, #0
 80046c0:	d08e      	beq.n	80045e0 <HAL_RCC_OscConfig+0x78>
 80046c2:	e272      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d2:	e7d2      	b.n	800467a <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80046e6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80046f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046f8:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80046fc:	f7ff fe7a 	bl	80043f4 <RCC_SetFlashLatencyFromMSIRange>
 8004700:	2800      	cmp	r0, #0
 8004702:	d0d4      	beq.n	80046ae <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8004704:	2001      	movs	r0, #1
 8004706:	e250      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004708:	f7fd f9c4 	bl	8001a94 <HAL_GetTick>
 800470c:	1bc0      	subs	r0, r0, r7
 800470e:	2802      	cmp	r0, #2
 8004710:	f67f af4c 	bls.w	80045ac <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004714:	2003      	movs	r0, #3
 8004716:	e248      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004724:	f7fd f9b6 	bl	8001a94 <HAL_GetTick>
 8004728:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f013 0f02 	tst.w	r3, #2
 8004734:	f43f af54 	beq.w	80045e0 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004738:	f7fd f9ac 	bl	8001a94 <HAL_GetTick>
 800473c:	1bc0      	subs	r0, r0, r7
 800473e:	2802      	cmp	r0, #2
 8004740:	d9f3      	bls.n	800472a <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8004742:	2003      	movs	r0, #3
 8004744:	e231      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004746:	2e03      	cmp	r6, #3
 8004748:	f47f af55 	bne.w	80045f6 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8224 	beq.w	8004b9c <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	f013 0f02 	tst.w	r3, #2
 800475a:	d056      	beq.n	800480a <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800475c:	2d04      	cmp	r5, #4
 800475e:	d03d      	beq.n	80047dc <HAL_RCC_OscConfig+0x274>
 8004760:	2d0c      	cmp	r5, #12
 8004762:	d039      	beq.n	80047d8 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 808a 	beq.w	8004880 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800476c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004770:	6813      	ldr	r3, [r2, #0]
 8004772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004776:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004778:	f7fd f98c 	bl	8001a94 <HAL_GetTick>
 800477c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004788:	d136      	bne.n	80047f8 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478a:	f7fd f983 	bl	8001a94 <HAL_GetTick>
 800478e:	1b80      	subs	r0, r0, r6
 8004790:	2802      	cmp	r0, #2
 8004792:	d9f4      	bls.n	800477e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004794:	2003      	movs	r0, #3
 8004796:	e208      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479e:	6013      	str	r3, [r2, #0]
}
 80047a0:	e744      	b.n	800462c <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80047ac:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	e739      	b.n	800462c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80047b8:	f7fd f96c 	bl	8001a94 <HAL_GetTick>
 80047bc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80047be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80047c8:	d0c4      	beq.n	8004754 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ca:	f7fd f963 	bl	8001a94 <HAL_GetTick>
 80047ce:	1bc0      	subs	r0, r0, r7
 80047d0:	2864      	cmp	r0, #100	@ 0x64
 80047d2:	d9f4      	bls.n	80047be <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80047d4:	2003      	movs	r0, #3
 80047d6:	e1e8      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047d8:	2e02      	cmp	r6, #2
 80047da:	d1c3      	bne.n	8004764 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 81de 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80047e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ea:	6853      	ldr	r3, [r2, #4]
 80047ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80047f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80047f4:	6053      	str	r3, [r2, #4]
}
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80047fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047fe:	6853      	ldr	r3, [r2, #4]
 8004800:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004804:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004808:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f013 0f08 	tst.w	r3, #8
 8004810:	d07e      	beq.n	8004910 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004812:	69a3      	ldr	r3, [r4, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d062      	beq.n	80048de <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004820:	69e1      	ldr	r1, [r4, #28]
 8004822:	f003 0210 	and.w	r2, r3, #16
 8004826:	4291      	cmp	r1, r2
 8004828:	d011      	beq.n	800484e <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	2a02      	cmp	r2, #2
 8004830:	f000 81b8 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004834:	f013 0f01 	tst.w	r3, #1
 8004838:	d138      	bne.n	80048ac <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800483a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800483e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	69e1      	ldr	r1, [r4, #28]
 8004848:	430b      	orrs	r3, r1
 800484a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800484e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004852:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800485e:	f7fd f919 	bl	8001a94 <HAL_GetTick>
 8004862:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486c:	f013 0f02 	tst.w	r3, #2
 8004870:	d14e      	bne.n	8004910 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004872:	f7fd f90f 	bl	8001a94 <HAL_GetTick>
 8004876:	1b80      	subs	r0, r0, r6
 8004878:	2811      	cmp	r0, #17
 800487a:	d9f3      	bls.n	8004864 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 800487c:	2003      	movs	r0, #3
 800487e:	e194      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800488a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800488c:	f7fd f902 	bl	8001a94 <HAL_GetTick>
 8004890:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800489c:	d0b5      	beq.n	800480a <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489e:	f7fd f8f9 	bl	8001a94 <HAL_GetTick>
 80048a2:	1b80      	subs	r0, r0, r6
 80048a4:	2802      	cmp	r0, #2
 80048a6:	d9f4      	bls.n	8004892 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80048a8:	2003      	movs	r0, #3
 80048aa:	e17e      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80048ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048b0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 80048bc:	f7fd f8ea 	bl	8001a94 <HAL_GetTick>
 80048c0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ca:	f013 0f02 	tst.w	r3, #2
 80048ce:	d0b4      	beq.n	800483a <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd f8e0 	bl	8001a94 <HAL_GetTick>
 80048d4:	1b80      	subs	r0, r0, r6
 80048d6:	2811      	cmp	r0, #17
 80048d8:	d9f3      	bls.n	80048c2 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80048da:	2003      	movs	r0, #3
 80048dc:	e165      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80048ee:	f7fd f8d1 	bl	8001a94 <HAL_GetTick>
 80048f2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048fc:	f013 0f02 	tst.w	r3, #2
 8004900:	d006      	beq.n	8004910 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004902:	f7fd f8c7 	bl	8001a94 <HAL_GetTick>
 8004906:	1b80      	subs	r0, r0, r6
 8004908:	2811      	cmp	r0, #17
 800490a:	d9f3      	bls.n	80048f4 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 800490c:	2003      	movs	r0, #3
 800490e:	e14c      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	f013 0f04 	tst.w	r3, #4
 8004916:	f000 80b8 	beq.w	8004a8a <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800491a:	4b22      	ldr	r3, [pc, #136]	@ (80049a4 <HAL_RCC_OscConfig+0x43c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004922:	d110      	bne.n	8004946 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8004924:	f7ff fc86 	bl	8004234 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004928:	f7fd f8b4 	bl	8001a94 <HAL_GetTick>
 800492c:	4606      	mov	r6, r0
 800492e:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_RCC_OscConfig+0x43c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004938:	f7fd f8ac 	bl	8001a94 <HAL_GetTick>
 800493c:	1b80      	subs	r0, r0, r6
 800493e:	2802      	cmp	r0, #2
 8004940:	d9f5      	bls.n	800492e <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8004942:	2003      	movs	r0, #3
 8004944:	e131      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d068      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800494c:	2b85      	cmp	r3, #133	@ 0x85
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004950:	2b05      	cmp	r3, #5
 8004952:	d107      	bne.n	8004964 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004954:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004958:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800495c:	f043 0304 	orr.w	r3, r3, #4
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004964:	f7fd f896 	bl	8001a94 <HAL_GetTick>
 8004968:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800496a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800496e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	f013 0f02 	tst.w	r3, #2
 8004986:	d10f      	bne.n	80049a8 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fd f884 	bl	8001a94 <HAL_GetTick>
 800498c:	1b80      	subs	r0, r0, r6
 800498e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004992:	4298      	cmp	r0, r3
 8004994:	d9f1      	bls.n	800497a <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8004996:	2003      	movs	r0, #3
 8004998:	e107      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
 800499a:	bf00      	nop
 800499c:	20000074 	.word	0x20000074
 80049a0:	20000078 	.word	0x20000078
 80049a4:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80049a8:	68e3      	ldr	r3, [r4, #12]
 80049aa:	2b81      	cmp	r3, #129	@ 0x81
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80049ae:	2b85      	cmp	r3, #133	@ 0x85
 80049b0:	d11a      	bne.n	80049e8 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 80049b2:	f7fd f86f 	bl	8001a94 <HAL_GetTick>
 80049b6:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80049c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80049d4:	d159      	bne.n	8004a8a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fd f85d 	bl	8001a94 <HAL_GetTick>
 80049da:	1b80      	subs	r0, r0, r6
 80049dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049e0:	4298      	cmp	r0, r3
 80049e2:	d9f1      	bls.n	80049c8 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80049e4:	2003      	movs	r0, #3
 80049e6:	e0e0      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80049e8:	f7fd f854 	bl	8001a94 <HAL_GetTick>
 80049ec:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80049f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004a0a:	d03e      	beq.n	8004a8a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd f842 	bl	8001a94 <HAL_GetTick>
 8004a10:	1b80      	subs	r0, r0, r6
 8004a12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a16:	4298      	cmp	r0, r3
 8004a18:	d9f1      	bls.n	80049fe <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8004a1a:	2003      	movs	r0, #3
 8004a1c:	e0c5      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004a1e:	f7fd f839 	bl	8001a94 <HAL_GetTick>
 8004a22:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a28:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004a40:	d008      	beq.n	8004a54 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd f827 	bl	8001a94 <HAL_GetTick>
 8004a46:	1b80      	subs	r0, r0, r6
 8004a48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a4c:	4298      	cmp	r0, r3
 8004a4e:	d9f1      	bls.n	8004a34 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8004a50:	2003      	movs	r0, #3
 8004a52:	e0aa      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004a54:	f7fd f81e 	bl	8001a94 <HAL_GetTick>
 8004a58:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f013 0f02 	tst.w	r3, #2
 8004a76:	d008      	beq.n	8004a8a <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fd f80c 	bl	8001a94 <HAL_GetTick>
 8004a7c:	1b80      	subs	r0, r0, r6
 8004a7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a82:	4298      	cmp	r0, r3
 8004a84:	d9f1      	bls.n	8004a6a <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8004a86:	2003      	movs	r0, #3
 8004a88:	e08f      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 808b 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a92:	2d0c      	cmp	r5, #12
 8004a94:	d060      	beq.n	8004b58 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004aa6:	f7fc fff5 	bl	8001a94 <HAL_GetTick>
 8004aaa:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004ab6:	d148      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004abc:	68d1      	ldr	r1, [r2, #12]
 8004abe:	4b41      	ldr	r3, [pc, #260]	@ (8004bc4 <HAL_RCC_OscConfig+0x65c>)
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e070      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004ac8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004acc:	6813      	ldr	r3, [r2, #0]
 8004ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ad4:	f7fc ffde 	bl	8001a94 <HAL_GetTick>
 8004ad8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004ae4:	d12a      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aea:	68d3      	ldr	r3, [r2, #12]
 8004aec:	4936      	ldr	r1, [pc, #216]	@ (8004bc8 <HAL_RCC_OscConfig+0x660>)
 8004aee:	4019      	ands	r1, r3
 8004af0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004af2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004af4:	4303      	orrs	r3, r0
 8004af6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004af8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004afc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004afe:	4303      	orrs	r3, r0
 8004b00:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004b02:	4303      	orrs	r3, r0
 8004b04:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004b06:	4303      	orrs	r3, r0
 8004b08:	4319      	orrs	r1, r3
 8004b0a:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b12:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b14:	68d3      	ldr	r3, [r2, #12]
 8004b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004b1c:	f7fc ffba 	bl	8001a94 <HAL_GetTick>
 8004b20:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004b2c:	d13e      	bne.n	8004bac <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fc ffb1 	bl	8001a94 <HAL_GetTick>
 8004b32:	1b00      	subs	r0, r0, r4
 8004b34:	280a      	cmp	r0, #10
 8004b36:	d9f4      	bls.n	8004b22 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8004b38:	2003      	movs	r0, #3
 8004b3a:	e036      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc ffaa 	bl	8001a94 <HAL_GetTick>
 8004b40:	1b40      	subs	r0, r0, r5
 8004b42:	280a      	cmp	r0, #10
 8004b44:	d9c9      	bls.n	8004ada <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8004b46:	2003      	movs	r0, #3
 8004b48:	e02f      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4a:	f7fc ffa3 	bl	8001a94 <HAL_GetTick>
 8004b4e:	1b00      	subs	r0, r0, r4
 8004b50:	280a      	cmp	r0, #10
 8004b52:	d9ab      	bls.n	8004aac <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8004b54:	2003      	movs	r0, #3
 8004b56:	e028      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d029      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b60:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004b62:	f003 0103 	and.w	r1, r3, #3
 8004b66:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004b68:	4291      	cmp	r1, r2
 8004b6a:	d123      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004b6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b72:	428a      	cmp	r2, r1
 8004b74:	d120      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004b76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b7a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004b7c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004b82:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8004b86:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d119      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e00c      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8004b90:	2001      	movs	r0, #1
}
 8004b92:	4770      	bx	lr
        return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8004b98:	2001      	movs	r0, #1
 8004b9a:	e006      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e004      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	e002      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8004ba8:	2000      	movs	r0, #0
}
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7fc      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	e7fa      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	e7f8      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
 8004bb8:	2001      	movs	r0, #1
 8004bba:	e7f6      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e7f4      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	e7f2      	b.n	8004baa <HAL_RCC_OscConfig+0x642>
 8004bc4:	eefefffc 	.word	0xeefefffc
 8004bc8:	11c1808c 	.word	0x11c1808c

08004bcc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f000 8127 	beq.w	8004e20 <HAL_RCC_ClockConfig+0x254>
{
 8004bd2:	b570      	push	{r4, r5, r6, lr}
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b93      	ldr	r3, [pc, #588]	@ (8004e28 <HAL_RCC_ClockConfig+0x25c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d32d      	bcc.n	8004c40 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	f013 0f02 	tst.w	r3, #2
 8004bea:	d13f      	bne.n	8004c6c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	f013 0f20 	tst.w	r3, #32
 8004bf2:	d153      	bne.n	8004c9c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004bfa:	d16a      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	f013 0f04 	tst.w	r3, #4
 8004c02:	f040 8083 	bne.w	8004d0c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	682b      	ldr	r3, [r5, #0]
 8004c08:	f013 0f08 	tst.w	r3, #8
 8004c0c:	f040 8097 	bne.w	8004d3e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	f013 0f01 	tst.w	r3, #1
 8004c16:	f000 80de 	beq.w	8004dd6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1a:	686b      	ldr	r3, [r5, #4]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	f000 80a8 	beq.w	8004d72 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	f000 80ad 	beq.w	8004d82 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 80b2 	bne.w	8004d92 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	f012 0f02 	tst.w	r2, #2
 8004c38:	f040 80b1 	bne.w	8004d9e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	e0ee      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c40:	4a79      	ldr	r2, [pc, #484]	@ (8004e28 <HAL_RCC_ClockConfig+0x25c>)
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	f023 0307 	bic.w	r3, r3, #7
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c4c:	f7fc ff22 	bl	8001a94 <HAL_GetTick>
 8004c50:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b75      	ldr	r3, [pc, #468]	@ (8004e28 <HAL_RCC_ClockConfig+0x25c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	d0c2      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c5e:	f7fc ff19 	bl	8001a94 <HAL_GetTick>
 8004c62:	1b80      	subs	r0, r0, r6
 8004c64:	2802      	cmp	r0, #2
 8004c66:	d9f4      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004c68:	2003      	movs	r0, #3
 8004c6a:	e0d8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c72:	688a      	ldr	r2, [r1, #8]
 8004c74:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004c7c:	f7fc ff0a 	bl	8001a94 <HAL_GetTick>
 8004c80:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004c8c:	d1ae      	bne.n	8004bec <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c8e:	f7fc ff01 	bl	8001a94 <HAL_GetTick>
 8004c92:	1b80      	subs	r0, r0, r6
 8004c94:	2802      	cmp	r0, #2
 8004c96:	d9f4      	bls.n	8004c82 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004c98:	2003      	movs	r0, #3
 8004c9a:	e0c0      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c9c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ca2:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8004ca6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8004cb0:	f7fc fef0 	bl	8001a94 <HAL_GetTick>
 8004cb4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004cbe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004cc2:	d197      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cc4:	f7fc fee6 	bl	8001a94 <HAL_GetTick>
 8004cc8:	1b80      	subs	r0, r0, r6
 8004cca:	2802      	cmp	r0, #2
 8004ccc:	d9f3      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004cce:	2003      	movs	r0, #3
 8004cd0:	e0a5      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004cd2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004cd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cd8:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8004cdc:	f023 030f 	bic.w	r3, r3, #15
 8004ce0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004ce4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8004ce8:	f7fc fed4 	bl	8001a94 <HAL_GetTick>
 8004cec:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004cf6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004cfa:	f47f af7f 	bne.w	8004bfc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cfe:	f7fc fec9 	bl	8001a94 <HAL_GetTick>
 8004d02:	1b80      	subs	r0, r0, r6
 8004d04:	2802      	cmp	r0, #2
 8004d06:	d9f2      	bls.n	8004cee <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004d08:	2003      	movs	r0, #3
 8004d0a:	e088      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d0c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d12:	688a      	ldr	r2, [r1, #8]
 8004d14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004d1c:	f7fc feba 	bl	8001a94 <HAL_GetTick>
 8004d20:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004d2c:	f47f af6b 	bne.w	8004c06 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d30:	f7fc feb0 	bl	8001a94 <HAL_GetTick>
 8004d34:	1b80      	subs	r0, r0, r6
 8004d36:	2802      	cmp	r0, #2
 8004d38:	d9f3      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004d3a:	2003      	movs	r0, #3
 8004d3c:	e06f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d3e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d44:	6893      	ldr	r3, [r2, #8]
 8004d46:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004d4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d4e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004d50:	f7fc fea0 	bl	8001a94 <HAL_GetTick>
 8004d54:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004d60:	f47f af56 	bne.w	8004c10 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d64:	f7fc fe96 	bl	8001a94 <HAL_GetTick>
 8004d68:	1b80      	subs	r0, r0, r6
 8004d6a:	2802      	cmp	r0, #2
 8004d6c:	d9f3      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004d6e:	2003      	movs	r0, #3
 8004d70:	e055      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004d7c:	d10f      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e04d      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
 8004d90:	e045      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004d9c:	d042      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004da2:	688a      	ldr	r2, [r1, #8]
 8004da4:	f022 0203 	bic.w	r2, r2, #3
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004dac:	f7fc fe72 	bl	8001a94 <HAL_GetTick>
 8004db0:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbc:	686a      	ldr	r2, [r5, #4]
 8004dbe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc4:	f7fc fe66 	bl	8001a94 <HAL_GetTick>
 8004dc8:	1b80      	subs	r0, r0, r6
 8004dca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	d9ef      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004dd2:	2003      	movs	r0, #3
 8004dd4:	e023      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd6:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <HAL_RCC_ClockConfig+0x25c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	d915      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4a11      	ldr	r2, [pc, #68]	@ (8004e28 <HAL_RCC_ClockConfig+0x25c>)
 8004de4:	6813      	ldr	r3, [r2, #0]
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	4323      	orrs	r3, r4
 8004dec:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004dee:	f7fc fe51 	bl	8001a94 <HAL_GetTick>
 8004df2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <HAL_RCC_ClockConfig+0x25c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d006      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e00:	f7fc fe48 	bl	8001a94 <HAL_GetTick>
 8004e04:	1b40      	subs	r0, r0, r5
 8004e06:	2802      	cmp	r0, #2
 8004e08:	d9f4      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	e007      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e0e:	f7ff fb9b 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004e12:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <HAL_RCC_ClockConfig+0x260>)
 8004e14:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_RCC_ClockConfig+0x264>)
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	f7fc fe39 	bl	8001a90 <HAL_InitTick>
}
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004e20:	2001      	movs	r0, #1
}
 8004e22:	4770      	bx	lr
        return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
 8004e26:	e7fa      	b.n	8004e1e <HAL_RCC_ClockConfig+0x252>
 8004e28:	58004000 	.word	0x58004000
 8004e2c:	20000074 	.word	0x20000074
 8004e30:	20000078 	.word	0x20000078

08004e34 <HAL_RCC_GetPCLK1Freq>:
{
 8004e34:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e36:	f7ff fb87 	bl	8004548 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004e44:	4a02      	ldr	r2, [pc, #8]	@ (8004e50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004e4a:	40d8      	lsrs	r0, r3
 8004e4c:	bd08      	pop	{r3, pc}
 8004e4e:	bf00      	nop
 8004e50:	08012d7c 	.word	0x08012d7c

08004e54 <HAL_RCC_GetPCLK2Freq>:
{
 8004e54:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e56:	f7ff fb77 	bl	8004548 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004e64:	4a02      	ldr	r2, [pc, #8]	@ (8004e70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004e6a:	40d8      	lsrs	r0, r3
 8004e6c:	bd08      	pop	{r3, pc}
 8004e6e:	bf00      	nop
 8004e70:	08012d7c 	.word	0x08012d7c

08004e74 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e78:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004e7c:	0902      	lsrs	r2, r0, #4
 8004e7e:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8004e82:	ea23 0302 	bic.w	r3, r3, r2
 8004e86:	0100      	lsls	r0, r0, #4
 8004e88:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8004e8c:	4303      	orrs	r3, r0
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e92:	4770      	bx	lr

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e98:	6803      	ldr	r3, [r0, #0]
 8004e9a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004e9e:	f040 80aa 	bne.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ea2:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f013 0f01 	tst.w	r3, #1
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eac:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eb2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004eb6:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	f013 0f02 	tst.w	r3, #2
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eca:	68a2      	ldr	r2, [r4, #8]
 8004ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ed0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004ed4:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	f013 0f20 	tst.w	r3, #32
 8004ee6:	d009      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004ef2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004f02:	d00c      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f04:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f0e:	0c08      	lsrs	r0, r1, #16
 8004f10:	0400      	lsls	r0, r0, #16
 8004f12:	ea23 0300 	bic.w	r3, r3, r0
 8004f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004f1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004f24:	d00c      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f26:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f30:	0c08      	lsrs	r0, r1, #16
 8004f32:	0400      	lsls	r0, r0, #16
 8004f34:	ea23 0300 	bic.w	r3, r3, r0
 8004f38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004f46:	d00c      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004f48:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f52:	0c08      	lsrs	r0, r1, #16
 8004f54:	0400      	lsls	r0, r0, #16
 8004f56:	ea23 0300 	bic.w	r3, r3, r0
 8004f5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004f5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004f68:	f040 809b 	bne.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f72:	f040 809a 	bne.w	80050aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004f7c:	f040 8099 	bne.w	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f013 0f10 	tst.w	r3, #16
 8004f86:	d00e      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f88:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004f92:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004f9c:	68e3      	ldr	r3, [r4, #12]
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa2:	f000 808a 	beq.w	80050ba <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004fac:	d00f      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004fb8:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004fc4:	b91b      	cbnz	r3, 8004fce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004fc6:	68cb      	ldr	r3, [r1, #12]
 8004fc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fcc:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004fd4:	d00d      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004fe0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004fea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff0:	d068      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004ff6:	f7ff f91d 	bl	8004234 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004ffa:	f7fc fd4b 	bl	8001a94 <HAL_GetTick>
 8004ffe:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005000:	4b33      	ldr	r3, [pc, #204]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005008:	d106      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500a:	f7fc fd43 	bl	8001a94 <HAL_GetTick>
 800500e:	1b40      	subs	r0, r0, r5
 8005010:	2802      	cmp	r0, #2
 8005012:	d9f5      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8005014:	2503      	movs	r5, #3
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005018:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800501a:	2d00      	cmp	r5, #0
 800501c:	f47f af42 	bne.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800502c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800502e:	429a      	cmp	r2, r3
 8005030:	d016      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005036:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800503a:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800503e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005042:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800504a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800504e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8005056:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800505a:	f011 0f02 	tst.w	r1, #2
 800505e:	d10d      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      if (ret == HAL_OK)
 8005060:	2d00      	cmp	r5, #0
 8005062:	f47f af1f 	bne.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005066:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800506c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005070:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800507a:	e713      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        tickstart = HAL_GetTick();
 800507c:	f7fc fd0a 	bl	8001a94 <HAL_GetTick>
 8005080:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508a:	f013 0f02 	tst.w	r3, #2
 800508e:	d1e7      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc fd00 	bl	8001a94 <HAL_GetTick>
 8005094:	1b83      	subs	r3, r0, r6
 8005096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d9f1      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            ret = HAL_TIMEOUT;
 800509e:	2503      	movs	r5, #3
 80050a0:	e7de      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a2:	6960      	ldr	r0, [r4, #20]
 80050a4:	f7ff fee6 	bl	8004e74 <LL_RCC_SetI2CClockSource>
 80050a8:	e760      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050aa:	69a0      	ldr	r0, [r4, #24]
 80050ac:	f7ff fee2 	bl	8004e74 <LL_RCC_SetI2CClockSource>
 80050b0:	e761      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b2:	69e0      	ldr	r0, [r4, #28]
 80050b4:	f7ff fede 	bl	8004e74 <LL_RCC_SetI2CClockSource>
 80050b8:	e762      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80050ba:	68cb      	ldr	r3, [r1, #12]
 80050bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c0:	60cb      	str	r3, [r1, #12]
 80050c2:	e770      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050c4:	68cb      	ldr	r3, [r1, #12]
 80050c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ca:	60cb      	str	r3, [r1, #12]
 80050cc:	e791      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050ce:	bf00      	nop
 80050d0:	58000400 	.word	0x58000400

080050d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80050d4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050d6:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 80050da:	2a01      	cmp	r2, #1
 80050dc:	d035      	beq.n	800514a <HAL_RTC_DeactivateAlarm+0x76>
 80050de:	2201      	movs	r2, #1
 80050e0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050e4:	2202      	movs	r2, #2
 80050e6:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ea:	4a19      	ldr	r2, [pc, #100]	@ (8005150 <HAL_RTC_DeactivateAlarm+0x7c>)
 80050ec:	20ca      	movs	r0, #202	@ 0xca
 80050ee:	6250      	str	r0, [r2, #36]	@ 0x24
 80050f0:	2053      	movs	r0, #83	@ 0x53
 80050f2:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80050f4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80050f8:	d018      	beq.n	800512c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80050fa:	4a15      	ldr	r2, [pc, #84]	@ (8005150 <HAL_RTC_DeactivateAlarm+0x7c>)
 80050fc:	6991      	ldr	r1, [r2, #24]
 80050fe:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 8005102:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005104:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8005106:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800510a:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800510c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800510e:	f021 0102 	bic.w	r1, r1, #2
 8005112:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005114:	2102      	movs	r1, #2
 8005116:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005118:	4a0d      	ldr	r2, [pc, #52]	@ (8005150 <HAL_RTC_DeactivateAlarm+0x7c>)
 800511a:	21ff      	movs	r1, #255	@ 0xff
 800511c:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800511e:	2201      	movs	r2, #1
 8005120:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005124:	2000      	movs	r0, #0
 8005126:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 800512a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800512c:	6991      	ldr	r1, [r2, #24]
 800512e:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8005132:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005134:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005136:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800513a:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800513c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800513e:	f021 0101 	bic.w	r1, r1, #1
 8005142:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005144:	2101      	movs	r1, #1
 8005146:	65d1      	str	r1, [r2, #92]	@ 0x5c
 8005148:	e7e6      	b.n	8005118 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800514a:	2002      	movs	r0, #2
}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40002800 	.word	0x40002800

08005154 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005158:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800515a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800515c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800515e:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005160:	f015 0f01 	tst.w	r5, #1
 8005164:	d106      	bne.n	8005174 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005166:	f015 0f02 	tst.w	r5, #2
 800516a:	d109      	bne.n	8005180 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800516c:	2301      	movs	r3, #1
 800516e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005172:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005174:	4b06      	ldr	r3, [pc, #24]	@ (8005190 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005176:	2201      	movs	r2, #1
 8005178:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800517a:	f7fc fe7f 	bl	8001e7c <HAL_RTC_AlarmAEventCallback>
 800517e:	e7f2      	b.n	8005166 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005180:	4b03      	ldr	r3, [pc, #12]	@ (8005190 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005182:	2202      	movs	r2, #2
 8005184:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f9ee 	bl	8005568 <HAL_RTCEx_AlarmBEventCallback>
 800518c:	e7ee      	b.n	800516c <HAL_RTC_AlarmIRQHandler+0x18>
 800518e:	bf00      	nop
 8005190:	40002800 	.word	0x40002800

08005194 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005194:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005196:	4a0b      	ldr	r2, [pc, #44]	@ (80051c4 <HAL_RTC_WaitForSynchro+0x30>)
 8005198:	68d3      	ldr	r3, [r2, #12]
 800519a:	f023 0320 	bic.w	r3, r3, #32
 800519e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80051a0:	f7fc fc78 	bl	8001a94 <HAL_GetTick>
 80051a4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80051a6:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <HAL_RTC_WaitForSynchro+0x30>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f013 0f20 	tst.w	r3, #32
 80051ae:	d107      	bne.n	80051c0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051b0:	f7fc fc70 	bl	8001a94 <HAL_GetTick>
 80051b4:	1b00      	subs	r0, r0, r4
 80051b6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80051ba:	d9f4      	bls.n	80051a6 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80051bc:	2003      	movs	r0, #3
 80051be:	e000      	b.n	80051c2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80051c0:	2000      	movs	r0, #0
}
 80051c2:	bd10      	pop	{r4, pc}
 80051c4:	40002800 	.word	0x40002800

080051c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <RTC_EnterInitMode+0x48>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051d2:	d002      	beq.n	80051da <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80051d4:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80051d6:	4620      	mov	r0, r4
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80051dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005210 <RTC_EnterInitMode+0x48>)
 80051de:	68d3      	ldr	r3, [r2, #12]
 80051e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80051e6:	f7fc fc55 	bl	8001a94 <HAL_GetTick>
 80051ea:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051ee:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <RTC_EnterInitMode+0x48>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051f6:	d1ee      	bne.n	80051d6 <RTC_EnterInitMode+0xe>
 80051f8:	2c03      	cmp	r4, #3
 80051fa:	d0ec      	beq.n	80051d6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80051fc:	f7fc fc4a 	bl	8001a94 <HAL_GetTick>
 8005200:	1b43      	subs	r3, r0, r5
 8005202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005206:	d9f2      	bls.n	80051ee <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005208:	2403      	movs	r4, #3
 800520a:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 800520e:	e7ee      	b.n	80051ee <RTC_EnterInitMode+0x26>
 8005210:	40002800 	.word	0x40002800

08005214 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005214:	b510      	push	{r4, lr}
 8005216:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005218:	4b10      	ldr	r3, [pc, #64]	@ (800525c <RTC_ExitInitMode+0x48>)
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005220:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f013 0f20 	tst.w	r3, #32
 8005228:	d106      	bne.n	8005238 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800522a:	f7ff ffb3 	bl	8005194 <HAL_RTC_WaitForSynchro>
 800522e:	b198      	cbz	r0, 8005258 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005230:	2003      	movs	r0, #3
 8005232:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005236:	e00f      	b.n	8005258 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005238:	4a08      	ldr	r2, [pc, #32]	@ (800525c <RTC_ExitInitMode+0x48>)
 800523a:	6993      	ldr	r3, [r2, #24]
 800523c:	f023 0320 	bic.w	r3, r3, #32
 8005240:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005242:	f7ff ffa7 	bl	8005194 <HAL_RTC_WaitForSynchro>
 8005246:	b110      	cbz	r0, 800524e <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005248:	2003      	movs	r0, #3
 800524a:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800524e:	4a03      	ldr	r2, [pc, #12]	@ (800525c <RTC_ExitInitMode+0x48>)
 8005250:	6993      	ldr	r3, [r2, #24]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8005258:	bd10      	pop	{r4, pc}
 800525a:	bf00      	nop
 800525c:	40002800 	.word	0x40002800

08005260 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005260:	2800      	cmp	r0, #0
 8005262:	d055      	beq.n	8005310 <HAL_RTC_Init+0xb0>
{
 8005264:	b510      	push	{r4, lr}
 8005266:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005268:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800526c:	b163      	cbz	r3, 8005288 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800526e:	2302      	movs	r3, #2
 8005270:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005274:	4b27      	ldr	r3, [pc, #156]	@ (8005314 <HAL_RTC_Init+0xb4>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f013 0f10 	tst.w	r3, #16
 800527c:	d009      	beq.n	8005292 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 800527e:	2301      	movs	r3, #1
 8005280:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8005284:	2000      	movs	r0, #0
}
 8005286:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005288:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 800528c:	f7fc fa60 	bl	8001750 <HAL_RTC_MspInit>
 8005290:	e7ed      	b.n	800526e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005292:	4b20      	ldr	r3, [pc, #128]	@ (8005314 <HAL_RTC_Init+0xb4>)
 8005294:	22ca      	movs	r2, #202	@ 0xca
 8005296:	625a      	str	r2, [r3, #36]	@ 0x24
 8005298:	2253      	movs	r2, #83	@ 0x53
 800529a:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 800529c:	4620      	mov	r0, r4
 800529e:	f7ff ff93 	bl	80051c8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80052a2:	b118      	cbz	r0, 80052ac <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005314 <HAL_RTC_Init+0xb4>)
 80052a6:	22ff      	movs	r2, #255	@ 0xff
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80052aa:	e7ec      	b.n	8005286 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80052ac:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <HAL_RTC_Init+0xb4>)
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 80052b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80052ba:	6999      	ldr	r1, [r3, #24]
 80052bc:	6862      	ldr	r2, [r4, #4]
 80052be:	6920      	ldr	r0, [r4, #16]
 80052c0:	4302      	orrs	r2, r0
 80052c2:	69a0      	ldr	r0, [r4, #24]
 80052c4:	4302      	orrs	r2, r0
 80052c6:	430a      	orrs	r2, r1
 80052c8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80052ca:	68e2      	ldr	r2, [r4, #12]
 80052cc:	68a1      	ldr	r1, [r4, #8]
 80052ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80052d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80052da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80052de:	4301      	orrs	r1, r0
 80052e0:	430a      	orrs	r2, r1
 80052e2:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7ff ff95 	bl	8005214 <RTC_ExitInitMode>
        if (status == HAL_OK)
 80052ea:	b118      	cbz	r0, 80052f4 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RTC_Init+0xb4>)
 80052ee:	22ff      	movs	r2, #255	@ 0xff
 80052f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80052f2:	e7c8      	b.n	8005286 <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 80052f4:	4907      	ldr	r1, [pc, #28]	@ (8005314 <HAL_RTC_Init+0xb4>)
 80052f6:	698b      	ldr	r3, [r1, #24]
 80052f8:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80052fc:	6a22      	ldr	r2, [r4, #32]
 80052fe:	69e0      	ldr	r0, [r4, #28]
 8005300:	4302      	orrs	r2, r0
 8005302:	6960      	ldr	r0, [r4, #20]
 8005304:	4302      	orrs	r2, r0
 8005306:	4313      	orrs	r3, r2
 8005308:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530a:	23ff      	movs	r3, #255	@ 0xff
 800530c:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 800530e:	e7b6      	b.n	800527e <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005310:	2001      	movs	r0, #1
}
 8005312:	4770      	bx	lr
 8005314:	40002800 	.word	0x40002800

08005318 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005318:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800531a:	e002      	b.n	8005322 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800531c:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800531e:	380a      	subs	r0, #10
 8005320:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005322:	2809      	cmp	r0, #9
 8005324:	d8fa      	bhi.n	800531c <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	b2db      	uxtb	r3, r3
}
 800532a:	4318      	orrs	r0, r3
 800532c:	4770      	bx	lr
	...

08005330 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005330:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005334:	2b01      	cmp	r3, #1
 8005336:	f000 80b0 	beq.w	800549a <HAL_RTC_SetAlarm_IT+0x16a>
{
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	4605      	mov	r5, r0
 8005340:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005342:	2301      	movs	r3, #1
 8005344:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005348:	2302      	movs	r3, #2
 800534a:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800534e:	4b54      	ldr	r3, [pc, #336]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 8005350:	68de      	ldr	r6, [r3, #12]
 8005352:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005356:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800535a:	d043      	beq.n	80053e4 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 800535c:	bb12      	cbnz	r2, 80053a4 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005364:	d101      	bne.n	800536a <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005366:	2300      	movs	r3, #0
 8005368:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800536a:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800536e:	7820      	ldrb	r0, [r4, #0]
 8005370:	f7ff ffd2 	bl	8005318 <RTC_ByteToBcd2>
 8005374:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005376:	7860      	ldrb	r0, [r4, #1]
 8005378:	f7ff ffce 	bl	8005318 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800537c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005380:	78a0      	ldrb	r0, [r4, #2]
 8005382:	f7ff ffc9 	bl	8005318 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005386:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005388:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800538a:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800538e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8005392:	f7ff ffc1 	bl	8005318 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005396:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800539a:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800539c:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800539e:	ea48 0000 	orr.w	r0, r8, r0
 80053a2:	e020      	b.n	80053e6 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80053a4:	6948      	ldr	r0, [r1, #20]
 80053a6:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 80053aa:	d009      	beq.n	80053c0 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80053ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80053b0:	d006      	beq.n	80053c0 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80053b2:	4b3b      	ldr	r3, [pc, #236]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80053ba:	d101      	bne.n	80053c0 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053bc:	2300      	movs	r3, #0
 80053be:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053c0:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053c2:	7863      	ldrb	r3, [r4, #1]
 80053c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053ca:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053cc:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053ce:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053d0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053d4:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053dc:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053de:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053e0:	4318      	orrs	r0, r3
 80053e2:	e000      	b.n	80053e6 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80053e4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e6:	4b2e      	ldr	r3, [pc, #184]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 80053e8:	22ca      	movs	r2, #202	@ 0xca
 80053ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80053ec:	2253      	movs	r2, #83	@ 0x53
 80053ee:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80053f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f6:	d02a      	beq.n	800544e <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80053f8:	4b29      	ldr	r3, [pc, #164]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 80053fa:	699a      	ldr	r2, [r3, #24]
 80053fc:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8005400:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005402:	2202      	movs	r2, #2
 8005404:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005406:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800540a:	d040      	beq.n	800548e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800540c:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 800540e:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005410:	69a2      	ldr	r2, [r4, #24]
 8005412:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005414:	6862      	ldr	r2, [r4, #4]
 8005416:	4b22      	ldr	r3, [pc, #136]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 8005418:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800541a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800541c:	f042 0202 	orr.w	r2, r2, #2
 8005420:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8005428:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800542a:	4a1e      	ldr	r2, [pc, #120]	@ (80054a4 <HAL_RTC_SetAlarm_IT+0x174>)
 800542c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8005430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005438:	4b19      	ldr	r3, [pc, #100]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 800543a:	22ff      	movs	r2, #255	@ 0xff
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800543e:	2301      	movs	r3, #1
 8005440:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8005444:	2000      	movs	r0, #0
 8005446:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 800544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8005456:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005458:	2201      	movs	r2, #1
 800545a:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800545c:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005460:	d00f      	beq.n	8005482 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005462:	4b0f      	ldr	r3, [pc, #60]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 8005464:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005466:	69a2      	ldr	r2, [r4, #24]
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 800546e:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005470:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800547e:	619a      	str	r2, [r3, #24]
 8005480:	e7d3      	b.n	800542a <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005482:	69a3      	ldr	r3, [r4, #24]
 8005484:	69e2      	ldr	r2, [r4, #28]
 8005486:	4313      	orrs	r3, r2
 8005488:	4a05      	ldr	r2, [pc, #20]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 800548a:	6453      	str	r3, [r2, #68]	@ 0x44
 800548c:	e7ed      	b.n	800546a <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800548e:	69a3      	ldr	r3, [r4, #24]
 8005490:	69e2      	ldr	r2, [r4, #28]
 8005492:	4313      	orrs	r3, r2
 8005494:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <HAL_RTC_SetAlarm_IT+0x170>)
 8005496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005498:	e7bc      	b.n	8005414 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800549a:	2002      	movs	r0, #2
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40002800 	.word	0x40002800
 80054a4:	58000800 	.word	0x58000800

080054a8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054a8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d017      	beq.n	80054e0 <HAL_RTCEx_EnableBypassShadow+0x38>
 80054b0:	2101      	movs	r1, #1
 80054b2:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054bc:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80054be:	22ca      	movs	r2, #202	@ 0xca
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80054c2:	2253      	movs	r2, #83	@ 0x53
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	f042 0220 	orr.w	r2, r2, #32
 80054cc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ce:	22ff      	movs	r2, #255	@ 0xff
 80054d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054d2:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054d6:	2300      	movs	r3, #0
 80054d8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 80054dc:	4618      	mov	r0, r3
 80054de:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80054e0:	2002      	movs	r0, #2
}
 80054e2:	4770      	bx	lr
 80054e4:	40002800 	.word	0x40002800

080054e8 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d020      	beq.n	8005532 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80054f0:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80054f2:	2101      	movs	r1, #1
 80054f4:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054f8:	2302      	movs	r3, #2
 80054fa:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005500:	22ca      	movs	r2, #202	@ 0xca
 8005502:	625a      	str	r2, [r3, #36]	@ 0x24
 8005504:	2253      	movs	r2, #83	@ 0x53
 8005506:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800550e:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005510:	4c0a      	ldr	r4, [pc, #40]	@ (800553c <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005512:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8005516:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800551a:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800551e:	22ff      	movs	r2, #255	@ 0xff
 8005520:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005522:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005526:	2300      	movs	r3, #0
 8005528:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 800552c:	4618      	mov	r0, r3
}
 800552e:	bc10      	pop	{r4}
 8005530:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005532:	2002      	movs	r0, #2
}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40002800 	.word	0x40002800
 800553c:	58000800 	.word	0x58000800

08005540 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800554c:	d103      	bne.n	8005556 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800554e:	2301      	movs	r3, #1
 8005550:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005554:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005556:	4b03      	ldr	r3, [pc, #12]	@ (8005564 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005558:	2240      	movs	r2, #64	@ 0x40
 800555a:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800555c:	f7fc fc92 	bl	8001e84 <HAL_RTCEx_SSRUEventCallback>
 8005560:	e7f5      	b.n	800554e <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005562:	bf00      	nop
 8005564:	40002800 	.word	0x40002800

08005568 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005568:	4770      	bx	lr

0800556a <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800556a:	0089      	lsls	r1, r1, #2
 800556c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005570:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005574:	600a      	str	r2, [r1, #0]
}
 8005576:	4770      	bx	lr

08005578 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005578:	0089      	lsls	r1, r1, #2
 800557a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800557e:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005582:	6808      	ldr	r0, [r1, #0]
}
 8005584:	4770      	bx	lr
	...

08005588 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005588:	4b07      	ldr	r3, [pc, #28]	@ (80055a8 <SUBGHZSPI_Init+0x20>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005590:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005592:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8005596:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005598:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 800559c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055a4:	601a      	str	r2, [r3, #0]
}
 80055a6:	4770      	bx	lr
 80055a8:	58010000 	.word	0x58010000

080055ac <HAL_SUBGHZ_Init>:
{
 80055ac:	b530      	push	{r4, r5, lr}
 80055ae:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d05d      	beq.n	8005670 <HAL_SUBGHZ_Init+0xc4>
 80055b4:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80055b6:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80055b8:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80055bc:	b10b      	cbz	r3, 80055c2 <HAL_SUBGHZ_Init+0x16>
 80055be:	2d03      	cmp	r5, #3
 80055c0:	d10b      	bne.n	80055da <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80055c2:	2300      	movs	r3, #0
 80055c4:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7fc f972 	bl	80018b0 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80055cc:	4a29      	ldr	r2, [pc, #164]	@ (8005674 <HAL_SUBGHZ_Init+0xc8>)
 80055ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80055d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80055da:	b185      	cbz	r5, 80055fe <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80055dc:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <HAL_SUBGHZ_Init+0xcc>)
 80055de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055e2:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80055e4:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	f7ff ffce 	bl	8005588 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80055f4:	2301      	movs	r3, #1
 80055f6:	71a3      	strb	r3, [r4, #6]
}
 80055f8:	4628      	mov	r0, r5
 80055fa:	b003      	add	sp, #12
 80055fc:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80055fe:	2302      	movs	r3, #2
 8005600:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005606:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800560a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800560e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005612:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <HAL_SUBGHZ_Init+0xd0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800561a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800561e:	2264      	movs	r2, #100	@ 0x64
 8005620:	fb02 f303 	mul.w	r3, r2, r3
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	e014      	b.n	8005652 <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005628:	2501      	movs	r5, #1
 800562a:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <HAL_SUBGHZ_Init+0xcc>)
 800562e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005640:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005646:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005648:	2d00      	cmp	r5, #0
 800564a:	d1d3      	bne.n	80055f4 <HAL_SUBGHZ_Init+0x48>
 800564c:	e7cb      	b.n	80055e6 <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ec      	beq.n	800562c <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8005652:	9b01      	ldr	r3, [sp, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0e7      	beq.n	8005628 <HAL_SUBGHZ_Init+0x7c>
      count--;
 8005658:	9b01      	ldr	r3, [sp, #4]
 800565a:	3b01      	subs	r3, #1
 800565c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005666:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 800566a:	d0f0      	beq.n	800564e <HAL_SUBGHZ_Init+0xa2>
 800566c:	2301      	movs	r3, #1
 800566e:	e7ee      	b.n	800564e <HAL_SUBGHZ_Init+0xa2>
    return status;
 8005670:	2501      	movs	r5, #1
 8005672:	e7c1      	b.n	80055f8 <HAL_SUBGHZ_Init+0x4c>
 8005674:	58000800 	.word	0x58000800
 8005678:	58000400 	.word	0x58000400
 800567c:	20000074 	.word	0x20000074

08005680 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005680:	b082      	sub	sp, #8
 8005682:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005684:	4b1a      	ldr	r3, [pc, #104]	@ (80056f0 <SUBGHZSPI_Transmit+0x70>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800568c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005690:	2064      	movs	r0, #100	@ 0x64
 8005692:	fb00 f303 	mul.w	r3, r0, r3
 8005696:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	b14b      	cbz	r3, 80056b0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800569c:	9b01      	ldr	r3, [sp, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80056a2:	4b14      	ldr	r3, [pc, #80]	@ (80056f4 <SUBGHZSPI_Transmit+0x74>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f013 0f02 	tst.w	r3, #2
 80056aa:	d0f5      	beq.n	8005698 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2000      	movs	r0, #0
 80056ae:	e001      	b.n	80056b4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80056b0:	2001      	movs	r0, #1
 80056b2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80056b4:	4b0f      	ldr	r3, [pc, #60]	@ (80056f4 <SUBGHZSPI_Transmit+0x74>)
 80056b6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80056b8:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <SUBGHZSPI_Transmit+0x70>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80056c0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80056c4:	2164      	movs	r1, #100	@ 0x64
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80056cc:	9b01      	ldr	r3, [sp, #4]
 80056ce:	b143      	cbz	r3, 80056e2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80056d6:	4b07      	ldr	r3, [pc, #28]	@ (80056f4 <SUBGHZSPI_Transmit+0x74>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f013 0f01 	tst.w	r3, #1
 80056de:	d0f5      	beq.n	80056cc <SUBGHZSPI_Transmit+0x4c>
 80056e0:	e001      	b.n	80056e6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80056e2:	2001      	movs	r0, #1
 80056e4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80056e6:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <SUBGHZSPI_Transmit+0x74>)
 80056e8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80056ea:	b002      	add	sp, #8
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000074 	.word	0x20000074
 80056f4:	58010000 	.word	0x58010000

080056f8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80056f8:	b082      	sub	sp, #8
 80056fa:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80056fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005770 <SUBGHZSPI_Receive+0x78>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005704:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005708:	2064      	movs	r0, #100	@ 0x64
 800570a:	fb00 f303 	mul.w	r3, r0, r3
 800570e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	b14b      	cbz	r3, 8005728 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800571a:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <SUBGHZSPI_Receive+0x7c>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f013 0f02 	tst.w	r3, #2
 8005722:	d0f5      	beq.n	8005710 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	2000      	movs	r0, #0
 8005726:	e001      	b.n	800572c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005728:	2001      	movs	r0, #1
 800572a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800572c:	4b11      	ldr	r3, [pc, #68]	@ (8005774 <SUBGHZSPI_Receive+0x7c>)
 800572e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005732:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005736:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <SUBGHZSPI_Receive+0x78>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800573e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005742:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8005746:	fb0c f303 	mul.w	r3, ip, r3
 800574a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	b143      	cbz	r3, 8005762 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	3b01      	subs	r3, #1
 8005754:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005756:	4b07      	ldr	r3, [pc, #28]	@ (8005774 <SUBGHZSPI_Receive+0x7c>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f013 0f01 	tst.w	r3, #1
 800575e:	d0f5      	beq.n	800574c <SUBGHZSPI_Receive+0x54>
 8005760:	e001      	b.n	8005766 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005762:	2001      	movs	r0, #1
 8005764:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005766:	4b03      	ldr	r3, [pc, #12]	@ (8005774 <SUBGHZSPI_Receive+0x7c>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	700b      	strb	r3, [r1, #0]

  return status;
}
 800576c:	b002      	add	sp, #8
 800576e:	4770      	bx	lr
 8005770:	20000074 	.word	0x20000074
 8005774:	58010000 	.word	0x58010000

08005778 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005778:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800577a:	4b13      	ldr	r3, [pc, #76]	@ (80057c8 <SUBGHZ_WaitOnBusy+0x50>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005782:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005786:	2264      	movs	r2, #100	@ 0x64
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	e006      	b.n	800579e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005794:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005796:	b002      	add	sp, #8
 8005798:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800579a:	4213      	tst	r3, r2
 800579c:	d012      	beq.n	80057c4 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800579e:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <SUBGHZ_WaitOnBusy+0x54>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f013 0304 	ands.w	r3, r3, #4
 80057a6:	d000      	beq.n	80057aa <SUBGHZ_WaitOnBusy+0x32>
 80057a8:	2301      	movs	r3, #1
    if (count == 0U)
 80057aa:	9a01      	ldr	r2, [sp, #4]
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d0ef      	beq.n	8005790 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80057b0:	9a01      	ldr	r2, [sp, #4]
 80057b2:	3a01      	subs	r2, #1
 80057b4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80057b6:	4a05      	ldr	r2, [pc, #20]	@ (80057cc <SUBGHZ_WaitOnBusy+0x54>)
 80057b8:	6952      	ldr	r2, [r2, #20]
 80057ba:	f012 0202 	ands.w	r2, r2, #2
 80057be:	d0ec      	beq.n	800579a <SUBGHZ_WaitOnBusy+0x22>
 80057c0:	2201      	movs	r2, #1
 80057c2:	e7ea      	b.n	800579a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80057c4:	2000      	movs	r0, #0
 80057c6:	e7e6      	b.n	8005796 <SUBGHZ_WaitOnBusy+0x1e>
 80057c8:	20000074 	.word	0x20000074
 80057cc:	58000400 	.word	0x58000400

080057d0 <SUBGHZ_CheckDeviceReady>:
{
 80057d0:	b500      	push	{lr}
 80057d2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80057d4:	7903      	ldrb	r3, [r0, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d004      	beq.n	80057e4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80057da:	f7ff ffcd 	bl	8005778 <SUBGHZ_WaitOnBusy>
}
 80057de:	b003      	add	sp, #12
 80057e0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80057e4:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <SUBGHZ_CheckDeviceReady+0x4c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057ec:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80057f0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005820 <SUBGHZ_CheckDeviceReady+0x50>)
 80057f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80057f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8005800:	9b01      	ldr	r3, [sp, #4]
 8005802:	3b01      	subs	r3, #1
 8005804:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005806:	9b01      	ldr	r3, [sp, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f9      	bne.n	8005800 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800580c:	4a04      	ldr	r2, [pc, #16]	@ (8005820 <SUBGHZ_CheckDeviceReady+0x50>)
 800580e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800581a:	e7de      	b.n	80057da <SUBGHZ_CheckDeviceReady+0xa>
 800581c:	20000074 	.word	0x20000074
 8005820:	58000400 	.word	0x58000400

08005824 <HAL_SUBGHZ_WriteRegisters>:
{
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800582a:	7980      	ldrb	r0, [r0, #6]
 800582c:	fa5f f880 	uxtb.w	r8, r0
 8005830:	f1b8 0f01 	cmp.w	r8, #1
 8005834:	d13e      	bne.n	80058b4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005836:	460c      	mov	r4, r1
 8005838:	4617      	mov	r7, r2
 800583a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800583c:	796b      	ldrb	r3, [r5, #5]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d03b      	beq.n	80058ba <HAL_SUBGHZ_WriteRegisters+0x96>
 8005842:	2301      	movs	r3, #1
 8005844:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005846:	2302      	movs	r3, #2
 8005848:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800584a:	4628      	mov	r0, r5
 800584c:	f7ff ffc0 	bl	80057d0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005850:	4a1b      	ldr	r2, [pc, #108]	@ (80058c0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005852:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005856:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800585a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800585e:	210d      	movs	r1, #13
 8005860:	4628      	mov	r0, r5
 8005862:	f7ff ff0d 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005866:	0a21      	lsrs	r1, r4, #8
 8005868:	4628      	mov	r0, r5
 800586a:	f7ff ff09 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800586e:	b2e1      	uxtb	r1, r4
 8005870:	4628      	mov	r0, r5
 8005872:	f7ff ff05 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005876:	2400      	movs	r4, #0
 8005878:	e005      	b.n	8005886 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800587a:	5d39      	ldrb	r1, [r7, r4]
 800587c:	4628      	mov	r0, r5
 800587e:	f7ff feff 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005882:	3401      	adds	r4, #1
 8005884:	b2a4      	uxth	r4, r4
 8005886:	42b4      	cmp	r4, r6
 8005888:	d3f7      	bcc.n	800587a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800588a:	4a0d      	ldr	r2, [pc, #52]	@ (80058c0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800588c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005898:	4628      	mov	r0, r5
 800589a:	f7ff ff6d 	bl	8005778 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800589e:	68ab      	ldr	r3, [r5, #8]
 80058a0:	b90b      	cbnz	r3, 80058a6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80058a2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80058a6:	2301      	movs	r3, #1
 80058a8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80058aa:	2300      	movs	r3, #0
 80058ac:	716b      	strb	r3, [r5, #5]
}
 80058ae:	4640      	mov	r0, r8
 80058b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80058b4:	f04f 0802 	mov.w	r8, #2
 80058b8:	e7f9      	b.n	80058ae <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80058ba:	f04f 0802 	mov.w	r8, #2
 80058be:	e7f6      	b.n	80058ae <HAL_SUBGHZ_WriteRegisters+0x8a>
 80058c0:	58000400 	.word	0x58000400

080058c4 <HAL_SUBGHZ_ReadRegisters>:
{
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058ca:	7980      	ldrb	r0, [r0, #6]
 80058cc:	fa5f f880 	uxtb.w	r8, r0
 80058d0:	f1b8 0f01 	cmp.w	r8, #1
 80058d4:	d141      	bne.n	800595a <HAL_SUBGHZ_ReadRegisters+0x96>
 80058d6:	460c      	mov	r4, r1
 80058d8:	4615      	mov	r5, r2
 80058da:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80058dc:	7973      	ldrb	r3, [r6, #5]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d03e      	beq.n	8005960 <HAL_SUBGHZ_ReadRegisters+0x9c>
 80058e2:	2301      	movs	r3, #1
 80058e4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff ff72 	bl	80057d0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005968 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80058ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80058f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80058fa:	211d      	movs	r1, #29
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff febf 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005902:	0a21      	lsrs	r1, r4, #8
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff febb 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800590a:	b2e1      	uxtb	r1, r4
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff feb7 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005912:	2100      	movs	r1, #0
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff feb3 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800591a:	2400      	movs	r4, #0
 800591c:	e006      	b.n	800592c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800591e:	4629      	mov	r1, r5
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff fee9 	bl	80056f8 <SUBGHZSPI_Receive>
      pData++;
 8005926:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005928:	3401      	adds	r4, #1
 800592a:	b2a4      	uxth	r4, r4
 800592c:	42bc      	cmp	r4, r7
 800592e:	d3f6      	bcc.n	800591e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005930:	4a0d      	ldr	r2, [pc, #52]	@ (8005968 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005932:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff ff1a 	bl	8005778 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005944:	68b3      	ldr	r3, [r6, #8]
 8005946:	b90b      	cbnz	r3, 800594c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005948:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800594c:	2301      	movs	r3, #1
 800594e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005950:	2300      	movs	r3, #0
 8005952:	7173      	strb	r3, [r6, #5]
}
 8005954:	4640      	mov	r0, r8
 8005956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800595a:	f04f 0802 	mov.w	r8, #2
 800595e:	e7f9      	b.n	8005954 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005960:	f04f 0802 	mov.w	r8, #2
 8005964:	e7f6      	b.n	8005954 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005966:	bf00      	nop
 8005968:	58000400 	.word	0x58000400

0800596c <HAL_SUBGHZ_ExecSetCmd>:
{
 800596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005970:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005972:	7980      	ldrb	r0, [r0, #6]
 8005974:	fa5f f980 	uxtb.w	r9, r0
 8005978:	f1b9 0f01 	cmp.w	r9, #1
 800597c:	d143      	bne.n	8005a06 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800597e:	4688      	mov	r8, r1
 8005980:	4617      	mov	r7, r2
 8005982:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005984:	796b      	ldrb	r3, [r5, #5]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d040      	beq.n	8005a0c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800598a:	2301      	movs	r3, #1
 800598c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800598e:	4628      	mov	r0, r5
 8005990:	f7ff ff1e 	bl	80057d0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005994:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8005998:	d005      	beq.n	80059a6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800599a:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 800599e:	d002      	beq.n	80059a6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	712b      	strb	r3, [r5, #4]
 80059a4:	e001      	b.n	80059aa <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a14 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80059ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80059b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80059b8:	4641      	mov	r1, r8
 80059ba:	4628      	mov	r0, r5
 80059bc:	f7ff fe60 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059c0:	2400      	movs	r4, #0
 80059c2:	e005      	b.n	80059d0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80059c4:	5d39      	ldrb	r1, [r7, r4]
 80059c6:	4628      	mov	r0, r5
 80059c8:	f7ff fe5a 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059cc:	3401      	adds	r4, #1
 80059ce:	b2a4      	uxth	r4, r4
 80059d0:	42b4      	cmp	r4, r6
 80059d2:	d3f7      	bcc.n	80059c4 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005a14 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80059d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80059da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 80059e2:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 80059e6:	d10a      	bne.n	80059fe <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059e8:	68ab      	ldr	r3, [r5, #8]
 80059ea:	b90b      	cbnz	r3, 80059f0 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80059ec:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80059f0:	2301      	movs	r3, #1
 80059f2:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80059f4:	2300      	movs	r3, #0
 80059f6:	716b      	strb	r3, [r5, #5]
}
 80059f8:	4648      	mov	r0, r9
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7ff feba 	bl	8005778 <SUBGHZ_WaitOnBusy>
 8005a04:	e7f0      	b.n	80059e8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005a06:	f04f 0902 	mov.w	r9, #2
 8005a0a:	e7f5      	b.n	80059f8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8005a0c:	f04f 0902 	mov.w	r9, #2
 8005a10:	e7f2      	b.n	80059f8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005a12:	bf00      	nop
 8005a14:	58000400 	.word	0x58000400

08005a18 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a1e:	7980      	ldrb	r0, [r0, #6]
 8005a20:	fa5f f880 	uxtb.w	r8, r0
 8005a24:	f1b8 0f01 	cmp.w	r8, #1
 8005a28:	d139      	bne.n	8005a9e <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4615      	mov	r5, r2
 8005a2e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005a30:	7973      	ldrb	r3, [r6, #5]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d036      	beq.n	8005aa4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005a36:	2301      	movs	r3, #1
 8005a38:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7ff fec8 	bl	80057d0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a40:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005a42:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005a46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4630      	mov	r0, r6
 8005a52:	f7ff fe15 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005a56:	2100      	movs	r1, #0
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f7ff fe11 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a5e:	2400      	movs	r4, #0
 8005a60:	e006      	b.n	8005a70 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a62:	4629      	mov	r1, r5
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7ff fe47 	bl	80056f8 <SUBGHZSPI_Receive>
      pData++;
 8005a6a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005a6c:	3401      	adds	r4, #1
 8005a6e:	b2a4      	uxth	r4, r4
 8005a70:	42bc      	cmp	r4, r7
 8005a72:	d3f6      	bcc.n	8005a62 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a74:	4a0d      	ldr	r2, [pc, #52]	@ (8005aac <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005a76:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff fe78 	bl	8005778 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a88:	68b3      	ldr	r3, [r6, #8]
 8005a8a:	b90b      	cbnz	r3, 8005a90 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005a8c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a90:	2301      	movs	r3, #1
 8005a92:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005a94:	2300      	movs	r3, #0
 8005a96:	7173      	strb	r3, [r6, #5]
}
 8005a98:	4640      	mov	r0, r8
 8005a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a9e:	f04f 0802 	mov.w	r8, #2
 8005aa2:	e7f9      	b.n	8005a98 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005aa4:	f04f 0802 	mov.w	r8, #2
 8005aa8:	e7f6      	b.n	8005a98 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005aaa:	bf00      	nop
 8005aac:	58000400 	.word	0x58000400

08005ab0 <HAL_SUBGHZ_IRQHandler>:
{
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005abc:	2302      	movs	r3, #2
 8005abe:	aa01      	add	r2, sp, #4
 8005ac0:	2112      	movs	r1, #18
 8005ac2:	f7ff ffa9 	bl	8005a18 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005ac6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005aca:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005ace:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8005ad2:	b226      	sxth	r6, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	aa01      	add	r2, sp, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff ff46 	bl	800596c <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005ae0:	f016 0f01 	tst.w	r6, #1
 8005ae4:	d126      	bne.n	8005b34 <HAL_SUBGHZ_IRQHandler+0x84>
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8005ae6:	f014 0f02 	tst.w	r4, #2
 8005aea:	d002      	beq.n	8005af2 <HAL_SUBGHZ_IRQHandler+0x42>
 8005aec:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8005af0:	d024      	beq.n	8005b3c <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005af2:	f014 0f04 	tst.w	r4, #4
 8005af6:	d125      	bne.n	8005b44 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005af8:	f014 0f08 	tst.w	r4, #8
 8005afc:	d126      	bne.n	8005b4c <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005afe:	f014 0f10 	tst.w	r4, #16
 8005b02:	d127      	bne.n	8005b54 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005b04:	f014 0f20 	tst.w	r4, #32
 8005b08:	d128      	bne.n	8005b5c <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005b0a:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8005b0e:	d129      	bne.n	8005b64 <HAL_SUBGHZ_IRQHandler+0xb4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005b10:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8005b14:	d006      	beq.n	8005b24 <HAL_SUBGHZ_IRQHandler+0x74>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005b16:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8005b1a:	d027      	beq.n	8005b6c <HAL_SUBGHZ_IRQHandler+0xbc>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f00a fda0 	bl	8010664 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005b24:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8005b28:	d125      	bne.n	8005b76 <HAL_SUBGHZ_IRQHandler+0xc6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005b2a:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8005b2e:	d126      	bne.n	8005b7e <HAL_SUBGHZ_IRQHandler+0xce>
}
 8005b30:	b002      	add	sp, #8
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005b34:	4628      	mov	r0, r5
 8005b36:	f00a fd7d 	bl	8010634 <HAL_SUBGHZ_TxCpltCallback>
 8005b3a:	e7d4      	b.n	8005ae6 <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f00a fd81 	bl	8010644 <HAL_SUBGHZ_RxCpltCallback>
 8005b42:	e7d6      	b.n	8005af2 <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005b44:	4628      	mov	r0, r5
 8005b46:	f00a fdb1 	bl	80106ac <HAL_SUBGHZ_PreambleDetectedCallback>
 8005b4a:	e7d5      	b.n	8005af8 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f00a fdb5 	bl	80106bc <HAL_SUBGHZ_SyncWordValidCallback>
 8005b52:	e7d4      	b.n	8005afe <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005b54:	4628      	mov	r0, r5
 8005b56:	f00a fdb9 	bl	80106cc <HAL_SUBGHZ_HeaderValidCallback>
 8005b5a:	e7d3      	b.n	8005b04 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f00a fd9d 	bl	801069c <HAL_SUBGHZ_HeaderErrorCallback>
 8005b62:	e7d2      	b.n	8005b0a <HAL_SUBGHZ_IRQHandler+0x5a>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005b64:	4628      	mov	r0, r5
 8005b66:	f00a fd75 	bl	8010654 <HAL_SUBGHZ_CRCErrorCallback>
 8005b6a:	e7d1      	b.n	8005b10 <HAL_SUBGHZ_IRQHandler+0x60>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f00a fd78 	bl	8010664 <HAL_SUBGHZ_CADStatusCallback>
 8005b74:	e7d6      	b.n	8005b24 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005b76:	4628      	mov	r0, r5
 8005b78:	f00a fd86 	bl	8010688 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005b7c:	e7d5      	b.n	8005b2a <HAL_SUBGHZ_IRQHandler+0x7a>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f00a fdac 	bl	80106dc <HAL_SUBGHZ_LrFhssHopCallback>
}
 8005b84:	e7d4      	b.n	8005b30 <HAL_SUBGHZ_IRQHandler+0x80>
	...

08005b88 <HAL_SUBGHZ_WriteBuffer>:
{
 8005b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b8e:	7980      	ldrb	r0, [r0, #6]
 8005b90:	fa5f f880 	uxtb.w	r8, r0
 8005b94:	f1b8 0f01 	cmp.w	r8, #1
 8005b98:	d138      	bne.n	8005c0c <HAL_SUBGHZ_WriteBuffer+0x84>
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4617      	mov	r7, r2
 8005b9e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005ba0:	796b      	ldrb	r3, [r5, #5]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d035      	beq.n	8005c12 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff fe10 	bl	80057d0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005bb0:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005bb2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005bb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005bbe:	210e      	movs	r1, #14
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff fd5d 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f7ff fd59 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bce:	2400      	movs	r4, #0
 8005bd0:	e005      	b.n	8005bde <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005bd2:	5d39      	ldrb	r1, [r7, r4]
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f7ff fd53 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bda:	3401      	adds	r4, #1
 8005bdc:	b2a4      	uxth	r4, r4
 8005bde:	42b4      	cmp	r4, r6
 8005be0:	d3f7      	bcc.n	8005bd2 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005be2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c18 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005be4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff fdc1 	bl	8005778 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bf6:	68ab      	ldr	r3, [r5, #8]
 8005bf8:	b90b      	cbnz	r3, 8005bfe <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8005bfa:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005c02:	2300      	movs	r3, #0
 8005c04:	716b      	strb	r3, [r5, #5]
}
 8005c06:	4640      	mov	r0, r8
 8005c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005c0c:	f04f 0802 	mov.w	r8, #2
 8005c10:	e7f9      	b.n	8005c06 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005c12:	f04f 0802 	mov.w	r8, #2
 8005c16:	e7f6      	b.n	8005c06 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005c18:	58000400 	.word	0x58000400

08005c1c <HAL_SUBGHZ_ReadBuffer>:
{
 8005c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c20:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c22:	7980      	ldrb	r0, [r0, #6]
 8005c24:	fa5f f880 	uxtb.w	r8, r0
 8005c28:	f1b8 0f01 	cmp.w	r8, #1
 8005c2c:	d13d      	bne.n	8005caa <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005c2e:	460c      	mov	r4, r1
 8005c30:	4615      	mov	r5, r2
 8005c32:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005c34:	7973      	ldrb	r3, [r6, #5]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d03a      	beq.n	8005cb0 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff fdc6 	bl	80057d0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c44:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005c46:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005c4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005c52:	211e      	movs	r1, #30
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff fd13 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff fd0f 	bl	8005680 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c62:	2100      	movs	r1, #0
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff fd0b 	bl	8005680 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c6a:	2400      	movs	r4, #0
 8005c6c:	e006      	b.n	8005c7c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c6e:	4629      	mov	r1, r5
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7ff fd41 	bl	80056f8 <SUBGHZSPI_Receive>
      pData++;
 8005c76:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005c78:	3401      	adds	r4, #1
 8005c7a:	b2a4      	uxth	r4, r4
 8005c7c:	42bc      	cmp	r4, r7
 8005c7e:	d3f6      	bcc.n	8005c6e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c80:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005c82:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff fd72 	bl	8005778 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c94:	68b3      	ldr	r3, [r6, #8]
 8005c96:	b90b      	cbnz	r3, 8005c9c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005c98:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	7173      	strb	r3, [r6, #5]
}
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005caa:	f04f 0802 	mov.w	r8, #2
 8005cae:	e7f9      	b.n	8005ca4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005cb0:	f04f 0802 	mov.w	r8, #2
 8005cb4:	e7f6      	b.n	8005ca4 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005cb6:	bf00      	nop
 8005cb8:	58000400 	.word	0x58000400

08005cbc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005cbc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	e852 3f00 	ldrex	r3, [r2]
 8005cc2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	e842 3100 	strex	r1, r3, [r2]
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	d1f6      	bne.n	8005cbc <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005cce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	f102 0308 	add.w	r3, r2, #8
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	3208      	adds	r2, #8
 8005cde:	e842 3100 	strex	r1, r3, [r2]
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	d1f3      	bne.n	8005cce <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce6:	2320      	movs	r3, #32
 8005ce8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8005cec:	4770      	bx	lr

08005cee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	e852 3f00 	ldrex	r3, [r2]
 8005cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	e842 3100 	strex	r1, r3, [r2]
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	d1f6      	bne.n	8005cee <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d00:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	f102 0308 	add.w	r3, r2, #8
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	3208      	adds	r2, #8
 8005d14:	e842 3100 	strex	r1, r3, [r2]
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	d1f1      	bne.n	8005d00 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d006      	beq.n	8005d30 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	2320      	movs	r3, #32
 8005d24:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d2c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8005d2e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	e852 3f00 	ldrex	r3, [r2]
 8005d36:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	e842 3100 	strex	r1, r3, [r2]
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d1f6      	bne.n	8005d30 <UART_EndRxTransfer+0x42>
 8005d42:	e7ee      	b.n	8005d22 <UART_EndRxTransfer+0x34>

08005d44 <HAL_UART_Transmit_DMA>:
{
 8005d44:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005d46:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005d4a:	2a20      	cmp	r2, #32
 8005d4c:	d13d      	bne.n	8005dca <HAL_UART_Transmit_DMA+0x86>
{
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005d52:	2900      	cmp	r1, #0
 8005d54:	d03b      	beq.n	8005dce <HAL_UART_Transmit_DMA+0x8a>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d03b      	beq.n	8005dd2 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8005d5a:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005d5c:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d60:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6a:	2221      	movs	r2, #33	@ 0x21
 8005d6c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8005d70:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005d72:	b1ca      	cbz	r2, 8005da8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d74:	4918      	ldr	r1, [pc, #96]	@ (8005dd8 <HAL_UART_Transmit_DMA+0x94>)
 8005d76:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d78:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005d7a:	4918      	ldr	r1, [pc, #96]	@ (8005ddc <HAL_UART_Transmit_DMA+0x98>)
 8005d7c:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d7e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005d80:	4917      	ldr	r1, [pc, #92]	@ (8005de0 <HAL_UART_Transmit_DMA+0x9c>)
 8005d82:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005d84:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005d86:	2100      	movs	r1, #0
 8005d88:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d8a:	6802      	ldr	r2, [r0, #0]
 8005d8c:	3228      	adds	r2, #40	@ 0x28
 8005d8e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005d90:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8005d92:	f7fd fe43 	bl	8003a1c <HAL_DMA_Start_IT>
 8005d96:	b138      	cbz	r0, 8005da8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d98:	2310      	movs	r3, #16
 8005d9a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8005d9e:	2320      	movs	r3, #32
 8005da0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8005da4:	2001      	movs	r0, #1
 8005da6:	e00f      	b.n	8005dc8 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	2240      	movs	r2, #64	@ 0x40
 8005dac:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	f102 0308 	add.w	r3, r2, #8
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	3208      	adds	r2, #8
 8005dbe:	e842 3100 	strex	r1, r3, [r2]
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	d1f3      	bne.n	8005dae <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8005dc6:	2000      	movs	r0, #0
}
 8005dc8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005dca:	2002      	movs	r0, #2
}
 8005dcc:	4770      	bx	lr
      return HAL_ERROR;
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e7fa      	b.n	8005dc8 <HAL_UART_Transmit_DMA+0x84>
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	e7f8      	b.n	8005dc8 <HAL_UART_Transmit_DMA+0x84>
 8005dd6:	bf00      	nop
 8005dd8:	08005de5 	.word	0x08005de5
 8005ddc:	08005e53 	.word	0x08005e53
 8005de0:	08005e5f 	.word	0x08005e5f

08005de4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005de4:	b508      	push	{r3, lr}
 8005de6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de8:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f013 0f20 	tst.w	r3, #32
 8005df2:	d118      	bne.n	8005e26 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dfa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f102 0308 	add.w	r3, r2, #8
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	3208      	adds	r2, #8
 8005e0a:	e842 3100 	strex	r1, r3, [r2]
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	d1f3      	bne.n	8005dfa <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	e852 3f00 	ldrex	r3, [r2]
 8005e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	e842 3100 	strex	r1, r3, [r2]
 8005e20:	2900      	cmp	r1, #0
 8005e22:	d1f6      	bne.n	8005e12 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e24:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005e26:	f7fc f96d 	bl	8002104 <HAL_UART_TxCpltCallback>
}
 8005e2a:	e7fb      	b.n	8005e24 <UART_DMATransmitCplt+0x40>

08005e2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e2c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e2e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	e852 3f00 	ldrex	r3, [r2]
 8005e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	e842 3100 	strex	r1, r3, [r2]
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d1f6      	bne.n	8005e2e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e40:	2320      	movs	r3, #32
 8005e42:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4a:	f7fc f95b 	bl	8002104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e4e:	bd08      	pop	{r3, pc}

08005e50 <HAL_UART_TxHalfCpltCallback>:
}
 8005e50:	4770      	bx	lr

08005e52 <UART_DMATxHalfCplt>:
{
 8005e52:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005e54:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005e56:	f7ff fffb 	bl	8005e50 <HAL_UART_TxHalfCpltCallback>
}
 8005e5a:	bd08      	pop	{r3, pc}

08005e5c <HAL_UART_ErrorCallback>:
}
 8005e5c:	4770      	bx	lr

08005e5e <UART_DMAError>:
{
 8005e5e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e60:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e62:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e66:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e72:	d001      	beq.n	8005e78 <UART_DMAError+0x1a>
 8005e74:	2a21      	cmp	r2, #33	@ 0x21
 8005e76:	d010      	beq.n	8005e9a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005e80:	d001      	beq.n	8005e86 <UART_DMAError+0x28>
 8005e82:	2d22      	cmp	r5, #34	@ 0x22
 8005e84:	d010      	beq.n	8005ea8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e86:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005e8a:	f043 0310 	orr.w	r3, r3, #16
 8005e8e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8005e92:	4620      	mov	r0, r4
 8005e94:	f7ff ffe2 	bl	8005e5c <HAL_UART_ErrorCallback>
}
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff ff0b 	bl	8005cbc <UART_EndTxTransfer>
 8005ea6:	e7e7      	b.n	8005e78 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7ff ff1d 	bl	8005cee <UART_EndRxTransfer>
 8005eb4:	e7e7      	b.n	8005e86 <UART_DMAError+0x28>

08005eb6 <UART_DMAAbortOnError>:
{
 8005eb6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eb8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005ec0:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8005ec4:	f7ff ffca 	bl	8005e5c <HAL_UART_ErrorCallback>
}
 8005ec8:	bd08      	pop	{r3, pc}

08005eca <HAL_UARTEx_RxEventCallback>:
}
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_IRQHandler>:
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ed0:	6802      	ldr	r2, [r0, #0]
 8005ed2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ed4:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ed6:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8005ed8:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8005edc:	ea13 0f0c 	tst.w	r3, ip
 8005ee0:	d10d      	bne.n	8005efe <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ee2:	f013 0f20 	tst.w	r3, #32
 8005ee6:	d010      	beq.n	8005f0a <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ee8:	f010 0f20 	tst.w	r0, #32
 8005eec:	d102      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005eee:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8005ef2:	d00a      	beq.n	8005f0a <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8005ef4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005ef6:	b393      	cbz	r3, 8005f5e <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4798      	blx	r3
      return;
 8005efc:	e02f      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005efe:	4db4      	ldr	r5, [pc, #720]	@ (80061d0 <HAL_UART_IRQHandler+0x304>)
 8005f00:	400d      	ands	r5, r1
 8005f02:	d12d      	bne.n	8005f60 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f04:	4eb3      	ldr	r6, [pc, #716]	@ (80061d4 <HAL_UART_IRQHandler+0x308>)
 8005f06:	4230      	tst	r0, r6
 8005f08:	d12a      	bne.n	8005f60 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8005f0c:	2d01      	cmp	r5, #1
 8005f0e:	f000 80c0 	beq.w	8006092 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f12:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005f16:	d003      	beq.n	8005f20 <HAL_UART_IRQHandler+0x54>
 8005f18:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8005f1c:	f040 815e 	bne.w	80061dc <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f24:	d007      	beq.n	8005f36 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f26:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005f2a:	f040 815e 	bne.w	80061ea <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f2e:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8005f32:	f040 815a 	bne.w	80061ea <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f36:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005f3a:	d003      	beq.n	8005f44 <HAL_UART_IRQHandler+0x78>
 8005f3c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8005f40:	f040 815a 	bne.w	80061f8 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f44:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005f48:	d003      	beq.n	8005f52 <HAL_UART_IRQHandler+0x86>
 8005f4a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005f4e:	f040 8157 	bne.w	8006200 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f52:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_IRQHandler+0x92>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f2c0 8155 	blt.w	8006208 <HAL_UART_IRQHandler+0x33c>
}
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f60:	f013 0f01 	tst.w	r3, #1
 8005f64:	d009      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
 8005f66:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005f6a:	d006      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f6c:	2601      	movs	r6, #1
 8005f6e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f70:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005f74:	4332      	orrs	r2, r6
 8005f76:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7a:	f013 0f02 	tst.w	r3, #2
 8005f7e:	d00b      	beq.n	8005f98 <HAL_UART_IRQHandler+0xcc>
 8005f80:	f011 0f01 	tst.w	r1, #1
 8005f84:	d008      	beq.n	8005f98 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f86:	6822      	ldr	r2, [r4, #0]
 8005f88:	2602      	movs	r6, #2
 8005f8a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005f90:	f042 0204 	orr.w	r2, r2, #4
 8005f94:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f98:	f013 0f04 	tst.w	r3, #4
 8005f9c:	d00b      	beq.n	8005fb6 <HAL_UART_IRQHandler+0xea>
 8005f9e:	f011 0f01 	tst.w	r1, #1
 8005fa2:	d008      	beq.n	8005fb6 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	2604      	movs	r6, #4
 8005fa8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005faa:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005fae:	f042 0202 	orr.w	r2, r2, #2
 8005fb2:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fb6:	f013 0f08 	tst.w	r3, #8
 8005fba:	d00b      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fbc:	f010 0f20 	tst.w	r0, #32
 8005fc0:	d100      	bne.n	8005fc4 <HAL_UART_IRQHandler+0xf8>
 8005fc2:	b13d      	cbz	r5, 8005fd4 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	2508      	movs	r5, #8
 8005fc8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fca:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005fce:	432a      	orrs	r2, r5
 8005fd0:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fd4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x128>
 8005fda:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8005fde:	d009      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8005fe6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fe8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005fec:	f042 0220 	orr.w	r2, r2, #32
 8005ff0:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d0b0      	beq.n	8005f5e <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ffc:	f013 0f20 	tst.w	r3, #32
 8006000:	d009      	beq.n	8006016 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006002:	f010 0f20 	tst.w	r0, #32
 8006006:	d102      	bne.n	800600e <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006008:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800600c:	d003      	beq.n	8006016 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800600e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006010:	b10b      	cbz	r3, 8006016 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8006012:	4620      	mov	r0, r4
 8006014:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006016:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006022:	d102      	bne.n	800602a <HAL_UART_IRQHandler+0x15e>
 8006024:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8006028:	d02c      	beq.n	8006084 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff fe5f 	bl	8005cee <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006038:	d020      	beq.n	800607c <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	f102 0308 	add.w	r3, r2, #8
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	3208      	adds	r2, #8
 800604a:	e842 3100 	strex	r1, r3, [r2]
 800604e:	2900      	cmp	r1, #0
 8006050:	d1f3      	bne.n	800603a <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8006052:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8006056:	b16b      	cbz	r3, 8006074 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006058:	4a5f      	ldr	r2, [pc, #380]	@ (80061d8 <HAL_UART_IRQHandler+0x30c>)
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006060:	f7fd fd62 	bl	8003b28 <HAL_DMA_Abort_IT>
 8006064:	2800      	cmp	r0, #0
 8006066:	f43f af7a 	beq.w	8005f5e <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800606e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006070:	4798      	blx	r3
 8006072:	e774      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff fef1 	bl	8005e5c <HAL_UART_ErrorCallback>
 800607a:	e770      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff feed 	bl	8005e5c <HAL_UART_ErrorCallback>
 8006082:	e76c      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fee9 	bl	8005e5c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	2300      	movs	r3, #0
 800608c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8006090:	e765      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006092:	f013 0f10 	tst.w	r3, #16
 8006096:	f43f af3c 	beq.w	8005f12 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800609a:	f010 0f10 	tst.w	r0, #16
 800609e:	f43f af38 	beq.w	8005f12 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060a2:	2310      	movs	r3, #16
 80060a4:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80060ae:	d053      	beq.n	8006158 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060b0:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80060b4:	6813      	ldr	r3, [r2, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f43f af4f 	beq.w	8005f5e <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80060c4:	4299      	cmp	r1, r3
 80060c6:	f67f af4a 	bls.w	8005f5e <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 80060ca:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060ce:	6813      	ldr	r3, [r2, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f013 0f20 	tst.w	r3, #32
 80060d6:	d132      	bne.n	800613e <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	e852 3f00 	ldrex	r3, [r2]
 80060de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	e842 3100 	strex	r1, r3, [r2]
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d1f6      	bne.n	80060d8 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	f102 0308 	add.w	r3, r2, #8
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	3208      	adds	r2, #8
 80060fa:	e842 3100 	strex	r1, r3, [r2]
 80060fe:	2900      	cmp	r1, #0
 8006100:	d1f3      	bne.n	80060ea <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	f102 0308 	add.w	r3, r2, #8
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	3208      	adds	r2, #8
 8006112:	e842 3100 	strex	r1, r3, [r2]
 8006116:	2900      	cmp	r1, #0
 8006118:	d1f3      	bne.n	8006102 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 800611a:	2320      	movs	r3, #32
 800611c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	2300      	movs	r3, #0
 8006122:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006124:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	e852 3f00 	ldrex	r3, [r2]
 800612a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	e842 3100 	strex	r1, r3, [r2]
 8006132:	2900      	cmp	r1, #0
 8006134:	d1f6      	bne.n	8006124 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006136:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800613a:	f7fd fcbb 	bl	8003ab4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800613e:	2302      	movs	r3, #2
 8006140:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006142:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006146:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800614a:	b29b      	uxth	r3, r3
 800614c:	1ac9      	subs	r1, r1, r3
 800614e:	b289      	uxth	r1, r1
 8006150:	4620      	mov	r0, r4
 8006152:	f7ff feba 	bl	8005eca <HAL_UARTEx_RxEventCallback>
      return;
 8006156:	e702      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006158:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800615c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006160:	b29b      	uxth	r3, r3
 8006162:	1ac9      	subs	r1, r1, r3
 8006164:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006166:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	f43f aef6 	beq.w	8005f5e <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8006172:	2900      	cmp	r1, #0
 8006174:	f43f aef3 	beq.w	8005f5e <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006178:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	e852 3f00 	ldrex	r3, [r2]
 800617e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	e842 3000 	strex	r0, r3, [r2]
 8006186:	2800      	cmp	r0, #0
 8006188:	d1f6      	bne.n	8006178 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800618a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f102 0308 	add.w	r3, r2, #8
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006198:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	3208      	adds	r2, #8
 800619e:	e842 3000 	strex	r0, r3, [r2]
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d1f1      	bne.n	800618a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80061a6:	2320      	movs	r3, #32
 80061a8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ac:	2300      	movs	r3, #0
 80061ae:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 80061b0:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	e852 3f00 	ldrex	r3, [r2]
 80061b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	e842 3000 	strex	r0, r3, [r2]
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d1f6      	bne.n	80061b2 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061c4:	2302      	movs	r3, #2
 80061c6:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff fe7e 	bl	8005eca <HAL_UARTEx_RxEventCallback>
      return;
 80061ce:	e6c6      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
 80061d0:	10000001 	.word	0x10000001
 80061d4:	04000120 	.word	0x04000120
 80061d8:	08005eb7 	.word	0x08005eb7
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80061e0:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fe64 	bl	8006eb0 <HAL_UARTEx_WakeupCallback>
    return;
 80061e8:	e6b9      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 80061ea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f43f aeb6 	beq.w	8005f5e <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 80061f2:	4620      	mov	r0, r4
 80061f4:	4798      	blx	r3
    return;
 80061f6:	e6b2      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 80061f8:	4620      	mov	r0, r4
 80061fa:	f7ff fe17 	bl	8005e2c <UART_EndTransmit_IT>
    return;
 80061fe:	e6ae      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fe57 	bl	8006eb4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006206:	e6aa      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fe52 	bl	8006eb2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800620e:	e6a6      	b.n	8005f5e <HAL_UART_IRQHandler+0x92>

08006210 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006210:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8006212:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006216:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800621a:	2a22      	cmp	r2, #34	@ 0x22
 800621c:	d005      	beq.n	800622a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800621e:	6802      	ldr	r2, [r0, #0]
 8006220:	6993      	ldr	r3, [r2, #24]
 8006222:	f043 0308 	orr.w	r3, r3, #8
 8006226:	6193      	str	r3, [r2, #24]
  }
}
 8006228:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800622a:	6802      	ldr	r2, [r0, #0]
 800622c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800622e:	b2db      	uxtb	r3, r3
 8006230:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8006232:	400b      	ands	r3, r1
 8006234:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006236:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006238:	3301      	adds	r3, #1
 800623a:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800623c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29b      	uxth	r3, r3
 8006246:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800624a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e9      	bne.n	8006228 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006254:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	e852 3f00 	ldrex	r3, [r2]
 800625a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	e842 3100 	strex	r1, r3, [r2]
 8006262:	2900      	cmp	r1, #0
 8006264:	d1f6      	bne.n	8006254 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006266:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	f102 0308 	add.w	r3, r2, #8
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	3208      	adds	r2, #8
 8006276:	e842 3100 	strex	r1, r3, [r2]
 800627a:	2900      	cmp	r1, #0
 800627c:	d1f3      	bne.n	8006266 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800627e:	2320      	movs	r3, #32
 8006280:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006288:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800628a:	6803      	ldr	r3, [r0, #0]
 800628c:	4a16      	ldr	r2, [pc, #88]	@ (80062e8 <UART_RxISR_8BIT+0xd8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00c      	beq.n	80062ac <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006298:	d008      	beq.n	80062ac <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800629a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	e852 3f00 	ldrex	r3, [r2]
 80062a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	e842 3100 	strex	r1, r3, [r2]
 80062a8:	2900      	cmp	r1, #0
 80062aa:	d1f6      	bne.n	800629a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ac:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d116      	bne.n	80062e0 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	2300      	movs	r3, #0
 80062b4:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	e852 3f00 	ldrex	r3, [r2]
 80062bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	e842 3100 	strex	r1, r3, [r2]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d1f6      	bne.n	80062b6 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062c8:	6803      	ldr	r3, [r0, #0]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	f012 0f10 	tst.w	r2, #16
 80062d0:	d001      	beq.n	80062d6 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062d2:	2210      	movs	r2, #16
 80062d4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80062da:	f7ff fdf6 	bl	8005eca <HAL_UARTEx_RxEventCallback>
 80062de:	e7a3      	b.n	8006228 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80062e0:	f7fb ff20 	bl	8002124 <HAL_UART_RxCpltCallback>
 80062e4:	e7a0      	b.n	8006228 <UART_RxISR_8BIT+0x18>
 80062e6:	bf00      	nop
 80062e8:	40008000 	.word	0x40008000

080062ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062ec:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062ee:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062f2:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80062f6:	2b22      	cmp	r3, #34	@ 0x22
 80062f8:	d005      	beq.n	8006306 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062fa:	6802      	ldr	r2, [r0, #0]
 80062fc:	6993      	ldr	r3, [r2, #24]
 80062fe:	f043 0308 	orr.w	r3, r3, #8
 8006302:	6193      	str	r3, [r2, #24]
  }
}
 8006304:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006306:	6803      	ldr	r3, [r0, #0]
 8006308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800630a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800630c:	4013      	ands	r3, r2
 800630e:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006310:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006312:	3302      	adds	r3, #2
 8006314:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8006316:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29b      	uxth	r3, r3
 8006320:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006324:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1ea      	bne.n	8006304 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800632e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	e852 3f00 	ldrex	r3, [r2]
 8006334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	e842 3100 	strex	r1, r3, [r2]
 800633c:	2900      	cmp	r1, #0
 800633e:	d1f6      	bne.n	800632e <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	f102 0308 	add.w	r3, r2, #8
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	3208      	adds	r2, #8
 8006350:	e842 3100 	strex	r1, r3, [r2]
 8006354:	2900      	cmp	r1, #0
 8006356:	d1f3      	bne.n	8006340 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006358:	2320      	movs	r3, #32
 800635a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006362:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006364:	6803      	ldr	r3, [r0, #0]
 8006366:	4a16      	ldr	r2, [pc, #88]	@ (80063c0 <UART_RxISR_16BIT+0xd4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00c      	beq.n	8006386 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006372:	d008      	beq.n	8006386 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006374:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	e852 3f00 	ldrex	r3, [r2]
 800637a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	e842 3100 	strex	r1, r3, [r2]
 8006382:	2900      	cmp	r1, #0
 8006384:	d1f6      	bne.n	8006374 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006386:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d116      	bne.n	80063ba <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638c:	2300      	movs	r3, #0
 800638e:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	e852 3f00 	ldrex	r3, [r2]
 8006396:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	e842 3100 	strex	r1, r3, [r2]
 800639e:	2900      	cmp	r1, #0
 80063a0:	d1f6      	bne.n	8006390 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063a2:	6803      	ldr	r3, [r0, #0]
 80063a4:	69da      	ldr	r2, [r3, #28]
 80063a6:	f012 0f10 	tst.w	r2, #16
 80063aa:	d001      	beq.n	80063b0 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ac:	2210      	movs	r2, #16
 80063ae:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80063b4:	f7ff fd89 	bl	8005eca <HAL_UARTEx_RxEventCallback>
 80063b8:	e7a4      	b.n	8006304 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80063ba:	f7fb feb3 	bl	8002124 <HAL_UART_RxCpltCallback>
 80063be:	e7a1      	b.n	8006304 <UART_RxISR_16BIT+0x18>
 80063c0:	40008000 	.word	0x40008000

080063c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80063c8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063cc:	6803      	ldr	r3, [r0, #0]
 80063ce:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80063d0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80063d4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80063dc:	2a22      	cmp	r2, #34	@ 0x22
 80063de:	d005      	beq.n	80063ec <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	f042 0208 	orr.w	r2, r2, #8
 80063e6:	619a      	str	r2, [r3, #24]
  }
}
 80063e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ec:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80063ee:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063f2:	e008      	b.n	8006406 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d14c      	bne.n	8006496 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80063fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04e      	beq.n	80064a4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006406:	2f00      	cmp	r7, #0
 8006408:	f000 809a 	beq.w	8006540 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800640c:	f015 0f20 	tst.w	r5, #32
 8006410:	f000 8096 	beq.w	8006540 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006418:	b2f3      	uxtb	r3, r6
 800641a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800641c:	400b      	ands	r3, r1
 800641e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006420:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006422:	3301      	adds	r3, #1
 8006424:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8006426:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29b      	uxth	r3, r3
 8006430:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006438:	f015 0f07 	tst.w	r5, #7
 800643c:	d0de      	beq.n	80063fc <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800643e:	f015 0f01 	tst.w	r5, #1
 8006442:	d009      	beq.n	8006458 <UART_RxISR_8BIT_FIFOEN+0x94>
 8006444:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8006448:	d006      	beq.n	8006458 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800644a:	2201      	movs	r2, #1
 800644c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800644e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006458:	f015 0f02 	tst.w	r5, #2
 800645c:	d00b      	beq.n	8006476 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800645e:	f018 0f01 	tst.w	r8, #1
 8006462:	d008      	beq.n	8006476 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	2202      	movs	r2, #2
 8006468:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800646a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800646e:	f043 0304 	orr.w	r3, r3, #4
 8006472:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006476:	f015 0f04 	tst.w	r5, #4
 800647a:	d0bb      	beq.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800647c:	f018 0f01 	tst.w	r8, #1
 8006480:	d0b8      	beq.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	2204      	movs	r2, #4
 8006486:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006488:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006494:	e7ae      	b.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff fce0 	bl	8005e5c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649c:	2300      	movs	r3, #0
 800649e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80064a2:	e7ab      	b.n	80063fc <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	e852 3f00 	ldrex	r3, [r2]
 80064aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	e842 3100 	strex	r1, r3, [r2]
 80064b2:	2900      	cmp	r1, #0
 80064b4:	d1f6      	bne.n	80064a4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	f102 0308 	add.w	r3, r2, #8
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	3208      	adds	r2, #8
 80064ca:	e842 3100 	strex	r1, r3, [r2]
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d1f1      	bne.n	80064b6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80064d2:	2320      	movs	r3, #32
 80064d4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064dc:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	4a29      	ldr	r2, [pc, #164]	@ (8006588 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80064ec:	d106      	bne.n	80064fc <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ee:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d00d      	beq.n	8006510 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7fb fe15 	bl	8002124 <HAL_UART_RxCpltCallback>
 80064fa:	e784      	b.n	8006406 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	e852 3f00 	ldrex	r3, [r2]
 8006502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	e842 3100 	strex	r1, r3, [r2]
 800650a:	2900      	cmp	r1, #0
 800650c:	d1f6      	bne.n	80064fc <UART_RxISR_8BIT_FIFOEN+0x138>
 800650e:	e7ee      	b.n	80064ee <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006510:	2300      	movs	r3, #0
 8006512:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006514:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	e852 3f00 	ldrex	r3, [r2]
 800651a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	e842 3100 	strex	r1, r3, [r2]
 8006522:	2900      	cmp	r1, #0
 8006524:	d1f6      	bne.n	8006514 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	f012 0f10 	tst.w	r2, #16
 800652e:	d001      	beq.n	8006534 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006530:	2210      	movs	r2, #16
 8006532:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006534:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff fcc6 	bl	8005eca <HAL_UARTEx_RxEventCallback>
 800653e:	e762      	b.n	8006406 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006540:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006544:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006546:	2b00      	cmp	r3, #0
 8006548:	f43f af4e 	beq.w	80063e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 800654c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8006550:	429a      	cmp	r2, r3
 8006552:	f67f af49 	bls.w	80063e8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006556:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	f102 0308 	add.w	r3, r2, #8
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	3208      	adds	r2, #8
 8006566:	e842 3100 	strex	r1, r3, [r2]
 800656a:	2900      	cmp	r1, #0
 800656c:	d1f3      	bne.n	8006556 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800656e:	4b07      	ldr	r3, [pc, #28]	@ (800658c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8006570:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006572:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	e852 3f00 	ldrex	r3, [r2]
 8006578:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	e842 3100 	strex	r1, r3, [r2]
 8006580:	2900      	cmp	r1, #0
 8006582:	d1f6      	bne.n	8006572 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006584:	e730      	b.n	80063e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006586:	bf00      	nop
 8006588:	40008000 	.word	0x40008000
 800658c:	08006211 	.word	0x08006211

08006590 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006594:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006598:	6803      	ldr	r3, [r0, #0]
 800659a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800659c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80065a0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065a4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80065a8:	2a22      	cmp	r2, #34	@ 0x22
 80065aa:	d005      	beq.n	80065b8 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	f042 0208 	orr.w	r2, r2, #8
 80065b2:	619a      	str	r2, [r3, #24]
  }
}
 80065b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80065ba:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065be:	e008      	b.n	80065d2 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d14b      	bne.n	8006660 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80065c8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d04d      	beq.n	800666e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065d2:	2f00      	cmp	r7, #0
 80065d4:	f000 8099 	beq.w	800670a <UART_RxISR_16BIT_FIFOEN+0x17a>
 80065d8:	f015 0f20 	tst.w	r5, #32
 80065dc:	f000 8095 	beq.w	800670a <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065e4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80065e6:	4033      	ands	r3, r6
 80065e8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80065ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065ec:	3302      	adds	r3, #2
 80065ee:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80065f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006602:	f015 0f07 	tst.w	r5, #7
 8006606:	d0df      	beq.n	80065c8 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006608:	f015 0f01 	tst.w	r5, #1
 800660c:	d009      	beq.n	8006622 <UART_RxISR_16BIT_FIFOEN+0x92>
 800660e:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8006612:	d006      	beq.n	8006622 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006614:	2201      	movs	r2, #1
 8006616:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006618:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006622:	f015 0f02 	tst.w	r5, #2
 8006626:	d00b      	beq.n	8006640 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006628:	f018 0f01 	tst.w	r8, #1
 800662c:	d008      	beq.n	8006640 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	2202      	movs	r2, #2
 8006632:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006634:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006640:	f015 0f04 	tst.w	r5, #4
 8006644:	d0bc      	beq.n	80065c0 <UART_RxISR_16BIT_FIFOEN+0x30>
 8006646:	f018 0f01 	tst.w	r8, #1
 800664a:	d0b9      	beq.n	80065c0 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	2204      	movs	r2, #4
 8006650:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006652:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006656:	f043 0302 	orr.w	r3, r3, #2
 800665a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800665e:	e7af      	b.n	80065c0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff fbfb 	bl	8005e5c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
 8006668:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800666c:	e7ac      	b.n	80065c8 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800666e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	e852 3f00 	ldrex	r3, [r2]
 8006674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	e842 3100 	strex	r1, r3, [r2]
 800667c:	2900      	cmp	r1, #0
 800667e:	d1f6      	bne.n	800666e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006680:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	f102 0308 	add.w	r3, r2, #8
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800668e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	3208      	adds	r2, #8
 8006694:	e842 3100 	strex	r1, r3, [r2]
 8006698:	2900      	cmp	r1, #0
 800669a:	d1f1      	bne.n	8006680 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800669c:	2320      	movs	r3, #32
 800669e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a6:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	4a29      	ldr	r2, [pc, #164]	@ (8006750 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80066b6:	d106      	bne.n	80066c6 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d00d      	beq.n	80066da <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 80066be:	4620      	mov	r0, r4
 80066c0:	f7fb fd30 	bl	8002124 <HAL_UART_RxCpltCallback>
 80066c4:	e785      	b.n	80065d2 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	e852 3f00 	ldrex	r3, [r2]
 80066cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	e842 3100 	strex	r1, r3, [r2]
 80066d4:	2900      	cmp	r1, #0
 80066d6:	d1f6      	bne.n	80066c6 <UART_RxISR_16BIT_FIFOEN+0x136>
 80066d8:	e7ee      	b.n	80066b8 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	2300      	movs	r3, #0
 80066dc:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	e852 3f00 	ldrex	r3, [r2]
 80066e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	e842 3100 	strex	r1, r3, [r2]
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d1f6      	bne.n	80066de <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	f012 0f10 	tst.w	r2, #16
 80066f8:	d001      	beq.n	80066fe <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066fa:	2210      	movs	r2, #16
 80066fc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff fbe1 	bl	8005eca <HAL_UARTEx_RxEventCallback>
 8006708:	e763      	b.n	80065d2 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800670a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800670e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006710:	2b00      	cmp	r3, #0
 8006712:	f43f af4f 	beq.w	80065b4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006716:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800671a:	429a      	cmp	r2, r3
 800671c:	f67f af4a 	bls.w	80065b4 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006720:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	f102 0308 	add.w	r3, r2, #8
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	3208      	adds	r2, #8
 8006730:	e842 3100 	strex	r1, r3, [r2]
 8006734:	2900      	cmp	r1, #0
 8006736:	d1f3      	bne.n	8006720 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8006738:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800673a:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800673c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	e852 3f00 	ldrex	r3, [r2]
 8006742:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	e842 3100 	strex	r1, r3, [r2]
 800674a:	2900      	cmp	r1, #0
 800674c:	d1f6      	bne.n	800673c <UART_RxISR_16BIT_FIFOEN+0x1ac>
 800674e:	e731      	b.n	80065b4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006750:	40008000 	.word	0x40008000
 8006754:	080062ed 	.word	0x080062ed

08006758 <UART_SetConfig>:
{
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800675c:	6883      	ldr	r3, [r0, #8]
 800675e:	6902      	ldr	r2, [r0, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	6942      	ldr	r2, [r0, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	69c2      	ldr	r2, [r0, #28]
 8006768:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800676a:	6801      	ldr	r1, [r0, #0]
 800676c:	6808      	ldr	r0, [r1, #0]
 800676e:	4a9d      	ldr	r2, [pc, #628]	@ (80069e4 <UART_SetConfig+0x28c>)
 8006770:	4002      	ands	r2, r0
 8006772:	431a      	orrs	r2, r3
 8006774:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	6853      	ldr	r3, [r2, #4]
 800677a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800677e:	68e1      	ldr	r1, [r4, #12]
 8006780:	430b      	orrs	r3, r1
 8006782:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006784:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	4b97      	ldr	r3, [pc, #604]	@ (80069e8 <UART_SetConfig+0x290>)
 800678a:	429a      	cmp	r2, r3
 800678c:	d001      	beq.n	8006792 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800678e:	6a23      	ldr	r3, [r4, #32]
 8006790:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006792:	6893      	ldr	r3, [r2, #8]
 8006794:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006798:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800679c:	430b      	orrs	r3, r1
 800679e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80067a4:	f023 030f 	bic.w	r3, r3, #15
 80067a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80067aa:	430b      	orrs	r3, r1
 80067ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	4a8e      	ldr	r2, [pc, #568]	@ (80069ec <UART_SetConfig+0x294>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01c      	beq.n	80067f0 <UART_SetConfig+0x98>
 80067b6:	4a8e      	ldr	r2, [pc, #568]	@ (80069f0 <UART_SetConfig+0x298>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d031      	beq.n	8006820 <UART_SetConfig+0xc8>
 80067bc:	4a8a      	ldr	r2, [pc, #552]	@ (80069e8 <UART_SetConfig+0x290>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d04b      	beq.n	800685a <UART_SetConfig+0x102>
 80067c2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80067c4:	4988      	ldr	r1, [pc, #544]	@ (80069e8 <UART_SetConfig+0x290>)
 80067c6:	428b      	cmp	r3, r1
 80067c8:	d068      	beq.n	800689c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ca:	69e0      	ldr	r0, [r4, #28]
 80067cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80067d0:	f000 80a5 	beq.w	800691e <UART_SetConfig+0x1c6>
    switch (clocksource)
 80067d4:	2a08      	cmp	r2, #8
 80067d6:	f200 811f 	bhi.w	8006a18 <UART_SetConfig+0x2c0>
 80067da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80067de:	00d3      	.short	0x00d3
 80067e0:	00d100f5 	.word	0x00d100f5
 80067e4:	00f8011d 	.word	0x00f8011d
 80067e8:	011d011d 	.word	0x011d011d
 80067ec:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80067f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067f4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80067f8:	f002 0203 	and.w	r2, r2, #3
 80067fc:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006800:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8006804:	2a03      	cmp	r2, #3
 8006806:	d809      	bhi.n	800681c <UART_SetConfig+0xc4>
 8006808:	e8df f002 	tbb	[pc, r2]
 800680c:	063c0402 	.word	0x063c0402
 8006810:	2201      	movs	r2, #1
 8006812:	e7d7      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006814:	2204      	movs	r2, #4
 8006816:	e7d5      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006818:	2208      	movs	r2, #8
 800681a:	e7d3      	b.n	80067c4 <UART_SetConfig+0x6c>
 800681c:	2210      	movs	r2, #16
 800681e:	e7d1      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006820:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006824:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006828:	f002 020c 	and.w	r2, r2, #12
 800682c:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8006830:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8006834:	2a0c      	cmp	r2, #12
 8006836:	d80e      	bhi.n	8006856 <UART_SetConfig+0xfe>
 8006838:	e8df f002 	tbb	[pc, r2]
 800683c:	0d0d0d07 	.word	0x0d0d0d07
 8006840:	0d0d0d09 	.word	0x0d0d0d09
 8006844:	0d0d0d26 	.word	0x0d0d0d26
 8006848:	0b          	.byte	0x0b
 8006849:	00          	.byte	0x00
 800684a:	2200      	movs	r2, #0
 800684c:	e7ba      	b.n	80067c4 <UART_SetConfig+0x6c>
 800684e:	2204      	movs	r2, #4
 8006850:	e7b8      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006852:	2208      	movs	r2, #8
 8006854:	e7b6      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006856:	2210      	movs	r2, #16
 8006858:	e7b4      	b.n	80067c4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800685a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800685e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006862:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8006866:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800686a:	d00f      	beq.n	800688c <UART_SetConfig+0x134>
 800686c:	d805      	bhi.n	800687a <UART_SetConfig+0x122>
 800686e:	b17a      	cbz	r2, 8006890 <UART_SetConfig+0x138>
 8006870:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006874:	d10e      	bne.n	8006894 <UART_SetConfig+0x13c>
 8006876:	2204      	movs	r2, #4
 8006878:	e7a4      	b.n	80067c4 <UART_SetConfig+0x6c>
 800687a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800687e:	d10b      	bne.n	8006898 <UART_SetConfig+0x140>
 8006880:	2208      	movs	r2, #8
 8006882:	e79f      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006884:	2202      	movs	r2, #2
 8006886:	e79d      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006888:	2202      	movs	r2, #2
 800688a:	e79b      	b.n	80067c4 <UART_SetConfig+0x6c>
 800688c:	2202      	movs	r2, #2
 800688e:	e799      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006890:	2200      	movs	r2, #0
 8006892:	e797      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006894:	2210      	movs	r2, #16
 8006896:	e795      	b.n	80067c4 <UART_SetConfig+0x6c>
 8006898:	2210      	movs	r2, #16
 800689a:	e793      	b.n	80067c4 <UART_SetConfig+0x6c>
    switch (clocksource)
 800689c:	2a08      	cmp	r2, #8
 800689e:	f200 809c 	bhi.w	80069da <UART_SetConfig+0x282>
 80068a2:	e8df f002 	tbb	[pc, r2]
 80068a6:	9a08      	.short	0x9a08
 80068a8:	9a379a3a 	.word	0x9a379a3a
 80068ac:	9a9a      	.short	0x9a9a
 80068ae:	05          	.byte	0x05
 80068af:	00          	.byte	0x00
 80068b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80068b4:	e004      	b.n	80068c0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b6:	f7fe fabd 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f000 808f 	beq.w	80069de <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80068c2:	4b4c      	ldr	r3, [pc, #304]	@ (80069f4 <UART_SetConfig+0x29c>)
 80068c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068c8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068cc:	6865      	ldr	r5, [r4, #4]
 80068ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80068d2:	4299      	cmp	r1, r3
 80068d4:	f200 8094 	bhi.w	8006a00 <UART_SetConfig+0x2a8>
 80068d8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80068dc:	f200 8092 	bhi.w	8006a04 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e0:	2600      	movs	r6, #0
 80068e2:	4633      	mov	r3, r6
 80068e4:	4631      	mov	r1, r6
 80068e6:	f7fa f9b3 	bl	8000c50 <__aeabi_uldivmod>
 80068ea:	0209      	lsls	r1, r1, #8
 80068ec:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80068f0:	0200      	lsls	r0, r0, #8
 80068f2:	086b      	lsrs	r3, r5, #1
 80068f4:	18c0      	adds	r0, r0, r3
 80068f6:	462a      	mov	r2, r5
 80068f8:	4633      	mov	r3, r6
 80068fa:	f141 0100 	adc.w	r1, r1, #0
 80068fe:	f7fa f9a7 	bl	8000c50 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006902:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006906:	4b3c      	ldr	r3, [pc, #240]	@ (80069f8 <UART_SetConfig+0x2a0>)
 8006908:	429a      	cmp	r2, r3
 800690a:	d87d      	bhi.n	8006a08 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	60d8      	str	r0, [r3, #12]
 8006910:	4630      	mov	r0, r6
 8006912:	e050      	b.n	80069b6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006914:	f7fd fd90 	bl	8004438 <HAL_RCC_GetSysClockFreq>
        break;
 8006918:	e7cf      	b.n	80068ba <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800691a:	4838      	ldr	r0, [pc, #224]	@ (80069fc <UART_SetConfig+0x2a4>)
 800691c:	e7d0      	b.n	80068c0 <UART_SetConfig+0x168>
    switch (clocksource)
 800691e:	2a08      	cmp	r2, #8
 8006920:	d874      	bhi.n	8006a0c <UART_SetConfig+0x2b4>
 8006922:	e8df f002 	tbb	[pc, r2]
 8006926:	2707      	.short	0x2707
 8006928:	732a7305 	.word	0x732a7305
 800692c:	7373      	.short	0x7373
 800692e:	0b          	.byte	0x0b
 800692f:	00          	.byte	0x00
 8006930:	4832      	ldr	r0, [pc, #200]	@ (80069fc <UART_SetConfig+0x2a4>)
 8006932:	e003      	b.n	800693c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006934:	f7fe fa7e 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006938:	2800      	cmp	r0, #0
 800693a:	d069      	beq.n	8006a10 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800693e:	4b2d      	ldr	r3, [pc, #180]	@ (80069f4 <UART_SetConfig+0x29c>)
 8006940:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006944:	fbb0 f0f3 	udiv	r0, r0, r3
 8006948:	6862      	ldr	r2, [r4, #4]
 800694a:	0853      	lsrs	r3, r2, #1
 800694c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006950:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006954:	f1a3 0110 	sub.w	r1, r3, #16
 8006958:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800695c:	4291      	cmp	r1, r2
 800695e:	d859      	bhi.n	8006a14 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006960:	b29a      	uxth	r2, r3
 8006962:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006966:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800696a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	60d3      	str	r3, [r2, #12]
 8006970:	2000      	movs	r0, #0
 8006972:	e020      	b.n	80069b6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fe fa6e 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
        break;
 8006978:	e7de      	b.n	8006938 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800697a:	f7fd fd5d 	bl	8004438 <HAL_RCC_GetSysClockFreq>
        break;
 800697e:	e7db      	b.n	8006938 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006980:	481e      	ldr	r0, [pc, #120]	@ (80069fc <UART_SetConfig+0x2a4>)
 8006982:	e003      	b.n	800698c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006984:	f7fe fa56 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006988:	2800      	cmp	r0, #0
 800698a:	d047      	beq.n	8006a1c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800698e:	4b19      	ldr	r3, [pc, #100]	@ (80069f4 <UART_SetConfig+0x29c>)
 8006990:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006994:	fbb0 f0f3 	udiv	r0, r0, r3
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800699e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a2:	f1a0 0210 	sub.w	r2, r0, #16
 80069a6:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d838      	bhi.n	8006a20 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	b280      	uxth	r0, r0
 80069b2:	60d8      	str	r0, [r3, #12]
 80069b4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80069bc:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80069c4:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c8:	f7fe fa44 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
        break;
 80069cc:	e7dc      	b.n	8006988 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80069ce:	f7fd fd33 	bl	8004438 <HAL_RCC_GetSysClockFreq>
        break;
 80069d2:	e7d9      	b.n	8006988 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80069d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80069d8:	e7d8      	b.n	800698c <UART_SetConfig+0x234>
    switch (clocksource)
 80069da:	2001      	movs	r0, #1
 80069dc:	e7eb      	b.n	80069b6 <UART_SetConfig+0x25e>
 80069de:	2000      	movs	r0, #0
 80069e0:	e7e9      	b.n	80069b6 <UART_SetConfig+0x25e>
 80069e2:	bf00      	nop
 80069e4:	cfff69f3 	.word	0xcfff69f3
 80069e8:	40008000 	.word	0x40008000
 80069ec:	40013800 	.word	0x40013800
 80069f0:	40004400 	.word	0x40004400
 80069f4:	08012ddc 	.word	0x08012ddc
 80069f8:	000ffcff 	.word	0x000ffcff
 80069fc:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7d8      	b.n	80069b6 <UART_SetConfig+0x25e>
 8006a04:	2001      	movs	r0, #1
 8006a06:	e7d6      	b.n	80069b6 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e7d4      	b.n	80069b6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	e7d2      	b.n	80069b6 <UART_SetConfig+0x25e>
 8006a10:	2000      	movs	r0, #0
 8006a12:	e7d0      	b.n	80069b6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006a14:	2001      	movs	r0, #1
 8006a16:	e7ce      	b.n	80069b6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006a18:	2001      	movs	r0, #1
 8006a1a:	e7cc      	b.n	80069b6 <UART_SetConfig+0x25e>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	e7ca      	b.n	80069b6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006a20:	2001      	movs	r0, #1
 8006a22:	e7c8      	b.n	80069b6 <UART_SetConfig+0x25e>

08006a24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a24:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a26:	f013 0f08 	tst.w	r3, #8
 8006a2a:	d006      	beq.n	8006a3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2c:	6802      	ldr	r2, [r0, #0]
 8006a2e:	6853      	ldr	r3, [r2, #4]
 8006a30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a34:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006a36:	430b      	orrs	r3, r1
 8006a38:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a3a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a3c:	f013 0f01 	tst.w	r3, #1
 8006a40:	d006      	beq.n	8006a50 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a42:	6802      	ldr	r2, [r0, #0]
 8006a44:	6853      	ldr	r3, [r2, #4]
 8006a46:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a4a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a50:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a52:	f013 0f02 	tst.w	r3, #2
 8006a56:	d006      	beq.n	8006a66 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a58:	6802      	ldr	r2, [r0, #0]
 8006a5a:	6853      	ldr	r3, [r2, #4]
 8006a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a60:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006a62:	430b      	orrs	r3, r1
 8006a64:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a66:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a68:	f013 0f04 	tst.w	r3, #4
 8006a6c:	d006      	beq.n	8006a7c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a6e:	6802      	ldr	r2, [r0, #0]
 8006a70:	6853      	ldr	r3, [r2, #4]
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a76:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a7c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a7e:	f013 0f10 	tst.w	r3, #16
 8006a82:	d006      	beq.n	8006a92 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a84:	6802      	ldr	r2, [r0, #0]
 8006a86:	6893      	ldr	r3, [r2, #8]
 8006a88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a8c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a92:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a94:	f013 0f20 	tst.w	r3, #32
 8006a98:	d006      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a9a:	6802      	ldr	r2, [r0, #0]
 8006a9c:	6893      	ldr	r3, [r2, #8]
 8006a9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006aaa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006aae:	d00a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ab0:	6802      	ldr	r2, [r0, #0]
 8006ab2:	6853      	ldr	r3, [r2, #4]
 8006ab4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ab8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ac4:	d00b      	beq.n	8006ade <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ac6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006acc:	d006      	beq.n	8006adc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ace:	6802      	ldr	r2, [r0, #0]
 8006ad0:	6853      	ldr	r3, [r2, #4]
 8006ad2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006ad6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	6053      	str	r3, [r2, #4]
}
 8006adc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ade:	6802      	ldr	r2, [r0, #0]
 8006ae0:	6853      	ldr	r3, [r2, #4]
 8006ae2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006ae6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6053      	str	r3, [r2, #4]
 8006aec:	e7eb      	b.n	8006ac6 <UART_AdvFeatureConfig+0xa2>

08006aee <UART_WaitOnFlagUntilTimeout>:
{
 8006aee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af2:	4605      	mov	r5, r0
 8006af4:	460e      	mov	r6, r1
 8006af6:	4617      	mov	r7, r2
 8006af8:	4699      	mov	r9, r3
 8006afa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afe:	682b      	ldr	r3, [r5, #0]
 8006b00:	69dc      	ldr	r4, [r3, #28]
 8006b02:	ea36 0404 	bics.w	r4, r6, r4
 8006b06:	bf0c      	ite	eq
 8006b08:	2401      	moveq	r4, #1
 8006b0a:	2400      	movne	r4, #0
 8006b0c:	42bc      	cmp	r4, r7
 8006b0e:	d15b      	bne.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0xda>
    if (Timeout != HAL_MAX_DELAY)
 8006b10:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b14:	d0f3      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b16:	f7fa ffbd 	bl	8001a94 <HAL_GetTick>
 8006b1a:	eba0 0009 	sub.w	r0, r0, r9
 8006b1e:	4540      	cmp	r0, r8
 8006b20:	d833      	bhi.n	8006b8a <UART_WaitOnFlagUntilTimeout+0x9c>
 8006b22:	f1b8 0f00 	cmp.w	r8, #0
 8006b26:	d030      	beq.n	8006b8a <UART_WaitOnFlagUntilTimeout+0x9c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f012 0f04 	tst.w	r2, #4
 8006b30:	d0e5      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x10>
 8006b32:	2e80      	cmp	r6, #128	@ 0x80
 8006b34:	d0e3      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x10>
 8006b36:	2e40      	cmp	r6, #64	@ 0x40
 8006b38:	d0e1      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006b40:	d0dd      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b46:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b48:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	e852 3f00 	ldrex	r3, [r2]
 8006b4e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	e842 3100 	strex	r1, r3, [r2]
 8006b56:	2900      	cmp	r1, #0
 8006b58:	d1f6      	bne.n	8006b48 <UART_WaitOnFlagUntilTimeout+0x5a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	f102 0308 	add.w	r3, r2, #8
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	3208      	adds	r2, #8
 8006b6a:	e842 3100 	strex	r1, r3, [r2]
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	d1f3      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x6c>
          huart->gState = HAL_UART_STATE_READY;
 8006b72:	2320      	movs	r3, #32
 8006b74:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006b78:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8006b80:	2300      	movs	r3, #0
 8006b82:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006b86:	2003      	movs	r0, #3
 8006b88:	e01f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b8a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	e852 3f00 	ldrex	r3, [r2]
 8006b90:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	e842 3100 	strex	r1, r3, [r2]
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	d1f6      	bne.n	8006b8a <UART_WaitOnFlagUntilTimeout+0x9c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	f102 0308 	add.w	r3, r2, #8
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	3208      	adds	r2, #8
 8006bac:	e842 3100 	strex	r1, r3, [r2]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d1f3      	bne.n	8006b9c <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006bba:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8006bc4:	2003      	movs	r0, #3
 8006bc6:	e000      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xdc>
  return HAL_OK;
 8006bc8:	2000      	movs	r0, #0
}
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006bce <UART_CheckIdleState>:
{
 8006bce:	b530      	push	{r4, r5, lr}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006bda:	f7fa ff5b 	bl	8001a94 <HAL_GetTick>
 8006bde:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	f012 0f08 	tst.w	r2, #8
 8006be8:	d110      	bne.n	8006c0c <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f013 0f04 	tst.w	r3, #4
 8006bf2:	d119      	bne.n	8006c28 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	2000      	movs	r0, #0
 8006c00:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c02:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8006c04:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006c08:	b003      	add	sp, #12
 8006c0a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4603      	mov	r3, r0
 8006c14:	2200      	movs	r2, #0
 8006c16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff ff67 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0e2      	beq.n	8006bea <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006c24:	2003      	movs	r0, #3
 8006c26:	e7ef      	b.n	8006c08 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	462b      	mov	r3, r5
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c36:	4620      	mov	r0, r4
 8006c38:	f7ff ff59 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d0d9      	beq.n	8006bf4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006c40:	2003      	movs	r0, #3
 8006c42:	e7e1      	b.n	8006c08 <UART_CheckIdleState+0x3a>

08006c44 <HAL_UART_Init>:
  if (huart == NULL)
 8006c44:	b378      	cbz	r0, 8006ca6 <HAL_UART_Init+0x62>
{
 8006c46:	b510      	push	{r4, lr}
 8006c48:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8006c4e:	b30b      	cbz	r3, 8006c94 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006c50:	2324      	movs	r3, #36	@ 0x24
 8006c52:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006c56:	6822      	ldr	r2, [r4, #0]
 8006c58:	6813      	ldr	r3, [r2, #0]
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c60:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c62:	b9e3      	cbnz	r3, 8006c9e <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c64:	4620      	mov	r0, r4
 8006c66:	f7ff fd77 	bl	8006758 <UART_SetConfig>
 8006c6a:	2801      	cmp	r0, #1
 8006c6c:	d011      	beq.n	8006c92 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c6e:	6822      	ldr	r2, [r4, #0]
 8006c70:	6853      	ldr	r3, [r2, #4]
 8006c72:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006c76:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	6893      	ldr	r3, [r2, #8]
 8006c7c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006c80:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	6813      	ldr	r3, [r2, #0]
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff ff9e 	bl	8006bce <UART_CheckIdleState>
}
 8006c92:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c94:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006c98:	f7fb f930 	bl	8001efc <HAL_UART_MspInit>
 8006c9c:	e7d8      	b.n	8006c50 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff fec0 	bl	8006a24 <UART_AdvFeatureConfig>
 8006ca4:	e7de      	b.n	8006c64 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8006ca6:	2001      	movs	r0, #1
}
 8006ca8:	4770      	bx	lr
	...

08006cac <UART_Start_Receive_IT>:
{
 8006cac:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006cae:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006cb0:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006cb4:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8006cbc:	6883      	ldr	r3, [r0, #8]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d006      	beq.n	8006cd2 <UART_Start_Receive_IT+0x26>
 8006cc4:	b9a3      	cbnz	r3, 8006cf0 <UART_Start_Receive_IT+0x44>
 8006cc6:	6903      	ldr	r3, [r0, #16]
 8006cc8:	b973      	cbnz	r3, 8006ce8 <UART_Start_Receive_IT+0x3c>
 8006cca:	23ff      	movs	r3, #255	@ 0xff
 8006ccc:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006cd0:	e014      	b.n	8006cfc <UART_Start_Receive_IT+0x50>
 8006cd2:	6903      	ldr	r3, [r0, #16]
 8006cd4:	b923      	cbnz	r3, 8006ce0 <UART_Start_Receive_IT+0x34>
 8006cd6:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8006cda:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006cde:	e00d      	b.n	8006cfc <UART_Start_Receive_IT+0x50>
 8006ce0:	23ff      	movs	r3, #255	@ 0xff
 8006ce2:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006ce6:	e009      	b.n	8006cfc <UART_Start_Receive_IT+0x50>
 8006ce8:	237f      	movs	r3, #127	@ 0x7f
 8006cea:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006cee:	e005      	b.n	8006cfc <UART_Start_Receive_IT+0x50>
 8006cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf4:	d02d      	beq.n	8006d52 <UART_Start_Receive_IT+0xa6>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d02:	2322      	movs	r3, #34	@ 0x22
 8006d04:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d08:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	f101 0308 	add.w	r3, r1, #8
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	3108      	adds	r1, #8
 8006d18:	e841 3400 	strex	r4, r3, [r1]
 8006d1c:	2c00      	cmp	r4, #0
 8006d1e:	d1f3      	bne.n	8006d08 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d20:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d26:	d01e      	beq.n	8006d66 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d28:	6883      	ldr	r3, [r0, #8]
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2e:	d042      	beq.n	8006db6 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8006d30:	4b29      	ldr	r3, [pc, #164]	@ (8006dd8 <UART_Start_Receive_IT+0x12c>)
 8006d32:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d34:	6903      	ldr	r3, [r0, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d043      	beq.n	8006dc2 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	e852 3f00 	ldrex	r3, [r2]
 8006d40:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	e842 3100 	strex	r1, r3, [r2]
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	d1f6      	bne.n	8006d3a <UART_Start_Receive_IT+0x8e>
}
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	bc10      	pop	{r4}
 8006d50:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006d52:	6903      	ldr	r3, [r0, #16]
 8006d54:	b91b      	cbnz	r3, 8006d5e <UART_Start_Receive_IT+0xb2>
 8006d56:	237f      	movs	r3, #127	@ 0x7f
 8006d58:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006d5c:	e7ce      	b.n	8006cfc <UART_Start_Receive_IT+0x50>
 8006d5e:	233f      	movs	r3, #63	@ 0x3f
 8006d60:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006d64:	e7ca      	b.n	8006cfc <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d66:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d8dc      	bhi.n	8006d28 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6e:	6883      	ldr	r3, [r0, #8]
 8006d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d74:	d019      	beq.n	8006daa <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d76:	4b19      	ldr	r3, [pc, #100]	@ (8006ddc <UART_Start_Receive_IT+0x130>)
 8006d78:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d7a:	6903      	ldr	r3, [r0, #16]
 8006d7c:	b143      	cbz	r3, 8006d90 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	e852 3f00 	ldrex	r3, [r2]
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	e842 3100 	strex	r1, r3, [r2]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d1f6      	bne.n	8006d7e <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	f102 0308 	add.w	r3, r2, #8
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	3208      	adds	r2, #8
 8006da0:	e842 3100 	strex	r1, r3, [r2]
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d1f3      	bne.n	8006d90 <UART_Start_Receive_IT+0xe4>
 8006da8:	e7d0      	b.n	8006d4c <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006daa:	6903      	ldr	r3, [r0, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e2      	bne.n	8006d76 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006db0:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <UART_Start_Receive_IT+0x134>)
 8006db2:	6743      	str	r3, [r0, #116]	@ 0x74
 8006db4:	e7e1      	b.n	8006d7a <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	6903      	ldr	r3, [r0, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1b9      	bne.n	8006d30 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006dbc:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <UART_Start_Receive_IT+0x138>)
 8006dbe:	6743      	str	r3, [r0, #116]	@ 0x74
 8006dc0:	e7b8      	b.n	8006d34 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dc2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	e852 3f00 	ldrex	r3, [r2]
 8006dc8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	e842 3100 	strex	r1, r3, [r2]
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	d1f6      	bne.n	8006dc2 <UART_Start_Receive_IT+0x116>
 8006dd4:	e7ba      	b.n	8006d4c <UART_Start_Receive_IT+0xa0>
 8006dd6:	bf00      	nop
 8006dd8:	08006211 	.word	0x08006211
 8006ddc:	080063c5 	.word	0x080063c5
 8006de0:	08006591 	.word	0x08006591
 8006de4:	080062ed 	.word	0x080062ed

08006de8 <HAL_UART_Receive_IT>:
{
 8006de8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dea:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d117      	bne.n	8006e22 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8006df2:	b1c1      	cbz	r1, 8006e26 <HAL_UART_Receive_IT+0x3e>
 8006df4:	b1ca      	cbz	r2, 8006e2a <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	2300      	movs	r3, #0
 8006df8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	4c0c      	ldr	r4, [pc, #48]	@ (8006e30 <HAL_UART_Receive_IT+0x48>)
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	d00c      	beq.n	8006e1c <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006e08:	d008      	beq.n	8006e1c <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e0a:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	e854 3f00 	ldrex	r3, [r4]
 8006e10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	e844 3500 	strex	r5, r3, [r4]
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	d1f6      	bne.n	8006e0a <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e1c:	f7ff ff46 	bl	8006cac <UART_Start_Receive_IT>
 8006e20:	e000      	b.n	8006e24 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8006e22:	2002      	movs	r0, #2
}
 8006e24:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006e26:	2001      	movs	r0, #1
 8006e28:	e7fc      	b.n	8006e24 <HAL_UART_Receive_IT+0x3c>
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	e7fa      	b.n	8006e24 <HAL_UART_Receive_IT+0x3c>
 8006e2e:	bf00      	nop
 8006e30:	40008000 	.word	0x40008000

08006e34 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006e34:	b082      	sub	sp, #8
 8006e36:	ab02      	add	r3, sp, #8
 8006e38:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006e3c:	6802      	ldr	r2, [r0, #0]
 8006e3e:	6853      	ldr	r3, [r2, #4]
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006e4c:	6802      	ldr	r2, [r0, #0]
 8006e4e:	6853      	ldr	r3, [r2, #4]
 8006e50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006e54:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006e58:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006e5c:	6053      	str	r3, [r2, #4]
}
 8006e5e:	b002      	add	sp, #8
 8006e60:	4770      	bx	lr
	...

08006e64 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e64:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006e66:	b92b      	cbnz	r3, 8006e74 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e6e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8006e72:	4770      	bx	lr
{
 8006e74:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e76:	6803      	ldr	r3, [r0, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e7e:	6899      	ldr	r1, [r3, #8]
 8006e80:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e82:	4d09      	ldr	r5, [pc, #36]	@ (8006ea8 <UARTEx_SetNbDataToProcess+0x44>)
 8006e84:	5c6b      	ldrb	r3, [r5, r1]
 8006e86:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e88:	4c08      	ldr	r4, [pc, #32]	@ (8006eac <UARTEx_SetNbDataToProcess+0x48>)
 8006e8a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8006e90:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e94:	5cab      	ldrb	r3, [r5, r2]
 8006e96:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e98:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e9e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8006ea2:	bc30      	pop	{r4, r5}
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	08012dfc 	.word	0x08012dfc
 8006eac:	08012df4 	.word	0x08012df4

08006eb0 <HAL_UARTEx_WakeupCallback>:
}
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	ab04      	add	r3, sp, #16
 8006ebc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006ec0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d035      	beq.n	8006f34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006ec8:	4604      	mov	r4, r0
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006ed0:	2324      	movs	r3, #36	@ 0x24
 8006ed2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006ed6:	6802      	ldr	r2, [r0, #0]
 8006ed8:	6813      	ldr	r3, [r2, #0]
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006ee0:	6801      	ldr	r1, [r0, #0]
 8006ee2:	688b      	ldr	r3, [r1, #8]
 8006ee4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ee8:	9a02      	ldr	r2, [sp, #8]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006eee:	b1aa      	cbz	r2, 8006f1c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006efa:	f7fa fdcb 	bl	8001a94 <HAL_GetTick>
 8006efe:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f00:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8006f04:	9200      	str	r2, [sp, #0]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7ff fdee 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006f12:	b948      	cbnz	r0, 8006f28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006f14:	2320      	movs	r3, #32
 8006f16:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8006f1a:	e006      	b.n	8006f2a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006f1c:	ab04      	add	r3, sp, #16
 8006f1e:	e913 0006 	ldmdb	r3, {r1, r2}
 8006f22:	f7ff ff87 	bl	8006e34 <UARTEx_Wakeup_AddressConfig>
 8006f26:	e7e3      	b.n	8006ef0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006f28:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006f30:	b004      	add	sp, #16
 8006f32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006f34:	2002      	movs	r0, #2
 8006f36:	e7fb      	b.n	8006f30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006f38 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006f38:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d010      	beq.n	8006f62 <HAL_UARTEx_EnableStopMode+0x2a>
 8006f40:	2301      	movs	r3, #1
 8006f42:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006f46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	e852 3f00 	ldrex	r3, [r2]
 8006f4c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	e842 3100 	strex	r1, r3, [r2]
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d1f6      	bne.n	8006f46 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8006f5e:	4618      	mov	r0, r3
 8006f60:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006f62:	2002      	movs	r0, #2
}
 8006f64:	4770      	bx	lr

08006f66 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006f66:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d01d      	beq.n	8006faa <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006f72:	2301      	movs	r3, #1
 8006f74:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006f78:	2324      	movs	r3, #36	@ 0x24
 8006f7a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f7e:	6802      	ldr	r2, [r0, #0]
 8006f80:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006f82:	6811      	ldr	r1, [r2, #0]
 8006f84:	f021 0101 	bic.w	r1, r1, #1
 8006f88:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006f8e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006f92:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f94:	6802      	ldr	r2, [r0, #0]
 8006f96:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006f98:	f7ff ff64 	bl	8006e64 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006fa8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006faa:	2002      	movs	r0, #2
}
 8006fac:	4770      	bx	lr

08006fae <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006fae:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006fb0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	2324      	movs	r3, #36	@ 0x24
 8006fc2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc6:	6803      	ldr	r3, [r0, #0]
 8006fc8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fd2:	6802      	ldr	r2, [r0, #0]
 8006fd4:	6893      	ldr	r3, [r2, #8]
 8006fd6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006fda:	4319      	orrs	r1, r3
 8006fdc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006fde:	f7ff ff41 	bl	8006e64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006fe6:	2320      	movs	r3, #32
 8006fe8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006fec:	2000      	movs	r0, #0
 8006fee:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	e7fc      	b.n	8006ff2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006ff8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006ff8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006ffa:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d01d      	beq.n	800703e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007002:	4604      	mov	r4, r0
 8007004:	2301      	movs	r3, #1
 8007006:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800700a:	2324      	movs	r3, #36	@ 0x24
 800700c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007010:	6803      	ldr	r3, [r0, #0]
 8007012:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800701c:	6802      	ldr	r2, [r0, #0]
 800701e:	6893      	ldr	r3, [r2, #8]
 8007020:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8007024:	4319      	orrs	r1, r3
 8007026:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007028:	f7ff ff1c 	bl	8006e64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007030:	2320      	movs	r3, #32
 8007032:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007036:	2000      	movs	r0, #0
 8007038:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800703c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800703e:	2002      	movs	r0, #2
 8007040:	e7fc      	b.n	800703c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08007044 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007044:	2804      	cmp	r0, #4
 8007046:	d807      	bhi.n	8007058 <LmHandlerPackageIsInitialized+0x14>
{
 8007048:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800704a:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <LmHandlerPackageIsInitialized+0x1c>)
 800704c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	b11b      	cbz	r3, 800705c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8007054:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8007056:	bd08      	pop	{r3, pc}
        return false;
 8007058:	2000      	movs	r0, #0
}
 800705a:	4770      	bx	lr
        return false;
 800705c:	2000      	movs	r0, #0
 800705e:	e7fa      	b.n	8007056 <LmHandlerPackageIsInitialized+0x12>
 8007060:	20000618 	.word	0x20000618

08007064 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4605      	mov	r5, r0
 8007068:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800706a:	2400      	movs	r4, #0
 800706c:	e005      	b.n	800707a <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	b10b      	cbz	r3, 8007076 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8007072:	4630      	mov	r0, r6
 8007074:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007076:	3401      	adds	r4, #1
 8007078:	b264      	sxtb	r4, r4
 800707a:	2c04      	cmp	r4, #4
 800707c:	dc24      	bgt.n	80070c8 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800707e:	4b13      	ldr	r3, [pc, #76]	@ (80070cc <LmHandlerPackagesNotify+0x68>)
 8007080:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f6      	beq.n	8007076 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8007088:	2d03      	cmp	r5, #3
 800708a:	d8f4      	bhi.n	8007076 <LmHandlerPackagesNotify+0x12>
 800708c:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <LmHandlerPackagesNotify+0x30>)
 800708e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8007092:	bf00      	nop
 8007094:	0800706f 	.word	0x0800706f
 8007098:	080070a5 	.word	0x080070a5
 800709c:	080070b1 	.word	0x080070b1
 80070a0:	080070bd 	.word	0x080070bd
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0e5      	beq.n	8007076 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80070aa:	4630      	mov	r0, r6
 80070ac:	4798      	blx	r3
 80070ae:	e7e2      	b.n	8007076 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0df      	beq.n	8007076 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80070b6:	4630      	mov	r0, r6
 80070b8:	4798      	blx	r3
 80070ba:	e7dc      	b.n	8007076 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0d9      	beq.n	8007076 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80070c2:	4630      	mov	r0, r6
 80070c4:	4798      	blx	r3
 80070c6:	e7d6      	b.n	8007076 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	bf00      	nop
 80070cc:	20000618 	.word	0x20000618

080070d0 <MlmeIndication>:
{
 80070d0:	b510      	push	{r4, lr}
 80070d2:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80070d4:	4b11      	ldr	r3, [pc, #68]	@ (800711c <MlmeIndication+0x4c>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80070da:	7842      	ldrb	r2, [r0, #1]
 80070dc:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80070de:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80070e2:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80070e4:	f9b1 2000 	ldrsh.w	r2, [r1]
 80070e8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80070ea:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80070ee:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80070f0:	78ca      	ldrb	r2, [r1, #3]
 80070f2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80070f4:	6842      	ldr	r2, [r0, #4]
 80070f6:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80070f8:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <MlmeIndication+0x50>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	b13b      	cbz	r3, 8007110 <MlmeIndication+0x40>
 8007100:	7802      	ldrb	r2, [r0, #0]
 8007102:	2a0a      	cmp	r2, #10
 8007104:	d004      	beq.n	8007110 <MlmeIndication+0x40>
 8007106:	2a0e      	cmp	r2, #14
 8007108:	d002      	beq.n	8007110 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800710a:	4904      	ldr	r1, [pc, #16]	@ (800711c <MlmeIndication+0x4c>)
 800710c:	2000      	movs	r0, #0
 800710e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8007110:	4621      	mov	r1, r4
 8007112:	2003      	movs	r0, #3
 8007114:	f7ff ffa6 	bl	8007064 <LmHandlerPackagesNotify>
}
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	2000007c 	.word	0x2000007c
 8007120:	200005fc 	.word	0x200005fc

08007124 <McpsConfirm>:
{
 8007124:	b510      	push	{r4, lr}
 8007126:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8007128:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <McpsConfirm+0x3c>)
 800712a:	2201      	movs	r2, #1
 800712c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800712e:	7842      	ldrb	r2, [r0, #1]
 8007130:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8007132:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007136:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007138:	68c2      	ldr	r2, [r0, #12]
 800713a:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800713c:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8007140:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8007142:	6902      	ldr	r2, [r0, #16]
 8007144:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007146:	7902      	ldrb	r2, [r0, #4]
 8007148:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800714a:	4b06      	ldr	r3, [pc, #24]	@ (8007164 <McpsConfirm+0x40>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	b10b      	cbz	r3, 8007156 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8007152:	4803      	ldr	r0, [pc, #12]	@ (8007160 <McpsConfirm+0x3c>)
 8007154:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8007156:	4621      	mov	r1, r4
 8007158:	2000      	movs	r0, #0
 800715a:	f7ff ff83 	bl	8007064 <LmHandlerPackagesNotify>
}
 800715e:	bd10      	pop	{r4, pc}
 8007160:	20000090 	.word	0x20000090
 8007164:	200005fc 	.word	0x200005fc

08007168 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8007168:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800716a:	2400      	movs	r4, #0
 800716c:	e001      	b.n	8007172 <LmHandlerPackageIsTxPending+0xa>
 800716e:	3401      	adds	r4, #1
 8007170:	b264      	sxtb	r4, r4
 8007172:	2c04      	cmp	r4, #4
 8007174:	dc0a      	bgt.n	800718c <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <LmHandlerPackageIsTxPending+0x2c>)
 8007178:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f6      	beq.n	800716e <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	4798      	blx	r3
 8007184:	4603      	mov	r3, r0
 8007186:	2800      	cmp	r0, #0
 8007188:	d0f1      	beq.n	800716e <LmHandlerPackageIsTxPending+0x6>
 800718a:	e000      	b.n	800718e <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	20000618 	.word	0x20000618

08007198 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8007198:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800719a:	2400      	movs	r4, #0
 800719c:	e001      	b.n	80071a2 <LmHandlerPackagesProcess+0xa>
 800719e:	3401      	adds	r4, #1
 80071a0:	b264      	sxtb	r4, r4
 80071a2:	2c04      	cmp	r4, #4
 80071a4:	dc12      	bgt.n	80071cc <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80071a6:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <LmHandlerPackagesProcess+0x38>)
 80071a8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f6      	beq.n	800719e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80071b0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0f3      	beq.n	800719e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80071b6:	b2e0      	uxtb	r0, r4
 80071b8:	f7ff ff44 	bl	8007044 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0ee      	beq.n	800719e <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80071c0:	4b03      	ldr	r3, [pc, #12]	@ (80071d0 <LmHandlerPackagesProcess+0x38>)
 80071c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	4798      	blx	r3
 80071ca:	e7e8      	b.n	800719e <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	20000618 	.word	0x20000618

080071d4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 80071d4:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80071d6:	4b04      	ldr	r3, [pc, #16]	@ (80071e8 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 80071d8:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80071da:	4b04      	ldr	r3, [pc, #16]	@ (80071ec <LmHandlerOnTxFrameCtrlChanged+0x18>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	b103      	cbz	r3, 80071e4 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80071e2:	4798      	blx	r3
    }
}
 80071e4:	bd08      	pop	{r3, pc}
 80071e6:	bf00      	nop
 80071e8:	20000600 	.word	0x20000600
 80071ec:	200005fc 	.word	0x200005fc

080071f0 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 80071f0:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80071f2:	4b04      	ldr	r3, [pc, #16]	@ (8007204 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 80071f4:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 80071f6:	4b04      	ldr	r3, [pc, #16]	@ (8007208 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fc:	b103      	cbz	r3, 8007200 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 80071fe:	4798      	blx	r3
    }
}
 8007200:	bd08      	pop	{r3, pc}
 8007202:	bf00      	nop
 8007204:	20000600 	.word	0x20000600
 8007208:	200005fc 	.word	0x200005fc

0800720c <LmHandlerJoin>:
{
 800720c:	b530      	push	{r4, r5, lr}
 800720e:	b091      	sub	sp, #68	@ 0x44
 8007210:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8007212:	2301      	movs	r3, #1
 8007214:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007218:	4b33      	ldr	r3, [pc, #204]	@ (80072e8 <LmHandlerJoin+0xdc>)
 800721a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800721e:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8007222:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8007226:	f88d 1032 	strb.w	r1, [sp, #50]	@ 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800722a:	2802      	cmp	r0, #2
 800722c:	d022      	beq.n	8007274 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800722e:	2001      	movs	r0, #1
 8007230:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007234:	4b2d      	ldr	r3, [pc, #180]	@ (80072ec <LmHandlerJoin+0xe0>)
 8007236:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007238:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800723a:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800723c:	2100      	movs	r1, #0
 800723e:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8007240:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 8007242:	4b2b      	ldr	r3, [pc, #172]	@ (80072f0 <LmHandlerJoin+0xe4>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b1f3      	cbz	r3, 8007286 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8007248:	f003 fb86 	bl	800a958 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800724c:	2301      	movs	r3, #1
 800724e:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007252:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007256:	a801      	add	r0, sp, #4
 8007258:	f003 fdd4 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800725c:	4b24      	ldr	r3, [pc, #144]	@ (80072f0 <LmHandlerJoin+0xe4>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b103      	cbz	r3, 8007264 <LmHandlerJoin+0x58>
 8007262:	b114      	cbz	r4, 800726a <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 8007264:	a80b      	add	r0, sp, #44	@ 0x2c
 8007266:	f004 f8b9 	bl	800b3dc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800726a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800726c:	4b21      	ldr	r3, [pc, #132]	@ (80072f4 <LmHandlerJoin+0xe8>)
 800726e:	601a      	str	r2, [r3, #0]
}
 8007270:	b011      	add	sp, #68	@ 0x44
 8007272:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007274:	2202      	movs	r2, #2
 8007276:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800727a:	4b1c      	ldr	r3, [pc, #112]	@ (80072ec <LmHandlerJoin+0xe0>)
 800727c:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800727e:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8007280:	f003 fb6a 	bl	800a958 <LoRaMacStart>
 8007284:	e7ea      	b.n	800725c <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007286:	231f      	movs	r3, #31
 8007288:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800728c:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007290:	a801      	add	r0, sp, #4
 8007292:	f003 fdb7 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8007296:	2320      	movs	r3, #32
 8007298:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800729c:	4d12      	ldr	r5, [pc, #72]	@ (80072e8 <LmHandlerJoin+0xdc>)
 800729e:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80072a2:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80072a6:	a801      	add	r0, sp, #4
 80072a8:	f003 fdac 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 80072ac:	2322      	movs	r3, #34	@ 0x22
 80072ae:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 80072b2:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80072b6:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80072ba:	a801      	add	r0, sp, #4
 80072bc:	f003 fda2 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 80072c0:	2321      	movs	r3, #33	@ 0x21
 80072c2:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 80072c6:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80072ca:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80072ce:	a801      	add	r0, sp, #4
 80072d0:	f003 fd98 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80072d4:	2329      	movs	r3, #41	@ 0x29
 80072d6:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80072da:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <LmHandlerJoin+0xec>)
 80072dc:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80072de:	a801      	add	r0, sp, #4
 80072e0:	f003 fd90 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 80072e4:	e7b0      	b.n	8007248 <LmHandlerJoin+0x3c>
 80072e6:	bf00      	nop
 80072e8:	20000600 	.word	0x20000600
 80072ec:	200000ac 	.word	0x200000ac
 80072f0:	200004d8 	.word	0x200004d8
 80072f4:	200005d0 	.word	0x200005d0
 80072f8:	01000400 	.word	0x01000400

080072fc <LmHandlerDeviceTimeReq>:
{
 80072fc:	b500      	push	{lr}
 80072fe:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007300:	2309      	movs	r3, #9
 8007302:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007306:	a801      	add	r0, sp, #4
 8007308:	f004 f868 	bl	800b3dc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800730c:	9a05      	ldr	r2, [sp, #20]
 800730e:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <LmHandlerDeviceTimeReq+0x24>)
 8007310:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007312:	b910      	cbnz	r0, 800731a <LmHandlerDeviceTimeReq+0x1e>
}
 8007314:	b007      	add	sp, #28
 8007316:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800731a:	f04f 30ff 	mov.w	r0, #4294967295
 800731e:	e7f9      	b.n	8007314 <LmHandlerDeviceTimeReq+0x18>
 8007320:	200005d0 	.word	0x200005d0

08007324 <LmHandlerGetDutyCycleWaitTime>:
}
 8007324:	4b01      	ldr	r3, [pc, #4]	@ (800732c <LmHandlerGetDutyCycleWaitTime+0x8>)
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	200005d0 	.word	0x200005d0

08007330 <LmHandlerJoinStatus>:
{
 8007330:	b500      	push	{lr}
 8007332:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007334:	2301      	movs	r3, #1
 8007336:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800733a:	4668      	mov	r0, sp
 800733c:	f003 fbd4 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007340:	b920      	cbnz	r0, 800734c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007342:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007346:	b110      	cbz	r0, 800734e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8007348:	2001      	movs	r0, #1
 800734a:	e000      	b.n	800734e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800734c:	2000      	movs	r0, #0
}
 800734e:	b00b      	add	sp, #44	@ 0x2c
 8007350:	f85d fb04 	ldr.w	pc, [sp], #4

08007354 <LmHandlerIsBusy>:
{
 8007354:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8007356:	f003 f8ad 	bl	800a4b4 <LoRaMacIsBusy>
 800735a:	b100      	cbz	r0, 800735e <LmHandlerIsBusy+0xa>
}
 800735c:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800735e:	f7ff ffe7 	bl	8007330 <LmHandlerJoinStatus>
 8007362:	2801      	cmp	r0, #1
 8007364:	d006      	beq.n	8007374 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007366:	4b05      	ldr	r3, [pc, #20]	@ (800737c <LmHandlerIsBusy+0x28>)
 8007368:	7a19      	ldrb	r1, [r3, #8]
 800736a:	79d8      	ldrb	r0, [r3, #7]
 800736c:	f7ff ff4e 	bl	800720c <LmHandlerJoin>
        return true;
 8007370:	2001      	movs	r0, #1
 8007372:	e7f3      	b.n	800735c <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007374:	f7ff fef8 	bl	8007168 <LmHandlerPackageIsTxPending>
 8007378:	e7f0      	b.n	800735c <LmHandlerIsBusy+0x8>
 800737a:	bf00      	nop
 800737c:	200000ac 	.word	0x200000ac

08007380 <LmHandlerSend>:
{
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
 8007388:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800738a:	f003 f893 	bl	800a4b4 <LoRaMacIsBusy>
 800738e:	2800      	cmp	r0, #0
 8007390:	d168      	bne.n	8007464 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 8007392:	f003 f8ad 	bl	800a4f0 <LoRaMacIsStopped>
 8007396:	2800      	cmp	r0, #0
 8007398:	d167      	bne.n	800746a <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800739a:	f7ff ffc9 	bl	8007330 <LmHandlerJoinStatus>
 800739e:	2801      	cmp	r0, #1
 80073a0:	d137      	bne.n	8007412 <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 80073a2:	4b35      	ldr	r3, [pc, #212]	@ (8007478 <LmHandlerSend+0xf8>)
 80073a4:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80073a6:	3d00      	subs	r5, #0
 80073a8:	bf18      	it	ne
 80073aa:	2501      	movne	r5, #1
 80073ac:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80073b0:	4b32      	ldr	r3, [pc, #200]	@ (800747c <LmHandlerSend+0xfc>)
 80073b2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80073b6:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80073ba:	4669      	mov	r1, sp
 80073bc:	7860      	ldrb	r0, [r4, #1]
 80073be:	f003 fb29 	bl	800aa14 <LoRaMacQueryTxPossible>
 80073c2:	b370      	cbz	r0, 8007422 <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80073ca:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80073cc:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80073d0:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 80073d4:	4b28      	ldr	r3, [pc, #160]	@ (8007478 <LmHandlerSend+0xf8>)
 80073d6:	f103 0c10 	add.w	ip, r3, #16
 80073da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073de:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80073e2:	4a26      	ldr	r2, [pc, #152]	@ (800747c <LmHandlerSend+0xfc>)
 80073e4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80073e8:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 80073ea:	4631      	mov	r1, r6
 80073ec:	a801      	add	r0, sp, #4
 80073ee:	f004 f901 	bl	800b5f4 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80073f2:	9a05      	ldr	r2, [sp, #20]
 80073f4:	4b22      	ldr	r3, [pc, #136]	@ (8007480 <LmHandlerSend+0x100>)
 80073f6:	601a      	str	r2, [r3, #0]
    switch( status )
 80073f8:	2811      	cmp	r0, #17
 80073fa:	d830      	bhi.n	800745e <LmHandlerSend+0xde>
 80073fc:	e8df f000 	tbb	[pc, r0]
 8007400:	2f2f1c21 	.word	0x2f2f1c21
 8007404:	382f2f2f 	.word	0x382f2f2f
 8007408:	2c2f2f2f 	.word	0x2c2f2f2f
 800740c:	1c1c2f2f 	.word	0x1c1c2f2f
 8007410:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007412:	4b1c      	ldr	r3, [pc, #112]	@ (8007484 <LmHandlerSend+0x104>)
 8007414:	7a19      	ldrb	r1, [r3, #8]
 8007416:	79d8      	ldrb	r0, [r3, #7]
 8007418:	f7ff fef8 	bl	800720c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800741c:	f06f 0502 	mvn.w	r5, #2
 8007420:	e00c      	b.n	800743c <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007428:	7863      	ldrb	r3, [r4, #1]
 800742a:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8007432:	f04f 35ff 	mov.w	r5, #4294967295
 8007436:	e7cd      	b.n	80073d4 <LmHandlerSend+0x54>
    switch( status )
 8007438:	f06f 0501 	mvn.w	r5, #1
}
 800743c:	4628      	mov	r0, r5
 800743e:	b006      	add	sp, #24
 8007440:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8007442:	4b11      	ldr	r3, [pc, #68]	@ (8007488 <LmHandlerSend+0x108>)
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8007448:	f115 0f07 	cmn.w	r5, #7
 800744c:	d0f6      	beq.n	800743c <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800744e:	2500      	movs	r5, #0
 8007450:	e7f4      	b.n	800743c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8007452:	f06f 0504 	mvn.w	r5, #4
            break;
 8007456:	e7f1      	b.n	800743c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007458:	f06f 0505 	mvn.w	r5, #5
            break;
 800745c:	e7ee      	b.n	800743c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800745e:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8007462:	e7eb      	b.n	800743c <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007464:	f06f 0501 	mvn.w	r5, #1
 8007468:	e7e8      	b.n	800743c <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800746a:	f06f 0502 	mvn.w	r5, #2
 800746e:	e7e5      	b.n	800743c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007470:	f06f 0502 	mvn.w	r5, #2
 8007474:	e7e2      	b.n	800743c <LmHandlerSend+0xbc>
 8007476:	bf00      	nop
 8007478:	20000090 	.word	0x20000090
 800747c:	20000600 	.word	0x20000600
 8007480:	200005d0 	.word	0x200005d0
 8007484:	200000ac 	.word	0x200000ac
 8007488:	200005ce 	.word	0x200005ce

0800748c <LmHandlerProcess>:
{
 800748c:	b500      	push	{lr}
 800748e:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007490:	f003 f83a 	bl	800a508 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8007494:	f7ff fe80 	bl	8007198 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007498:	f7ff fe66 	bl	8007168 <LmHandlerPackageIsTxPending>
 800749c:	b910      	cbnz	r0, 80074a4 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800749e:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <LmHandlerProcess+0x40>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b913      	cbnz	r3, 80074aa <LmHandlerProcess+0x1e>
}
 80074a4:	b003      	add	sp, #12
 80074a6:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 80074aa:	2200      	movs	r2, #0
 80074ac:	f88d 2000 	strb.w	r2, [sp]
 80074b0:	f88d 2001 	strb.w	r2, [sp, #1]
 80074b4:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 80074b6:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <LmHandlerProcess+0x44>)
 80074b8:	78d9      	ldrb	r1, [r3, #3]
 80074ba:	4668      	mov	r0, sp
 80074bc:	f7ff ff60 	bl	8007380 <LmHandlerSend>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d1ef      	bne.n	80074a4 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 80074c4:	4b01      	ldr	r3, [pc, #4]	@ (80074cc <LmHandlerProcess+0x40>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e7eb      	b.n	80074a4 <LmHandlerProcess+0x18>
 80074cc:	200005ce 	.word	0x200005ce
 80074d0:	20000600 	.word	0x20000600

080074d4 <LmHandlerRequestClass>:
{
 80074d4:	b510      	push	{r4, lr}
 80074d6:	b08a      	sub	sp, #40	@ 0x28
 80074d8:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 80074da:	f002 ffeb 	bl	800a4b4 <LoRaMacIsBusy>
 80074de:	bb98      	cbnz	r0, 8007548 <LmHandlerRequestClass+0x74>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 80074e0:	f7ff ff26 	bl	8007330 <LmHandlerJoinStatus>
 80074e4:	2801      	cmp	r0, #1
 80074e6:	d132      	bne.n	800754e <LmHandlerRequestClass+0x7a>
    mibReq.Type = MIB_DEVICE_CLASS;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80074ee:	4668      	mov	r0, sp
 80074f0:	f003 fafa 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
 80074f4:	bb70      	cbnz	r0, 8007554 <LmHandlerRequestClass+0x80>
    currentClass = mibReq.Param.Class;
 80074f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 80074fa:	42a3      	cmp	r3, r4
 80074fc:	d02d      	beq.n	800755a <LmHandlerRequestClass+0x86>
        switch( newClass )
 80074fe:	2c01      	cmp	r4, #1
 8007500:	d02e      	beq.n	8007560 <LmHandlerRequestClass+0x8c>
 8007502:	2c02      	cmp	r4, #2
 8007504:	d011      	beq.n	800752a <LmHandlerRequestClass+0x56>
 8007506:	bb74      	cbnz	r4, 8007566 <LmHandlerRequestClass+0x92>
                    if( currentClass != CLASS_A )
 8007508:	b90b      	cbnz	r3, 800750e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800750a:	2000      	movs	r0, #0
 800750c:	e026      	b.n	800755c <LmHandlerRequestClass+0x88>
                        mibReq.Param.Class = newClass;
 800750e:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007512:	4668      	mov	r0, sp
 8007514:	f003 fc76 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 8007518:	bb38      	cbnz	r0, 800756a <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800751a:	4b1a      	ldr	r3, [pc, #104]	@ (8007584 <LmHandlerRequestClass+0xb0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	b333      	cbz	r3, 8007570 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8007522:	4620      	mov	r0, r4
 8007524:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007526:	2000      	movs	r0, #0
 8007528:	e018      	b.n	800755c <LmHandlerRequestClass+0x88>
                    if( currentClass != CLASS_A )
 800752a:	bb1b      	cbnz	r3, 8007574 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800752c:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007530:	4668      	mov	r0, sp
 8007532:	f003 fc67 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 8007536:	bb00      	cbnz	r0, 800757a <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8007538:	4b12      	ldr	r3, [pc, #72]	@ (8007584 <LmHandlerRequestClass+0xb0>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753e:	b1fb      	cbz	r3, 8007580 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8007540:	4620      	mov	r0, r4
 8007542:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007544:	2000      	movs	r0, #0
 8007546:	e009      	b.n	800755c <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007548:	f06f 0001 	mvn.w	r0, #1
 800754c:	e006      	b.n	800755c <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800754e:	f06f 0002 	mvn.w	r0, #2
 8007552:	e003      	b.n	800755c <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_ERROR;
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e000      	b.n	800755c <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800755a:	2000      	movs	r0, #0
}
 800755c:	b00a      	add	sp, #40	@ 0x28
 800755e:	bd10      	pop	{r4, pc}
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	e7fa      	b.n	800755c <LmHandlerRequestClass+0x88>
        switch( newClass )
 8007566:	2000      	movs	r0, #0
 8007568:	e7f8      	b.n	800755c <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800756a:	f04f 30ff 	mov.w	r0, #4294967295
 800756e:	e7f5      	b.n	800755c <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007570:	2000      	movs	r0, #0
 8007572:	e7f3      	b.n	800755c <LmHandlerRequestClass+0x88>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	e7f0      	b.n	800755c <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800757a:	f04f 30ff 	mov.w	r0, #4294967295
 800757e:	e7ed      	b.n	800755c <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007580:	2000      	movs	r0, #0
 8007582:	e7eb      	b.n	800755c <LmHandlerRequestClass+0x88>
 8007584:	200005fc 	.word	0x200005fc

08007588 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8007588:	b170      	cbz	r0, 80075a8 <LmHandlerGetCurrentClass+0x20>
{
 800758a:	b510      	push	{r4, lr}
 800758c:	b08a      	sub	sp, #40	@ 0x28
 800758e:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007590:	2300      	movs	r3, #0
 8007592:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007596:	4668      	mov	r0, sp
 8007598:	f003 faa6 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
 800759c:	b938      	cbnz	r0, 80075ae <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800759e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80075a2:	7023      	strb	r3, [r4, #0]
}
 80075a4:	b00a      	add	sp, #40	@ 0x28
 80075a6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80075ac:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	e7f7      	b.n	80075a4 <LmHandlerGetCurrentClass+0x1c>

080075b4 <McpsIndication>:
{
 80075b4:	b510      	push	{r4, lr}
 80075b6:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 80075be:	4a1d      	ldr	r2, [pc, #116]	@ (8007634 <McpsIndication+0x80>)
 80075c0:	2301      	movs	r3, #1
 80075c2:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 80075c4:	7843      	ldrb	r3, [r0, #1]
 80075c6:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d131      	bne.n	8007630 <McpsIndication+0x7c>
 80075cc:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80075ce:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80075d2:	4b18      	ldr	r3, [pc, #96]	@ (8007634 <McpsIndication+0x80>)
 80075d4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80075d6:	f9b1 2000 	ldrsh.w	r2, [r1]
 80075da:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80075dc:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80075e0:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80075e2:	78ca      	ldrb	r2, [r1, #3]
 80075e4:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80075e6:	6902      	ldr	r2, [r0, #16]
 80075e8:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 80075ea:	78c3      	ldrb	r3, [r0, #3]
 80075ec:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 80075f0:	7b03      	ldrb	r3, [r0, #12]
 80075f2:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80075f6:	6883      	ldr	r3, [r0, #8]
 80075f8:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 80075fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007638 <McpsIndication+0x84>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	b113      	cbz	r3, 8007608 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007602:	490c      	ldr	r1, [pc, #48]	@ (8007634 <McpsIndication+0x80>)
 8007604:	a802      	add	r0, sp, #8
 8007606:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8007608:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <McpsIndication+0x84>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	b113      	cbz	r3, 8007616 <McpsIndication+0x62>
 8007610:	7e22      	ldrb	r2, [r4, #24]
 8007612:	b102      	cbz	r2, 8007616 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007614:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8007616:	4621      	mov	r1, r4
 8007618:	2001      	movs	r0, #1
 800761a:	f7ff fd23 	bl	8007064 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800761e:	f10d 0007 	add.w	r0, sp, #7
 8007622:	f7ff ffb1 	bl	8007588 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8007626:	7963      	ldrb	r3, [r4, #5]
 8007628:	b113      	cbz	r3, 8007630 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 800762a:	4b04      	ldr	r3, [pc, #16]	@ (800763c <McpsIndication+0x88>)
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]
}
 8007630:	b004      	add	sp, #16
 8007632:	bd10      	pop	{r4, pc}
 8007634:	2000007c 	.word	0x2000007c
 8007638:	200005fc 	.word	0x200005fc
 800763c:	200005ce 	.word	0x200005ce

08007640 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8007640:	b180      	cbz	r0, 8007664 <LmHandlerGetTxDatarate+0x24>
{
 8007642:	b510      	push	{r4, lr}
 8007644:	b08a      	sub	sp, #40	@ 0x28
 8007646:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007648:	2320      	movs	r3, #32
 800764a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800764e:	4668      	mov	r0, sp
 8007650:	f003 fa4a 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
 8007654:	b948      	cbnz	r0, 800766a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007656:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800765a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800765c:	4a04      	ldr	r2, [pc, #16]	@ (8007670 <LmHandlerGetTxDatarate+0x30>)
 800765e:	7113      	strb	r3, [r2, #4]
}
 8007660:	b00a      	add	sp, #40	@ 0x28
 8007662:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007668:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	e7f7      	b.n	8007660 <LmHandlerGetTxDatarate+0x20>
 8007670:	20000600 	.word	0x20000600

08007674 <LmHandlerSetSystemMaxRxError>:
{
 8007674:	b500      	push	{lr}
 8007676:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007678:	2323      	movs	r3, #35	@ 0x23
 800767a:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800767e:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007680:	4668      	mov	r0, sp
 8007682:	f003 fbbf 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 8007686:	b910      	cbnz	r0, 800768e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007688:	b00b      	add	sp, #44	@ 0x2c
 800768a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800768e:	f04f 30ff 	mov.w	r0, #4294967295
 8007692:	e7f9      	b.n	8007688 <LmHandlerSetSystemMaxRxError+0x14>

08007694 <LmHandlerConfigure>:
{
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	b08e      	sub	sp, #56	@ 0x38
 8007698:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800769a:	4c74      	ldr	r4, [pc, #464]	@ (800786c <LmHandlerConfigure+0x1d8>)
 800769c:	2218      	movs	r2, #24
 800769e:	4620      	mov	r0, r4
 80076a0:	f007 fa8d 	bl	800ebbe <memcpy1>
    IsUplinkTxPending = false;
 80076a4:	4b72      	ldr	r3, [pc, #456]	@ (8007870 <LmHandlerConfigure+0x1dc>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 80076aa:	f7fb f9f5 	bl	8002a98 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 80076ae:	7822      	ldrb	r2, [r4, #0]
 80076b0:	2301      	movs	r3, #1
 80076b2:	4093      	lsls	r3, r2
 80076b4:	6841      	ldr	r1, [r0, #4]
 80076b6:	420b      	tst	r3, r1
 80076b8:	d106      	bne.n	80076c8 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 80076ba:	4b6e      	ldr	r3, [pc, #440]	@ (8007874 <LmHandlerConfigure+0x1e0>)
 80076bc:	2201      	movs	r2, #1
 80076be:	2100      	movs	r1, #0
 80076c0:	4608      	mov	r0, r1
 80076c2:	f009 f95f 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 80076c6:	e7fe      	b.n	80076c6 <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 80076c8:	496b      	ldr	r1, [pc, #428]	@ (8007878 <LmHandlerConfigure+0x1e4>)
 80076ca:	486c      	ldr	r0, [pc, #432]	@ (800787c <LmHandlerConfigure+0x1e8>)
 80076cc:	f002 ff64 	bl	800a598 <LoRaMacInitialization>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f040 80c5 	bne.w	8007860 <LmHandlerConfigure+0x1cc>
    mibReq.Type = MIB_NVM_CTXS;
 80076d6:	2327      	movs	r3, #39	@ 0x27
 80076d8:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80076dc:	a804      	add	r0, sp, #16
 80076de:	f003 fb91 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	f040 8082 	bne.w	80077ec <LmHandlerConfigure+0x158>
        CtxRestoreDone = true;
 80076e8:	4b65      	ldr	r3, [pc, #404]	@ (8007880 <LmHandlerConfigure+0x1ec>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 80076ee:	4b64      	ldr	r3, [pc, #400]	@ (8007880 <LmHandlerConfigure+0x1ec>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80ab 	beq.w	800784e <LmHandlerConfigure+0x1ba>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80076f8:	4b62      	ldr	r3, [pc, #392]	@ (8007884 <LmHandlerConfigure+0x1f0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	b10b      	cbz	r3, 8007704 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007700:	2000      	movs	r0, #0
 8007702:	4798      	blx	r3
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 8007704:	f7ff fe14 	bl	8007330 <LmHandlerJoinStatus>
 8007708:	2801      	cmp	r0, #1
 800770a:	f000 8098 	beq.w	800783e <LmHandlerConfigure+0x1aa>
        mibReq.Type = MIB_NVM_CTXS;
 800770e:	2327      	movs	r3, #39	@ 0x27
 8007710:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007714:	a804      	add	r0, sp, #16
 8007716:	f003 f9e7 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800771a:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800771c:	f892 1048 	ldrb.w	r1, [r2, #72]	@ 0x48
 8007720:	4b52      	ldr	r3, [pc, #328]	@ (800786c <LmHandlerConfigure+0x1d8>)
 8007722:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8007724:	f892 1118 	ldrb.w	r1, [r2, #280]	@ 0x118
 8007728:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800772a:	f892 211a 	ldrb.w	r2, [r2, #282]	@ 0x11a
 800772e:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8007730:	4b51      	ldr	r3, [pc, #324]	@ (8007878 <LmHandlerConfigure+0x1e4>)
 8007732:	68d9      	ldr	r1, [r3, #12]
 8007734:	6898      	ldr	r0, [r3, #8]
 8007736:	f007 f955 	bl	800e9e4 <SecureElementInitMcuID>
 800773a:	2800      	cmp	r0, #0
 800773c:	f040 8093 	bne.w	8007866 <LmHandlerConfigure+0x1d2>
    mibReq.Type = MIB_DEV_ADDR;
 8007740:	2306      	movs	r3, #6
 8007742:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007746:	a804      	add	r0, sp, #16
 8007748:	f003 f9ce 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800774c:	4c4e      	ldr	r4, [pc, #312]	@ (8007888 <LmHandlerConfigure+0x1f4>)
 800774e:	9b05      	ldr	r3, [sp, #20]
 8007750:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007752:	a804      	add	r0, sp, #16
 8007754:	f003 fb56 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8007758:	2302      	movs	r3, #2
 800775a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800775e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007760:	a804      	add	r0, sp, #16
 8007762:	f003 f9c1 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8007766:	2303      	movs	r3, #3
 8007768:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800776c:	3408      	adds	r4, #8
 800776e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007770:	a804      	add	r0, sp, #16
 8007772:	f003 f9b9 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8007776:	f007 f9cf 	bl	800eb18 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800777a:	260f      	movs	r6, #15
 800777c:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007780:	2301      	movs	r3, #1
 8007782:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007786:	a804      	add	r0, sp, #16
 8007788:	f003 fb3c 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800778c:	2310      	movs	r3, #16
 800778e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007792:	2500      	movs	r5, #0
 8007794:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007798:	eb0d 0003 	add.w	r0, sp, r3
 800779c:	f003 fb32 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80077a0:	2304      	movs	r3, #4
 80077a2:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80077a6:	4c31      	ldr	r4, [pc, #196]	@ (800786c <LmHandlerConfigure+0x1d8>)
 80077a8:	78a3      	ldrb	r3, [r4, #2]
 80077aa:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80077ae:	a804      	add	r0, sp, #16
 80077b0:	f003 fb28 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80077b4:	233a      	movs	r3, #58	@ 0x3a
 80077b6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80077ba:	6963      	ldr	r3, [r4, #20]
 80077bc:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80077be:	a804      	add	r0, sp, #16
 80077c0:	f003 fb20 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80077c4:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80077c8:	a902      	add	r1, sp, #8
 80077ca:	7820      	ldrb	r0, [r4, #0]
 80077cc:	f005 f8b3 	bl	800c936 <RegionGetPhyParam>
 80077d0:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80077d2:	1b43      	subs	r3, r0, r5
 80077d4:	bf18      	it	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 80077da:	2014      	movs	r0, #20
 80077dc:	f7ff ff4a 	bl	8007674 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80077e0:	79e0      	ldrb	r0, [r4, #7]
 80077e2:	f003 fff3 	bl	800b7cc <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80077e6:	4628      	mov	r0, r5
}
 80077e8:	b00e      	add	sp, #56	@ 0x38
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80077ec:	2328      	movs	r3, #40	@ 0x28
 80077ee:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 80077f2:	4b24      	ldr	r3, [pc, #144]	@ (8007884 <LmHandlerConfigure+0x1f0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	b14b      	cbz	r3, 800780e <LmHandlerConfigure+0x17a>
            LoRaMacMibGetRequestConfirm( &mibReq );
 80077fa:	a804      	add	r0, sp, #16
 80077fc:	f003 f974 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8007800:	4b20      	ldr	r3, [pc, #128]	@ (8007884 <LmHandlerConfigure+0x1f0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f240 51c4 	movw	r1, #1476	@ 0x5c4
 800780a:	9805      	ldr	r0, [sp, #20]
 800780c:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800780e:	2327      	movs	r3, #39	@ 0x27
 8007810:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007814:	a804      	add	r0, sp, #16
 8007816:	f003 faf5 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 800781a:	2800      	cmp	r0, #0
 800781c:	f47f af67 	bne.w	80076ee <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007820:	2301      	movs	r3, #1
 8007822:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007826:	a804      	add	r0, sp, #16
 8007828:	f003 f95e 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800782c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f43f af5c 	beq.w	80076ee <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 8007836:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <LmHandlerConfigure+0x1ec>)
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e757      	b.n	80076ee <LmHandlerConfigure+0x5a>
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800783e:	f002 fe57 	bl	800a4f0 <LoRaMacIsStopped>
 8007842:	2800      	cmp	r0, #0
 8007844:	f43f af63 	beq.w	800770e <LmHandlerConfigure+0x7a>
            LoRaMacStart();
 8007848:	f003 f886 	bl	800a958 <LoRaMacStart>
 800784c:	e75f      	b.n	800770e <LmHandlerConfigure+0x7a>
        mibReq.Type = MIB_NET_ID;
 800784e:	2305      	movs	r3, #5
 8007850:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007854:	2300      	movs	r3, #0
 8007856:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007858:	a804      	add	r0, sp, #16
 800785a:	f003 fad3 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
 800785e:	e767      	b.n	8007730 <LmHandlerConfigure+0x9c>
        return LORAMAC_HANDLER_ERROR;
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e7c0      	b.n	80077e8 <LmHandlerConfigure+0x154>
        return LORAMAC_HANDLER_ERROR;
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	e7bd      	b.n	80077e8 <LmHandlerConfigure+0x154>
 800786c:	20000600 	.word	0x20000600
 8007870:	200005ce 	.word	0x200005ce
 8007874:	08012984 	.word	0x08012984
 8007878:	200005d4 	.word	0x200005d4
 800787c:	200005ec 	.word	0x200005ec
 8007880:	200004d8 	.word	0x200004d8
 8007884:	200005fc 	.word	0x200005fc
 8007888:	2000063c 	.word	0x2000063c

0800788c <LmHandlerPackageRegister>:
{
 800788c:	b530      	push	{r4, r5, lr}
 800788e:	b083      	sub	sp, #12
 8007890:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	9301      	str	r3, [sp, #4]
    switch( id )
 8007896:	4604      	mov	r4, r0
 8007898:	b9d8      	cbnz	r0, 80078d2 <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 800789a:	f000 fc1d 	bl	80080d8 <LmhpCompliancePackageFactory>
 800789e:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	b1f3      	cbz	r3, 80078e2 <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 80078a4:	4a10      	ldr	r2, [pc, #64]	@ (80078e8 <LmHandlerPackageRegister+0x5c>)
 80078a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80078aa:	4a10      	ldr	r2, [pc, #64]	@ (80078ec <LmHandlerPackageRegister+0x60>)
 80078ac:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80078ae:	4a10      	ldr	r2, [pc, #64]	@ (80078f0 <LmHandlerPackageRegister+0x64>)
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80078b4:	6319      	str	r1, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 80078b6:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80078b8:	6359      	str	r1, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80078ba:	490e      	ldr	r1, [pc, #56]	@ (80078f4 <LmHandlerPackageRegister+0x68>)
 80078bc:	62d9      	str	r1, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80078be:	6992      	ldr	r2, [r2, #24]
 80078c0:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	22f2      	movs	r2, #242	@ 0xf2
 80078c6:	490c      	ldr	r1, [pc, #48]	@ (80078f8 <LmHandlerPackageRegister+0x6c>)
 80078c8:	4628      	mov	r0, r5
 80078ca:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80078cc:	2000      	movs	r0, #0
}
 80078ce:	b003      	add	sp, #12
 80078d0:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 80078d2:	a901      	add	r1, sp, #4
 80078d4:	f000 fc06 	bl	80080e4 <LmhpPackagesRegister>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d0e1      	beq.n	80078a0 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	e7f5      	b.n	80078ce <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	e7f2      	b.n	80078ce <LmHandlerPackageRegister+0x42>
 80078e8:	20000618 	.word	0x20000618
 80078ec:	0800720d 	.word	0x0800720d
 80078f0:	200005fc 	.word	0x200005fc
 80078f4:	080072fd 	.word	0x080072fd
 80078f8:	200004dc 	.word	0x200004dc

080078fc <LmHandlerInit>:
{
 80078fc:	b500      	push	{lr}
 80078fe:	b083      	sub	sp, #12
 8007900:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8007902:	4b19      	ldr	r3, [pc, #100]	@ (8007968 <LmHandlerInit+0x6c>)
 8007904:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007906:	4b19      	ldr	r3, [pc, #100]	@ (800796c <LmHandlerInit+0x70>)
 8007908:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <LmHandlerInit+0x74>)
 800790a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800790c:	4a19      	ldr	r2, [pc, #100]	@ (8007974 <LmHandlerInit+0x78>)
 800790e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007910:	4a19      	ldr	r2, [pc, #100]	@ (8007978 <LmHandlerInit+0x7c>)
 8007912:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007914:	4a19      	ldr	r2, [pc, #100]	@ (800797c <LmHandlerInit+0x80>)
 8007916:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007918:	6802      	ldr	r2, [r0, #0]
 800791a:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <LmHandlerInit+0x84>)
 800791c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800791e:	6842      	ldr	r2, [r0, #4]
 8007920:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007922:	6882      	ldr	r2, [r0, #8]
 8007924:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8007926:	68c2      	ldr	r2, [r0, #12]
 8007928:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800792a:	4a16      	ldr	r2, [pc, #88]	@ (8007984 <LmHandlerInit+0x88>)
 800792c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800792e:	6982      	ldr	r2, [r0, #24]
 8007930:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8007932:	4b15      	ldr	r3, [pc, #84]	@ (8007988 <LmHandlerInit+0x8c>)
 8007934:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007936:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007938:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800793a:	4a14      	ldr	r2, [pc, #80]	@ (800798c <LmHandlerInit+0x90>)
 800793c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800793e:	4a14      	ldr	r2, [pc, #80]	@ (8007990 <LmHandlerInit+0x94>)
 8007940:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8007942:	4619      	mov	r1, r3
 8007944:	2000      	movs	r0, #0
 8007946:	f7ff ffa1 	bl	800788c <LmHandlerPackageRegister>
 800794a:	b930      	cbnz	r0, 800795a <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800794c:	a801      	add	r0, sp, #4
 800794e:	f000 fbc7 	bl	80080e0 <LmhpPackagesRegistrationInit>
 8007952:	b928      	cbnz	r0, 8007960 <LmHandlerInit+0x64>
}
 8007954:	b003      	add	sp, #12
 8007956:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	e7f9      	b.n	8007954 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e7f6      	b.n	8007954 <LmHandlerInit+0x58>
 8007966:	bf00      	nop
 8007968:	200005fc 	.word	0x200005fc
 800796c:	200005ec 	.word	0x200005ec
 8007970:	08007125 	.word	0x08007125
 8007974:	080075b5 	.word	0x080075b5
 8007978:	08007a15 	.word	0x08007a15
 800797c:	080070d1 	.word	0x080070d1
 8007980:	200005d4 	.word	0x200005d4
 8007984:	0800c8e9 	.word	0x0800c8e9
 8007988:	2000062c 	.word	0x2000062c
 800798c:	080071d5 	.word	0x080071d5
 8007990:	080071f1 	.word	0x080071f1

08007994 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8007994:	b161      	cbz	r1, 80079b0 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8007996:	b118      	cbz	r0, 80079a0 <LmHandlerGetVersion+0xc>
 8007998:	2801      	cmp	r0, #1
 800799a:	d005      	beq.n	80079a8 <LmHandlerGetVersion+0x14>
 800799c:	2000      	movs	r0, #0
 800799e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 80079a0:	4a05      	ldr	r2, [pc, #20]	@ (80079b8 <LmHandlerGetVersion+0x24>)
 80079a2:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80079a4:	2000      	movs	r0, #0
            break;
 80079a6:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80079a8:	4a04      	ldr	r2, [pc, #16]	@ (80079bc <LmHandlerGetVersion+0x28>)
 80079aa:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80079ac:	2000      	movs	r0, #0
            break;
 80079ae:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	01000400 	.word	0x01000400
 80079bc:	02010003 	.word	0x02010003

080079c0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 80079c0:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 80079c2:	f003 ff21 	bl	800b808 <LoRaMacDeInitialization>
 80079c6:	b900      	cbnz	r0, 80079ca <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80079c8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80079ca:	f06f 0001 	mvn.w	r0, #1
 80079ce:	e7fb      	b.n	80079c8 <LmHandlerStop+0x8>

080079d0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80079d0:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80079d2:	f002 ffef 	bl	800a9b4 <LoRaMacHalt>
 80079d6:	b900      	cbnz	r0, 80079da <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80079d8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80079da:	f06f 0001 	mvn.w	r0, #1
 80079de:	e7fb      	b.n	80079d8 <LmHandlerHalt+0x8>

080079e0 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80079e0:	b180      	cbz	r0, 8007a04 <LmHandlerGetTxPower+0x24>
{
 80079e2:	b510      	push	{r4, lr}
 80079e4:	b08a      	sub	sp, #40	@ 0x28
 80079e6:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80079e8:	2321      	movs	r3, #33	@ 0x21
 80079ea:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80079ee:	4668      	mov	r0, sp
 80079f0:	f003 f87a 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
 80079f4:	b948      	cbnz	r0, 8007a0a <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80079f6:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80079fa:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 80079fc:	4a04      	ldr	r2, [pc, #16]	@ (8007a10 <LmHandlerGetTxPower+0x30>)
 80079fe:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8007a00:	b00a      	add	sp, #40	@ 0x28
 8007a02:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a08:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	e7f7      	b.n	8007a00 <LmHandlerGetTxPower+0x20>
 8007a10:	20000600 	.word	0x20000600

08007a14 <MlmeConfirm>:
{
 8007a14:	b510      	push	{r4, lr}
 8007a16:	b08a      	sub	sp, #40	@ 0x28
 8007a18:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8007a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac8 <MlmeConfirm+0xb4>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007a20:	7842      	ldrb	r2, [r0, #1]
 8007a22:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8007a24:	4b29      	ldr	r3, [pc, #164]	@ (8007acc <MlmeConfirm+0xb8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	b10b      	cbz	r3, 8007a30 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8007a2c:	4826      	ldr	r0, [pc, #152]	@ (8007ac8 <MlmeConfirm+0xb4>)
 8007a2e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8007a30:	4621      	mov	r1, r4
 8007a32:	2002      	movs	r0, #2
 8007a34:	f7ff fb16 	bl	8007064 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007a38:	7823      	ldrb	r3, [r4, #0]
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d035      	beq.n	8007aaa <MlmeConfirm+0x96>
 8007a3e:	2b0b      	cmp	r3, #11
 8007a40:	d03c      	beq.n	8007abc <MlmeConfirm+0xa8>
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d138      	bne.n	8007ab8 <MlmeConfirm+0xa4>
                mibReq.Type = MIB_DEV_ADDR;
 8007a46:	2306      	movs	r3, #6
 8007a48:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8007a4c:	4668      	mov	r0, sp
 8007a4e:	f003 f84b 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8007a52:	9901      	ldr	r1, [sp, #4]
 8007a54:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad0 <MlmeConfirm+0xbc>)
 8007a56:	79d8      	ldrb	r0, [r3, #7]
 8007a58:	f006 ffa2 	bl	800e9a0 <SecureElementSetDevAddr>
 8007a5c:	b910      	cbnz	r0, 8007a64 <MlmeConfirm+0x50>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007a5e:	9a01      	ldr	r2, [sp, #4]
 8007a60:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad4 <MlmeConfirm+0xc0>)
 8007a62:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007a64:	4c1c      	ldr	r4, [pc, #112]	@ (8007ad8 <MlmeConfirm+0xc4>)
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff fdea 	bl	8007640 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8007a6c:	1c60      	adds	r0, r4, #1
 8007a6e:	f7ff ffb7 	bl	80079e0 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007a72:	4b15      	ldr	r3, [pc, #84]	@ (8007ac8 <MlmeConfirm+0xb4>)
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	b183      	cbz	r3, 8007a9a <MlmeConfirm+0x86>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007a78:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <MlmeConfirm+0xbc>)
 8007a7a:	22ff      	movs	r2, #255	@ 0xff
 8007a7c:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8007a7e:	4b13      	ldr	r3, [pc, #76]	@ (8007acc <MlmeConfirm+0xb8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	b10b      	cbz	r3, 8007a8a <MlmeConfirm+0x76>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007a86:	4812      	ldr	r0, [pc, #72]	@ (8007ad0 <MlmeConfirm+0xbc>)
 8007a88:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <MlmeConfirm+0xb4>)
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	b99b      	cbnz	r3, 8007ab8 <MlmeConfirm+0xa4>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8007a90:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad0 <MlmeConfirm+0xbc>)
 8007a92:	79d8      	ldrb	r0, [r3, #7]
 8007a94:	f007 f852 	bl	800eb3c <SecureElementPrintSessionKeys>
            break;
 8007a98:	e00e      	b.n	8007ab8 <MlmeConfirm+0xa4>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007a9a:	1f23      	subs	r3, r4, #4
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8007adc <MlmeConfirm+0xc8>)
 8007aa2:	7858      	ldrb	r0, [r3, #1]
 8007aa4:	f7ff fd16 	bl	80074d4 <LmHandlerRequestClass>
 8007aa8:	e7e9      	b.n	8007a7e <MlmeConfirm+0x6a>
                RxParams.LinkCheck = true;
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <MlmeConfirm+0xcc>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007ab0:	7a22      	ldrb	r2, [r4, #8]
 8007ab2:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007ab4:	7a62      	ldrb	r2, [r4, #9]
 8007ab6:	74da      	strb	r2, [r3, #19]
}
 8007ab8:	b00a      	add	sp, #40	@ 0x28
 8007aba:	bd10      	pop	{r4, pc}
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007abc:	7863      	ldrb	r3, [r4, #1]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0fa      	beq.n	8007ab8 <MlmeConfirm+0xa4>
                    LmHandlerDeviceTimeReq( );
 8007ac2:	f7ff fc1b 	bl	80072fc <LmHandlerDeviceTimeReq>
}
 8007ac6:	e7f7      	b.n	8007ab8 <MlmeConfirm+0xa4>
 8007ac8:	20000090 	.word	0x20000090
 8007acc:	200005fc 	.word	0x200005fc
 8007ad0:	200000ac 	.word	0x200000ac
 8007ad4:	2000063c 	.word	0x2000063c
 8007ad8:	200000b0 	.word	0x200000b0
 8007adc:	20000600 	.word	0x20000600
 8007ae0:	2000007c 	.word	0x2000007c

08007ae4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	b08a      	sub	sp, #40	@ 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007ae8:	f7ff ff72 	bl	80079d0 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8007aec:	4604      	mov	r4, r0
 8007aee:	b110      	cbz	r0, 8007af6 <LmHandlerNvmDataStore+0x12>

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8007af0:	4620      	mov	r0, r4
 8007af2:	b00a      	add	sp, #40	@ 0x28
 8007af4:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007af6:	f004 feff 	bl	800c8f8 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8007afa:	f110 0f02 	cmn.w	r0, #2
 8007afe:	d012      	beq.n	8007b26 <LmHandlerNvmDataStore+0x42>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8007b00:	bb00      	cbnz	r0, 8007b44 <LmHandlerNvmDataStore+0x60>
 8007b02:	4b15      	ldr	r3, [pc, #84]	@ (8007b58 <LmHandlerNvmDataStore+0x74>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	b1fb      	cbz	r3, 8007b4a <LmHandlerNvmDataStore+0x66>
            mibReq.Type = MIB_NVM_CTXS;
 8007b0a:	2327      	movs	r3, #39	@ 0x27
 8007b0c:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007b10:	4668      	mov	r0, sp
 8007b12:	f002 ffe9 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8007b16:	4b10      	ldr	r3, [pc, #64]	@ (8007b58 <LmHandlerNvmDataStore+0x74>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 8007b20:	9801      	ldr	r0, [sp, #4]
 8007b22:	4798      	blx	r3
 8007b24:	e001      	b.n	8007b2a <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007b26:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007b2a:	f004 fef5 	bl	800c918 <NvmDataMgmtStoreEnd>
 8007b2e:	b978      	cbnz	r0, 8007b50 <LmHandlerNvmDataStore+0x6c>
    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	d1dd      	bne.n	8007af0 <LmHandlerNvmDataStore+0xc>
 8007b34:	4b08      	ldr	r3, [pc, #32]	@ (8007b58 <LmHandlerNvmDataStore+0x74>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0d8      	beq.n	8007af0 <LmHandlerNvmDataStore+0xc>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007b3e:	2001      	movs	r0, #1
 8007b40:	4798      	blx	r3
 8007b42:	e7d5      	b.n	8007af0 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007b44:	f04f 34ff 	mov.w	r4, #4294967295
 8007b48:	e7ef      	b.n	8007b2a <LmHandlerNvmDataStore+0x46>
 8007b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b4e:	e7ec      	b.n	8007b2a <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007b50:	f04f 34ff 	mov.w	r4, #4294967295
 8007b54:	e7cc      	b.n	8007af0 <LmHandlerNvmDataStore+0xc>
 8007b56:	bf00      	nop
 8007b58:	200005fc 	.word	0x200005fc

08007b5c <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007b5c:	4b01      	ldr	r3, [pc, #4]	@ (8007b64 <LmhpComplianceIsInitialized+0x8>)
 8007b5e:	7818      	ldrb	r0, [r3, #0]
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000670 	.word	0x20000670

08007b68 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8007b68:	4b01      	ldr	r3, [pc, #4]	@ (8007b70 <LmhpComplianceIsTxPending+0x8>)
 8007b6a:	7858      	ldrb	r0, [r3, #1]
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20000670 	.word	0x20000670

08007b74 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8007b74:	4770      	bx	lr

08007b76 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8007b76:	4770      	bx	lr

08007b78 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8007b78:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8007b7a:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <OnProcessTimer+0x18>)
 8007b7c:	7a9b      	ldrb	r3, [r3, #10]
 8007b7e:	b113      	cbz	r3, 8007b86 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 8007b80:	4b03      	ldr	r3, [pc, #12]	@ (8007b90 <OnProcessTimer+0x18>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8007b86:	4b03      	ldr	r3, [pc, #12]	@ (8007b94 <OnProcessTimer+0x1c>)
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	b103      	cbz	r3, 8007b8e <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8007b8c:	4798      	blx	r3
    }
}
 8007b8e:	bd08      	pop	{r3, pc}
 8007b90:	20000670 	.word	0x20000670
 8007b94:	200000b8 	.word	0x200000b8

08007b98 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007b98:	4b8c      	ldr	r3, [pc, #560]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8205 	beq.w	8007fac <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8007ba2:	78c3      	ldrb	r3, [r0, #3]
 8007ba4:	b90b      	cbnz	r3, 8007baa <LmhpComplianceOnMcpsIndication+0x12>
 8007ba6:	7b83      	ldrb	r3, [r0, #14]
 8007ba8:	b11b      	cbz	r3, 8007bb2 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8007baa:	4a88      	ldr	r2, [pc, #544]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007bac:	8a13      	ldrh	r3, [r2, #16]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8007bb2:	7b43      	ldrb	r3, [r0, #13]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 81f9 	beq.w	8007fac <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007bba:	78c3      	ldrb	r3, [r0, #3]
 8007bbc:	2be0      	cmp	r3, #224	@ 0xe0
 8007bbe:	f040 81f5 	bne.w	8007fac <LmhpComplianceOnMcpsIndication+0x414>
{
 8007bc2:	b570      	push	{r4, r5, r6, lr}
 8007bc4:	b096      	sub	sp, #88	@ 0x58
    ComplianceTestState.DataBufferSize = 0;
 8007bc6:	4b81      	ldr	r3, [pc, #516]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8007bcc:	6884      	ldr	r4, [r0, #8]
 8007bce:	7823      	ldrb	r3, [r4, #0]
 8007bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bd2:	f200 8093 	bhi.w	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
 8007bd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007bda:	0080      	.short	0x0080
 8007bdc:	00a2009d 	.word	0x00a2009d
 8007be0:	00b200aa 	.word	0x00b200aa
 8007be4:	00c600bf 	.word	0x00c600bf
 8007be8:	00f000df 	.word	0x00f000df
 8007bec:	0131011d 	.word	0x0131011d
 8007bf0:	00910091 	.word	0x00910091
 8007bf4:	00910091 	.word	0x00910091
 8007bf8:	00910091 	.word	0x00910091
 8007bfc:	00910091 	.word	0x00910091
 8007c00:	00910091 	.word	0x00910091
 8007c04:	00910091 	.word	0x00910091
 8007c08:	00910091 	.word	0x00910091
 8007c0c:	00910091 	.word	0x00910091
 8007c10:	00910091 	.word	0x00910091
 8007c14:	00910091 	.word	0x00910091
 8007c18:	01350091 	.word	0x01350091
 8007c1c:	0140013c 	.word	0x0140013c
 8007c20:	00910091 	.word	0x00910091
 8007c24:	00910091 	.word	0x00910091
 8007c28:	00910091 	.word	0x00910091
 8007c2c:	00910091 	.word	0x00910091
 8007c30:	00910091 	.word	0x00910091
 8007c34:	00910091 	.word	0x00910091
 8007c38:	00910091 	.word	0x00910091
 8007c3c:	00910091 	.word	0x00910091
 8007c40:	00910091 	.word	0x00910091
 8007c44:	00910091 	.word	0x00910091
 8007c48:	00910091 	.word	0x00910091
 8007c4c:	00910091 	.word	0x00910091
 8007c50:	00910091 	.word	0x00910091
 8007c54:	00910091 	.word	0x00910091
 8007c58:	00910091 	.word	0x00910091
 8007c5c:	00910091 	.word	0x00910091
 8007c60:	00910091 	.word	0x00910091
 8007c64:	00910091 	.word	0x00910091
 8007c68:	00910091 	.word	0x00910091
 8007c6c:	00910091 	.word	0x00910091
 8007c70:	00910091 	.word	0x00910091
 8007c74:	00910091 	.word	0x00910091
 8007c78:	00910091 	.word	0x00910091
 8007c7c:	00910091 	.word	0x00910091
 8007c80:	00910091 	.word	0x00910091
 8007c84:	00910091 	.word	0x00910091
 8007c88:	00910091 	.word	0x00910091
 8007c8c:	00910091 	.word	0x00910091
 8007c90:	00910091 	.word	0x00910091
 8007c94:	00910091 	.word	0x00910091
 8007c98:	00910091 	.word	0x00910091
 8007c9c:	00910091 	.word	0x00910091
 8007ca0:	00910091 	.word	0x00910091
 8007ca4:	00910091 	.word	0x00910091
 8007ca8:	00910091 	.word	0x00910091
 8007cac:	00910091 	.word	0x00910091
 8007cb0:	00910091 	.word	0x00910091
 8007cb4:	00910091 	.word	0x00910091
 8007cb8:	00910091 	.word	0x00910091
 8007cbc:	00910091 	.word	0x00910091
 8007cc0:	00910091 	.word	0x00910091
 8007cc4:	00910091 	.word	0x00910091
 8007cc8:	00910091 	.word	0x00910091
 8007ccc:	00910091 	.word	0x00910091
 8007cd0:	00910091 	.word	0x00910091
 8007cd4:	016c014b 	.word	0x016c014b
 8007cd8:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8007cda:	4b3c      	ldr	r3, [pc, #240]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	7299      	strb	r1, [r3, #10]
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8007ce6:	68d8      	ldr	r0, [r3, #12]
 8007ce8:	7a9a      	ldrb	r2, [r3, #10]
 8007cea:	1854      	adds	r4, r2, r1
 8007cec:	729c      	strb	r4, [r3, #10]
 8007cee:	2406      	movs	r4, #6
 8007cf0:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8007cf2:	68d8      	ldr	r0, [r3, #12]
 8007cf4:	7a9a      	ldrb	r2, [r3, #10]
 8007cf6:	1854      	adds	r4, r2, r1
 8007cf8:	729c      	strb	r4, [r3, #10]
 8007cfa:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8007cfc:	4b33      	ldr	r3, [pc, #204]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007cfe:	7a9b      	ldrb	r3, [r3, #10]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 814c 	beq.w	8007f9e <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 8007d06:	4b32      	ldr	r3, [pc, #200]	@ (8007dd0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007d08:	7a5b      	ldrb	r3, [r3, #9]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 813d 	beq.w	8007f8a <LmhpComplianceOnMcpsIndication+0x3f2>
}
 8007d10:	b016      	add	sp, #88	@ 0x58
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 8007d14:	4b2d      	ldr	r3, [pc, #180]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 8007d1c:	e7ee      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 8007d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd4 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0ea      	beq.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007d26:	2101      	movs	r1, #1
 8007d28:	2002      	movs	r0, #2
 8007d2a:	4798      	blx	r3
 8007d2c:	e7e6      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007d2e:	7862      	ldrb	r2, [r4, #1]
 8007d30:	4b26      	ldr	r3, [pc, #152]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007d32:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 8007d3c:	e7de      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8007d3e:	2304      	movs	r3, #4
 8007d40:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007d44:	7863      	ldrb	r3, [r4, #1]
 8007d46:	3b00      	subs	r3, #0
 8007d48:	bf18      	it	ne
 8007d4a:	2301      	movne	r3, #1
 8007d4c:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007d50:	a801      	add	r0, sp, #4
 8007d52:	f003 f857 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
                break;
 8007d56:	e7d1      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8007d58:	7860      	ldrb	r0, [r4, #1]
 8007d5a:	3800      	subs	r0, #0
 8007d5c:	bf18      	it	ne
 8007d5e:	2001      	movne	r0, #1
 8007d60:	f003 fd34 	bl	800b7cc <LoRaMacTestSetDutyCycleOn>
                break;
 8007d64:	e7ca      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8007d66:	ad01      	add	r5, sp, #4
 8007d68:	4e1b      	ldr	r6, [pc, #108]	@ (8007dd8 <LmhpComplianceOnMcpsIndication+0x240>)
 8007d6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d72:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007d76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8007d7a:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8007d7c:	2b0a      	cmp	r3, #10
 8007d7e:	d8bd      	bhi.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007d80:	4a16      	ldr	r2, [pc, #88]	@ (8007ddc <LmhpComplianceOnMcpsIndication+0x244>)
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	d0b8      	beq.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8007d8a:	a916      	add	r1, sp, #88	@ 0x58
 8007d8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007d90:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8007d94:	4790      	blx	r2
                break;
 8007d96:	e7b1      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8007d98:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8007d9a:	1e53      	subs	r3, r2, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d8ac      	bhi.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007da2:	1e50      	subs	r0, r2, #1
 8007da4:	bf18      	it	ne
 8007da6:	2001      	movne	r0, #1
 8007da8:	4b08      	ldr	r3, [pc, #32]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007daa:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <LmhpComplianceOnMcpsIndication+0x244>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0a2      	beq.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8007db6:	4798      	blx	r3
 8007db8:	e7a0      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8007dba:	4b04      	ldr	r3, [pc, #16]	@ (8007dcc <LmhpComplianceOnMcpsIndication+0x234>)
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	7299      	strb	r1, [r3, #10]
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	e01b      	b.n	8007e02 <LmhpComplianceOnMcpsIndication+0x26a>
 8007dca:	bf00      	nop
 8007dcc:	20000670 	.word	0x20000670
 8007dd0:	20000654 	.word	0x20000654
 8007dd4:	200000b8 	.word	0x200000b8
 8007dd8:	08012494 	.word	0x08012494
 8007ddc:	2000066c 	.word	0x2000066c
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007de0:	6882      	ldr	r2, [r0, #8]
 8007de2:	f101 0c01 	add.w	ip, r1, #1
 8007de6:	5c52      	ldrb	r2, [r2, r1]
 8007de8:	4971      	ldr	r1, [pc, #452]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007dea:	68cd      	ldr	r5, [r1, #12]
 8007dec:	7a8c      	ldrb	r4, [r1, #10]
 8007dee:	f104 0e01 	add.w	lr, r4, #1
 8007df2:	f881 e00a 	strb.w	lr, [r1, #10]
 8007df6:	3201      	adds	r2, #1
 8007df8:	552a      	strb	r2, [r5, r4]
                     i++ )
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007dfe:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007e02:	4a6b      	ldr	r2, [pc, #428]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007e04:	7a52      	ldrb	r2, [r2, #9]
 8007e06:	7b04      	ldrb	r4, [r0, #12]
 8007e08:	42a2      	cmp	r2, r4
 8007e0a:	bf28      	it	cs
 8007e0c:	4622      	movcs	r2, r4
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d8e6      	bhi.n	8007de0 <LmhpComplianceOnMcpsIndication+0x248>
 8007e12:	e773      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007e14:	4b66      	ldr	r3, [pc, #408]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	7299      	strb	r1, [r3, #10]
 8007e1c:	2109      	movs	r1, #9
 8007e1e:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007e20:	8a18      	ldrh	r0, [r3, #16]
 8007e22:	68d9      	ldr	r1, [r3, #12]
 8007e24:	7a9a      	ldrb	r2, [r3, #10]
 8007e26:	1c54      	adds	r4, r2, #1
 8007e28:	729c      	strb	r4, [r3, #10]
 8007e2a:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007e2c:	8a1a      	ldrh	r2, [r3, #16]
 8007e2e:	68d8      	ldr	r0, [r3, #12]
 8007e30:	7a99      	ldrb	r1, [r3, #10]
 8007e32:	1c4c      	adds	r4, r1, #1
 8007e34:	729c      	strb	r4, [r3, #10]
 8007e36:	0a13      	lsrs	r3, r2, #8
 8007e38:	5443      	strb	r3, [r0, r1]
                break;
 8007e3a:	e75f      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8007e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	821a      	strh	r2, [r3, #16]
                break;
 8007e42:	e75b      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007e44:	2305      	movs	r3, #5
 8007e46:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8007e4a:	a801      	add	r0, sp, #4
 8007e4c:	f003 fac6 	bl	800b3dc <LoRaMacMlmeRequest>
                break;
 8007e50:	e754      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8007e52:	4b58      	ldr	r3, [pc, #352]	@ (8007fb4 <LmhpComplianceOnMcpsIndication+0x41c>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	4798      	blx	r3
                break;
 8007e58:	e750      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007e5a:	7860      	ldrb	r0, [r4, #1]
 8007e5c:	4b54      	ldr	r3, [pc, #336]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007e5e:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007e60:	4b55      	ldr	r3, [pc, #340]	@ (8007fb8 <LmhpComplianceOnMcpsIndication+0x420>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f43f af48 	beq.w	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007e6c:	4798      	blx	r3
 8007e6e:	e745      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8007e70:	7b03      	ldrb	r3, [r0, #12]
 8007e72:	2b07      	cmp	r3, #7
 8007e74:	f47f af42 	bne.w	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8007e78:	2306      	movs	r3, #6
 8007e7a:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007e7e:	7863      	ldrb	r3, [r4, #1]
 8007e80:	78a2      	ldrb	r2, [r4, #2]
 8007e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8007e86:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007e8a:	78e3      	ldrb	r3, [r4, #3]
 8007e8c:	7922      	ldrb	r2, [r4, #4]
 8007e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007e92:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007e98:	2264      	movs	r2, #100	@ 0x64
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8007e9e:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007ea0:	6883      	ldr	r3, [r0, #8]
 8007ea2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007ea6:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007eaa:	a801      	add	r0, sp, #4
 8007eac:	f003 fa96 	bl	800b3dc <LoRaMacMlmeRequest>
                break;
 8007eb0:	e724      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007eb2:	233b      	movs	r3, #59	@ 0x3b
 8007eb4:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                mibReq.Param.IsCertPortOn = false;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007ebe:	a80c      	add	r0, sp, #48	@ 0x30
 8007ec0:	f002 ffa0 	bl	800ae04 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8007ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 8007ecc:	e716      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 8007ece:	232a      	movs	r3, #42	@ 0x2a
 8007ed0:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8007ed4:	a801      	add	r0, sp, #4
 8007ed6:	f002 fe07 	bl	800aae8 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007eda:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007edc:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007ede:	4b34      	ldr	r3, [pc, #208]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007ee0:	68dc      	ldr	r4, [r3, #12]
 8007ee2:	7a98      	ldrb	r0, [r3, #10]
 8007ee4:	1c45      	adds	r5, r0, #1
 8007ee6:	729d      	strb	r5, [r3, #10]
 8007ee8:	257f      	movs	r5, #127	@ 0x7f
 8007eea:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007eec:	4832      	ldr	r0, [pc, #200]	@ (8007fb8 <LmhpComplianceOnMcpsIndication+0x420>)
 8007eee:	6800      	ldr	r0, [r0, #0]
 8007ef0:	68dd      	ldr	r5, [r3, #12]
 8007ef2:	7a9c      	ldrb	r4, [r3, #10]
 8007ef4:	1c66      	adds	r6, r4, #1
 8007ef6:	729e      	strb	r6, [r3, #10]
 8007ef8:	78c6      	ldrb	r6, [r0, #3]
 8007efa:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007efc:	68dd      	ldr	r5, [r3, #12]
 8007efe:	7a9c      	ldrb	r4, [r3, #10]
 8007f00:	1c66      	adds	r6, r4, #1
 8007f02:	729e      	strb	r6, [r3, #10]
 8007f04:	7886      	ldrb	r6, [r0, #2]
 8007f06:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007f08:	68dd      	ldr	r5, [r3, #12]
 8007f0a:	7a9c      	ldrb	r4, [r3, #10]
 8007f0c:	1c66      	adds	r6, r4, #1
 8007f0e:	729e      	strb	r6, [r3, #10]
 8007f10:	7846      	ldrb	r6, [r0, #1]
 8007f12:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007f14:	68dd      	ldr	r5, [r3, #12]
 8007f16:	7a9c      	ldrb	r4, [r3, #10]
 8007f18:	1c66      	adds	r6, r4, #1
 8007f1a:	729e      	strb	r6, [r3, #10]
 8007f1c:	7800      	ldrb	r0, [r0, #0]
 8007f1e:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007f20:	68dc      	ldr	r4, [r3, #12]
 8007f22:	7a98      	ldrb	r0, [r3, #10]
 8007f24:	1c45      	adds	r5, r0, #1
 8007f26:	729d      	strb	r5, [r3, #10]
 8007f28:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007f2c:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007f2e:	68dc      	ldr	r4, [r3, #12]
 8007f30:	7a98      	ldrb	r0, [r3, #10]
 8007f32:	1c45      	adds	r5, r0, #1
 8007f34:	729d      	strb	r5, [r3, #10]
 8007f36:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007f3a:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007f3c:	68dc      	ldr	r4, [r3, #12]
 8007f3e:	7a98      	ldrb	r0, [r3, #10]
 8007f40:	1c45      	adds	r5, r0, #1
 8007f42:	729d      	strb	r5, [r3, #10]
 8007f44:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007f48:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007f4a:	68dc      	ldr	r4, [r3, #12]
 8007f4c:	7a98      	ldrb	r0, [r3, #10]
 8007f4e:	1c45      	adds	r5, r0, #1
 8007f50:	729d      	strb	r5, [r3, #10]
 8007f52:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007f54:	68d8      	ldr	r0, [r3, #12]
 8007f56:	7a99      	ldrb	r1, [r3, #10]
 8007f58:	1c4c      	adds	r4, r1, #1
 8007f5a:	729c      	strb	r4, [r3, #10]
 8007f5c:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007f60:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007f62:	68d8      	ldr	r0, [r3, #12]
 8007f64:	7a99      	ldrb	r1, [r3, #10]
 8007f66:	1c4c      	adds	r4, r1, #1
 8007f68:	729c      	strb	r4, [r3, #10]
 8007f6a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007f6e:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007f70:	68d8      	ldr	r0, [r3, #12]
 8007f72:	7a99      	ldrb	r1, [r3, #10]
 8007f74:	1c4c      	adds	r4, r1, #1
 8007f76:	729c      	strb	r4, [r3, #10]
 8007f78:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007f7c:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007f7e:	68d8      	ldr	r0, [r3, #12]
 8007f80:	7a99      	ldrb	r1, [r3, #10]
 8007f82:	1c4c      	adds	r4, r1, #1
 8007f84:	729c      	strb	r4, [r3, #10]
 8007f86:	5442      	strb	r2, [r0, r1]
                break;
 8007f88:	e6b8      	b.n	8007cfc <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fbc <LmhpComplianceOnMcpsIndication+0x424>)
 8007f8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007f90:	4620      	mov	r0, r4
 8007f92:	f009 f89d 	bl	80110d0 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8007f96:	4620      	mov	r0, r4
 8007f98:	f009 f854 	bl	8011044 <UTIL_TIMER_Start>
 8007f9c:	e6b8      	b.n	8007d10 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8007f9e:	4807      	ldr	r0, [pc, #28]	@ (8007fbc <LmhpComplianceOnMcpsIndication+0x424>)
 8007fa0:	f008 fff6 	bl	8010f90 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007fa4:	4b02      	ldr	r3, [pc, #8]	@ (8007fb0 <LmhpComplianceOnMcpsIndication+0x418>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	705a      	strb	r2, [r3, #1]
 8007faa:	e6b1      	b.n	8007d10 <LmhpComplianceOnMcpsIndication+0x178>
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000670 	.word	0x20000670
 8007fb4:	200000b8 	.word	0x200000b8
 8007fb8:	2000066c 	.word	0x2000066c
 8007fbc:	20000654 	.word	0x20000654

08007fc0 <LmhpComplianceProcess>:
{
 8007fc0:	b530      	push	{r4, r5, lr}
 8007fc2:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007fc4:	4b27      	ldr	r3, [pc, #156]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	b993      	cbnz	r3, 8007ff0 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007fca:	4b26      	ldr	r3, [pc, #152]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8007fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d13d      	bne.n	8008050 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007fd4:	4b23      	ldr	r3, [pc, #140]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8007fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007fda:	b13b      	cbz	r3, 8007fec <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007fdc:	4b21      	ldr	r3, [pc, #132]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8007fe4:	4b20      	ldr	r3, [pc, #128]	@ (8008068 <LmhpComplianceProcess+0xa8>)
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe8:	b103      	cbz	r3, 8007fec <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007fea:	4798      	blx	r3
}
 8007fec:	b003      	add	sp, #12
 8007fee:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007ff0:	f008 ff8e 	bl	8010f10 <UTIL_TIMER_GetCurrentTime>
 8007ff4:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8007ff8:	685d      	ldr	r5, [r3, #4]
 8007ffa:	f7ff f993 	bl	8007324 <LmHandlerGetDutyCycleWaitTime>
 8007ffe:	4405      	add	r5, r0
 8008000:	42a5      	cmp	r5, r4
 8008002:	d2e7      	bcs.n	8007fd4 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8008004:	4b17      	ldr	r3, [pc, #92]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8008006:	7a9b      	ldrb	r3, [r3, #10]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0e3      	beq.n	8007fd4 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 800800c:	22e0      	movs	r2, #224	@ 0xe0
 800800e:	f88d 2000 	strb.w	r2, [sp]
 8008012:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8008016:	4b13      	ldr	r3, [pc, #76]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8008018:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 800801a:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800801c:	2201      	movs	r2, #1
 800801e:	7a19      	ldrb	r1, [r3, #8]
 8008020:	4668      	mov	r0, sp
 8008022:	f7ff f9ad 	bl	8007380 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8008026:	b110      	cbz	r0, 800802e <LmhpComplianceProcess+0x6e>
 8008028:	f110 0f07 	cmn.w	r0, #7
 800802c:	d106      	bne.n	800803c <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 800802e:	4b0d      	ldr	r3, [pc, #52]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8008030:	2200      	movs	r2, #0
 8008032:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8008034:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8008036:	4b0b      	ldr	r3, [pc, #44]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8008038:	605c      	str	r4, [r3, #4]
 800803a:	e7cb      	b.n	8007fd4 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 800803c:	4d0b      	ldr	r5, [pc, #44]	@ (800806c <LmhpComplianceProcess+0xac>)
 800803e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8008042:	4628      	mov	r0, r5
 8008044:	f009 f844 	bl	80110d0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8008048:	4628      	mov	r0, r5
 800804a:	f008 fffb 	bl	8011044 <UTIL_TIMER_Start>
 800804e:	e7f2      	b.n	8008036 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8008050:	4b04      	ldr	r3, [pc, #16]	@ (8008064 <LmhpComplianceProcess+0xa4>)
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8008058:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 800805c:	f7ff fa3a 	bl	80074d4 <LmHandlerRequestClass>
 8008060:	e7b8      	b.n	8007fd4 <LmhpComplianceProcess+0x14>
 8008062:	bf00      	nop
 8008064:	20000670 	.word	0x20000670
 8008068:	200000b8 	.word	0x200000b8
 800806c:	20000654 	.word	0x20000654

08008070 <LmhpComplianceInit>:
{
 8008070:	b530      	push	{r4, r5, lr}
 8008072:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008074:	b188      	cbz	r0, 800809a <LmhpComplianceInit+0x2a>
 8008076:	4603      	mov	r3, r0
 8008078:	b179      	cbz	r1, 800809a <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800807a:	4813      	ldr	r0, [pc, #76]	@ (80080c8 <LmhpComplianceInit+0x58>)
 800807c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800807e:	4b13      	ldr	r3, [pc, #76]	@ (80080cc <LmhpComplianceInit+0x5c>)
 8008080:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008082:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8008084:	2201      	movs	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8008088:	2200      	movs	r2, #0
 800808a:	9200      	str	r2, [sp, #0]
 800808c:	4b10      	ldr	r3, [pc, #64]	@ (80080d0 <LmhpComplianceInit+0x60>)
 800808e:	f04f 31ff 	mov.w	r1, #4294967295
 8008092:	4810      	ldr	r0, [pc, #64]	@ (80080d4 <LmhpComplianceInit+0x64>)
 8008094:	f008 ff1e 	bl	8010ed4 <UTIL_TIMER_Create>
 8008098:	e004      	b.n	80080a4 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	4a0a      	ldr	r2, [pc, #40]	@ (80080c8 <LmhpComplianceInit+0x58>)
 800809e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 80080a0:	4a0a      	ldr	r2, [pc, #40]	@ (80080cc <LmhpComplianceInit+0x5c>)
 80080a2:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 80080a4:	4c09      	ldr	r4, [pc, #36]	@ (80080cc <LmhpComplianceInit+0x5c>)
 80080a6:	2500      	movs	r5, #0
 80080a8:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 80080aa:	2220      	movs	r2, #32
 80080ac:	4629      	mov	r1, r5
 80080ae:	f104 0014 	add.w	r0, r4, #20
 80080b2:	f006 fd9c 	bl	800ebee <memset1>
    ComplianceTestState.IsTxPending = false;
 80080b6:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 80080b8:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80080ba:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80080be:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 80080c2:	b003      	add	sp, #12
 80080c4:	bd30      	pop	{r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	2000066c 	.word	0x2000066c
 80080cc:	20000670 	.word	0x20000670
 80080d0:	08007b79 	.word	0x08007b79
 80080d4:	20000654 	.word	0x20000654

080080d8 <LmhpCompliancePackageFactory>:
}
 80080d8:	4800      	ldr	r0, [pc, #0]	@ (80080dc <LmhpCompliancePackageFactory+0x4>)
 80080da:	4770      	bx	lr
 80080dc:	200000b8 	.word	0x200000b8

080080e0 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 80080e0:	2000      	movs	r0, #0
 80080e2:	4770      	bx	lr

080080e4 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	4770      	bx	lr
	...

080080ec <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80080ec:	4b07      	ldr	r3, [pc, #28]	@ (800810c <UpdateRxSlotIdleState+0x20>)
 80080ee:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d004      	beq.n	8008100 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80080f6:	4b06      	ldr	r3, [pc, #24]	@ (8008110 <UpdateRxSlotIdleState+0x24>)
 80080f8:	2206      	movs	r2, #6
 80080fa:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
 80080fe:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008100:	4b03      	ldr	r3, [pc, #12]	@ (8008110 <UpdateRxSlotIdleState+0x24>)
 8008102:	2202      	movs	r2, #2
 8008104:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20008000 	.word	0x20008000
 8008110:	20000754 	.word	0x20000754

08008114 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8008114:	4b01      	ldr	r3, [pc, #4]	@ (800811c <LoRaMacEnableRequests+0x8>)
 8008116:	f883 0492 	strb.w	r0, [r3, #1170]	@ 0x492
}
 800811a:	4770      	bx	lr
 800811c:	20000754 	.word	0x20000754

08008120 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8008120:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008122:	4b15      	ldr	r3, [pc, #84]	@ (8008178 <LoRaMacHandleIndicationEvents+0x58>)
 8008124:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008128:	f013 0f08 	tst.w	r3, #8
 800812c:	d00e      	beq.n	800814c <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800812e:	4812      	ldr	r0, [pc, #72]	@ (8008178 <LoRaMacHandleIndicationEvents+0x58>)
 8008130:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 8008134:	f023 0308 	bic.w	r3, r3, #8
 8008138:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800813c:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8008146:	f500 608d 	add.w	r0, r0, #1128	@ 0x468
 800814a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800814c:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <LoRaMacHandleIndicationEvents+0x58>)
 800814e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008152:	f013 0f02 	tst.w	r3, #2
 8008156:	d00e      	beq.n	8008176 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008158:	4807      	ldr	r0, [pc, #28]	@ (8008178 <LoRaMacHandleIndicationEvents+0x58>)
 800815a:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 800815e:	f023 0302 	bic.w	r3, r3, #2
 8008162:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008166:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8008170:	f500 6084 	add.w	r0, r0, #1056	@ 0x420
 8008174:	4798      	blx	r3
    }
}
 8008176:	bd08      	pop	{r3, pc}
 8008178:	20000754 	.word	0x20000754

0800817c <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800817c:	b110      	cbz	r0, 8008184 <CheckForMinimumAbpDatarate+0x8>
 800817e:	2901      	cmp	r1, #1
 8008180:	d001      	beq.n	8008186 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8008182:	2000      	movs	r0, #0
}
 8008184:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8008186:	2a00      	cmp	r2, #0
 8008188:	d0fc      	beq.n	8008184 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800818a:	2000      	movs	r0, #0
 800818c:	4770      	bx	lr
	...

08008190 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <LoRaMacCheckForRxAbort+0x20>)
 8008192:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8008196:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800819a:	d008      	beq.n	80081ae <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800819c:	4a04      	ldr	r2, [pc, #16]	@ (80081b0 <LoRaMacCheckForRxAbort+0x20>)
 800819e:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80081a2:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80081a6:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 80081aa:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 80081ae:	4770      	bx	lr
 80081b0:	20000754 	.word	0x20000754

080081b4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80081b4:	4b06      	ldr	r3, [pc, #24]	@ (80081d0 <CalculateBackOff+0x1c>)
 80081b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b8:	b94b      	cbnz	r3, 80081ce <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80081ba:	4a05      	ldr	r2, [pc, #20]	@ (80081d0 <CalculateBackOff+0x1c>)
 80081bc:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
 80081c0:	4904      	ldr	r1, [pc, #16]	@ (80081d4 <CalculateBackOff+0x20>)
 80081c2:	f8d1 141c 	ldr.w	r1, [r1, #1052]	@ 0x41c
 80081c6:	3b01      	subs	r3, #1
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 80081ce:	4770      	bx	lr
 80081d0:	20008000 	.word	0x20008000
 80081d4:	20000754 	.word	0x20000754

080081d8 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80081d8:	b508      	push	{r3, lr}
 80081da:	4684      	mov	ip, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80081e0:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <SetTxContinuousWave+0x24>)
 80081e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e4:	4662      	mov	r2, ip
 80081e6:	b249      	sxtb	r1, r1
 80081e8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80081ea:	4a05      	ldr	r2, [pc, #20]	@ (8008200 <SetTxContinuousWave+0x28>)
 80081ec:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 80081f0:	f043 0302 	orr.w	r3, r3, #2
 80081f4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 80081f8:	2000      	movs	r0, #0
 80081fa:	bd08      	pop	{r3, pc}
 80081fc:	08013274 	.word	0x08013274
 8008200:	20000754 	.word	0x20000754

08008204 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008204:	4602      	mov	r2, r0
 8008206:	b1f8      	cbz	r0, 8008248 <DetermineFrameType+0x44>
 8008208:	b301      	cbz	r1, 800824c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800820a:	7b03      	ldrb	r3, [r0, #12]
 800820c:	f013 030f 	ands.w	r3, r3, #15
 8008210:	d005      	beq.n	800821e <DetermineFrameType+0x1a>
 8008212:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008216:	b110      	cbz	r0, 800821e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008218:	2000      	movs	r0, #0
 800821a:	7008      	strb	r0, [r1, #0]
 800821c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800821e:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 8008222:	b910      	cbnz	r0, 800822a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8008224:	2301      	movs	r3, #1
 8008226:	700b      	strb	r3, [r1, #0]
 8008228:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800822a:	b92b      	cbnz	r3, 8008238 <DetermineFrameType+0x34>
 800822c:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008230:	b910      	cbnz	r0, 8008238 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8008232:	2302      	movs	r3, #2
 8008234:	700b      	strb	r3, [r1, #0]
 8008236:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008238:	b953      	cbnz	r3, 8008250 <DetermineFrameType+0x4c>
 800823a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800823e:	b14a      	cbz	r2, 8008254 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8008240:	2203      	movs	r2, #3
 8008242:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8008244:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8008246:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008248:	2003      	movs	r0, #3
 800824a:	4770      	bx	lr
 800824c:	2003      	movs	r0, #3
 800824e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8008250:	2018      	movs	r0, #24
 8008252:	4770      	bx	lr
 8008254:	2018      	movs	r0, #24
}
 8008256:	4770      	bx	lr

08008258 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8008258:	4288      	cmp	r0, r1
 800825a:	d201      	bcs.n	8008260 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800825c:	2000      	movs	r0, #0
 800825e:	4770      	bx	lr
        return true;
 8008260:	2001      	movs	r0, #1
}
 8008262:	4770      	bx	lr

08008264 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8008264:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008266:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <CheckRetransUnconfirmedUplink+0x30>)
 8008268:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 800826c:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <CheckRetransUnconfirmedUplink+0x34>)
 800826e:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8008272:	f7ff fff1 	bl	8008258 <CheckRetrans>
 8008276:	b950      	cbnz	r0, 800828e <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008278:	4b07      	ldr	r3, [pc, #28]	@ (8008298 <CheckRetransUnconfirmedUplink+0x34>)
 800827a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800827e:	f013 0f02 	tst.w	r3, #2
 8008282:	d004      	beq.n	800828e <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008284:	4b04      	ldr	r3, [pc, #16]	@ (8008298 <CheckRetransUnconfirmedUplink+0x34>)
 8008286:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800828a:	2b01      	cmp	r3, #1
 800828c:	d900      	bls.n	8008290 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800828e:	bd08      	pop	{r3, pc}
            return true;
 8008290:	2001      	movs	r0, #1
 8008292:	e7fc      	b.n	800828e <CheckRetransUnconfirmedUplink+0x2a>
 8008294:	20008000 	.word	0x20008000
 8008298:	20000754 	.word	0x20000754

0800829c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800829c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800829e:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <CheckRetransConfirmedUplink+0x28>)
 80082a0:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 80082a4:	4b08      	ldr	r3, [pc, #32]	@ (80082c8 <CheckRetransConfirmedUplink+0x2c>)
 80082a6:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 80082aa:	f7ff ffd5 	bl	8008258 <CheckRetrans>
 80082ae:	b940      	cbnz	r0, 80082c2 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80082b0:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <CheckRetransConfirmedUplink+0x2c>)
 80082b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80082b6:	f013 0f02 	tst.w	r3, #2
 80082ba:	d002      	beq.n	80082c2 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80082bc:	4b02      	ldr	r3, [pc, #8]	@ (80082c8 <CheckRetransConfirmedUplink+0x2c>)
 80082be:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
        {
            return true;
        }
    }
    return false;
}
 80082c2:	bd08      	pop	{r3, pc}
 80082c4:	20008000 	.word	0x20008000
 80082c8:	20000754 	.word	0x20000754

080082cc <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 80082cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082d0:	d000      	beq.n	80082d4 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 80082d2:	3001      	adds	r0, #1
    }
    return counter;
}
 80082d4:	4770      	bx	lr
	...

080082d8 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80082d8:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80082da:	4b12      	ldr	r3, [pc, #72]	@ (8008324 <StopRetransmission+0x4c>)
 80082dc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80082e0:	f013 0f02 	tst.w	r3, #2
 80082e4:	d004      	beq.n	80082f0 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80082e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008324 <StopRetransmission+0x4c>)
 80082e8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d908      	bls.n	8008302 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80082f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <StopRetransmission+0x50>)
 80082f2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80082f6:	b123      	cbz	r3, 8008302 <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80082f8:	4c0b      	ldr	r4, [pc, #44]	@ (8008328 <StopRetransmission+0x50>)
 80082fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80082fc:	f7ff ffe6 	bl	80082cc <IncreaseAdrAckCounter>
 8008300:	62a0      	str	r0, [r4, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008302:	4b08      	ldr	r3, [pc, #32]	@ (8008324 <StopRetransmission+0x4c>)
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 800830a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800830e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008312:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8008316:	f022 0202 	bic.w	r2, r2, #2
 800831a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 800831e:	2001      	movs	r0, #1
 8008320:	bd10      	pop	{r4, pc}
 8008322:	bf00      	nop
 8008324:	20000754 	.word	0x20000754
 8008328:	20008000 	.word	0x20008000

0800832c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800832c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800832e:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <OnMacProcessNotify+0x14>)
 8008330:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008334:	b113      	cbz	r3, 800833c <OnMacProcessNotify+0x10>
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	b103      	cbz	r3, 800833c <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800833a:	4798      	blx	r3
    }
}
 800833c:	bd08      	pop	{r3, pc}
 800833e:	bf00      	nop
 8008340:	20000754 	.word	0x20000754

08008344 <OnRadioRxError>:
{
 8008344:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008346:	4a04      	ldr	r2, [pc, #16]	@ (8008358 <OnRadioRxError+0x14>)
 8008348:	7813      	ldrb	r3, [r2, #0]
 800834a:	f043 0304 	orr.w	r3, r3, #4
 800834e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8008350:	f7ff ffec 	bl	800832c <OnMacProcessNotify>
}
 8008354:	bd08      	pop	{r3, pc}
 8008356:	bf00      	nop
 8008358:	200006c0 	.word	0x200006c0

0800835c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800835c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800835e:	4b04      	ldr	r3, [pc, #16]	@ (8008370 <CallNvmDataChangeCallback+0x14>)
 8008360:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008364:	b113      	cbz	r3, 800836c <CallNvmDataChangeCallback+0x10>
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	b103      	cbz	r3, 800836c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800836a:	4798      	blx	r3
    }
}
 800836c:	bd08      	pop	{r3, pc}
 800836e:	bf00      	nop
 8008370:	20000754 	.word	0x20000754

08008374 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008374:	4b04      	ldr	r3, [pc, #16]	@ (8008388 <IsRequestPending+0x14>)
 8008376:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
 800837a:	f010 0005 	ands.w	r0, r0, #5
 800837e:	d100      	bne.n	8008382 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8008380:	4770      	bx	lr
        return 1;
 8008382:	2001      	movs	r0, #1
 8008384:	e7fc      	b.n	8008380 <IsRequestPending+0xc>
 8008386:	bf00      	nop
 8008388:	20000754 	.word	0x20000754

0800838c <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 800838c:	b508      	push	{r3, lr}
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 800838e:	4b08      	ldr	r3, [pc, #32]	@ (80083b0 <OnAbpJoinPendingTimerEvent+0x24>)
 8008390:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8008394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008398:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 800839c:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 80083a0:	f042 0210 	orr.w	r2, r2, #16
 80083a4:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    OnMacProcessNotify( );
 80083a8:	f7ff ffc0 	bl	800832c <OnMacProcessNotify>
}
 80083ac:	bd08      	pop	{r3, pc}
 80083ae:	bf00      	nop
 80083b0:	20000754 	.word	0x20000754

080083b4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80083b4:	b500      	push	{lr}
 80083b6:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80083b8:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 80083ba:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 80083be:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 80083c2:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80083c6:	220d      	movs	r2, #13
 80083c8:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80083cc:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80083d0:	b113      	cbz	r3, 80083d8 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80083d2:	230e      	movs	r3, #14
 80083d4:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80083d8:	a902      	add	r1, sp, #8
 80083da:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 80083dc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80083e0:	f004 faa9 	bl	800c936 <RegionGetPhyParam>
 80083e4:	9001      	str	r0, [sp, #4]
}
 80083e6:	b2c0      	uxtb	r0, r0
 80083e8:	b005      	add	sp, #20
 80083ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80083ee:	bf00      	nop
 80083f0:	20008000 	.word	0x20008000

080083f4 <ValidatePayloadLength>:
{
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80083fa:	4608      	mov	r0, r1
 80083fc:	f7ff ffda 	bl	80083b4 <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 8008400:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008402:	42a0      	cmp	r0, r4
 8008404:	d201      	bcs.n	800840a <ValidatePayloadLength+0x16>
    return false;
 8008406:	2000      	movs	r0, #0
}
 8008408:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800840a:	2001      	movs	r0, #1
 800840c:	e7fc      	b.n	8008408 <ValidatePayloadLength+0x14>
	...

08008410 <ProcessRadioTxDone>:
{
 8008410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008412:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008414:	4b3b      	ldr	r3, [pc, #236]	@ (8008504 <ProcessRadioTxDone+0xf4>)
 8008416:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800841a:	2b02      	cmp	r3, #2
 800841c:	d002      	beq.n	8008424 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800841e:	4b3a      	ldr	r3, [pc, #232]	@ (8008508 <ProcessRadioTxDone+0xf8>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008424:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008428:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800842a:	f008 fd71 	bl	8010f10 <UTIL_TIMER_GetCurrentTime>
 800842e:	4b37      	ldr	r3, [pc, #220]	@ (800850c <ProcessRadioTxDone+0xfc>)
 8008430:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8008432:	4c37      	ldr	r4, [pc, #220]	@ (8008510 <ProcessRadioTxDone+0x100>)
 8008434:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 8008438:	1a2d      	subs	r5, r5, r0
 800843a:	f504 7660 	add.w	r6, r4, #896	@ 0x380
 800843e:	4429      	add	r1, r5
 8008440:	4630      	mov	r0, r6
 8008442:	f008 fe45 	bl	80110d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008446:	4630      	mov	r0, r6
 8008448:	f008 fdfc 	bl	8011044 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800844c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8008450:	f504 7666 	add.w	r6, r4, #920	@ 0x398
 8008454:	4429      	add	r1, r5
 8008456:	4630      	mov	r0, r6
 8008458:	f008 fe3a 	bl	80110d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800845c:	4630      	mov	r0, r6
 800845e:	f008 fdf1 	bl	8011044 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008462:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 8008466:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 800846a:	2b00      	cmp	r3, #0
 800846c:	d134      	bne.n	80084d8 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800846e:	4b28      	ldr	r3, [pc, #160]	@ (8008510 <ProcessRadioTxDone+0x100>)
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008476:	4b25      	ldr	r3, [pc, #148]	@ (800850c <ProcessRadioTxDone+0xfc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4c22      	ldr	r4, [pc, #136]	@ (8008504 <ProcessRadioTxDone+0xf4>)
 800847c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 800847e:	4f24      	ldr	r7, [pc, #144]	@ (8008510 <ProcessRadioTxDone+0x100>)
 8008480:	f897 241b 	ldrb.w	r2, [r7, #1051]	@ 0x41b
 8008484:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008488:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800848a:	ae0c      	add	r6, sp, #48	@ 0x30
 800848c:	4630      	mov	r0, r6
 800848e:	f008 fcff 	bl	8010e90 <SysTimeGetMcuTime>
 8008492:	ad02      	add	r5, sp, #8
 8008494:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 800849e:	e896 0006 	ldmia.w	r6, {r1, r2}
 80084a2:	4628      	mov	r0, r5
 80084a4:	f008 fc91 	bl	8010dca <SysTimeSub>
 80084a8:	ab07      	add	r3, sp, #28
 80084aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80084ae:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80084b2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80084b6:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80084be:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 80084c2:	b90b      	cbnz	r3, 80084c8 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 80084c4:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80084c8:	a904      	add	r1, sp, #16
 80084ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008504 <ProcessRadioTxDone+0xf4>)
 80084cc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80084d0:	f004 fa41 	bl	800c956 <RegionSetBandTxDone>
}
 80084d4:	b00f      	add	sp, #60	@ 0x3c
 80084d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 80084d8:	2315      	movs	r3, #21
 80084da:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084de:	a90a      	add	r1, sp, #40	@ 0x28
 80084e0:	4b08      	ldr	r3, [pc, #32]	@ (8008504 <ProcessRadioTxDone+0xf4>)
 80084e2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80084e6:	f004 fa26 	bl	800c936 <RegionGetPhyParam>
 80084ea:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80084ec:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 80084f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80084f4:	4401      	add	r1, r0
 80084f6:	4620      	mov	r0, r4
 80084f8:	f008 fdea 	bl	80110d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 80084fc:	4620      	mov	r0, r4
 80084fe:	f008 fda1 	bl	8011044 <UTIL_TIMER_Start>
 8008502:	e7b8      	b.n	8008476 <ProcessRadioTxDone+0x66>
 8008504:	20008000 	.word	0x20008000
 8008508:	08013274 	.word	0x08013274
 800850c:	200006bc 	.word	0x200006bc
 8008510:	20000754 	.word	0x20000754

08008514 <OnRetransmitTimeoutTimerEvent>:
{
 8008514:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8008516:	4c07      	ldr	r4, [pc, #28]	@ (8008534 <OnRetransmitTimeoutTimerEvent+0x20>)
 8008518:	4620      	mov	r0, r4
 800851a:	f008 fd39 	bl	8010f90 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800851e:	7ea3      	ldrb	r3, [r4, #26]
 8008520:	b123      	cbz	r3, 800852c <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8008522:	f5a4 6380 	sub.w	r3, r4, #1024	@ 0x400
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    OnMacProcessNotify( );
 800852c:	f7ff fefe 	bl	800832c <OnMacProcessNotify>
}
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	20000b54 	.word	0x20000b54

08008538 <PrepareRxDoneAbort>:
{
 8008538:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800853a:	4b0e      	ldr	r3, [pc, #56]	@ (8008574 <PrepareRxDoneAbort+0x3c>)
 800853c:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8008540:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008544:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 8008548:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800854c:	b973      	cbnz	r3, 800856c <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800854e:	4b09      	ldr	r3, [pc, #36]	@ (8008574 <PrepareRxDoneAbort+0x3c>)
 8008550:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8008554:	f042 0202 	orr.w	r2, r2, #2
 8008558:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	f042 0210 	orr.w	r2, r2, #16
 8008562:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8008566:	f7ff fdc1 	bl	80080ec <UpdateRxSlotIdleState>
}
 800856a:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800856c:	2000      	movs	r0, #0
 800856e:	f7ff ffd1 	bl	8008514 <OnRetransmitTimeoutTimerEvent>
 8008572:	e7ec      	b.n	800854e <PrepareRxDoneAbort+0x16>
 8008574:	20000754 	.word	0x20000754

08008578 <LoRaMacCheckForBeaconAcquisition>:
{
 8008578:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800857a:	200b      	movs	r0, #11
 800857c:	f003 fc62 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008580:	b188      	cbz	r0, 80085a6 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008582:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008584:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008588:	f010 0f01 	tst.w	r0, #1
 800858c:	d10d      	bne.n	80085aa <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800858e:	f010 0004 	ands.w	r0, r0, #4
 8008592:	d009      	beq.n	80085a8 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008594:	461a      	mov	r2, r3
 8008596:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800859a:	f023 0302 	bic.w	r3, r3, #2
 800859e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80085a2:	2001      	movs	r0, #1
 80085a4:	e000      	b.n	80085a8 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80085a6:	2000      	movs	r0, #0
}
 80085a8:	bd08      	pop	{r3, pc}
    return 0x00;
 80085aa:	2000      	movs	r0, #0
 80085ac:	e7fc      	b.n	80085a8 <LoRaMacCheckForBeaconAcquisition+0x30>
 80085ae:	bf00      	nop
 80085b0:	20000754 	.word	0x20000754

080085b4 <GetFCntDown>:
{
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	9c04      	ldr	r4, [sp, #16]
 80085b8:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80085ba:	b1f2      	cbz	r2, 80085fa <GetFCntDown+0x46>
 80085bc:	4694      	mov	ip, r2
 80085be:	b1f4      	cbz	r4, 80085fe <GetFCntDown+0x4a>
 80085c0:	b1fd      	cbz	r5, 8008602 <GetFCntDown+0x4e>
    switch( addrID )
 80085c2:	b188      	cbz	r0, 80085e8 <GetFCntDown+0x34>
 80085c4:	2801      	cmp	r0, #1
 80085c6:	d11e      	bne.n	8008606 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 80085c8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d002      	beq.n	80085d6 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 80085d0:	2303      	movs	r3, #3
 80085d2:	7023      	strb	r3, [r4, #0]
 80085d4:	e00a      	b.n	80085ec <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80085d6:	b121      	cbz	r1, 80085e2 <GetFCntDown+0x2e>
 80085d8:	2903      	cmp	r1, #3
 80085da:	d002      	beq.n	80085e2 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 80085dc:	2301      	movs	r3, #1
 80085de:	7023      	strb	r3, [r4, #0]
 80085e0:	e004      	b.n	80085ec <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80085e2:	2302      	movs	r3, #2
 80085e4:	7023      	strb	r3, [r4, #0]
 80085e6:	e001      	b.n	80085ec <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80085e8:	2304      	movs	r3, #4
 80085ea:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80085ec:	462a      	mov	r2, r5
 80085ee:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 80085f2:	7820      	ldrb	r0, [r4, #0]
 80085f4:	f003 fe50 	bl	800c298 <LoRaMacCryptoGetFCntDown>
}
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80085fa:	2009      	movs	r0, #9
 80085fc:	e7fc      	b.n	80085f8 <GetFCntDown+0x44>
 80085fe:	2009      	movs	r0, #9
 8008600:	e7fa      	b.n	80085f8 <GetFCntDown+0x44>
 8008602:	2009      	movs	r0, #9
 8008604:	e7f8      	b.n	80085f8 <GetFCntDown+0x44>
    switch( addrID )
 8008606:	2005      	movs	r0, #5
 8008608:	e7f6      	b.n	80085f8 <GetFCntDown+0x44>

0800860a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800860a:	2801      	cmp	r0, #1
 800860c:	d900      	bls.n	8008610 <RemoveMacCommands+0x6>
 800860e:	4770      	bx	lr
{
 8008610:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8008612:	2a01      	cmp	r2, #1
 8008614:	d105      	bne.n	8008622 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8008616:	f011 0f20 	tst.w	r1, #32
 800861a:	d004      	beq.n	8008626 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800861c:	f003 fabe 	bl	800bb9c <LoRaMacCommandsRemoveStickyAnsCmds>
 8008620:	e001      	b.n	8008626 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008622:	f003 fabb 	bl	800bb9c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8008626:	bd08      	pop	{r3, pc}

08008628 <ProcessMacCommands>:
{
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b08f      	sub	sp, #60	@ 0x3c
 800862e:	4698      	mov	r8, r3
    uint8_t status = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008636:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800863a:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800863e:	2b01      	cmp	r3, #1
 8008640:	f200 82e0 	bhi.w	8008c04 <ProcessMacCommands+0x5dc>
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800864a:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800864e:	42bc      	cmp	r4, r7
 8008650:	f080 82d8 	bcs.w	8008c04 <ProcessMacCommands+0x5dc>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008654:	5d28      	ldrb	r0, [r5, r4]
 8008656:	f003 faf9 	bl	800bc4c <LoRaMacCommandsGetCmdSize>
 800865a:	4420      	add	r0, r4
 800865c:	42b8      	cmp	r0, r7
 800865e:	f300 82d1 	bgt.w	8008c04 <ProcessMacCommands+0x5dc>
        switch( payload[macIndex++] )
 8008662:	1c66      	adds	r6, r4, #1
 8008664:	b2f6      	uxtb	r6, r6
 8008666:	5d2b      	ldrb	r3, [r5, r4]
 8008668:	3b02      	subs	r3, #2
 800866a:	2b11      	cmp	r3, #17
 800866c:	f200 82ca 	bhi.w	8008c04 <ProcessMacCommands+0x5dc>
 8008670:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008674:	00280012 	.word	0x00280012
 8008678:	00c000ad 	.word	0x00c000ad
 800867c:	0125010d 	.word	0x0125010d
 8008680:	017a015e 	.word	0x017a015e
 8008684:	02c801c6 	.word	0x02c801c6
 8008688:	01f602c8 	.word	0x01f602c8
 800868c:	02c802c8 	.word	0x02c802c8
 8008690:	026f0258 	.word	0x026f0258
 8008694:	02a8028e 	.word	0x02a8028e
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008698:	2005      	movs	r0, #5
 800869a:	f003 fbd3 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 800869e:	b908      	cbnz	r0, 80086a4 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 80086a0:	4634      	mov	r4, r6
 80086a2:	e7d4      	b.n	800864e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80086a4:	2105      	movs	r1, #5
 80086a6:	2000      	movs	r0, #0
 80086a8:	f003 fb80 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80086ac:	1ca3      	adds	r3, r4, #2
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	5da9      	ldrb	r1, [r5, r6]
 80086b2:	4aaa      	ldr	r2, [pc, #680]	@ (800895c <ProcessMacCommands+0x334>)
 80086b4:	f882 145c 	strb.w	r1, [r2, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80086b8:	3403      	adds	r4, #3
 80086ba:	b2e4      	uxtb	r4, r4
 80086bc:	5ceb      	ldrb	r3, [r5, r3]
 80086be:	f882 345d 	strb.w	r3, [r2, #1117]	@ 0x45d
 80086c2:	e7c4      	b.n	800864e <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 80086ca:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 80086ce:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 80086d2:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 80086d6:	f1b9 0f00 	cmp.w	r9, #0
 80086da:	d036      	beq.n	800874a <ProcessMacCommands+0x122>
                    macIndex += 4;
 80086dc:	3405      	adds	r4, #5
 80086de:	b2e4      	uxtb	r4, r4
 80086e0:	e7b5      	b.n	800864e <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 80086e2:	2305      	movs	r3, #5
 80086e4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80086e8:	e050      	b.n	800878c <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80086ea:	4b9d      	ldr	r3, [pc, #628]	@ (8008960 <ProcessMacCommands+0x338>)
 80086ec:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80086f0:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 80086f4:	4293      	cmp	r3, r2
 80086f6:	da03      	bge.n	8008700 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80086f8:	4b99      	ldr	r3, [pc, #612]	@ (8008960 <ProcessMacCommands+0x338>)
 80086fa:	2101      	movs	r1, #1
 80086fc:	f883 111d 	strb.w	r1, [r3, #285]	@ 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008700:	4b97      	ldr	r3, [pc, #604]	@ (8008960 <ProcessMacCommands+0x338>)
 8008702:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8008706:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800870a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800870e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008712:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8008716:	e04d      	b.n	80087b4 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008718:	2201      	movs	r2, #1
 800871a:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 800871e:	2003      	movs	r0, #3
 8008720:	f003 f9c8 	bl	800bab4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008724:	3401      	adds	r4, #1
 8008726:	b2e4      	uxtb	r4, r4
 8008728:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800872c:	498d      	ldr	r1, [pc, #564]	@ (8008964 <ProcessMacCommands+0x33c>)
 800872e:	fba1 2103 	umull	r2, r1, r1, r3
 8008732:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8008736:	d3ef      	bcc.n	8008718 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8008738:	4433      	add	r3, r6
 800873a:	b2de      	uxtb	r6, r3
 800873c:	1e74      	subs	r4, r6, #1
 800873e:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8008740:	42a7      	cmp	r7, r4
 8008742:	d93a      	bls.n	80087ba <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008744:	5d2b      	ldrb	r3, [r5, r4]
 8008746:	2b03      	cmp	r3, #3
 8008748:	d136      	bne.n	80087b8 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800874a:	1e73      	subs	r3, r6, #1
 800874c:	442b      	add	r3, r5
 800874e:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008750:	4b83      	ldr	r3, [pc, #524]	@ (8008960 <ProcessMacCommands+0x338>)
 8008752:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8008756:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800875a:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 800875e:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008762:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 8008766:	f88d 1027 	strb.w	r1, [sp, #39]	@ 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800876a:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800876e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008772:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8008776:	f88d 1029 	strb.w	r1, [sp, #41]	@ 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800877a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800877e:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008780:	2a00      	cmp	r2, #0
 8008782:	d0ae      	beq.n	80086e2 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008784:	1bbb      	subs	r3, r7, r6
 8008786:	3301      	adds	r3, #1
 8008788:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800878c:	ab05      	add	r3, sp, #20
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	ab03      	add	r3, sp, #12
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	f10d 030b 	add.w	r3, sp, #11
 8008798:	f10d 020a 	add.w	r2, sp, #10
 800879c:	a907      	add	r1, sp, #28
 800879e:	4870      	ldr	r0, [pc, #448]	@ (8008960 <ProcessMacCommands+0x338>)
 80087a0:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 80087a4:	f004 f91e 	bl	800c9e4 <RegionLinkAdrReq>
 80087a8:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 80087ac:	f000 0007 	and.w	r0, r0, #7
 80087b0:	2807      	cmp	r0, #7
 80087b2:	d09a      	beq.n	80086ea <ProcessMacCommands+0xc2>
{
 80087b4:	2400      	movs	r4, #0
 80087b6:	e7b7      	b.n	8008728 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80087b8:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 80087ba:	42bc      	cmp	r4, r7
 80087bc:	d204      	bcs.n	80087c8 <ProcessMacCommands+0x1a0>
                        macIndex--;
 80087be:	3c01      	subs	r4, #1
 80087c0:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 80087c2:	f04f 0901 	mov.w	r9, #1
 80087c6:	e742      	b.n	800864e <ProcessMacCommands+0x26>
 80087c8:	f04f 0901 	mov.w	r9, #1
                break;
 80087cc:	e73f      	b.n	800864e <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80087ce:	3402      	adds	r4, #2
 80087d0:	b2e4      	uxtb	r4, r4
 80087d2:	5dab      	ldrb	r3, [r5, r6]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	4961      	ldr	r1, [pc, #388]	@ (8008960 <ProcessMacCommands+0x338>)
 80087da:	f881 311b 	strb.w	r3, [r1, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80087de:	2201      	movs	r2, #1
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	f8a1 3120 	strh.w	r3, [r1, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80087e8:	2200      	movs	r2, #0
 80087ea:	a90b      	add	r1, sp, #44	@ 0x2c
 80087ec:	2004      	movs	r0, #4
 80087ee:	f003 f961 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 80087f2:	e72c      	b.n	800864e <ProcessMacCommands+0x26>
                status = 0x07;
 80087f4:	2307      	movs	r3, #7
 80087f6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80087fa:	5dab      	ldrb	r3, [r5, r6]
 80087fc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008800:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800880c:	1ca2      	adds	r2, r4, #2
 800880e:	b2d2      	uxtb	r2, r2
                if( rxParamSetupReq.Datarate == 0x0F )
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d027      	beq.n	8008864 <ProcessMacCommands+0x23c>
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008814:	1ce1      	adds	r1, r4, #3
 8008816:	b2c9      	uxtb	r1, r1
 8008818:	5cab      	ldrb	r3, [r5, r2]
 800881a:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800881c:	1d22      	adds	r2, r4, #4
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	5c69      	ldrb	r1, [r5, r1]
 8008822:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008826:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008828:	3405      	adds	r4, #5
 800882a:	b2e4      	uxtb	r4, r4
 800882c:	5caa      	ldrb	r2, [r5, r2]
 800882e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008832:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8008834:	2264      	movs	r2, #100	@ 0x64
 8008836:	fb02 f303 	mul.w	r3, r2, r3
 800883a:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800883c:	a907      	add	r1, sp, #28
 800883e:	4b48      	ldr	r3, [pc, #288]	@ (8008960 <ProcessMacCommands+0x338>)
 8008840:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008844:	f004 f8df 	bl	800ca06 <RegionRxParamSetupReq>
 8008848:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800884c:	f000 0307 	and.w	r3, r0, #7
 8008850:	2b07      	cmp	r3, #7
 8008852:	d00d      	beq.n	8008870 <ProcessMacCommands+0x248>
                macCmdPayload[0] = status;
 8008854:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008858:	2201      	movs	r2, #1
 800885a:	a90b      	add	r1, sp, #44	@ 0x2c
 800885c:	2005      	movs	r0, #5
 800885e:	f003 f929 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 8008862:	e6f4      	b.n	800864e <ProcessMacCommands+0x26>
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8008864:	4b3e      	ldr	r3, [pc, #248]	@ (8008960 <ProcessMacCommands+0x338>)
 8008866:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 800886a:	f88d 301c 	strb.w	r3, [sp, #28]
 800886e:	e7d1      	b.n	8008814 <ProcessMacCommands+0x1ec>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008870:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008874:	4b3a      	ldr	r3, [pc, #232]	@ (8008960 <ProcessMacCommands+0x338>)
 8008876:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800887a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800887e:	9a08      	ldr	r2, [sp, #32]
 8008880:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008882:	675a      	str	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008884:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008888:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 800888c:	e7e2      	b.n	8008854 <ProcessMacCommands+0x22c>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800888e:	4b33      	ldr	r3, [pc, #204]	@ (800895c <ProcessMacCommands+0x334>)
 8008890:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008894:	b17b      	cbz	r3, 80088b6 <ProcessMacCommands+0x28e>
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	b17b      	cbz	r3, 80088ba <ProcessMacCommands+0x292>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800889a:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800889c:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80088a0:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 80088a4:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80088a8:	2202      	movs	r2, #2
 80088aa:	a90b      	add	r1, sp, #44	@ 0x2c
 80088ac:	2006      	movs	r0, #6
 80088ae:	f003 f901 	bl	800bab4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80088b2:	4634      	mov	r4, r6
                break;
 80088b4:	e6cb      	b.n	800864e <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80088b6:	20ff      	movs	r0, #255	@ 0xff
 80088b8:	e7f0      	b.n	800889c <ProcessMacCommands+0x274>
 80088ba:	20ff      	movs	r0, #255	@ 0xff
 80088bc:	e7ee      	b.n	800889c <ProcessMacCommands+0x274>
                status = 0x03;
 80088be:	2303      	movs	r3, #3
 80088c0:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 80088c4:	1ca3      	adds	r3, r4, #2
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	57aa      	ldrsb	r2, [r5, r6]
 80088ca:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 80088ce:	aa07      	add	r2, sp, #28
 80088d0:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80088d2:	1ce2      	adds	r2, r4, #3
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	5ceb      	ldrb	r3, [r5, r3]
 80088d8:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80088da:	1d21      	adds	r1, r4, #4
 80088dc:	b2c9      	uxtb	r1, r1
 80088de:	5caa      	ldrb	r2, [r5, r2]
 80088e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80088e4:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80088e6:	1d62      	adds	r2, r4, #5
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	5c69      	ldrb	r1, [r5, r1]
 80088ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80088f0:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 80088f2:	2164      	movs	r1, #100	@ 0x64
 80088f4:	fb01 f303 	mul.w	r3, r1, r3
 80088f8:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80088fe:	3406      	adds	r4, #6
 8008900:	b2e4      	uxtb	r4, r4
 8008902:	56ab      	ldrsb	r3, [r5, r2]
 8008904:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008908:	a905      	add	r1, sp, #20
 800890a:	4b15      	ldr	r3, [pc, #84]	@ (8008960 <ProcessMacCommands+0x338>)
 800890c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008910:	f004 f881 	bl	800ca16 <RegionNewChannelReq>
 8008914:	b2c3      	uxtb	r3, r0
 8008916:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800891a:	2800      	cmp	r0, #0
 800891c:	f6ff ae97 	blt.w	800864e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008920:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008924:	2201      	movs	r2, #1
 8008926:	a90b      	add	r1, sp, #44	@ 0x2c
 8008928:	2007      	movs	r0, #7
 800892a:	f003 f8c3 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 800892e:	e68e      	b.n	800864e <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008930:	3402      	adds	r4, #2
 8008932:	b2e4      	uxtb	r4, r4
 8008934:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8008936:	f013 030f 	ands.w	r3, r3, #15
 800893a:	d100      	bne.n	800893e <ProcessMacCommands+0x316>
                    delay++;
 800893c:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800893e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008942:	fb02 f303 	mul.w	r3, r2, r3
 8008946:	4a06      	ldr	r2, [pc, #24]	@ (8008960 <ProcessMacCommands+0x338>)
 8008948:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800894a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800894e:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008950:	2200      	movs	r2, #0
 8008952:	a90b      	add	r1, sp, #44	@ 0x2c
 8008954:	2008      	movs	r0, #8
 8008956:	f003 f8ad 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 800895a:	e678      	b.n	800864e <ProcessMacCommands+0x26>
 800895c:	20000754 	.word	0x20000754
 8008960:	20008000 	.word	0x20008000
 8008964:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8008968:	3402      	adds	r4, #2
 800896a:	b2e4      	uxtb	r4, r4
 800896c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800896e:	2200      	movs	r2, #0
 8008970:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008974:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008978:	f013 0f20 	tst.w	r3, #32
 800897c:	d002      	beq.n	8008984 <ProcessMacCommands+0x35c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800897e:	2201      	movs	r2, #1
 8008980:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008984:	f013 0f10 	tst.w	r3, #16
 8008988:	d002      	beq.n	8008990 <ProcessMacCommands+0x368>
                    txParamSetupReq.UplinkDwellTime = 1;
 800898a:	2201      	movs	r2, #1
 800898c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008998:	a903      	add	r1, sp, #12
 800899a:	4b9c      	ldr	r3, [pc, #624]	@ (8008c0c <ProcessMacCommands+0x5e4>)
 800899c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80089a0:	f004 f841 	bl	800ca26 <RegionTxParamSetupReq>
 80089a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089a8:	f43f ae51 	beq.w	800864e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80089ac:	f89d a00c 	ldrb.w	sl, [sp, #12]
 80089b0:	4e96      	ldr	r6, [pc, #600]	@ (8008c0c <ProcessMacCommands+0x5e4>)
 80089b2:	f886 a07c 	strb.w	sl, [r6, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80089b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80089ba:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80089be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80089c2:	4a93      	ldr	r2, [pc, #588]	@ (8008c10 <ProcessMacCommands+0x5e8>)
 80089c4:	5cd0      	ldrb	r0, [r2, r3]
 80089c6:	f7f7 ff55 	bl	8000874 <__aeabi_ui2f>
 80089ca:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80089ce:	2302      	movs	r3, #2
 80089d0:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80089d4:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80089d8:	a907      	add	r1, sp, #28
 80089da:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 80089de:	f003 ffaa 	bl	800c936 <RegionGetPhyParam>
 80089e2:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80089e4:	b240      	sxtb	r0, r0
 80089e6:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 80089ea:	4298      	cmp	r0, r3
 80089ec:	bfb8      	it	lt
 80089ee:	4618      	movlt	r0, r3
 80089f0:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80089f4:	2200      	movs	r2, #0
 80089f6:	a90b      	add	r1, sp, #44	@ 0x2c
 80089f8:	2009      	movs	r0, #9
 80089fa:	f003 f85b 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 80089fe:	e626      	b.n	800864e <ProcessMacCommands+0x26>
                status = 0x03;
 8008a00:	2303      	movs	r3, #3
 8008a02:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008a06:	1ca3      	adds	r3, r4, #2
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	5daa      	ldrb	r2, [r5, r6]
 8008a0c:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008a10:	1ce1      	adds	r1, r4, #3
 8008a12:	b2c9      	uxtb	r1, r1
 8008a14:	5ceb      	ldrb	r3, [r5, r3]
 8008a16:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008a18:	1d22      	adds	r2, r4, #4
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	5c69      	ldrb	r1, [r5, r1]
 8008a1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a22:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008a24:	3405      	adds	r4, #5
 8008a26:	b2e4      	uxtb	r4, r4
 8008a28:	5caa      	ldrb	r2, [r5, r2]
 8008a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8008a30:	2264      	movs	r2, #100	@ 0x64
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008a38:	a907      	add	r1, sp, #28
 8008a3a:	4b74      	ldr	r3, [pc, #464]	@ (8008c0c <ProcessMacCommands+0x5e4>)
 8008a3c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008a40:	f003 fff9 	bl	800ca36 <RegionDlChannelReq>
 8008a44:	b2c3      	uxtb	r3, r0
 8008a46:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	f6ff adff 	blt.w	800864e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008a50:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008a54:	2201      	movs	r2, #1
 8008a56:	a90b      	add	r1, sp, #44	@ 0x2c
 8008a58:	200a      	movs	r0, #10
 8008a5a:	f003 f82b 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 8008a5e:	e5f6      	b.n	800864e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008a60:	2009      	movs	r0, #9
 8008a62:	f003 f9ef 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008a66:	b928      	cbnz	r0, 8008a74 <ProcessMacCommands+0x44c>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008a68:	4b6a      	ldr	r3, [pc, #424]	@ (8008c14 <ProcessMacCommands+0x5ec>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
        switch( payload[macIndex++] )
 8008a70:	4634      	mov	r4, r6
 8008a72:	e5ec      	b.n	800864e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008a74:	2109      	movs	r1, #9
 8008a76:	2000      	movs	r0, #0
 8008a78:	f003 f998 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8008a7c:	a903      	add	r1, sp, #12
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008a84:	f10d 0a14 	add.w	sl, sp, #20
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8008a8c:	f10d 0b1c 	add.w	fp, sp, #28
 8008a90:	9307      	str	r3, [sp, #28]
 8008a92:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008a94:	1ca0      	adds	r0, r4, #2
 8008a96:	b2c0      	uxtb	r0, r0
 8008a98:	5dab      	ldrb	r3, [r5, r6]
 8008a9a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008a9c:	1ce2      	adds	r2, r4, #3
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	5c28      	ldrb	r0, [r5, r0]
 8008aa2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008aa6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008aa8:	1d20      	adds	r0, r4, #4
 8008aaa:	b2c0      	uxtb	r0, r0
 8008aac:	5caa      	ldrb	r2, [r5, r2]
 8008aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ab2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008ab4:	1d62      	adds	r2, r4, #5
 8008ab6:	b2d2      	uxtb	r2, r2
 8008ab8:	5c28      	ldrb	r0, [r5, r0]
 8008aba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008abe:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008ac0:	3406      	adds	r4, #6
 8008ac2:	b2e4      	uxtb	r4, r4
 8008ac4:	5caa      	ldrb	r2, [r5, r2]
 8008ac6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008aca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008ace:	fb00 f202 	mul.w	r2, r0, r2
 8008ad2:	0a12      	lsrs	r2, r2, #8
 8008ad4:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008ad8:	c903      	ldmia	r1, {r0, r1}
 8008ada:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008ade:	4a4e      	ldr	r2, [pc, #312]	@ (8008c18 <ProcessMacCommands+0x5f0>)
 8008ae0:	441a      	add	r2, r3
 8008ae2:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f008 f9b1 	bl	8010e4c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008aea:	4e4a      	ldr	r6, [pc, #296]	@ (8008c14 <ProcessMacCommands+0x5ec>)
 8008aec:	f8d6 333c 	ldr.w	r3, [r6, #828]	@ 0x33c
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	f8d6 3338 	ldr.w	r3, [r6, #824]	@ 0x338
 8008af6:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008afa:	a80c      	add	r0, sp, #48	@ 0x30
 8008afc:	f008 f965 	bl	8010dca <SysTimeSub>
 8008b00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b06:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f008 f93e 	bl	8010d8c <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008b10:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008b14:	f008 f978 	bl	8010e08 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008b18:	f002 ff32 	bl	800b980 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f886 3438 	strb.w	r3, [r6, #1080]	@ 0x438
 8008b22:	e594      	b.n	800864e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008b24:	200c      	movs	r0, #12
 8008b26:	f003 f98d 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008b2a:	b908      	cbnz	r0, 8008b30 <ProcessMacCommands+0x508>
        switch( payload[macIndex++] )
 8008b2c:	4634      	mov	r4, r6
 8008b2e:	e58e      	b.n	800864e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008b30:	210c      	movs	r1, #12
 8008b32:	2000      	movs	r0, #0
 8008b34:	f003 f93a 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008b38:	4b36      	ldr	r3, [pc, #216]	@ (8008c14 <ProcessMacCommands+0x5ec>)
 8008b3a:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8008b3e:	3b04      	subs	r3, #4
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d801      	bhi.n	8008b4a <ProcessMacCommands+0x522>
        switch( payload[macIndex++] )
 8008b46:	4634      	mov	r4, r6
 8008b48:	e581      	b.n	800864e <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8008b4a:	f002 ff15 	bl	800b978 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008b4e:	4634      	mov	r4, r6
 8008b50:	e57d      	b.n	800864e <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8008b52:	1ca2      	adds	r2, r4, #2
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008b58:	1ce1      	adds	r1, r4, #3
 8008b5a:	b2c9      	uxtb	r1, r1
 8008b5c:	5caa      	ldrb	r2, [r5, r2]
 8008b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008b62:	1d22      	adds	r2, r4, #4
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	5c69      	ldrb	r1, [r5, r1]
 8008b68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008b6c:	3405      	adds	r4, #5
 8008b6e:	b2e4      	uxtb	r4, r4
 8008b70:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008b72:	2164      	movs	r1, #100	@ 0x64
 8008b74:	fb03 f101 	mul.w	r1, r3, r1
 8008b78:	f000 000f 	and.w	r0, r0, #15
 8008b7c:	f002 fefd 	bl	800b97a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008b80:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008b84:	2201      	movs	r2, #1
 8008b86:	a90b      	add	r1, sp, #44	@ 0x2c
 8008b88:	2011      	movs	r0, #17
 8008b8a:	f002 ff93 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 8008b8e:	e55e      	b.n	800864e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008b90:	200d      	movs	r0, #13
 8008b92:	f003 f957 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008b96:	b908      	cbnz	r0, 8008b9c <ProcessMacCommands+0x574>
        switch( payload[macIndex++] )
 8008b98:	4634      	mov	r4, r6
 8008b9a:	e558      	b.n	800864e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008b9c:	210d      	movs	r1, #13
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f003 f904 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008ba4:	1ca2      	adds	r2, r4, #2
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008baa:	1ce3      	adds	r3, r4, #3
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008bb0:	3404      	adds	r4, #4
 8008bb2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008bb4:	4a19      	ldr	r2, [pc, #100]	@ (8008c1c <ProcessMacCommands+0x5f4>)
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	5ce9      	ldrb	r1, [r5, r3]
 8008bba:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8008bbe:	f002 fede 	bl	800b97e <LoRaMacClassBBeaconTimingAns>
 8008bc2:	e544      	b.n	800864e <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8008bc4:	1ca1      	adds	r1, r4, #2
 8008bc6:	b2c9      	uxtb	r1, r1
 8008bc8:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008bca:	1ce2      	adds	r2, r4, #3
 8008bcc:	b2d2      	uxtb	r2, r2
 8008bce:	5c69      	ldrb	r1, [r5, r1]
 8008bd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008bd4:	3404      	adds	r4, #4
 8008bd6:	b2e4      	uxtb	r4, r4
 8008bd8:	5caa      	ldrb	r2, [r5, r2]
 8008bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008bde:	2064      	movs	r0, #100	@ 0x64
 8008be0:	fb03 f000 	mul.w	r0, r3, r0
 8008be4:	f002 fecd 	bl	800b982 <LoRaMacClassBBeaconFreqReq>
 8008be8:	b140      	cbz	r0, 8008bfc <ProcessMacCommands+0x5d4>
                        macCmdPayload[0] = 1;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	a90b      	add	r1, sp, #44	@ 0x2c
 8008bf4:	2013      	movs	r0, #19
 8008bf6:	f002 ff5d 	bl	800bab4 <LoRaMacCommandsAddCmd>
                break;
 8008bfa:	e528      	b.n	800864e <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8008c02:	e7f5      	b.n	8008bf0 <ProcessMacCommands+0x5c8>
}
 8008c04:	b00f      	add	sp, #60	@ 0x3c
 8008c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20008000 	.word	0x20008000
 8008c10:	08012e04 	.word	0x08012e04
 8008c14:	20000754 	.word	0x20000754
 8008c18:	12d53d80 	.word	0x12d53d80
 8008c1c:	200006ac 	.word	0x200006ac

08008c20 <ProcessRadioRxDone>:
{
 8008c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c24:	b0a5      	sub	sp, #148	@ 0x94
    uint8_t *payload = RxDoneParams.Payload;
 8008c26:	4bb4      	ldr	r3, [pc, #720]	@ (8008ef8 <ProcessRadioRxDone+0x2d8>)
 8008c28:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8008c2a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008c2c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008c30:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008c38:	4ab0      	ldr	r2, [pc, #704]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008c3a:	f8d2 90e4 	ldr.w	r9, [r2, #228]	@ 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008c3e:	4ab0      	ldr	r2, [pc, #704]	@ (8008f00 <ProcessRadioRxDone+0x2e0>)
 8008c40:	7811      	ldrb	r1, [r2, #0]
 8008c42:	f363 0100 	bfi	r1, r3, #0, #1
 8008c46:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8008c48:	4cae      	ldr	r4, [pc, #696]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008c4a:	f884 3444 	strb.w	r3, [r4, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8008c4e:	f8a4 848c 	strh.w	r8, [r4, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 8008c52:	f884 748e 	strb.w	r7, [r4, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008c56:	f894 2490 	ldrb.w	r2, [r4, #1168]	@ 0x490
 8008c5a:	f884 248f 	strb.w	r2, [r4, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 8008c5e:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8008c62:	f884 3422 	strb.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8008c66:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8008c6a:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8008c6e:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 8008c72:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8008c76:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008c7a:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008c7e:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8008c82:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008c86:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008c8a:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    Radio.Sleep( );
 8008c8e:	4b9e      	ldr	r3, [pc, #632]	@ (8008f08 <ProcessRadioRxDone+0x2e8>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008c94:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8008c98:	b1d3      	cbz	r3, 8008cd0 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f002 fe58 	bl	800b952 <LoRaMacClassBRxBeacon>
 8008ca2:	b9d0      	cbnz	r0, 8008cda <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008ca4:	4b95      	ldr	r3, [pc, #596]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008ca6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d01d      	beq.n	8008cea <ProcessRadioRxDone+0xca>
    if( size == 0 )
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	d038      	beq.n	8008d24 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 8008cb2:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008cb4:	0963      	lsrs	r3, r4, #5
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	2b06      	cmp	r3, #6
 8008cba:	f200 8319 	bhi.w	80092f0 <ProcessRadioRxDone+0x6d0>
 8008cbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008cc2:	0038      	.short	0x0038
 8008cc4:	00ef0317 	.word	0x00ef0317
 8008cc8:	00eb0317 	.word	0x00eb0317
 8008ccc:	02eb0317 	.word	0x02eb0317
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008cd0:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 8008cd4:	f008 f95c 	bl	8010f90 <UTIL_TIMER_Stop>
 8008cd8:	e7df      	b.n	8008c9a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008cda:	4b8a      	ldr	r3, [pc, #552]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008cdc:	f8a3 847e 	strh.w	r8, [r3, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008ce0:	f883 7480 	strb.w	r7, [r3, #1152]	@ 0x480
}
 8008ce4:	b025      	add	sp, #148	@ 0x94
 8008ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008cea:	f002 fe36 	bl	800b95a <LoRaMacClassBIsPingExpected>
 8008cee:	b150      	cbz	r0, 8008d06 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	f002 fe27 	bl	800b944 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f002 fe29 	bl	800b94e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008cfc:	4b81      	ldr	r3, [pc, #516]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008cfe:	2204      	movs	r2, #4
 8008d00:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 8008d04:	e7d3      	b.n	8008cae <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008d06:	f002 fe2a 	bl	800b95e <LoRaMacClassBIsMulticastExpected>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d0cf      	beq.n	8008cae <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008d0e:	2000      	movs	r0, #0
 8008d10:	f002 fe19 	bl	800b946 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008d14:	2000      	movs	r0, #0
 8008d16:	f002 fe1b 	bl	800b950 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 8008d22:	e7c4      	b.n	8008cae <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d24:	4b77      	ldr	r3, [pc, #476]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 8008d2c:	f7ff fc04 	bl	8008538 <PrepareRxDoneAbort>
        return;
 8008d30:	e7d8      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008d32:	2d10      	cmp	r5, #16
 8008d34:	f240 808c 	bls.w	8008e50 <ProcessRadioRxDone+0x230>
            macMsgJoinAccept.Buffer = payload;
 8008d38:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 8008d3a:	b2ed      	uxtb	r5, r5
 8008d3c:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008d40:	4b6e      	ldr	r3, [pc, #440]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008d42:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f040 8089 	bne.w	8008e5e <ProcessRadioRxDone+0x23e>
            SecureElementGetJoinEui( joinEui );
 8008d4c:	a804      	add	r0, sp, #16
 8008d4e:	f005 fe19 	bl	800e984 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8008d52:	aa08      	add	r2, sp, #32
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	20ff      	movs	r0, #255	@ 0xff
 8008d58:	f003 fbf0 	bl	800c53c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f040 8090 	bne.w	8008e82 <ProcessRadioRxDone+0x262>
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 8008d62:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	2b0f      	cmp	r3, #15
 8008d6c:	d012      	beq.n	8008d94 <ProcessRadioRxDone+0x174>
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008d6e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8008d72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008d76:	f88d 300c 	strb.w	r3, [sp, #12]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008d7a:	4b60      	ldr	r3, [pc, #384]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008d7c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8008d80:	f88d 200d 	strb.w	r2, [sp, #13]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 8008d84:	2207      	movs	r2, #7
 8008d86:	a903      	add	r1, sp, #12
 8008d88:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008d8c:	f003 fdf1 	bl	800c972 <RegionVerify>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d06b      	beq.n	8008e6c <ProcessRadioRxDone+0x24c>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008d94:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8008d98:	4c58      	ldr	r4, [pc, #352]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008d9a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008d9e:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8008da2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008da6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008daa:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
 8008dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008db2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008db6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008db8:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8008dbc:	2002      	movs	r0, #2
 8008dbe:	f005 fdef 	bl	800e9a0 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008dc2:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8008dc6:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008dca:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	2b0f      	cmp	r3, #15
 8008dd4:	d007      	beq.n	8008de6 <ProcessRadioRxDone+0x1c6>
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008dd6:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8008dda:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008dde:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008de2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008de6:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8008dea:	4a44      	ldr	r2, [pc, #272]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008dec:	6593      	str	r3, [r2, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008dee:	b913      	cbnz	r3, 8008df6 <ProcessRadioRxDone+0x1d6>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008df0:	4613      	mov	r3, r2
 8008df2:	2201      	movs	r2, #1
 8008df4:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008df6:	4c41      	ldr	r4, [pc, #260]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008df8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	65a3      	str	r3, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e04:	4413      	add	r3, r2
 8008e06:	65e3      	str	r3, [r4, #92]	@ 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8008e08:	2601      	movs	r6, #1
 8008e0a:	f884 6068 	strb.w	r6, [r4, #104]	@ 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f884 312e 	strb.w	r3, [r4, #302]	@ 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e14:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8008e18:	9322      	str	r3, [sp, #136]	@ 0x88
                applyCFList.Size = size - 17;
 8008e1a:	3d11      	subs	r5, #17
 8008e1c:	f88d 508c 	strb.w	r5, [sp, #140]	@ 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 8008e20:	4b38      	ldr	r3, [pc, #224]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008e22:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8008e26:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e2a:	a921      	add	r1, sp, #132	@ 0x84
 8008e2c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8008e30:	f003 fda9 	bl	800c986 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008e34:	2302      	movs	r3, #2
 8008e36:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f003 f802 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	f000 8241 	beq.w	80092c8 <ProcessRadioRxDone+0x6a8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8008e46:	4631      	mov	r1, r6
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f002 ffaf 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
 8008e4e:	e23b      	b.n	80092c8 <ProcessRadioRxDone+0x6a8>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e50:	4b2c      	ldr	r3, [pc, #176]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008e58:	f7ff fb6e 	bl	8008538 <PrepareRxDoneAbort>
                return;
 8008e5c:	e742      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e5e:	4b29      	ldr	r3, [pc, #164]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008e66:	f7ff fb67 	bl	8008538 <PrepareRxDoneAbort>
                return;
 8008e6a:	e73b      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	f002 ffe9 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	f000 8228 	beq.w	80092c8 <ProcessRadioRxDone+0x6a8>
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008e78:	2101      	movs	r1, #1
 8008e7a:	2007      	movs	r0, #7
 8008e7c:	f002 ff96 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
 8008e80:	e222      	b.n	80092c8 <ProcessRadioRxDone+0x6a8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e82:	2001      	movs	r0, #1
 8008e84:	f002 ffde 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f000 821d 	beq.w	80092c8 <ProcessRadioRxDone+0x6a8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008e8e:	2101      	movs	r1, #1
 8008e90:	2007      	movs	r0, #7
 8008e92:	f002 ff8b 	bl	800bdac <LoRaMacConfirmQueueSetStatus>
 8008e96:	e217      	b.n	80092c8 <ProcessRadioRxDone+0x6a8>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008e98:	4b1a      	ldr	r3, [pc, #104]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ea0:	4b16      	ldr	r3, [pc, #88]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008ea2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8008ea6:	f88d 207e 	strb.w	r2, [sp, #126]	@ 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008eaa:	4a16      	ldr	r2, [pc, #88]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008eac:	f992 2424 	ldrsb.w	r2, [r2, #1060]	@ 0x424
 8008eb0:	f88d 207d 	strb.w	r2, [sp, #125]	@ 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008eb4:	220d      	movs	r2, #13
 8008eb6:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008eba:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8008ebe:	b113      	cbz	r3, 8008ec6 <ProcessRadioRxDone+0x2a6>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008ec0:	230e      	movs	r3, #14
 8008ec2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008ec6:	a91f      	add	r1, sp, #124	@ 0x7c
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8008efc <ProcessRadioRxDone+0x2dc>)
 8008eca:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008ece:	f003 fd32 	bl	800c936 <RegionGetPhyParam>
 8008ed2:	901e      	str	r0, [sp, #120]	@ 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008ed4:	f1a5 030d 	sub.w	r3, r5, #13
 8008ed8:	b21b      	sxth	r3, r3
 8008eda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ede:	b200      	sxth	r0, r0
 8008ee0:	4283      	cmp	r3, r0
 8008ee2:	dc01      	bgt.n	8008ee8 <ProcessRadioRxDone+0x2c8>
 8008ee4:	2d0b      	cmp	r5, #11
 8008ee6:	d811      	bhi.n	8008f0c <ProcessRadioRxDone+0x2ec>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ee8:	4b06      	ldr	r3, [pc, #24]	@ (8008f04 <ProcessRadioRxDone+0x2e4>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008ef0:	f7ff fb22 	bl	8008538 <PrepareRxDoneAbort>
                return;
 8008ef4:	e6f6      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
 8008ef6:	bf00      	nop
 8008ef8:	200006ac 	.word	0x200006ac
 8008efc:	20008000 	.word	0x20008000
 8008f00:	200006c0 	.word	0x200006c0
 8008f04:	20000754 	.word	0x20000754
 8008f08:	08013274 	.word	0x08013274
            macMsgData.Buffer = payload;
 8008f0c:	9612      	str	r6, [sp, #72]	@ 0x48
            macMsgData.BufSize = size;
 8008f0e:	f88d 504c 	strb.w	r5, [sp, #76]	@ 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008f12:	4ba5      	ldr	r3, [pc, #660]	@ (80091a8 <ProcessRadioRxDone+0x588>)
 8008f14:	931b      	str	r3, [sp, #108]	@ 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008f16:	23ff      	movs	r3, #255	@ 0xff
 8008f18:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008f1c:	a812      	add	r0, sp, #72	@ 0x48
 8008f1e:	f003 fbdf 	bl	800c6e0 <LoRaMacParserData>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d136      	bne.n	8008f94 <ProcessRadioRxDone+0x374>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008f26:	4ba1      	ldr	r3, [pc, #644]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8008f28:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d038      	beq.n	8008fa2 <ProcessRadioRxDone+0x382>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008f30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f32:	4b9f      	ldr	r3, [pc, #636]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008f34:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	a812      	add	r0, sp, #72	@ 0x48
 8008f3c:	f7ff f962 	bl	8008204 <DetermineFrameType>
 8008f40:	4605      	mov	r5, r0
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d158      	bne.n	8008ff8 <ProcessRadioRxDone+0x3d8>
            downLinkCounter = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d05a      	beq.n	8009006 <ProcessRadioRxDone+0x3e6>
 8008f50:	2601      	movs	r6, #1
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008f52:	ab07      	add	r3, sp, #28
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	f10d 031b 	add.w	r3, sp, #27
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4b93      	ldr	r3, [pc, #588]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8008f5e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8008f62:	aa12      	add	r2, sp, #72	@ 0x48
 8008f64:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f7ff fb23 	bl	80085b4 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f000 808b 	beq.w	800908a <ProcessRadioRxDone+0x46a>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008f74:	2807      	cmp	r0, #7
 8008f76:	f000 8083 	beq.w	8009080 <ProcessRadioRxDone+0x460>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008f82:	9a07      	ldr	r2, [sp, #28]
 8008f84:	4b8a      	ldr	r3, [pc, #552]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008f86:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008f8a:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 8008f8e:	f7ff fad3 	bl	8008538 <PrepareRxDoneAbort>
                return;
 8008f92:	e6a7      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f94:	4b86      	ldr	r3, [pc, #536]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008f9c:	f7ff facc 	bl	8008538 <PrepareRxDoneAbort>
                return;
 8008fa0:	e6a0      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008fa2:	f002 fcda 	bl	800b95a <LoRaMacClassBIsPingExpected>
 8008fa6:	b188      	cbz	r0, 8008fcc <ProcessRadioRxDone+0x3ac>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f002 fccb 	bl	800b944 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f002 fccd 	bl	800b94e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008fbc:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8008fc0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008fc4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8008fc6:	f002 fce1 	bl	800b98c <LoRaMacClassBSetFPendingBit>
 8008fca:	e7b1      	b.n	8008f30 <ProcessRadioRxDone+0x310>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008fcc:	f002 fcc7 	bl	800b95e <LoRaMacClassBIsMulticastExpected>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d0ad      	beq.n	8008f30 <ProcessRadioRxDone+0x310>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f002 fcb6 	bl	800b946 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f002 fcb8 	bl	800b950 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008fe0:	4b73      	ldr	r3, [pc, #460]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008fe2:	2205      	movs	r2, #5
 8008fe4:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008fe8:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8008fec:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008ff0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8008ff2:	f002 fccb 	bl	800b98c <LoRaMacClassBSetFPendingBit>
 8008ff6:	e79b      	b.n	8008f30 <ProcessRadioRxDone+0x310>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009000:	f7ff fa9a 	bl	8008538 <PrepareRxDoneAbort>
                return;
 8009004:	e66e      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009006:	4618      	mov	r0, r3
 8009008:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800900c:	4a67      	ldr	r2, [pc, #412]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 800900e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009012:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8009016:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8009018:	428a      	cmp	r2, r1
 800901a:	d002      	beq.n	8009022 <ProcessRadioRxDone+0x402>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800901c:	3301      	adds	r3, #1
 800901e:	b2db      	uxtb	r3, r3
 8009020:	e794      	b.n	8008f4c <ProcessRadioRxDone+0x32c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009022:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8009026:	4961      	ldr	r1, [pc, #388]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8009028:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800902c:	f891 10e9 	ldrb.w	r1, [r1, #233]	@ 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009030:	2900      	cmp	r1, #0
 8009032:	d0f3      	beq.n	800901c <ProcessRadioRxDone+0x3fc>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009034:	4b5d      	ldr	r3, [pc, #372]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8009036:	2130      	movs	r1, #48	@ 0x30
 8009038:	fb01 3000 	mla	r0, r1, r0, r3
 800903c:	f890 60ea 	ldrb.w	r6, [r0, #234]	@ 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009040:	f8d0 110c 	ldr.w	r1, [r0, #268]	@ 0x10c
 8009044:	6809      	ldr	r1, [r1, #0]
 8009046:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009048:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800904c:	2b02      	cmp	r3, #2
 800904e:	d00b      	beq.n	8009068 <ProcessRadioRxDone+0x448>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009050:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d10c      	bne.n	8009072 <ProcessRadioRxDone+0x452>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009058:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800905c:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8009060:	d107      	bne.n	8009072 <ProcessRadioRxDone+0x452>
 8009062:	4691      	mov	r9, r2
 8009064:	2501      	movs	r5, #1
 8009066:	e774      	b.n	8008f52 <ProcessRadioRxDone+0x332>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009068:	4b51      	ldr	r3, [pc, #324]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 800906a:	2103      	movs	r1, #3
 800906c:	f883 148f 	strb.w	r1, [r3, #1167]	@ 0x48f
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009070:	e7ee      	b.n	8009050 <ProcessRadioRxDone+0x430>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009072:	4b4f      	ldr	r3, [pc, #316]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800907a:	f7ff fa5d 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800907e:	e631      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009080:	4b4b      	ldr	r3, [pc, #300]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009082:	2208      	movs	r2, #8
 8009084:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8009088:	e77b      	b.n	8008f82 <ProcessRadioRxDone+0x362>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800908a:	ab12      	add	r3, sp, #72	@ 0x48
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	9b07      	ldr	r3, [sp, #28]
 8009090:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8009094:	4649      	mov	r1, r9
 8009096:	4630      	mov	r0, r6
 8009098:	f003 f9a8 	bl	800c3ec <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800909c:	2800      	cmp	r0, #0
 800909e:	d14e      	bne.n	800913e <ProcessRadioRxDone+0x51e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090a0:	4b43      	ldr	r3, [pc, #268]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 80090a2:	2100      	movs	r1, #0
 80090a4:	f883 1421 	strb.w	r1, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80090a8:	f883 5422 	strb.w	r5, [r3, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80090ac:	f8c3 1428 	str.w	r1, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80090b0:	f883 142c 	strb.w	r1, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090b4:	9a07      	ldr	r2, [sp, #28]
 80090b6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80090ba:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80090be:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80090c2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80090c6:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090ca:	f883 1441 	strb.w	r1, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80090ce:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80090d2:	f893 048f 	ldrb.w	r0, [r3, #1167]	@ 0x48f
 80090d6:	2801      	cmp	r0, #1
 80090d8:	d93f      	bls.n	800915a <ProcessRadioRxDone+0x53a>
            if( multicast == 1 )
 80090da:	2d01      	cmp	r5, #1
 80090dc:	d043      	beq.n	8009166 <ProcessRadioRxDone+0x546>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80090de:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 80090e2:	2ca0      	cmp	r4, #160	@ 0xa0
 80090e4:	d044      	beq.n	8009170 <ProcessRadioRxDone+0x550>
                    Nvm.MacGroup1.SrvAckRequested = false;
 80090e6:	2300      	movs	r3, #0
 80090e8:	4a30      	ldr	r2, [pc, #192]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 80090ea:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80090ee:	4a30      	ldr	r2, [pc, #192]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 80090f0:	f882 3420 	strb.w	r3, [r2, #1056]	@ 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 80090f4:	4b2d      	ldr	r3, [pc, #180]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 80090f6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80090fa:	b923      	cbnz	r3, 8009106 <ProcessRadioRxDone+0x4e6>
 80090fc:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009100:	f013 0f10 	tst.w	r3, #16
 8009104:	d003      	beq.n	800910e <ProcessRadioRxDone+0x4ee>
 8009106:	4b29      	ldr	r3, [pc, #164]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8009108:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800910c:	b11b      	cbz	r3, 8009116 <ProcessRadioRxDone+0x4f6>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 800910e:	4b28      	ldr	r3, [pc, #160]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009110:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8009114:	b11b      	cbz	r3, 800911e <ProcessRadioRxDone+0x4fe>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8009116:	4b26      	ldr	r3, [pc, #152]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800911e:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009120:	f893 2440 	ldrb.w	r2, [r3, #1088]	@ 0x440
 8009124:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009128:	f7ff fa6f 	bl	800860a <RemoveMacCommands>
            switch( fType )
 800912c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009130:	2b03      	cmp	r3, #3
 8009132:	f200 809a 	bhi.w	800926a <ProcessRadioRxDone+0x64a>
 8009136:	e8df f003 	tbb	[pc, r3]
 800913a:	663f      	.short	0x663f
 800913c:	8878      	.short	0x8878
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800913e:	2802      	cmp	r0, #2
 8009140:	d006      	beq.n	8009150 <ProcessRadioRxDone+0x530>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009142:	4b1b      	ldr	r3, [pc, #108]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009144:	220b      	movs	r2, #11
 8009146:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800914a:	f7ff f9f5 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800914e:	e5c9      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009150:	4b17      	ldr	r3, [pc, #92]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009152:	220a      	movs	r2, #10
 8009154:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8009158:	e7f7      	b.n	800914a <ProcessRadioRxDone+0x52a>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800915a:	4b14      	ldr	r3, [pc, #80]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 800915c:	6299      	str	r1, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800915e:	2201      	movs	r2, #1
 8009160:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
 8009164:	e7b9      	b.n	80090da <ProcessRadioRxDone+0x4ba>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009166:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009168:	2202      	movs	r2, #2
 800916a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800916e:	e7c1      	b.n	80090f4 <ProcessRadioRxDone+0x4d4>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009170:	4b0e      	ldr	r3, [pc, #56]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009178:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800917c:	b913      	cbnz	r3, 8009184 <ProcessRadioRxDone+0x564>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800917e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009180:	4b0a      	ldr	r3, [pc, #40]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8009182:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009184:	4b0a      	ldr	r3, [pc, #40]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800918c:	4290      	cmp	r0, r2
 800918e:	d9b1      	bls.n	80090f4 <ProcessRadioRxDone+0x4d4>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8009190:	4b06      	ldr	r3, [pc, #24]	@ (80091ac <ProcessRadioRxDone+0x58c>)
 8009192:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009196:	4b06      	ldr	r3, [pc, #24]	@ (80091b0 <ProcessRadioRxDone+0x590>)
 8009198:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800919c:	4a05      	ldr	r2, [pc, #20]	@ (80091b4 <ProcessRadioRxDone+0x594>)
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
 80091a4:	e7a6      	b.n	80090f4 <ProcessRadioRxDone+0x4d4>
 80091a6:	bf00      	nop
 80091a8:	2000098c 	.word	0x2000098c
 80091ac:	20008000 	.word	0x20008000
 80091b0:	20000754 	.word	0x20000754
 80091b4:	200006ac 	.word	0x200006ac
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80091b8:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80091bc:	4c57      	ldr	r4, [pc, #348]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 80091be:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	463b      	mov	r3, r7
 80091c6:	f002 020f 	and.w	r2, r2, #15
 80091ca:	2100      	movs	r1, #0
 80091cc:	a816      	add	r0, sp, #88	@ 0x58
 80091ce:	f7ff fa2b 	bl	8008628 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80091d2:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80091d6:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80091da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80091dc:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80091e0:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 80091e4:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80091e8:	2301      	movs	r3, #1
 80091ea:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80091ee:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80091f2:	2be0      	cmp	r3, #224	@ 0xe0
 80091f4:	d040      	beq.n	8009278 <ProcessRadioRxDone+0x658>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80091f6:	4a49      	ldr	r2, [pc, #292]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 80091f8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80091fc:	f043 0302 	orr.w	r3, r3, #2
 8009200:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 8009204:	e060      	b.n	80092c8 <ProcessRadioRxDone+0x6a8>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009206:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 800920a:	4c44      	ldr	r4, [pc, #272]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 800920c:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	463b      	mov	r3, r7
 8009214:	f002 020f 	and.w	r2, r2, #15
 8009218:	2100      	movs	r1, #0
 800921a:	a816      	add	r0, sp, #88	@ 0x58
 800921c:	f7ff fa04 	bl	8008628 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009220:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009224:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009228:	e7e1      	b.n	80091ee <ProcessRadioRxDone+0x5ce>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800922a:	4c3c      	ldr	r4, [pc, #240]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 800922c:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	463b      	mov	r3, r7
 8009234:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8009238:	2100      	movs	r1, #0
 800923a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800923c:	f7ff f9f4 	bl	8008628 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009240:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009244:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009248:	e7d1      	b.n	80091ee <ProcessRadioRxDone+0x5ce>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800924a:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 800924e:	4b33      	ldr	r3, [pc, #204]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 8009250:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009254:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009256:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800925a:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 800925e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009262:	2201      	movs	r2, #1
 8009264:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8009268:	e7c1      	b.n	80091ee <ProcessRadioRxDone+0x5ce>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800926a:	4b2c      	ldr	r3, [pc, #176]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 8009272:	f7ff f961 	bl	8008538 <PrepareRxDoneAbort>
                    break;
 8009276:	e7ba      	b.n	80091ee <ProcessRadioRxDone+0x5ce>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009278:	4a29      	ldr	r2, [pc, #164]	@ (8009320 <ProcessRadioRxDone+0x700>)
 800927a:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 800927e:	2a00      	cmp	r2, #0
 8009280:	d1b9      	bne.n	80091f6 <ProcessRadioRxDone+0x5d6>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009282:	4a26      	ldr	r2, [pc, #152]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 8009284:	f882 3423 	strb.w	r3, [r2, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800928e:	f882 342c 	strb.w	r3, [r2, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 8009292:	f882 342d 	strb.w	r3, [r2, #1069]	@ 0x42d
 8009296:	e7ae      	b.n	80091f6 <ProcessRadioRxDone+0x5d6>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009298:	1e6a      	subs	r2, r5, #1
 800929a:	4c22      	ldr	r4, [pc, #136]	@ (8009324 <ProcessRadioRxDone+0x704>)
 800929c:	b292      	uxth	r2, r2
 800929e:	1c71      	adds	r1, r6, #1
 80092a0:	4620      	mov	r0, r4
 80092a2:	f005 fc8c 	bl	800ebbe <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80092a6:	2203      	movs	r2, #3
 80092a8:	f884 21e8 	strb.w	r2, [r4, #488]	@ 0x1e8
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80092ac:	2200      	movs	r2, #0
 80092ae:	f884 21e9 	strb.w	r2, [r4, #489]	@ 0x1e9
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80092b2:	f8c4 41f0 	str.w	r4, [r4, #496]	@ 0x1f0
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80092b6:	3d01      	subs	r5, #1
 80092b8:	f884 51f4 	strb.w	r5, [r4, #500]	@ 0x1f4
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80092bc:	f894 2259 	ldrb.w	r2, [r4, #601]	@ 0x259
 80092c0:	f042 0202 	orr.w	r2, r2, #2
 80092c4:	f884 2259 	strb.w	r2, [r4, #601]	@ 0x259
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80092c8:	4b14      	ldr	r3, [pc, #80]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 80092ca:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d915      	bls.n	80092fe <ProcessRadioRxDone+0x6de>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80092d2:	4b12      	ldr	r3, [pc, #72]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 80092d4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d006      	beq.n	80092ea <ProcessRadioRxDone+0x6ca>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80092dc:	4a0f      	ldr	r2, [pc, #60]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 80092de:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80092e2:	f043 0310 	orr.w	r3, r3, #16
 80092e6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 80092ea:	f7fe feff 	bl	80080ec <UpdateRxSlotIdleState>
 80092ee:	e4f9      	b.n	8008ce4 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80092f8:	f7ff f91e 	bl	8008538 <PrepareRxDoneAbort>
            break;
 80092fc:	e7e4      	b.n	80092c8 <ProcessRadioRxDone+0x6a8>
        if( MacCtx.NodeAckRequested == true )
 80092fe:	4b07      	ldr	r3, [pc, #28]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 8009300:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0e4      	beq.n	80092d2 <ProcessRadioRxDone+0x6b2>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <ProcessRadioRxDone+0x6fc>)
 800930a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0df      	beq.n	80092d2 <ProcessRadioRxDone+0x6b2>
                OnRetransmitTimeoutTimerEvent( NULL );
 8009312:	2000      	movs	r0, #0
 8009314:	f7ff f8fe 	bl	8008514 <OnRetransmitTimeoutTimerEvent>
 8009318:	e7db      	b.n	80092d2 <ProcessRadioRxDone+0x6b2>
 800931a:	bf00      	nop
 800931c:	20000754 	.word	0x20000754
 8009320:	20008000 	.word	0x20008000
 8009324:	2000098c 	.word	0x2000098c

08009328 <ProcessRadioTxTimeout>:
{
 8009328:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800932a:	4b0f      	ldr	r3, [pc, #60]	@ (8009368 <ProcessRadioTxTimeout+0x40>)
 800932c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009330:	2b02      	cmp	r3, #2
 8009332:	d002      	beq.n	800933a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009334:	4b0d      	ldr	r3, [pc, #52]	@ (800936c <ProcessRadioTxTimeout+0x44>)
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800933a:	f7fe fed7 	bl	80080ec <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800933e:	4c0c      	ldr	r4, [pc, #48]	@ (8009370 <ProcessRadioTxTimeout+0x48>)
 8009340:	2002      	movs	r0, #2
 8009342:	f884 0441 	strb.w	r0, [r4, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009346:	f002 fd5f 	bl	800be08 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800934a:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 800934e:	b113      	cbz	r3, 8009356 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8009350:	2201      	movs	r2, #1
 8009352:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009356:	4a06      	ldr	r2, [pc, #24]	@ (8009370 <ProcessRadioTxTimeout+0x48>)
 8009358:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800935c:	f043 0310 	orr.w	r3, r3, #16
 8009360:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 8009364:	bd10      	pop	{r4, pc}
 8009366:	bf00      	nop
 8009368:	20008000 	.word	0x20008000
 800936c:	08013274 	.word	0x08013274
 8009370:	20000754 	.word	0x20000754

08009374 <CheckForClassBCollision>:
{
 8009374:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009376:	f002 faee 	bl	800b956 <LoRaMacClassBIsBeaconExpected>
 800937a:	b978      	cbnz	r0, 800939c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800937c:	4b09      	ldr	r3, [pc, #36]	@ (80093a4 <CheckForClassBCollision+0x30>)
 800937e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009382:	2b01      	cmp	r3, #1
 8009384:	d001      	beq.n	800938a <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009386:	2000      	movs	r0, #0
}
 8009388:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800938a:	f002 fae6 	bl	800b95a <LoRaMacClassBIsPingExpected>
 800938e:	b938      	cbnz	r0, 80093a0 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009390:	f002 fae5 	bl	800b95e <LoRaMacClassBIsMulticastExpected>
 8009394:	2800      	cmp	r0, #0
 8009396:	d0f7      	beq.n	8009388 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009398:	200f      	movs	r0, #15
 800939a:	e7f5      	b.n	8009388 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800939c:	200e      	movs	r0, #14
 800939e:	e7f3      	b.n	8009388 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80093a0:	200f      	movs	r0, #15
 80093a2:	e7f1      	b.n	8009388 <CheckForClassBCollision+0x14>
 80093a4:	20008000 	.word	0x20008000

080093a8 <HandleRadioRxErrorTimeout>:
{
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	4605      	mov	r5, r0
 80093ac:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80093ae:	4b34      	ldr	r3, [pc, #208]	@ (8009480 <HandleRadioRxErrorTimeout+0xd8>)
 80093b0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d002      	beq.n	80093be <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 80093b8:	4b32      	ldr	r3, [pc, #200]	@ (8009484 <HandleRadioRxErrorTimeout+0xdc>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80093be:	f002 faca 	bl	800b956 <LoRaMacClassBIsBeaconExpected>
 80093c2:	4606      	mov	r6, r0
 80093c4:	bb48      	cbnz	r0, 800941a <HandleRadioRxErrorTimeout+0x72>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80093c6:	4b2e      	ldr	r3, [pc, #184]	@ (8009480 <HandleRadioRxErrorTimeout+0xd8>)
 80093c8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d02b      	beq.n	8009428 <HandleRadioRxErrorTimeout+0x80>
    if( classBRx == false )
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	d151      	bne.n	8009478 <HandleRadioRxErrorTimeout+0xd0>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80093d4:	4b2c      	ldr	r3, [pc, #176]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 80093d6:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d13b      	bne.n	8009456 <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 80093de:	4b2a      	ldr	r3, [pc, #168]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 80093e0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80093e4:	b113      	cbz	r3, 80093ec <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80093e6:	4b28      	ldr	r3, [pc, #160]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 80093e8:	f883 5441 	strb.w	r5, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80093ec:	4628      	mov	r0, r5
 80093ee:	f002 fd0b 	bl	800be08 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80093f2:	4b23      	ldr	r3, [pc, #140]	@ (8009480 <HandleRadioRxErrorTimeout+0xd8>)
 80093f4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80093f6:	f007 fd95 	bl	8010f24 <UTIL_TIMER_GetElapsedTime>
 80093fa:	4b23      	ldr	r3, [pc, #140]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 80093fc:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8009400:	4298      	cmp	r0, r3
 8009402:	d339      	bcc.n	8009478 <HandleRadioRxErrorTimeout+0xd0>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009404:	4c21      	ldr	r4, [pc, #132]	@ (800948c <HandleRadioRxErrorTimeout+0xe4>)
 8009406:	4620      	mov	r0, r4
 8009408:	f007 fdc2 	bl	8010f90 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800940c:	f894 30f9 	ldrb.w	r3, [r4, #249]	@ 0xf9
 8009410:	f043 0310 	orr.w	r3, r3, #16
 8009414:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 8009418:	e02e      	b.n	8009478 <HandleRadioRxErrorTimeout+0xd0>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800941a:	2002      	movs	r0, #2
 800941c:	f002 fa91 	bl	800b942 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009420:	2000      	movs	r0, #0
 8009422:	f002 fa93 	bl	800b94c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009426:	e7ce      	b.n	80093c6 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009428:	f002 fa97 	bl	800b95a <LoRaMacClassBIsPingExpected>
 800942c:	4607      	mov	r7, r0
 800942e:	b950      	cbnz	r0, 8009446 <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009430:	f002 fa95 	bl	800b95e <LoRaMacClassBIsMulticastExpected>
 8009434:	2800      	cmp	r0, #0
 8009436:	d0cb      	beq.n	80093d0 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009438:	2000      	movs	r0, #0
 800943a:	f002 fa84 	bl	800b946 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800943e:	2000      	movs	r0, #0
 8009440:	f002 fa86 	bl	800b950 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009444:	e018      	b.n	8009478 <HandleRadioRxErrorTimeout+0xd0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009446:	2000      	movs	r0, #0
 8009448:	f002 fa7c 	bl	800b944 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800944c:	2000      	movs	r0, #0
 800944e:	f002 fa7e 	bl	800b94e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009452:	463e      	mov	r6, r7
 8009454:	e7ec      	b.n	8009430 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 8009456:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 8009458:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800945c:	b113      	cbz	r3, 8009464 <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800945e:	4b0a      	ldr	r3, [pc, #40]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 8009460:	f883 4441 	strb.w	r4, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009464:	4620      	mov	r0, r4
 8009466:	f002 fccf 	bl	800be08 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800946a:	4a07      	ldr	r2, [pc, #28]	@ (8009488 <HandleRadioRxErrorTimeout+0xe0>)
 800946c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009470:	f043 0310 	orr.w	r3, r3, #16
 8009474:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8009478:	f7fe fe38 	bl	80080ec <UpdateRxSlotIdleState>
}
 800947c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947e:	bf00      	nop
 8009480:	20008000 	.word	0x20008000
 8009484:	08013274 	.word	0x08013274
 8009488:	20000754 	.word	0x20000754
 800948c:	20000aec 	.word	0x20000aec

08009490 <ProcessRadioRxError>:
{
 8009490:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009492:	2106      	movs	r1, #6
 8009494:	2005      	movs	r0, #5
 8009496:	f7ff ff87 	bl	80093a8 <HandleRadioRxErrorTimeout>
}
 800949a:	bd08      	pop	{r3, pc}

0800949c <ProcessRadioRxTimeout>:
{
 800949c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800949e:	2104      	movs	r1, #4
 80094a0:	2003      	movs	r0, #3
 80094a2:	f7ff ff81 	bl	80093a8 <HandleRadioRxErrorTimeout>
}
 80094a6:	bd08      	pop	{r3, pc}

080094a8 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80094ac:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80094ae:	4a14      	ldr	r2, [pc, #80]	@ (8009500 <LoRaMacHandleIrqEvents+0x58>)
 80094b0:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80094b2:	2000      	movs	r0, #0
 80094b4:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b6:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80094ba:	b303      	cbz	r3, 80094fe <LoRaMacHandleIrqEvents+0x56>
{
 80094bc:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 80094be:	b2dc      	uxtb	r4, r3
 80094c0:	f013 0f20 	tst.w	r3, #32
 80094c4:	d10c      	bne.n	80094e0 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 80094c6:	f014 0f10 	tst.w	r4, #16
 80094ca:	d10c      	bne.n	80094e6 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 80094cc:	f014 0f08 	tst.w	r4, #8
 80094d0:	d10c      	bne.n	80094ec <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 80094d2:	f014 0f04 	tst.w	r4, #4
 80094d6:	d10c      	bne.n	80094f2 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80094d8:	f014 0f02 	tst.w	r4, #2
 80094dc:	d10c      	bne.n	80094f8 <LoRaMacHandleIrqEvents+0x50>
}
 80094de:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80094e0:	f7fe ff96 	bl	8008410 <ProcessRadioTxDone>
 80094e4:	e7ef      	b.n	80094c6 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80094e6:	f7ff fb9b 	bl	8008c20 <ProcessRadioRxDone>
 80094ea:	e7ef      	b.n	80094cc <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80094ec:	f7ff ff1c 	bl	8009328 <ProcessRadioTxTimeout>
 80094f0:	e7ef      	b.n	80094d2 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80094f2:	f7ff ffcd 	bl	8009490 <ProcessRadioRxError>
 80094f6:	e7ef      	b.n	80094d8 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80094f8:	f7ff ffd0 	bl	800949c <ProcessRadioRxTimeout>
}
 80094fc:	e7ef      	b.n	80094de <LoRaMacHandleIrqEvents+0x36>
 80094fe:	4770      	bx	lr
 8009500:	200006c0 	.word	0x200006c0

08009504 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 8009504:	b909      	cbnz	r1, 800950a <LoRaMacHandleResponseTimeout+0x6>
    return false;
 8009506:	2000      	movs	r0, #0
}
 8009508:	4770      	bx	lr
{
 800950a:	b510      	push	{r4, lr}
 800950c:	4604      	mov	r4, r0
 800950e:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8009510:	f007 fd08 	bl	8010f24 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8009514:	42a0      	cmp	r0, r4
 8009516:	d801      	bhi.n	800951c <LoRaMacHandleResponseTimeout+0x18>
    return false;
 8009518:	2000      	movs	r0, #0
}
 800951a:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800951c:	4b02      	ldr	r3, [pc, #8]	@ (8009528 <LoRaMacHandleResponseTimeout+0x24>)
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8009524:	2001      	movs	r0, #1
 8009526:	e7f8      	b.n	800951a <LoRaMacHandleResponseTimeout+0x16>
 8009528:	20008000 	.word	0x20008000

0800952c <LoRaMacHandleMlmeRequest>:
{
 800952c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800952e:	4b14      	ldr	r3, [pc, #80]	@ (8009580 <LoRaMacHandleMlmeRequest+0x54>)
 8009530:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009534:	f013 0f04 	tst.w	r3, #4
 8009538:	d100      	bne.n	800953c <LoRaMacHandleMlmeRequest+0x10>
}
 800953a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800953c:	2001      	movs	r0, #1
 800953e:	f002 fc81 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 8009542:	b178      	cbz	r0, 8009564 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009544:	2001      	movs	r0, #1
 8009546:	f002 fc47 	bl	800bdd8 <LoRaMacConfirmQueueGetStatus>
 800954a:	b918      	cbnz	r0, 8009554 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800954c:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <LoRaMacHandleMlmeRequest+0x54>)
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009554:	4a0a      	ldr	r2, [pc, #40]	@ (8009580 <LoRaMacHandleMlmeRequest+0x54>)
 8009556:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800955a:	f023 0302 	bic.w	r3, r3, #2
 800955e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 8009562:	e7ea      	b.n	800953a <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009564:	2006      	movs	r0, #6
 8009566:	f002 fc6d 	bl	800be44 <LoRaMacConfirmQueueIsCmdActive>
 800956a:	2800      	cmp	r0, #0
 800956c:	d0e5      	beq.n	800953a <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800956e:	4a04      	ldr	r2, [pc, #16]	@ (8009580 <LoRaMacHandleMlmeRequest+0x54>)
 8009570:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8009574:	f023 0302 	bic.w	r3, r3, #2
 8009578:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800957c:	e7dd      	b.n	800953a <LoRaMacHandleMlmeRequest+0xe>
 800957e:	bf00      	nop
 8009580:	20000754 	.word	0x20000754

08009584 <SerializeTxFrame>:
{
 8009584:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8009586:	4b0f      	ldr	r3, [pc, #60]	@ (80095c4 <SerializeTxFrame+0x40>)
 8009588:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800958c:	b11b      	cbz	r3, 8009596 <SerializeTxFrame+0x12>
 800958e:	2b04      	cmp	r3, #4
 8009590:	d00a      	beq.n	80095a8 <SerializeTxFrame+0x24>
 8009592:	2003      	movs	r0, #3
}
 8009594:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009596:	480c      	ldr	r0, [pc, #48]	@ (80095c8 <SerializeTxFrame+0x44>)
 8009598:	f003 f901 	bl	800c79e <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800959c:	b968      	cbnz	r0, 80095ba <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800959e:	4b09      	ldr	r3, [pc, #36]	@ (80095c4 <SerializeTxFrame+0x40>)
 80095a0:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80095a4:	801a      	strh	r2, [r3, #0]
            break;
 80095a6:	e7f5      	b.n	8009594 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80095a8:	4807      	ldr	r0, [pc, #28]	@ (80095c8 <SerializeTxFrame+0x44>)
 80095aa:	f003 f92e 	bl	800c80a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80095ae:	b930      	cbnz	r0, 80095be <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <SerializeTxFrame+0x40>)
 80095b2:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80095b6:	801a      	strh	r2, [r3, #0]
            break;
 80095b8:	e7ec      	b.n	8009594 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80095ba:	2011      	movs	r0, #17
 80095bc:	e7ea      	b.n	8009594 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80095be:	2011      	movs	r0, #17
 80095c0:	e7e8      	b.n	8009594 <SerializeTxFrame+0x10>
 80095c2:	bf00      	nop
 80095c4:	20000754 	.word	0x20000754
 80095c8:	2000085c 	.word	0x2000085c

080095cc <ComputeRxWindowParameters>:
{
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80095d0:	4c1e      	ldr	r4, [pc, #120]	@ (800964c <ComputeRxWindowParameters+0x80>)
 80095d2:	f894 6048 	ldrb.w	r6, [r4, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80095d6:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 80095da:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 80095de:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 80095e2:	4630      	mov	r0, r6
 80095e4:	f003 fa45 	bl	800ca72 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80095e8:	4d19      	ldr	r5, [pc, #100]	@ (8009650 <ComputeRxWindowParameters+0x84>)
 80095ea:	9500      	str	r5, [sp, #0]
 80095ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80095ee:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80095f2:	b241      	sxtb	r1, r0
 80095f4:	4630      	mov	r0, r6
 80095f6:	f003 f9d5 	bl	800c9a4 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80095fa:	f105 0318 	add.w	r3, r5, #24
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009602:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8009606:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 800960a:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800960e:	f003 f9c9 	bl	800c9a4 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009612:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009614:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 8009618:	68e8      	ldr	r0, [r5, #12]
 800961a:	4402      	add	r2, r0
 800961c:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009620:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8009622:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8009624:	440a      	add	r2, r1
 8009626:	f845 2c04 	str.w	r2, [r5, #-4]
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800962a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800962e:	2b04      	cmp	r3, #4
 8009630:	d009      	beq.n	8009646 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009632:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8009634:	4418      	add	r0, r3
 8009636:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800963a:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800963e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009640:	4411      	add	r1, r2
 8009642:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 8009646:	b002      	add	sp, #8
 8009648:	bd70      	pop	{r4, r5, r6, pc}
 800964a:	bf00      	nop
 800964c:	20008000 	.word	0x20008000
 8009650:	20000b0c 	.word	0x20000b0c

08009654 <VerifyTxFrame>:
{
 8009654:	b510      	push	{r4, lr}
 8009656:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800965c:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <VerifyTxFrame+0x40>)
 800965e:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 8009662:	b914      	cbnz	r4, 800966a <VerifyTxFrame+0x16>
}
 8009664:	4620      	mov	r0, r4
 8009666:	b002      	add	sp, #8
 8009668:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800966a:	a801      	add	r0, sp, #4
 800966c:	f002 fab0 	bl	800bbd0 <LoRaMacCommandsGetSizeSerializedCmds>
 8009670:	4604      	mov	r4, r0
 8009672:	b968      	cbnz	r0, 8009690 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009674:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009678:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <VerifyTxFrame+0x40>)
 800967a:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800967e:	4b06      	ldr	r3, [pc, #24]	@ (8009698 <VerifyTxFrame+0x44>)
 8009680:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 8009684:	f7fe feb6 	bl	80083f4 <ValidatePayloadLength>
 8009688:	2800      	cmp	r0, #0
 800968a:	d1eb      	bne.n	8009664 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800968c:	2408      	movs	r4, #8
 800968e:	e7e9      	b.n	8009664 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009690:	2413      	movs	r4, #19
 8009692:	e7e7      	b.n	8009664 <VerifyTxFrame+0x10>
 8009694:	20008000 	.word	0x20008000
 8009698:	20000754 	.word	0x20000754

0800969c <SecureFrame>:
{
 800969c:	b530      	push	{r4, r5, lr}
 800969e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80096a4:	4b18      	ldr	r3, [pc, #96]	@ (8009708 <SecureFrame+0x6c>)
 80096a6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80096aa:	b133      	cbz	r3, 80096ba <SecureFrame+0x1e>
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	2b04      	cmp	r3, #4
 80096b2:	d00b      	beq.n	80096cc <SecureFrame+0x30>
 80096b4:	2003      	movs	r0, #3
}
 80096b6:	b003      	add	sp, #12
 80096b8:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80096ba:	4814      	ldr	r0, [pc, #80]	@ (800970c <SecureFrame+0x70>)
 80096bc:	f002 fe2c 	bl	800c318 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80096c0:	b9d8      	cbnz	r0, 80096fa <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80096c2:	4b11      	ldr	r3, [pc, #68]	@ (8009708 <SecureFrame+0x6c>)
 80096c4:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80096c8:	801a      	strh	r2, [r3, #0]
            break;
 80096ca:	e7f4      	b.n	80096b6 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80096cc:	a801      	add	r0, sp, #4
 80096ce:	f002 fdd7 	bl	800c280 <LoRaMacCryptoGetFCntUp>
 80096d2:	b9a0      	cbnz	r0, 80096fe <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80096d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009708 <SecureFrame+0x6c>)
 80096d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80096da:	b113      	cbz	r3, 80096e2 <SecureFrame+0x46>
                fCntUp -= 1;
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	3b01      	subs	r3, #1
 80096e0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80096e2:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <SecureFrame+0x70>)
 80096e4:	4622      	mov	r2, r4
 80096e6:	4629      	mov	r1, r5
 80096e8:	9801      	ldr	r0, [sp, #4]
 80096ea:	f002 fe3b 	bl	800c364 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80096ee:	b940      	cbnz	r0, 8009702 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80096f0:	4b05      	ldr	r3, [pc, #20]	@ (8009708 <SecureFrame+0x6c>)
 80096f2:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80096f6:	801a      	strh	r2, [r3, #0]
            break;
 80096f8:	e7dd      	b.n	80096b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80096fa:	2011      	movs	r0, #17
 80096fc:	e7db      	b.n	80096b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80096fe:	2012      	movs	r0, #18
 8009700:	e7d9      	b.n	80096b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009702:	2011      	movs	r0, #17
 8009704:	e7d7      	b.n	80096b6 <SecureFrame+0x1a>
 8009706:	bf00      	nop
 8009708:	20000754 	.word	0x20000754
 800970c:	2000085c 	.word	0x2000085c

08009710 <SendFrameOnChannel>:
{
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800971c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009720:	4d36      	ldr	r5, [pc, #216]	@ (80097fc <SendFrameOnChannel+0xec>)
 8009722:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 8009726:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800972a:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 800972e:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009732:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8009736:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009738:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800973c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800973e:	4c30      	ldr	r4, [pc, #192]	@ (8009800 <SendFrameOnChannel+0xf0>)
 8009740:	8823      	ldrh	r3, [r4, #0]
 8009742:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009746:	f895 3130 	ldrb.w	r3, [r5, #304]	@ 0x130
 800974a:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800974e:	f204 431c 	addw	r3, r4, #1052	@ 0x41c
 8009752:	f10d 0207 	add.w	r2, sp, #7
 8009756:	a902      	add	r1, sp, #8
 8009758:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 800975c:	f003 f937 	bl	800c9ce <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009766:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800976a:	f884 3442 	strb.w	r3, [r4, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800976e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009772:	f884 3443 	strb.w	r3, [r4, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8009776:	f8c4 6450 	str.w	r6, [r4, #1104]	@ 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800977a:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 800977e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009782:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009786:	f002 f8ec 	bl	800b962 <LoRaMacClassBIsBeaconModeActive>
 800978a:	bb60      	cbnz	r0, 80097e6 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800978c:	4b1b      	ldr	r3, [pc, #108]	@ (80097fc <SendFrameOnChannel+0xec>)
 800978e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009792:	2b01      	cmp	r3, #1
 8009794:	d02f      	beq.n	80097f6 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 8009796:	f002 f8e7 	bl	800b968 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800979a:	4b18      	ldr	r3, [pc, #96]	@ (80097fc <SendFrameOnChannel+0xec>)
 800979c:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 80097a0:	4b17      	ldr	r3, [pc, #92]	@ (8009800 <SendFrameOnChannel+0xf0>)
 80097a2:	f893 141b 	ldrb.w	r1, [r3, #1051]	@ 0x41b
 80097a6:	b2c0      	uxtb	r0, r0
 80097a8:	f7ff ff78 	bl	800969c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80097ac:	4604      	mov	r4, r0
 80097ae:	b9b8      	cbnz	r0, 80097e0 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80097b0:	4813      	ldr	r0, [pc, #76]	@ (8009800 <SendFrameOnChannel+0xf0>)
 80097b2:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
 80097b6:	f043 0302 	orr.w	r3, r3, #2
 80097ba:	f8c0 3340 	str.w	r3, [r0, #832]	@ 0x340
    MacCtx.ChannelsNbTransCounter++;
 80097be:	f890 3418 	ldrb.w	r3, [r0, #1048]	@ 0x418
 80097c2:	3301      	adds	r3, #1
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f880 3418 	strb.w	r3, [r0, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80097ca:	f880 3445 	strb.w	r3, [r0, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	f8c0 3498 	str.w	r3, [r0, #1176]	@ 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80097d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009804 <SendFrameOnChannel+0xf4>)
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	f830 1b02 	ldrh.w	r1, [r0], #2
 80097dc:	b2c9      	uxtb	r1, r1
 80097de:	4798      	blx	r3
}
 80097e0:	4620      	mov	r0, r4
 80097e2:	b006      	add	sp, #24
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80097e6:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 80097ea:	f002 f8cc 	bl	800b986 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d0cc      	beq.n	800978c <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80097f2:	2410      	movs	r4, #16
 80097f4:	e7f4      	b.n	80097e0 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 80097f6:	f002 f8c8 	bl	800b98a <LoRaMacClassBStopRxSlots>
 80097fa:	e7cc      	b.n	8009796 <SendFrameOnChannel+0x86>
 80097fc:	20008000 	.word	0x20008000
 8009800:	20000754 	.word	0x20000754
 8009804:	08013274 	.word	0x08013274

08009808 <ScheduleTx>:
{
 8009808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	b08c      	sub	sp, #48	@ 0x30
 800980e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8009810:	f7ff fdb0 	bl	8009374 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009814:	4604      	mov	r4, r0
 8009816:	b118      	cbz	r0, 8009820 <ScheduleTx+0x18>
}
 8009818:	4620      	mov	r0, r4
 800981a:	b00c      	add	sp, #48	@ 0x30
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009820:	f7fe fcc8 	bl	80081b4 <CalculateBackOff>
    status = SerializeTxFrame( );
 8009824:	f7ff feae 	bl	8009584 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009828:	4604      	mov	r4, r0
 800982a:	2800      	cmp	r0, #0
 800982c:	d1f4      	bne.n	8009818 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800982e:	4e35      	ldr	r6, [pc, #212]	@ (8009904 <ScheduleTx+0xfc>)
 8009830:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8009832:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009834:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 8009838:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800983c:	f896 311c 	ldrb.w	r3, [r6, #284]	@ 0x11c
 8009840:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009844:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8009848:	4640      	mov	r0, r8
 800984a:	f007 fb21 	bl	8010e90 <SysTimeGetMcuTime>
 800984e:	af02      	add	r7, sp, #8
 8009850:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	f8d6 3124 	ldr.w	r3, [r6, #292]	@ 0x124
 800985a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800985e:	4638      	mov	r0, r7
 8009860:	f007 fab3 	bl	8010dca <SysTimeSub>
 8009864:	ab07      	add	r3, sp, #28
 8009866:	e897 0003 	ldmia.w	r7, {r0, r1}
 800986a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800986e:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8009870:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 8009872:	2300      	movs	r3, #0
 8009874:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 8009878:	2301      	movs	r3, #1
 800987a:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800987e:	4b22      	ldr	r3, [pc, #136]	@ (8009908 <ScheduleTx+0x100>)
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009886:	f896 3130 	ldrb.w	r3, [r6, #304]	@ 0x130
 800988a:	b92b      	cbnz	r3, 8009898 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800988c:	2301      	movs	r3, #1
 800988e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 8009892:	2300      	movs	r3, #0
 8009894:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009898:	4b1c      	ldr	r3, [pc, #112]	@ (800990c <ScheduleTx+0x104>)
 800989a:	481a      	ldr	r0, [pc, #104]	@ (8009904 <ScheduleTx+0xfc>)
 800989c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80098a0:	9200      	str	r2, [sp, #0]
 80098a2:	f1a3 0279 	sub.w	r2, r3, #121	@ 0x79
 80098a6:	a904      	add	r1, sp, #16
 80098a8:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 80098ac:	f003 f8d5 	bl	800ca5a <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80098b0:	b1c0      	cbz	r0, 80098e4 <ScheduleTx+0xdc>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80098b2:	280b      	cmp	r0, #11
 80098b4:	d124      	bne.n	8009900 <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80098b6:	4a14      	ldr	r2, [pc, #80]	@ (8009908 <ScheduleTx+0x100>)
 80098b8:	f8d2 1494 	ldr.w	r1, [r2, #1172]	@ 0x494
 80098bc:	b191      	cbz	r1, 80098e4 <ScheduleTx+0xdc>
                if( allowDelayedTx == true )
 80098be:	b90d      	cbnz	r5, 80098c4 <ScheduleTx+0xbc>
                return status;
 80098c0:	4604      	mov	r4, r0
 80098c2:	e7a9      	b.n	8009818 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80098c4:	4615      	mov	r5, r2
 80098c6:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 80098ca:	f042 0220 	orr.w	r2, r2, #32
 80098ce:	f8c5 2340 	str.w	r2, [r5, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80098d2:	f505 755a 	add.w	r5, r5, #872	@ 0x368
 80098d6:	4628      	mov	r0, r5
 80098d8:	f007 fbfa 	bl	80110d0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80098dc:	4628      	mov	r0, r5
 80098de:	f007 fbb1 	bl	8011044 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80098e2:	e799      	b.n	8009818 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80098e4:	f7ff fe72 	bl	80095cc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80098e8:	f7ff feb4 	bl	8009654 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80098ec:	4604      	mov	r4, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d192      	bne.n	8009818 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80098f2:	4b05      	ldr	r3, [pc, #20]	@ (8009908 <ScheduleTx+0x100>)
 80098f4:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 80098f8:	f7ff ff0a 	bl	8009710 <SendFrameOnChannel>
 80098fc:	4604      	mov	r4, r0
 80098fe:	e78b      	b.n	8009818 <ScheduleTx+0x10>
            return status;
 8009900:	4604      	mov	r4, r0
 8009902:	e789      	b.n	8009818 <ScheduleTx+0x10>
 8009904:	20008000 	.word	0x20008000
 8009908:	20000754 	.word	0x20000754
 800990c:	20000be8 	.word	0x20000be8

08009910 <OnTxDelayedTimerEvent>:
{
 8009910:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009912:	4c16      	ldr	r4, [pc, #88]	@ (800996c <OnTxDelayedTimerEvent+0x5c>)
 8009914:	4620      	mov	r0, r4
 8009916:	f007 fb3b 	bl	8010f90 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800991a:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800991e:	f023 0320 	bic.w	r3, r3, #32
 8009922:	f844 3c28 	str.w	r3, [r4, #-40]
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009926:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 800992a:	4b11      	ldr	r3, [pc, #68]	@ (8009970 <OnTxDelayedTimerEvent+0x60>)
 800992c:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8009930:	f7ff fde8 	bl	8009504 <LoRaMacHandleResponseTimeout>
 8009934:	b100      	cbz	r0, 8009938 <OnTxDelayedTimerEvent+0x28>
}
 8009936:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009938:	2001      	movs	r0, #1
 800993a:	f7ff ff65 	bl	8009808 <ScheduleTx>
 800993e:	2800      	cmp	r0, #0
 8009940:	d0f9      	beq.n	8009936 <OnTxDelayedTimerEvent+0x26>
 8009942:	280b      	cmp	r0, #11
 8009944:	d0f7      	beq.n	8009936 <OnTxDelayedTimerEvent+0x26>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009946:	4b0a      	ldr	r3, [pc, #40]	@ (8009970 <OnTxDelayedTimerEvent+0x60>)
 8009948:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800994c:	f5a4 735a 	sub.w	r3, r4, #872	@ 0x368
 8009950:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8009954:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009958:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800995c:	2009      	movs	r0, #9
 800995e:	f883 0441 	strb.w	r0, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009962:	f002 fa51 	bl	800be08 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009966:	f7fe fcb7 	bl	80082d8 <StopRetransmission>
            break;
 800996a:	e7e4      	b.n	8009936 <OnTxDelayedTimerEvent+0x26>
 800996c:	20000abc 	.word	0x20000abc
 8009970:	20008000 	.word	0x20008000

08009974 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009974:	4b1c      	ldr	r3, [pc, #112]	@ (80099e8 <LoRaMacHandleMcpsRequest+0x74>)
 8009976:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800997a:	f013 0f01 	tst.w	r3, #1
 800997e:	d031      	beq.n	80099e4 <LoRaMacHandleMcpsRequest+0x70>
{
 8009980:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009982:	4b19      	ldr	r3, [pc, #100]	@ (80099e8 <LoRaMacHandleMcpsRequest+0x74>)
 8009984:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8009988:	b12b      	cbz	r3, 8009996 <LoRaMacHandleMcpsRequest+0x22>
 800998a:	2b03      	cmp	r3, #3
 800998c:	d003      	beq.n	8009996 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800998e:	2b01      	cmp	r3, #1
 8009990:	d006      	beq.n	80099a0 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 8009992:	2000      	movs	r0, #0
 8009994:	e002      	b.n	800999c <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009996:	f7fe fc65 	bl	8008264 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800999a:	b940      	cbnz	r0, 80099ae <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800999c:	b1b0      	cbz	r0, 80099cc <LoRaMacHandleMcpsRequest+0x58>
}
 800999e:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 80099a0:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <LoRaMacHandleMcpsRequest+0x74>)
 80099a2:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80099a6:	b17b      	cbz	r3, 80099c8 <LoRaMacHandleMcpsRequest+0x54>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80099a8:	f7fe fc78 	bl	800829c <CheckRetransConfirmedUplink>
 80099ac:	e7f5      	b.n	800999a <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 80099ae:	4c0f      	ldr	r4, [pc, #60]	@ (80099ec <LoRaMacHandleMcpsRequest+0x78>)
 80099b0:	4620      	mov	r0, r4
 80099b2:	f007 faed 	bl	8010f90 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80099b6:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80099ba:	f023 0320 	bic.w	r3, r3, #32
 80099be:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 80099c2:	f7fe fc89 	bl	80082d8 <StopRetransmission>
 80099c6:	e7ea      	b.n	800999e <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 80099c8:	2001      	movs	r0, #1
 80099ca:	e7e7      	b.n	800999c <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80099cc:	4b06      	ldr	r3, [pc, #24]	@ (80099e8 <LoRaMacHandleMcpsRequest+0x74>)
 80099ce:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 80099d2:	f022 0210 	bic.w	r2, r2, #16
 80099d6:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80099da:	f883 0419 	strb.w	r0, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 80099de:	f7ff ff97 	bl	8009910 <OnTxDelayedTimerEvent>
}
 80099e2:	e7dc      	b.n	800999e <LoRaMacHandleMcpsRequest+0x2a>
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	20000754 	.word	0x20000754
 80099ec:	20000abc 	.word	0x20000abc

080099f0 <LoRaMacHandleRequestEvents>:
{
 80099f0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80099f2:	4b22      	ldr	r3, [pc, #136]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 80099f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80099f8:	bb83      	cbnz	r3, 8009a5c <LoRaMacHandleRequestEvents+0x6c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80099fa:	4b20      	ldr	r3, [pc, #128]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 80099fc:	f893 4491 	ldrb.w	r4, [r3, #1169]	@ 0x491
 8009a00:	f014 0501 	ands.w	r5, r4, #1
 8009a04:	d006      	beq.n	8009a14 <LoRaMacHandleRequestEvents+0x24>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009a06:	461a      	mov	r2, r3
 8009a08:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009a0c:	f023 0301 	bic.w	r3, r3, #1
 8009a10:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009a14:	4b19      	ldr	r3, [pc, #100]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 8009a16:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009a1a:	f013 0f04 	tst.w	r3, #4
 8009a1e:	d006      	beq.n	8009a2e <LoRaMacHandleRequestEvents+0x3e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009a20:	4a16      	ldr	r2, [pc, #88]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 8009a22:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009a26:	f023 0304 	bic.w	r3, r3, #4
 8009a2a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009a2e:	2001      	movs	r0, #1
 8009a30:	f7fe fb70 	bl	8008114 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009a34:	b135      	cbz	r5, 8009a44 <LoRaMacHandleRequestEvents+0x54>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009a36:	4811      	ldr	r0, [pc, #68]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 8009a38:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 8009a42:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009a44:	f014 0f04 	tst.w	r4, #4
 8009a48:	d109      	bne.n	8009a5e <LoRaMacHandleRequestEvents+0x6e>
        LoRaMacClassBResumeBeaconing( );
 8009a4a:	f001 ff8e 	bl	800b96a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 8009a50:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009a54:	f023 0310 	bic.w	r3, r3, #16
 8009a58:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009a5e:	4808      	ldr	r0, [pc, #32]	@ (8009a80 <LoRaMacHandleRequestEvents+0x90>)
 8009a60:	f002 f9fc 	bl	800be5c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009a64:	f002 fa32 	bl	800becc <LoRaMacConfirmQueueGetCnt>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d0ee      	beq.n	8009a4a <LoRaMacHandleRequestEvents+0x5a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009a6c:	4a03      	ldr	r2, [pc, #12]	@ (8009a7c <LoRaMacHandleRequestEvents+0x8c>)
 8009a6e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009a72:	f043 0304 	orr.w	r3, r3, #4
 8009a76:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8009a7a:	e7e6      	b.n	8009a4a <LoRaMacHandleRequestEvents+0x5a>
 8009a7c:	20000754 	.word	0x20000754
 8009a80:	20000ba8 	.word	0x20000ba8

08009a84 <OpenContinuousRxCWindow>:
{
 8009a84:	b530      	push	{r4, r5, lr}
 8009a86:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009a88:	4c15      	ldr	r4, [pc, #84]	@ (8009ae0 <OpenContinuousRxCWindow+0x5c>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009a8a:	4d16      	ldr	r5, [pc, #88]	@ (8009ae4 <OpenContinuousRxCWindow+0x60>)
 8009a8c:	9500      	str	r5, [sp, #0]
 8009a8e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009a90:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8009a94:	f994 1078 	ldrsb.w	r1, [r4, #120]	@ 0x78
 8009a98:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009a9c:	f002 ff82 	bl	800c9a4 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009aa4:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8009aa8:	752b      	strb	r3, [r5, #20]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009aae:	f105 023c 	add.w	r2, r5, #60	@ 0x3c
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009ab8:	f002 ff7f 	bl	800c9ba <RegionRxConfig>
 8009abc:	b168      	cbz	r0, 8009ada <OpenContinuousRxCWindow+0x56>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009abe:	f5a5 747a 	sub.w	r4, r5, #1000	@ 0x3e8
 8009ac2:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 8009ac6:	f884 346a 	strb.w	r3, [r4, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8009aca:	4b07      	ldr	r3, [pc, #28]	@ (8009ae8 <OpenContinuousRxCWindow+0x64>)
 8009acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ace:	2000      	movs	r0, #0
 8009ad0:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009ad2:	f894 33fb 	ldrb.w	r3, [r4, #1019]	@ 0x3fb
 8009ad6:	f884 3490 	strb.w	r3, [r4, #1168]	@ 0x490
}
 8009ada:	b003      	add	sp, #12
 8009adc:	bd30      	pop	{r4, r5, pc}
 8009ade:	bf00      	nop
 8009ae0:	20008000 	.word	0x20008000
 8009ae4:	20000b3c 	.word	0x20000b3c
 8009ae8:	08013274 	.word	0x08013274

08009aec <RxWindowSetup>:
{
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009af0:	f007 fa4e 	bl	8010f90 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009af4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <RxWindowSetup+0x3c>)
 8009af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009afa:	4a0c      	ldr	r2, [pc, #48]	@ (8009b2c <RxWindowSetup+0x40>)
 8009afc:	4621      	mov	r1, r4
 8009afe:	4b0c      	ldr	r3, [pc, #48]	@ (8009b30 <RxWindowSetup+0x44>)
 8009b00:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009b04:	f002 ff59 	bl	800c9ba <RegionRxConfig>
 8009b08:	b160      	cbz	r0, 8009b24 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009b0a:	4d0a      	ldr	r5, [pc, #40]	@ (8009b34 <RxWindowSetup+0x48>)
 8009b0c:	f895 3424 	ldrb.w	r3, [r5, #1060]	@ 0x424
 8009b10:	f885 346a 	strb.w	r3, [r5, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009b14:	4b04      	ldr	r3, [pc, #16]	@ (8009b28 <RxWindowSetup+0x3c>)
 8009b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b18:	4a05      	ldr	r2, [pc, #20]	@ (8009b30 <RxWindowSetup+0x44>)
 8009b1a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8009b1c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009b1e:	7ce3      	ldrb	r3, [r4, #19]
 8009b20:	f885 3490 	strb.w	r3, [r5, #1168]	@ 0x490
}
 8009b24:	bd38      	pop	{r3, r4, r5, pc}
 8009b26:	bf00      	nop
 8009b28:	08013274 	.word	0x08013274
 8009b2c:	20000b78 	.word	0x20000b78
 8009b30:	20008000 	.word	0x20008000
 8009b34:	20000754 	.word	0x20000754

08009b38 <OnRxWindow2TimerEvent>:
{
 8009b38:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009b3a:	4b13      	ldr	r3, [pc, #76]	@ (8009b88 <OnRxWindow2TimerEvent+0x50>)
 8009b3c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8009b40:	b903      	cbnz	r3, 8009b44 <OnRxWindow2TimerEvent+0xc>
}
 8009b42:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009b44:	4810      	ldr	r0, [pc, #64]	@ (8009b88 <OnRxWindow2TimerEvent+0x50>)
 8009b46:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 8009b4a:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b8c <OnRxWindow2TimerEvent+0x54>)
 8009b50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009b52:	f8c0 23d4 	str.w	r2, [r0, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b56:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009b5a:	f880 23e0 	strb.w	r2, [r0, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009b5e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8009b62:	f880 23e1 	strb.w	r2, [r0, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009b66:	2200      	movs	r2, #0
 8009b68:	f880 23e2 	strb.w	r2, [r0, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f880 23e3 	strb.w	r2, [r0, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009b72:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009b76:	f880 33e4 	strb.w	r3, [r0, #996]	@ 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009b7a:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
 8009b7e:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 8009b82:	f7ff ffb3 	bl	8009aec <RxWindowSetup>
 8009b86:	e7dc      	b.n	8009b42 <OnRxWindow2TimerEvent+0xa>
 8009b88:	20000754 	.word	0x20000754
 8009b8c:	20008000 	.word	0x20008000

08009b90 <OnRxWindow1TimerEvent>:
{
 8009b90:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009b92:	4811      	ldr	r0, [pc, #68]	@ (8009bd8 <OnRxWindow1TimerEvent+0x48>)
 8009b94:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 8009b98:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bdc <OnRxWindow1TimerEvent+0x4c>)
 8009b9e:	f993 2069 	ldrsb.w	r2, [r3, #105]	@ 0x69
 8009ba2:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ba6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009baa:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009bae:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8009bb2:	f880 23c9 	strb.w	r2, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f880 23ca 	strb.w	r2, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009bbc:	f880 23cb 	strb.w	r2, [r0, #971]	@ 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009bc0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009bc4:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009bc8:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 8009bcc:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 8009bd0:	f7ff ff8c 	bl	8009aec <RxWindowSetup>
}
 8009bd4:	bd08      	pop	{r3, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000754 	.word	0x20000754
 8009bdc:	20008000 	.word	0x20008000

08009be0 <LoRaMacHandleNvm>:
{
 8009be0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009be2:	4b31      	ldr	r3, [pc, #196]	@ (8009ca8 <LoRaMacHandleNvm+0xc8>)
 8009be4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009be8:	b103      	cbz	r3, 8009bec <LoRaMacHandleNvm+0xc>
}
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009bee:	2124      	movs	r1, #36	@ 0x24
 8009bf0:	f005 f806 	bl	800ec00 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009bf4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009bf6:	4283      	cmp	r3, r0
 8009bf8:	d053      	beq.n	8009ca2 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 8009bfa:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009bfc:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009bfe:	211c      	movs	r1, #28
 8009c00:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009c04:	f004 fffc 	bl	800ec00 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009c08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c0a:	4283      	cmp	r3, r0
 8009c0c:	d002      	beq.n	8009c14 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009c0e:	6460      	str	r0, [r4, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009c10:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009c14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c18:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8009c1c:	f004 fff0 	bl	800ec00 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009c20:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8009c24:	4283      	cmp	r3, r0
 8009c26:	d003      	beq.n	8009c30 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 8009c28:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009c2c:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009c30:	21d4      	movs	r1, #212	@ 0xd4
 8009c32:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8009c36:	f004 ffe3 	bl	800ec00 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009c3a:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 8009c3e:	4283      	cmp	r3, r0
 8009c40:	d003      	beq.n	8009c4a <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 8009c42:	f8c4 0220 	str.w	r0, [r4, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009c46:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8009c50:	f004 ffd6 	bl	800ec00 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009c54:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
 8009c58:	4283      	cmp	r3, r0
 8009c5a:	d003      	beq.n	8009c64 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 8009c5c:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009c60:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009c64:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8009c68:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8009c6c:	f004 ffc8 	bl	800ec00 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009c70:	f8d4 35a8 	ldr.w	r3, [r4, #1448]	@ 0x5a8
 8009c74:	4283      	cmp	r3, r0
 8009c76:	d003      	beq.n	8009c80 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 8009c78:	f8c4 05a8 	str.w	r0, [r4, #1448]	@ 0x5a8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009c7c:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009c80:	2114      	movs	r1, #20
 8009c82:	f204 50ac 	addw	r0, r4, #1452	@ 0x5ac
 8009c86:	f004 ffbb 	bl	800ec00 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009c8a:	f8d4 35c0 	ldr.w	r3, [r4, #1472]	@ 0x5c0
 8009c8e:	4283      	cmp	r3, r0
 8009c90:	d003      	beq.n	8009c9a <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 8009c92:	f8c4 05c0 	str.w	r0, [r4, #1472]	@ 0x5c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009c96:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7fe fb5e 	bl	800835c <CallNvmDataChangeCallback>
 8009ca0:	e7a3      	b.n	8009bea <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	e7ab      	b.n	8009bfe <LoRaMacHandleNvm+0x1e>
 8009ca6:	bf00      	nop
 8009ca8:	20000754 	.word	0x20000754

08009cac <RestoreNvmData>:
{
 8009cac:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009cae:	4b3e      	ldr	r3, [pc, #248]	@ (8009da8 <RestoreNvmData+0xfc>)
 8009cb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d001      	beq.n	8009cbc <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 8009cb8:	2001      	movs	r0, #1
}
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8009cbc:	4c3b      	ldr	r4, [pc, #236]	@ (8009dac <RestoreNvmData+0x100>)
 8009cbe:	2124      	movs	r1, #36	@ 0x24
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f004 ff9d 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 8009cc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009cc8:	4283      	cmp	r3, r0
 8009cca:	d001      	beq.n	8009cd0 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ccc:	2017      	movs	r0, #23
 8009cce:	e7f4      	b.n	8009cba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8009cd0:	3428      	adds	r4, #40	@ 0x28
 8009cd2:	211c      	movs	r1, #28
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f004 ff93 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8009cda:	69e3      	ldr	r3, [r4, #28]
 8009cdc:	4283      	cmp	r3, r0
 8009cde:	d001      	beq.n	8009ce4 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ce0:	2017      	movs	r0, #23
 8009ce2:	e7ea      	b.n	8009cba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009ce4:	3420      	adds	r4, #32
 8009ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009cea:	4620      	mov	r0, r4
 8009cec:	f004 ff88 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8009cf0:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8009cf4:	4283      	cmp	r3, r0
 8009cf6:	d001      	beq.n	8009cfc <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009cf8:	2017      	movs	r0, #23
 8009cfa:	e7de      	b.n	8009cba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009cfc:	f504 7482 	add.w	r4, r4, #260	@ 0x104
 8009d00:	21d4      	movs	r1, #212	@ 0xd4
 8009d02:	4620      	mov	r0, r4
 8009d04:	f004 ff7c 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009d08:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d001      	beq.n	8009d14 <RestoreNvmData+0x68>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009d10:	2017      	movs	r0, #23
 8009d12:	e7d2      	b.n	8009cba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009d14:	34d8      	adds	r4, #216	@ 0xd8
 8009d16:	2100      	movs	r1, #0
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f004 ff71 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	4283      	cmp	r3, r0
 8009d22:	d001      	beq.n	8009d28 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009d24:	2017      	movs	r0, #23
 8009d26:	e7c8      	b.n	8009cba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8009d28:	3404      	adds	r4, #4
 8009d2a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f004 ff66 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8009d34:	f8d4 3380 	ldr.w	r3, [r4, #896]	@ 0x380
 8009d38:	4283      	cmp	r3, r0
 8009d3a:	d001      	beq.n	8009d40 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009d3c:	2017      	movs	r0, #23
 8009d3e:	e7bc      	b.n	8009cba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009d40:	f504 7461 	add.w	r4, r4, #900	@ 0x384
 8009d44:	2114      	movs	r1, #20
 8009d46:	4620      	mov	r0, r4
 8009d48:	f004 ff5a 	bl	800ec00 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009d4c:	6963      	ldr	r3, [r4, #20]
 8009d4e:	4283      	cmp	r3, r0
 8009d50:	d001      	beq.n	8009d56 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009d52:	2017      	movs	r0, #23
 8009d54:	e7b1      	b.n	8009cba <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009d56:	f2a4 55ac 	subw	r5, r4, #1452	@ 0x5ac
 8009d5a:	4c15      	ldr	r4, [pc, #84]	@ (8009db0 <RestoreNvmData+0x104>)
 8009d5c:	f240 52c4 	movw	r2, #1476	@ 0x5c4
 8009d60:	4629      	mov	r1, r5
 8009d62:	4620      	mov	r0, r4
 8009d64:	f004 ff2b 	bl	800ebbe <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009d68:	f240 52c4 	movw	r2, #1476	@ 0x5c4
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f004 ff3d 	bl	800ebee <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	@ (8009da8 <RestoreNvmData+0xfc>)
 8009d76:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8009d7a:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009d7e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8009d80:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d84:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 8009d88:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009d98:	4b06      	ldr	r3, [pc, #24]	@ (8009db4 <RestoreNvmData+0x108>)
 8009d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d9c:	f894 0119 	ldrb.w	r0, [r4, #281]	@ 0x119
 8009da0:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8009da2:	2000      	movs	r0, #0
 8009da4:	e789      	b.n	8009cba <RestoreNvmData+0xe>
 8009da6:	bf00      	nop
 8009da8:	20000754 	.word	0x20000754
 8009dac:	200085c4 	.word	0x200085c4
 8009db0:	20008000 	.word	0x20008000
 8009db4:	08013274 	.word	0x08013274

08009db8 <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 8009db8:	b510      	push	{r4, lr}
 8009dba:	b082      	sub	sp, #8
    static bool initialized = false;

    if( initialized == false )
 8009dbc:	4b11      	ldr	r3, [pc, #68]	@ (8009e04 <AbpJoinPendingStart+0x4c>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b1a3      	cbz	r3, 8009dec <AbpJoinPendingStart+0x34>
    {
        initialized = true;
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8009dc2:	4c11      	ldr	r4, [pc, #68]	@ (8009e08 <AbpJoinPendingStart+0x50>)
 8009dc4:	f8d4 3340 	ldr.w	r3, [r4, #832]	@ 0x340
 8009dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dcc:	f8c4 3340 	str.w	r3, [r4, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8009dd0:	f204 449c 	addw	r4, r4, #1180	@ 0x49c
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f007 f8db 	bl	8010f90 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 8009dda:	210a      	movs	r1, #10
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f007 f977 	bl	80110d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8009de2:	4620      	mov	r0, r4
 8009de4:	f007 f92e 	bl	8011044 <UTIL_TIMER_Start>
}
 8009de8:	b002      	add	sp, #8
 8009dea:	bd10      	pop	{r4, pc}
        initialized = true;
 8009dec:	4b05      	ldr	r3, [pc, #20]	@ (8009e04 <AbpJoinPendingStart+0x4c>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8009df2:	2200      	movs	r2, #0
 8009df4:	9200      	str	r2, [sp, #0]
 8009df6:	4b05      	ldr	r3, [pc, #20]	@ (8009e0c <AbpJoinPendingStart+0x54>)
 8009df8:	f04f 31ff 	mov.w	r1, #4294967295
 8009dfc:	4804      	ldr	r0, [pc, #16]	@ (8009e10 <AbpJoinPendingStart+0x58>)
 8009dfe:	f007 f869 	bl	8010ed4 <UTIL_TIMER_Create>
 8009e02:	e7de      	b.n	8009dc2 <AbpJoinPendingStart+0xa>
 8009e04:	200006a8 	.word	0x200006a8
 8009e08:	20000754 	.word	0x20000754
 8009e0c:	0800838d 	.word	0x0800838d
 8009e10:	20000bf0 	.word	0x20000bf0

08009e14 <OnRadioRxTimeout>:
{
 8009e14:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009e16:	4a07      	ldr	r2, [pc, #28]	@ (8009e34 <OnRadioRxTimeout+0x20>)
 8009e18:	7813      	ldrb	r3, [r2, #0]
 8009e1a:	f043 0302 	orr.w	r3, r3, #2
 8009e1e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009e20:	f7fe fa84 	bl	800832c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009e24:	4b04      	ldr	r3, [pc, #16]	@ (8009e38 <OnRadioRxTimeout+0x24>)
 8009e26:	2201      	movs	r2, #1
 8009e28:	2100      	movs	r1, #0
 8009e2a:	2002      	movs	r0, #2
 8009e2c:	f006 fdaa 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e30:	bd08      	pop	{r3, pc}
 8009e32:	bf00      	nop
 8009e34:	200006c0 	.word	0x200006c0
 8009e38:	080129d0 	.word	0x080129d0

08009e3c <OnRadioTxTimeout>:
{
 8009e3c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009e3e:	4a07      	ldr	r2, [pc, #28]	@ (8009e5c <OnRadioTxTimeout+0x20>)
 8009e40:	7813      	ldrb	r3, [r2, #0]
 8009e42:	f043 0308 	orr.w	r3, r3, #8
 8009e46:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009e48:	f7fe fa70 	bl	800832c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009e4c:	4b04      	ldr	r3, [pc, #16]	@ (8009e60 <OnRadioTxTimeout+0x24>)
 8009e4e:	2201      	movs	r2, #1
 8009e50:	2100      	movs	r1, #0
 8009e52:	2002      	movs	r0, #2
 8009e54:	f006 fd96 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e58:	bd08      	pop	{r3, pc}
 8009e5a:	bf00      	nop
 8009e5c:	200006c0 	.word	0x200006c0
 8009e60:	080129e0 	.word	0x080129e0

08009e64 <OnRadioRxDone>:
{
 8009e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e68:	4680      	mov	r8, r0
 8009e6a:	460f      	mov	r7, r1
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009e70:	f007 f84e 	bl	8010f10 <UTIL_TIMER_GetCurrentTime>
 8009e74:	4c0c      	ldr	r4, [pc, #48]	@ (8009ea8 <OnRadioRxDone+0x44>)
 8009e76:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009e78:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009e7c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009e7e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009e80:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009e82:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <OnRadioRxDone+0x48>)
 8009e84:	781a      	ldrb	r2, [r3, #0]
 8009e86:	f042 0210 	orr.w	r2, r2, #16
 8009e8a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	f042 0201 	orr.w	r2, r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 8009e94:	f7fe fa4a 	bl	800832c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009e98:	4b05      	ldr	r3, [pc, #20]	@ (8009eb0 <OnRadioRxDone+0x4c>)
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	2002      	movs	r0, #2
 8009ea0:	f006 fd70 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8009ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea8:	200006ac 	.word	0x200006ac
 8009eac:	200006c0 	.word	0x200006c0
 8009eb0:	080129f0 	.word	0x080129f0

08009eb4 <OnRadioTxDone>:
{
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009eb8:	f007 f82a 	bl	8010f10 <UTIL_TIMER_GetCurrentTime>
 8009ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef0 <OnRadioTxDone+0x3c>)
 8009ebe:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009ec0:	466c      	mov	r4, sp
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f006 ffc2 	bl	8010e4c <SysTimeGet>
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef4 <OnRadioTxDone+0x40>)
 8009eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ece:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009ed2:	4a09      	ldr	r2, [pc, #36]	@ (8009ef8 <OnRadioTxDone+0x44>)
 8009ed4:	7813      	ldrb	r3, [r2, #0]
 8009ed6:	f043 0320 	orr.w	r3, r3, #32
 8009eda:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009edc:	f7fe fa26 	bl	800832c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009ee0:	4b06      	ldr	r3, [pc, #24]	@ (8009efc <OnRadioTxDone+0x48>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	2002      	movs	r0, #2
 8009ee8:	f006 fd4c 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 8009eec:	b002      	add	sp, #8
 8009eee:	bd10      	pop	{r4, pc}
 8009ef0:	200006bc 	.word	0x200006bc
 8009ef4:	20000a8c 	.word	0x20000a8c
 8009ef8:	200006c0 	.word	0x200006c0
 8009efc:	08012a00 	.word	0x08012a00

08009f00 <ResetMacParameters>:
{
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f02:	b091      	sub	sp, #68	@ 0x44
    if( isRejoin == false )
 8009f04:	b918      	cbnz	r0, 8009f0e <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009f06:	4b5e      	ldr	r3, [pc, #376]	@ (800a080 <ResetMacParameters+0x180>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009f0e:	4c5c      	ldr	r4, [pc, #368]	@ (800a080 <ResetMacParameters+0x180>)
 8009f10:	2500      	movs	r5, #0
 8009f12:	62a5      	str	r5, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009f14:	4e5b      	ldr	r6, [pc, #364]	@ (800a084 <ResetMacParameters+0x184>)
 8009f16:	f886 5418 	strb.w	r5, [r6, #1048]	@ 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 8009f1a:	f886 5419 	strb.w	r5, [r6, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8009f1e:	f8c6 5498 	str.w	r5, [r6, #1176]	@ 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 8009f22:	f884 511b 	strb.w	r5, [r4, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009f26:	2701      	movs	r7, #1
 8009f28:	f8a4 7120 	strh.w	r7, [r4, #288]	@ 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009f2c:	f994 30dc 	ldrsb.w	r3, [r4, #220]	@ 0xdc
 8009f30:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009f34:	f994 30dd 	ldrsb.w	r3, [r4, #221]	@ 0xdd
 8009f38:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009f3c:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 8009f40:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009f44:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8009f48:	f104 02b4 	add.w	r2, r4, #180	@ 0xb4
 8009f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f50:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009f54:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 8009f58:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 8009f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f60:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009f64:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 8009f68:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009f6c:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 8009f70:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009f74:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8009f78:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009f7c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8009f80:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8009f84:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 8009f88:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8009f8c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 8009f90:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
    MacCtx.NodeAckRequested = false;
 8009f94:	f886 541a 	strb.w	r5, [r6, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8009f98:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009f9c:	f884 511d 	strb.w	r5, [r4, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8009fa0:	f884 511e 	strb.w	r5, [r4, #286]	@ 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8009fa4:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8009fa8:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8009fac:	f884 5139 	strb.w	r5, [r4, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8009fb0:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8009fb4:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8009fb8:	f884 5145 	strb.w	r5, [r4, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8009fbc:	f884 5146 	strb.w	r5, [r4, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8009fc0:	f884 5147 	strb.w	r5, [r4, #327]	@ 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009fc4:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009fc8:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 8009fcc:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009fce:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 8009fd2:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009fd4:	4b2c      	ldr	r3, [pc, #176]	@ (800a088 <ResetMacParameters+0x188>)
 8009fd6:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009fd8:	a901      	add	r1, sp, #4
 8009fda:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009fde:	f002 fcc1 	bl	800c964 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009fe2:	f886 541b 	strb.w	r5, [r6, #1051]	@ 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009fe6:	f886 53d0 	strb.w	r5, [r6, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009fea:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009fec:	f8c6 33d4 	str.w	r3, [r6, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ff0:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8009ff4:	f886 33e0 	strb.w	r3, [r6, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009ff8:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8009ffc:	f886 33e1 	strb.w	r3, [r6, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a000:	f886 53e2 	strb.w	r5, [r6, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a004:	f886 73e3 	strb.w	r7, [r6, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a008:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800a00c:	f886 33e4 	strb.w	r3, [r6, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a010:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800a014:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800a018:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a01c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a01e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a022:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a026:	f886 73fa 	strb.w	r7, [r6, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a02a:	2302      	movs	r3, #2
 800a02c:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800a030:	950e      	str	r5, [sp, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800a032:	950f      	str	r5, [sp, #60]	@ 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800a034:	f8d6 3348 	ldr.w	r3, [r6, #840]	@ 0x348
 800a038:	b11b      	cbz	r3, 800a042 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	920e      	str	r2, [sp, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	930f      	str	r3, [sp, #60]	@ 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800a042:	4b12      	ldr	r3, [pc, #72]	@ (800a08c <ResetMacParameters+0x18c>)
 800a044:	9305      	str	r3, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800a046:	f1a3 0248 	sub.w	r2, r3, #72	@ 0x48
 800a04a:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800a04c:	f1a3 0214 	sub.w	r2, r3, #20
 800a050:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800a052:	3329      	adds	r3, #41	@ 0x29
 800a054:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800a056:	4a0e      	ldr	r2, [pc, #56]	@ (800a090 <ResetMacParameters+0x190>)
 800a058:	9209      	str	r2, [sp, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800a05a:	f1a2 039c 	sub.w	r3, r2, #156	@ 0x9c
 800a05e:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800a060:	f1a2 0398 	sub.w	r3, r2, #152	@ 0x98
 800a064:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800a066:	1d13      	adds	r3, r2, #4
 800a068:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800a06a:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 800a06e:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800a070:	f502 6299 	add.w	r2, r2, #1224	@ 0x4c8
 800a074:	a90e      	add	r1, sp, #56	@ 0x38
 800a076:	a805      	add	r0, sp, #20
 800a078:	f001 fc62 	bl	800b940 <LoRaMacClassBInit>
}
 800a07c:	b011      	add	sp, #68	@ 0x44
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a080:	20008000 	.word	0x20008000
 800a084:	20000754 	.word	0x20000754
 800a088:	200006c4 	.word	0x200006c4
 800a08c:	20000bbc 	.word	0x20000bbc
 800a090:	200080e4 	.word	0x200080e4

0800a094 <SwitchClass>:
{
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800a098:	4b45      	ldr	r3, [pc, #276]	@ (800a1b0 <SwitchClass+0x11c>)
 800a09a:	f893 5118 	ldrb.w	r5, [r3, #280]	@ 0x118
 800a09e:	2d01      	cmp	r5, #1
 800a0a0:	d06d      	beq.n	800a17e <SwitchClass+0xea>
 800a0a2:	2d02      	cmp	r5, #2
 800a0a4:	d072      	beq.n	800a18c <SwitchClass+0xf8>
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	d17d      	bne.n	800a1a6 <SwitchClass+0x112>
            if( deviceClass == CLASS_A )
 800a0aa:	bb58      	cbnz	r0, 800a104 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a0ac:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800a0b0:	336c      	adds	r3, #108	@ 0x6c
 800a0b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0b6:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800a0ba:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800a0bc:	2c01      	cmp	r4, #1
 800a0be:	d023      	beq.n	800a108 <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 800a0c0:	2c02      	cmp	r4, #2
 800a0c2:	d171      	bne.n	800a1a8 <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a0c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a1b0 <SwitchClass+0x11c>)
 800a0c6:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a0ca:	4e3a      	ldr	r6, [pc, #232]	@ (800a1b4 <SwitchClass+0x120>)
 800a0cc:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800a0d0:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800a0d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0da:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a0de:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	dd15      	ble.n	800a11a <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 800a0ee:	4b31      	ldr	r3, [pc, #196]	@ (800a1b4 <SwitchClass+0x120>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                Radio.Sleep( );
 800a0f6:	4b30      	ldr	r3, [pc, #192]	@ (800a1b8 <SwitchClass+0x124>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fa:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800a0fc:	f7ff fcc2 	bl	8009a84 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800a100:	4628      	mov	r0, r5
 800a102:	e051      	b.n	800a1a8 <SwitchClass+0x114>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a104:	2003      	movs	r0, #3
 800a106:	e7d9      	b.n	800a0bc <SwitchClass+0x28>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800a108:	4620      	mov	r0, r4
 800a10a:	f001 fc2f 	bl	800b96c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800a10e:	2800      	cmp	r0, #0
 800a110:	d1d6      	bne.n	800a0c0 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800a112:	4b27      	ldr	r3, [pc, #156]	@ (800a1b0 <SwitchClass+0x11c>)
 800a114:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800a118:	e7d2      	b.n	800a0c0 <SwitchClass+0x2c>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800a11a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800a11e:	4a24      	ldr	r2, [pc, #144]	@ (800a1b0 <SwitchClass+0x11c>)
 800a120:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a124:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800a128:	b132      	cbz	r2, 800a138 <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800a12a:	4a21      	ldr	r2, [pc, #132]	@ (800a1b0 <SwitchClass+0x11c>)
 800a12c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a130:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800a134:	2a02      	cmp	r2, #2
 800a136:	d002      	beq.n	800a13e <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a138:	3301      	adds	r3, #1
 800a13a:	b25b      	sxtb	r3, r3
 800a13c:	e7d5      	b.n	800a0ea <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800a13e:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b0 <SwitchClass+0x11c>)
 800a140:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800a144:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 800a148:	6751      	str	r1, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800a14a:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800a14e:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a152:	4b18      	ldr	r3, [pc, #96]	@ (800a1b4 <SwitchClass+0x120>)
 800a154:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 800a158:	f883 03e8 	strb.w	r0, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a15c:	f8c3 13ec 	str.w	r1, [r3, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a160:	f892 107d 	ldrb.w	r1, [r2, #125]	@ 0x7d
 800a164:	f883 13f8 	strb.w	r1, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a168:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800a16c:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a170:	2203      	movs	r2, #3
 800a172:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a176:	2201      	movs	r2, #1
 800a178:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800a17c:	e7b7      	b.n	800a0ee <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800a17e:	f001 fbf5 	bl	800b96c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800a182:	b988      	cbnz	r0, 800a1a8 <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a184:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b0 <SwitchClass+0x11c>)
 800a186:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800a18a:	e00d      	b.n	800a1a8 <SwitchClass+0x114>
            if( deviceClass == CLASS_A )
 800a18c:	b968      	cbnz	r0, 800a1aa <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800a18e:	4b09      	ldr	r3, [pc, #36]	@ (800a1b4 <SwitchClass+0x120>)
 800a190:	2206      	movs	r2, #6
 800a192:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a196:	4b06      	ldr	r3, [pc, #24]	@ (800a1b0 <SwitchClass+0x11c>)
 800a198:	f883 0118 	strb.w	r0, [r3, #280]	@ 0x118
                Radio.Sleep( );
 800a19c:	4b06      	ldr	r3, [pc, #24]	@ (800a1b8 <SwitchClass+0x124>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	e000      	b.n	800a1a8 <SwitchClass+0x114>
    switch( Nvm.MacGroup2.DeviceClass )
 800a1a6:	2003      	movs	r0, #3
}
 800a1a8:	bd70      	pop	{r4, r5, r6, pc}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a1aa:	2003      	movs	r0, #3
 800a1ac:	e7fc      	b.n	800a1a8 <SwitchClass+0x114>
 800a1ae:	bf00      	nop
 800a1b0:	20008000 	.word	0x20008000
 800a1b4:	20000754 	.word	0x20000754
 800a1b8:	08013274 	.word	0x08013274

0800a1bc <SendReJoinReq>:
{
 800a1bc:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800a1be:	28ff      	cmp	r0, #255	@ 0xff
 800a1c0:	d003      	beq.n	800a1ca <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800a1c2:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800a1c4:	f7ff fb20 	bl	8009808 <ScheduleTx>
}
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	f7ff ff62 	bl	800a094 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800a1d0:	4d0a      	ldr	r5, [pc, #40]	@ (800a1fc <SendReJoinReq+0x40>)
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800a1d8:	1cab      	adds	r3, r5, #2
 800a1da:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a1de:	23ff      	movs	r3, #255	@ 0xff
 800a1e0:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800a1e4:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800a1e8:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 800a1ec:	f004 fbca 	bl	800e984 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800a1f0:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 800a1f4:	f004 fba8 	bl	800e948 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800a1f8:	4620      	mov	r0, r4
            break;
 800a1fa:	e7e3      	b.n	800a1c4 <SendReJoinReq+0x8>
 800a1fc:	20000754 	.word	0x20000754

0800a200 <PrepareFrame>:
{
 800a200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a204:	b083      	sub	sp, #12
 800a206:	4605      	mov	r5, r0
 800a208:	460e      	mov	r6, r1
 800a20a:	4617      	mov	r7, r2
 800a20c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 800a210:	495a      	ldr	r1, [pc, #360]	@ (800a37c <PrepareFrame+0x17c>)
 800a212:	2200      	movs	r2, #0
 800a214:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800a216:	f881 241a 	strb.w	r2, [r1, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800a21a:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800a21c:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800a21e:	4699      	mov	r9, r3
 800a220:	b1cb      	cbz	r3, 800a256 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a222:	4c57      	ldr	r4, [pc, #348]	@ (800a380 <PrepareFrame+0x180>)
 800a224:	4642      	mov	r2, r8
 800a226:	4649      	mov	r1, r9
 800a228:	4620      	mov	r0, r4
 800a22a:	f004 fcc8 	bl	800ebbe <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a22e:	fa5f f088 	uxtb.w	r0, r8
 800a232:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 800a236:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a23a:	782b      	ldrb	r3, [r5, #0]
 800a23c:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800a23e:	782b      	ldrb	r3, [r5, #0]
 800a240:	095b      	lsrs	r3, r3, #5
 800a242:	2b04      	cmp	r3, #4
 800a244:	d009      	beq.n	800a25a <PrepareFrame+0x5a>
 800a246:	2b07      	cmp	r3, #7
 800a248:	d079      	beq.n	800a33e <PrepareFrame+0x13e>
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d009      	beq.n	800a262 <PrepareFrame+0x62>
 800a24e:	2002      	movs	r0, #2
}
 800a250:	b003      	add	sp, #12
 800a252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800a256:	4690      	mov	r8, r2
 800a258:	e7e3      	b.n	800a222 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800a25a:	4b48      	ldr	r3, [pc, #288]	@ (800a37c <PrepareFrame+0x17c>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a262:	4b46      	ldr	r3, [pc, #280]	@ (800a37c <PrepareFrame+0x17c>)
 800a264:	2204      	movs	r2, #4
 800a266:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a26a:	1c9a      	adds	r2, r3, #2
 800a26c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a270:	22ff      	movs	r2, #255	@ 0xff
 800a272:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a276:	782a      	ldrb	r2, [r5, #0]
 800a278:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a27c:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a280:	4a40      	ldr	r2, [pc, #256]	@ (800a384 <PrepareFrame+0x184>)
 800a282:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800a286:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a28a:	7832      	ldrb	r2, [r6, #0]
 800a28c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a290:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a294:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 800a298:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a29c:	a801      	add	r0, sp, #4
 800a29e:	f001 ffef 	bl	800c280 <LoRaMacCryptoGetFCntUp>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d15e      	bne.n	800a364 <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a2a6:	9a01      	ldr	r2, [sp, #4]
 800a2a8:	4b34      	ldr	r3, [pc, #208]	@ (800a37c <PrepareFrame+0x17c>)
 800a2aa:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	f883 1445 	strb.w	r1, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800a2b4:	f883 1444 	strb.w	r1, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a2b8:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a2bc:	4668      	mov	r0, sp
 800a2be:	f001 fc87 	bl	800bbd0 <LoRaMacCommandsGetSizeSerializedCmds>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d150      	bne.n	800a368 <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 800a2c6:	9b00      	ldr	r3, [sp, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d0c1      	beq.n	800a250 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a2cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a384 <PrepareFrame+0x184>)
 800a2ce:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800a2d2:	f7fe f86f 	bl	80083b4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a2d6:	4b29      	ldr	r3, [pc, #164]	@ (800a37c <PrepareFrame+0x17c>)
 800a2d8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800a2dc:	b113      	cbz	r3, 800a2e4 <PrepareFrame+0xe4>
 800a2de:	9a00      	ldr	r2, [sp, #0]
 800a2e0:	2a0f      	cmp	r2, #15
 800a2e2:	d915      	bls.n	800a310 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a2e4:	b113      	cbz	r3, 800a2ec <PrepareFrame+0xec>
 800a2e6:	9b00      	ldr	r3, [sp, #0]
 800a2e8:	2b0f      	cmp	r3, #15
 800a2ea:	d821      	bhi.n	800a330 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a2ec:	4a26      	ldr	r2, [pc, #152]	@ (800a388 <PrepareFrame+0x188>)
 800a2ee:	4669      	mov	r1, sp
 800a2f0:	f001 fc7a 	bl	800bbe8 <LoRaMacCommandsSerializeCmds>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d13d      	bne.n	800a374 <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a2f8:	4b20      	ldr	r3, [pc, #128]	@ (800a37c <PrepareFrame+0x17c>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a300:	f203 42b4 	addw	r2, r3, #1204	@ 0x4b4
 800a304:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a308:	9a00      	ldr	r2, [sp, #0]
 800a30a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800a30e:	e79f      	b.n	800a250 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a310:	4a1e      	ldr	r2, [pc, #120]	@ (800a38c <PrepareFrame+0x18c>)
 800a312:	4669      	mov	r1, sp
 800a314:	200f      	movs	r0, #15
 800a316:	f001 fc67 	bl	800bbe8 <LoRaMacCommandsSerializeCmds>
 800a31a:	bb38      	cbnz	r0, 800a36c <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a31c:	7833      	ldrb	r3, [r6, #0]
 800a31e:	9a00      	ldr	r2, [sp, #0]
 800a320:	f362 0303 	bfi	r3, r2, #0, #4
 800a324:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a326:	b2da      	uxtb	r2, r3
 800a328:	4b14      	ldr	r3, [pc, #80]	@ (800a37c <PrepareFrame+0x17c>)
 800a32a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800a32e:	e78f      	b.n	800a250 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a330:	4a15      	ldr	r2, [pc, #84]	@ (800a388 <PrepareFrame+0x188>)
 800a332:	4669      	mov	r1, sp
 800a334:	f001 fc58 	bl	800bbe8 <LoRaMacCommandsSerializeCmds>
 800a338:	b1d0      	cbz	r0, 800a370 <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a33a:	2013      	movs	r0, #19
 800a33c:	e788      	b.n	800a250 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a33e:	f1b9 0f00 	cmp.w	r9, #0
 800a342:	d019      	beq.n	800a378 <PrepareFrame+0x178>
 800a344:	2800      	cmp	r0, #0
 800a346:	d083      	beq.n	800a250 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a348:	4c11      	ldr	r4, [pc, #68]	@ (800a390 <PrepareFrame+0x190>)
 800a34a:	fa5f f288 	uxtb.w	r2, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	4620      	mov	r0, r4
 800a352:	f004 fc34 	bl	800ebbe <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a356:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 800a35a:	3301      	adds	r3, #1
 800a35c:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 800a360:	2000      	movs	r0, #0
 800a362:	e775      	b.n	800a250 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a364:	2012      	movs	r0, #18
 800a366:	e773      	b.n	800a250 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a368:	2013      	movs	r0, #19
 800a36a:	e771      	b.n	800a250 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a36c:	2013      	movs	r0, #19
 800a36e:	e76f      	b.n	800a250 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a370:	200a      	movs	r0, #10
 800a372:	e76d      	b.n	800a250 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a374:	2013      	movs	r0, #19
 800a376:	e76b      	b.n	800a250 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800a378:	2000      	movs	r0, #0
 800a37a:	e769      	b.n	800a250 <PrepareFrame+0x50>
 800a37c:	20000754 	.word	0x20000754
 800a380:	2000088c 	.word	0x2000088c
 800a384:	20008000 	.word	0x20008000
 800a388:	20000c08 	.word	0x20000c08
 800a38c:	2000086c 	.word	0x2000086c
 800a390:	20000757 	.word	0x20000757

0800a394 <Send>:
{
 800a394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a398:	b08a      	sub	sp, #40	@ 0x28
 800a39a:	4617      	mov	r7, r2
 800a39c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a39e:	4c44      	ldr	r4, [pc, #272]	@ (800a4b0 <Send+0x11c>)
 800a3a0:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800a3a4:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a3a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a3aa:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a3ac:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d07a      	beq.n	800a4aa <Send+0x116>
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a3b8:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800a3bc:	b90b      	cbnz	r3, 800a3c2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a3be:	2100      	movs	r1, #0
 800a3c0:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a3c8:	4839      	ldr	r0, [pc, #228]	@ (800a4b0 <Send+0x11c>)
 800a3ca:	f890 111a 	ldrb.w	r1, [r0, #282]	@ 0x11a
 800a3ce:	f361 13c7 	bfi	r3, r1, #7, #1
 800a3d2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a3d6:	f890 3118 	ldrb.w	r3, [r0, #280]	@ 0x118
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d052      	beq.n	800a484 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a3de:	4b34      	ldr	r3, [pc, #208]	@ (800a4b0 <Send+0x11c>)
 800a3e0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a3e4:	b12b      	cbz	r3, 800a3f2 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800a3e6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a3ea:	f043 0320 	orr.w	r3, r3, #32
 800a3ee:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.UpdateChanMask = true;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a3f8:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a3fc:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a3fe:	492c      	ldr	r1, [pc, #176]	@ (800a4b0 <Send+0x11c>)
 800a400:	f8b1 3088 	ldrh.w	r3, [r1, #136]	@ 0x88
 800a404:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a408:	f8b1 308a 	ldrh.w	r3, [r1, #138]	@ 0x8a
 800a40c:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a410:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a414:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a418:	f891 307c 	ldrb.w	r3, [r1, #124]	@ 0x7c
 800a41c:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a420:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 800a424:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a428:	460b      	mov	r3, r1
 800a42a:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800a42e:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a432:	aa08      	add	r2, sp, #32
 800a434:	9200      	str	r2, [sp, #0]
 800a436:	f101 0238 	add.w	r2, r1, #56	@ 0x38
 800a43a:	3139      	adds	r1, #57	@ 0x39
 800a43c:	a803      	add	r0, sp, #12
 800a43e:	f001 fa05 	bl	800b84c <LoRaMacAdrCalcNext>
 800a442:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a446:	f360 1386 	bfi	r3, r0, #6, #1
 800a44a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a44e:	f8cd 8000 	str.w	r8, [sp]
 800a452:	463b      	mov	r3, r7
 800a454:	4632      	mov	r2, r6
 800a456:	a909      	add	r1, sp, #36	@ 0x24
 800a458:	4628      	mov	r0, r5
 800a45a:	f7ff fed1 	bl	800a200 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a45e:	4604      	mov	r4, r0
 800a460:	b108      	cbz	r0, 800a466 <Send+0xd2>
 800a462:	280a      	cmp	r0, #10
 800a464:	d104      	bne.n	800a470 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800a466:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 800a46a:	f7ff f9cd 	bl	8009808 <ScheduleTx>
 800a46e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a470:	b17c      	cbz	r4, 800a492 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a472:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b0 <Send+0x11c>)
 800a474:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a478:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 800a47c:	4620      	mov	r0, r4
 800a47e:	b00a      	add	sp, #40	@ 0x28
 800a480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a484:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a488:	f043 0310 	orr.w	r3, r3, #16
 800a48c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a490:	e7a5      	b.n	800a3de <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a492:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <Send+0x11c>)
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a49a:	9a08      	ldr	r2, [sp, #32]
 800a49c:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a49e:	f001 fb65 	bl	800bb6c <LoRaMacCommandsRemoveNoneStickyCmds>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0ea      	beq.n	800a47c <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a4a6:	2413      	movs	r4, #19
 800a4a8:	e7e8      	b.n	800a47c <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a4aa:	2407      	movs	r4, #7
 800a4ac:	e7e6      	b.n	800a47c <Send+0xe8>
 800a4ae:	bf00      	nop
 800a4b0:	20008000 	.word	0x20008000

0800a4b4 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e8 <LoRaMacIsBusy+0x34>)
 800a4b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d00c      	beq.n	800a4d8 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a4be:	4a0b      	ldr	r2, [pc, #44]	@ (800a4ec <LoRaMacIsBusy+0x38>)
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	f012 0f01 	tst.w	r2, #1
 800a4c6:	d109      	bne.n	800a4dc <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a4c8:	b953      	cbnz	r3, 800a4e0 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a4ca:	4b07      	ldr	r3, [pc, #28]	@ (800a4e8 <LoRaMacIsBusy+0x34>)
 800a4cc:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d007      	beq.n	800a4e4 <LoRaMacIsBusy+0x30>
    return true;
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	4770      	bx	lr
        return false;
 800a4d8:	2000      	movs	r0, #0
 800a4da:	4770      	bx	lr
        return true;
 800a4dc:	2001      	movs	r0, #1
 800a4de:	4770      	bx	lr
    return true;
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	4770      	bx	lr
        return false;
 800a4e4:	2000      	movs	r0, #0
}
 800a4e6:	4770      	bx	lr
 800a4e8:	20000754 	.word	0x20000754
 800a4ec:	200006c0 	.word	0x200006c0

0800a4f0 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a4f0:	4b04      	ldr	r3, [pc, #16]	@ (800a504 <LoRaMacIsStopped+0x14>)
 800a4f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d001      	beq.n	800a4fe <LoRaMacIsStopped+0xe>
    return false;
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	4770      	bx	lr
        return true;
 800a4fe:	2001      	movs	r0, #1
}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20000754 	.word	0x20000754

0800a508 <LoRaMacProcess>:
{
 800a508:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a50a:	f7fe ffcd 	bl	80094a8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a50e:	f001 fa3e 	bl	800b98e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a512:	4b1f      	ldr	r3, [pc, #124]	@ (800a590 <LoRaMacProcess+0x88>)
 800a514:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a518:	f013 0f10 	tst.w	r3, #16
 800a51c:	d10d      	bne.n	800a53a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a51e:	f7fd fdff 	bl	8008120 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a522:	4b1b      	ldr	r3, [pc, #108]	@ (800a590 <LoRaMacProcess+0x88>)
 800a524:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d022      	beq.n	800a572 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a52c:	4b18      	ldr	r3, [pc, #96]	@ (800a590 <LoRaMacProcess+0x88>)
 800a52e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a532:	f013 0f20 	tst.w	r3, #32
 800a536:	d11f      	bne.n	800a578 <LoRaMacProcess+0x70>
}
 800a538:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a53a:	2000      	movs	r0, #0
 800a53c:	f7fd fdea 	bl	8008114 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a540:	f7fd fe26 	bl	8008190 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a544:	f7fd ff16 	bl	8008374 <IsRequestPending>
 800a548:	b110      	cbz	r0, 800a550 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a54a:	f7fe f815 	bl	8008578 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a54e:	b918      	cbnz	r0, 800a558 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a550:	f7fe ffec 	bl	800952c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a554:	f7ff fa0e 	bl	8009974 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a558:	f7ff fa4a 	bl	80099f0 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a55c:	2001      	movs	r0, #1
 800a55e:	f7fd fdd9 	bl	8008114 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a562:	4a0b      	ldr	r2, [pc, #44]	@ (800a590 <LoRaMacProcess+0x88>)
 800a564:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a568:	f043 0320 	orr.w	r3, r3, #32
 800a56c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800a570:	e7d5      	b.n	800a51e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a572:	f7ff fa87 	bl	8009a84 <OpenContinuousRxCWindow>
 800a576:	e7d9      	b.n	800a52c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a578:	4a05      	ldr	r2, [pc, #20]	@ (800a590 <LoRaMacProcess+0x88>)
 800a57a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a57e:	f023 0320 	bic.w	r3, r3, #32
 800a582:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800a586:	4803      	ldr	r0, [pc, #12]	@ (800a594 <LoRaMacProcess+0x8c>)
 800a588:	f7ff fb2a 	bl	8009be0 <LoRaMacHandleNvm>
}
 800a58c:	e7d4      	b.n	800a538 <LoRaMacProcess+0x30>
 800a58e:	bf00      	nop
 800a590:	20000754 	.word	0x20000754
 800a594:	20008000 	.word	0x20008000

0800a598 <LoRaMacInitialization>:
{
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	b08d      	sub	sp, #52	@ 0x34
    if( ( primitives == NULL ) ||
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f000 81a3 	beq.w	800a8ea <LoRaMacInitialization+0x352>
 800a5a4:	4688      	mov	r8, r1
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	f000 819f 	beq.w	800a8ee <LoRaMacInitialization+0x356>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a5b0:	6803      	ldr	r3, [r0, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 819d 	beq.w	800a8f2 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a5b8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 819b 	beq.w	800a8f6 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a5c0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 8199 	beq.w	800a8fa <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800a5c8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 8197 	beq.w	800a8fe <LoRaMacInitialization+0x366>
    if( RegionIsActive( region ) == false )
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	f002 f9ab 	bl	800c92c <RegionIsActive>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	f000 8193 	beq.w	800a902 <LoRaMacInitialization+0x36a>
    LoRaMacConfirmQueueInit( primitives );
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f001 fb97 	bl	800bd10 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a5e2:	4ccb      	ldr	r4, [pc, #812]	@ (800a910 <LoRaMacInitialization+0x378>)
 800a5e4:	f240 52c4 	movw	r2, #1476	@ 0x5c4
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f004 faff 	bl	800ebee <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a5f0:	4ec8      	ldr	r6, [pc, #800]	@ (800a914 <LoRaMacInitialization+0x37c>)
 800a5f2:	f240 5234 	movw	r2, #1332	@ 0x534
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f004 faf8 	bl	800ebee <memset1>
    Nvm.MacGroup2.Region = region;
 800a5fe:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a602:	2500      	movs	r5, #0
 800a604:	f884 5118 	strb.w	r5, [r4, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800a608:	f884 508c 	strb.w	r5, [r4, #140]	@ 0x8c
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a60c:	4bc2      	ldr	r3, [pc, #776]	@ (800a918 <LoRaMacInitialization+0x380>)
 800a60e:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
    params.Type = INIT_TYPE_DEFAULTS;
 800a612:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a616:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800a61a:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a61c:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 800a620:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a622:	4bbe      	ldr	r3, [pc, #760]	@ (800a91c <LoRaMacInitialization+0x384>)
 800a624:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a626:	a905      	add	r1, sp, #20
 800a628:	4648      	mov	r0, r9
 800a62a:	f002 f99b 	bl	800c964 <RegionInitDefaults>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a62e:	230f      	movs	r3, #15
 800a630:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a634:	a90a      	add	r1, sp, #40	@ 0x28
 800a636:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a63a:	f002 f97c 	bl	800c936 <RegionGetPhyParam>
 800a63e:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a640:	1b40      	subs	r0, r0, r5
 800a642:	bf18      	it	ne
 800a644:	2001      	movne	r0, #1
 800a646:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a64a:	f04f 0a0a 	mov.w	sl, #10
 800a64e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a652:	a90a      	add	r1, sp, #40	@ 0x28
 800a654:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a658:	f002 f96d 	bl	800c936 <RegionGetPhyParam>
 800a65c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a65e:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc
    getPhy.Attribute = PHY_DEF_TX_DR;
 800a662:	f04f 0906 	mov.w	r9, #6
 800a666:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a66a:	a90a      	add	r1, sp, #40	@ 0x28
 800a66c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a670:	f002 f961 	bl	800c936 <RegionGetPhyParam>
 800a674:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a676:	f884 00dd 	strb.w	r0, [r4, #221]	@ 0xdd
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a67a:	2310      	movs	r3, #16
 800a67c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a680:	a90a      	add	r1, sp, #40	@ 0x28
 800a682:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a686:	f002 f956 	bl	800c936 <RegionGetPhyParam>
 800a68a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a68c:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a690:	2311      	movs	r3, #17
 800a692:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a696:	a90a      	add	r1, sp, #40	@ 0x28
 800a698:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a69c:	f002 f94b 	bl	800c936 <RegionGetPhyParam>
 800a6a0:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a6a2:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a6a6:	2312      	movs	r3, #18
 800a6a8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6ac:	a90a      	add	r1, sp, #40	@ 0x28
 800a6ae:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a6b2:	f002 f940 	bl	800c936 <RegionGetPhyParam>
 800a6b6:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a6b8:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a6bc:	2313      	movs	r3, #19
 800a6be:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6c2:	a90a      	add	r1, sp, #40	@ 0x28
 800a6c4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a6c8:	f002 f935 	bl	800c936 <RegionGetPhyParam>
 800a6cc:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a6ce:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a6d2:	2314      	movs	r3, #20
 800a6d4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6d8:	a90a      	add	r1, sp, #40	@ 0x28
 800a6da:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a6de:	f002 f92a 	bl	800c936 <RegionGetPhyParam>
 800a6e2:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a6e4:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a6e8:	2316      	movs	r3, #22
 800a6ea:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6ee:	a90a      	add	r1, sp, #40	@ 0x28
 800a6f0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a6f4:	f002 f91f 	bl	800c936 <RegionGetPhyParam>
 800a6f8:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a6fa:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a6fe:	2317      	movs	r3, #23
 800a700:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a704:	a90a      	add	r1, sp, #40	@ 0x28
 800a706:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a70a:	f002 f914 	bl	800c936 <RegionGetPhyParam>
 800a70e:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a710:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a714:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a718:	2318      	movs	r3, #24
 800a71a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a71e:	a90a      	add	r1, sp, #40	@ 0x28
 800a720:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a724:	f002 f907 	bl	800c936 <RegionGetPhyParam>
 800a728:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a72a:	b2c0      	uxtb	r0, r0
 800a72c:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a730:	f884 00c0 	strb.w	r0, [r4, #192]	@ 0xc0
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a734:	231d      	movs	r3, #29
 800a736:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a73a:	a90a      	add	r1, sp, #40	@ 0x28
 800a73c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a740:	f002 f8f9 	bl	800c936 <RegionGetPhyParam>
 800a744:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a746:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a74a:	231e      	movs	r3, #30
 800a74c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a750:	a90a      	add	r1, sp, #40	@ 0x28
 800a752:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a756:	f002 f8ee 	bl	800c936 <RegionGetPhyParam>
 800a75a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a75c:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a760:	231f      	movs	r3, #31
 800a762:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a766:	a90a      	add	r1, sp, #40	@ 0x28
 800a768:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a76c:	f002 f8e3 	bl	800c936 <RegionGetPhyParam>
 800a770:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a774:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a778:	2320      	movs	r3, #32
 800a77a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a77e:	a90a      	add	r1, sp, #40	@ 0x28
 800a780:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a784:	f002 f8d7 	bl	800c936 <RegionGetPhyParam>
 800a788:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a78c:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a790:	230b      	movs	r3, #11
 800a792:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a796:	a90a      	add	r1, sp, #40	@ 0x28
 800a798:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a79c:	f002 f8cb 	bl	800c936 <RegionGetPhyParam>
 800a7a0:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800a7a2:	f8a4 00d0 	strh.w	r0, [r4, #208]	@ 0xd0
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a7a6:	230c      	movs	r3, #12
 800a7a8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7ac:	a90a      	add	r1, sp, #40	@ 0x28
 800a7ae:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a7b2:	f002 f8c0 	bl	800c936 <RegionGetPhyParam>
 800a7b6:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800a7b8:	f8a4 00d2 	strh.w	r0, [r4, #210]	@ 0xd2
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a7bc:	f04f 0b01 	mov.w	fp, #1
 800a7c0:	f884 b0b0 	strb.w	fp, [r4, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a7c4:	f8c4 a094 	str.w	sl, [r4, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a7c8:	f884 9098 	strb.w	r9, [r4, #152]	@ 0x98
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a7cc:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a7d0:	f884 9050 	strb.w	r9, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a7d4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800a7d8:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a7da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800a7de:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a7e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a7e4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a7e6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800a7ea:	6623      	str	r3, [r4, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a7ec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800a7f0:	6663      	str	r3, [r4, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a7f2:	f884 b068 	strb.w	fp, [r4, #104]	@ 0x68
    Nvm.MacGroup2.IsCertPortOn = true;
 800a7f6:	f884 b11f 	strb.w	fp, [r4, #287]	@ 0x11f
    MacCtx.MacCallbacks = callbacks;
 800a7fa:	f8c6 8348 	str.w	r8, [r6, #840]	@ 0x348
    ResetMacParameters( false );
 800a7fe:	4628      	mov	r0, r5
 800a800:	f7ff fb7e 	bl	8009f00 <ResetMacParameters>
    Nvm.MacGroup2.PublicNetwork = true;
 800a804:	f884 b119 	strb.w	fp, [r4, #281]	@ 0x119
    MacCtx.MacPrimitives = primitives;
 800a808:	f8c6 7344 	str.w	r7, [r6, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800a80c:	f886 5491 	strb.w	r5, [r6, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800a810:	f8c6 b340 	str.w	fp, [r6, #832]	@ 0x340
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a814:	62e5      	str	r5, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a816:	6325      	str	r5, [r4, #48]	@ 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a818:	9500      	str	r5, [sp, #0]
 800a81a:	4b41      	ldr	r3, [pc, #260]	@ (800a920 <LoRaMacInitialization+0x388>)
 800a81c:	462a      	mov	r2, r5
 800a81e:	f04f 31ff 	mov.w	r1, #4294967295
 800a822:	f506 705a 	add.w	r0, r6, #872	@ 0x368
 800a826:	f006 fb55 	bl	8010ed4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a82a:	9500      	str	r5, [sp, #0]
 800a82c:	4b3d      	ldr	r3, [pc, #244]	@ (800a924 <LoRaMacInitialization+0x38c>)
 800a82e:	462a      	mov	r2, r5
 800a830:	f04f 31ff 	mov.w	r1, #4294967295
 800a834:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800a838:	f006 fb4c 	bl	8010ed4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a83c:	9500      	str	r5, [sp, #0]
 800a83e:	4b3a      	ldr	r3, [pc, #232]	@ (800a928 <LoRaMacInitialization+0x390>)
 800a840:	462a      	mov	r2, r5
 800a842:	f04f 31ff 	mov.w	r1, #4294967295
 800a846:	f506 7066 	add.w	r0, r6, #920	@ 0x398
 800a84a:	f006 fb43 	bl	8010ed4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a84e:	9500      	str	r5, [sp, #0]
 800a850:	4b36      	ldr	r3, [pc, #216]	@ (800a92c <LoRaMacInitialization+0x394>)
 800a852:	462a      	mov	r2, r5
 800a854:	f04f 31ff 	mov.w	r1, #4294967295
 800a858:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 800a85c:	f006 fb3a 	bl	8010ed4 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a860:	af02      	add	r7, sp, #8
 800a862:	4638      	mov	r0, r7
 800a864:	f006 fb14 	bl	8010e90 <SysTimeGetMcuTime>
 800a868:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800a86c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a870:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Value = 0;
 800a874:	4b2e      	ldr	r3, [pc, #184]	@ (800a930 <LoRaMacInitialization+0x398>)
 800a876:	601d      	str	r5, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a878:	4b2e      	ldr	r3, [pc, #184]	@ (800a934 <LoRaMacInitialization+0x39c>)
 800a87a:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a87e:	4b2e      	ldr	r3, [pc, #184]	@ (800a938 <LoRaMacInitialization+0x3a0>)
 800a880:	f8c6 3354 	str.w	r3, [r6, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a884:	4b2d      	ldr	r3, [pc, #180]	@ (800a93c <LoRaMacInitialization+0x3a4>)
 800a886:	f8c6 335c 	str.w	r3, [r6, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a88a:	4b2d      	ldr	r3, [pc, #180]	@ (800a940 <LoRaMacInitialization+0x3a8>)
 800a88c:	f8c6 3350 	str.w	r3, [r6, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a890:	4b2c      	ldr	r3, [pc, #176]	@ (800a944 <LoRaMacInitialization+0x3ac>)
 800a892:	f8c6 3358 	str.w	r3, [r6, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a896:	4b2c      	ldr	r3, [pc, #176]	@ (800a948 <LoRaMacInitialization+0x3b0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f506 7053 	add.w	r0, r6, #844	@ 0x34c
 800a89e:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800a8a0:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800a8a4:	f003 feba 	bl	800e61c <SecureElementInit>
 800a8a8:	bb80      	cbnz	r0, 800a90c <LoRaMacInitialization+0x374>
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f001 fcc8 	bl	800c240 <LoRaMacCryptoInit>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d14b      	bne.n	800a94c <LoRaMacInitialization+0x3b4>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a8b4:	f001 f8ee 	bl	800ba94 <LoRaMacCommandsInit>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d149      	bne.n	800a950 <LoRaMacInitialization+0x3b8>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a8bc:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800a8c0:	f001 fd10 	bl	800c2e4 <LoRaMacCryptoSetMulticastReference>
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d144      	bne.n	800a954 <LoRaMacInitialization+0x3bc>
    srand1( Radio.Random( ) );
 800a8ca:	4d1f      	ldr	r5, [pc, #124]	@ (800a948 <LoRaMacInitialization+0x3b0>)
 800a8cc:	696b      	ldr	r3, [r5, #20]
 800a8ce:	4798      	blx	r3
 800a8d0:	f004 f962 	bl	800eb98 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a8d4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800a8d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a910 <LoRaMacInitialization+0x378>)
 800a8d8:	f892 0119 	ldrb.w	r0, [r2, #281]	@ 0x119
 800a8dc:	4798      	blx	r3
    Radio.Sleep( );
 800a8de:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a8e0:	4798      	blx	r3
    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a8e2:	4658      	mov	r0, fp
 800a8e4:	f7fd fc16 	bl	8008114 <LoRaMacEnableRequests>
    return LORAMAC_STATUS_OK;
 800a8e8:	e00c      	b.n	800a904 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8ea:	2403      	movs	r4, #3
 800a8ec:	e00a      	b.n	800a904 <LoRaMacInitialization+0x36c>
 800a8ee:	2403      	movs	r4, #3
 800a8f0:	e008      	b.n	800a904 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8f2:	2403      	movs	r4, #3
 800a8f4:	e006      	b.n	800a904 <LoRaMacInitialization+0x36c>
 800a8f6:	2403      	movs	r4, #3
 800a8f8:	e004      	b.n	800a904 <LoRaMacInitialization+0x36c>
 800a8fa:	2403      	movs	r4, #3
 800a8fc:	e002      	b.n	800a904 <LoRaMacInitialization+0x36c>
 800a8fe:	2403      	movs	r4, #3
 800a900:	e000      	b.n	800a904 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a902:	2409      	movs	r4, #9
}
 800a904:	4620      	mov	r0, r4
 800a906:	b00d      	add	sp, #52	@ 0x34
 800a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a90c:	2411      	movs	r4, #17
 800a90e:	e7f9      	b.n	800a904 <LoRaMacInitialization+0x36c>
 800a910:	20008000 	.word	0x20008000
 800a914:	20000754 	.word	0x20000754
 800a918:	01000400 	.word	0x01000400
 800a91c:	200006c4 	.word	0x200006c4
 800a920:	08009911 	.word	0x08009911
 800a924:	08009b91 	.word	0x08009b91
 800a928:	08009b39 	.word	0x08009b39
 800a92c:	08008515 	.word	0x08008515
 800a930:	200006c0 	.word	0x200006c0
 800a934:	08009eb5 	.word	0x08009eb5
 800a938:	08009e65 	.word	0x08009e65
 800a93c:	08008345 	.word	0x08008345
 800a940:	08009e3d 	.word	0x08009e3d
 800a944:	08009e15 	.word	0x08009e15
 800a948:	08013274 	.word	0x08013274
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a94c:	2411      	movs	r4, #17
 800a94e:	e7d9      	b.n	800a904 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a950:	2413      	movs	r4, #19
 800a952:	e7d7      	b.n	800a904 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a954:	2411      	movs	r4, #17
 800a956:	e7d5      	b.n	800a904 <LoRaMacInitialization+0x36c>

0800a958 <LoRaMacStart>:
{
 800a958:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800a95a:	2400      	movs	r4, #0
 800a95c:	4b03      	ldr	r3, [pc, #12]	@ (800a96c <LoRaMacStart+0x14>)
 800a95e:	f8c3 4340 	str.w	r4, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800a962:	f7fd fbc3 	bl	80080ec <UpdateRxSlotIdleState>
}
 800a966:	4620      	mov	r0, r4
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	bf00      	nop
 800a96c:	20000754 	.word	0x20000754

0800a970 <LoRaMacStop>:
{
 800a970:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a972:	f7ff fd9f 	bl	800a4b4 <LoRaMacIsBusy>
 800a976:	b130      	cbz	r0, 800a986 <LoRaMacStop+0x16>
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a978:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a8 <LoRaMacStop+0x38>)
 800a97a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d010      	beq.n	800a9a4 <LoRaMacStop+0x34>
    return LORAMAC_STATUS_BUSY;
 800a982:	2001      	movs	r0, #1
}
 800a984:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a986:	4b09      	ldr	r3, [pc, #36]	@ (800a9ac <LoRaMacStop+0x3c>)
 800a988:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d005      	beq.n	800a99c <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800a990:	4b05      	ldr	r3, [pc, #20]	@ (800a9a8 <LoRaMacStop+0x38>)
 800a992:	2201      	movs	r2, #1
 800a994:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 800a998:	2000      	movs	r0, #0
 800a99a:	e7f3      	b.n	800a984 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800a99c:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <LoRaMacStop+0x40>)
 800a99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a0:	4798      	blx	r3
 800a9a2:	e7f5      	b.n	800a990 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e7ed      	b.n	800a984 <LoRaMacStop+0x14>
 800a9a8:	20000754 	.word	0x20000754
 800a9ac:	20008000 	.word	0x20008000
 800a9b0:	08013274 	.word	0x08013274

0800a9b4 <LoRaMacHalt>:
{
 800a9b4:	b570      	push	{r4, r5, r6, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800a9b6:	4c13      	ldr	r4, [pc, #76]	@ (800aa04 <LoRaMacHalt+0x50>)
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f006 fae9 	bl	8010f90 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a9be:	f104 0018 	add.w	r0, r4, #24
 800a9c2:	f006 fae5 	bl	8010f90 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a9c6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800a9ca:	f006 fae1 	bl	8010f90 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a9ce:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 800a9d2:	f006 fadd 	bl	8010f90 <UTIL_TIMER_Stop>
    LoRaMacClassBHaltBeaconing( );
 800a9d6:	f000 ffc7 	bl	800b968 <LoRaMacClassBHaltBeaconing>
    Radio.Sleep( );
 800a9da:	4b0b      	ldr	r3, [pc, #44]	@ (800aa08 <LoRaMacHalt+0x54>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	4798      	blx	r3
    MacCtx.MacState = LORAMAC_IDLE;
 800a9e0:	2500      	movs	r5, #0
 800a9e2:	f844 5c28 	str.w	r5, [r4, #-40]
    LoRaMacHandleNvm( &Nvm );
 800a9e6:	4e09      	ldr	r6, [pc, #36]	@ (800aa0c <LoRaMacHalt+0x58>)
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7ff f8f9 	bl	8009be0 <LoRaMacHandleNvm>
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a9ee:	f240 52c4 	movw	r2, #1476	@ 0x5c4
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4806      	ldr	r0, [pc, #24]	@ (800aa10 <LoRaMacHalt+0x5c>)
 800a9f6:	f004 f8e2 	bl	800ebbe <memcpy1>
    MacCtx.MacState = LORAMAC_STOPPED;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f844 3c28 	str.w	r3, [r4, #-40]
}
 800aa00:	4628      	mov	r0, r5
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	20000abc 	.word	0x20000abc
 800aa08:	08013274 	.word	0x08013274
 800aa0c:	20008000 	.word	0x20008000
 800aa10:	200085c4 	.word	0x200085c4

0800aa14 <LoRaMacQueryTxPossible>:
{
 800aa14:	b530      	push	{r4, r5, lr}
 800aa16:	b08b      	sub	sp, #44	@ 0x2c
 800aa18:	4604      	mov	r4, r0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aa1a:	4b31      	ldr	r3, [pc, #196]	@ (800aae0 <LoRaMacQueryTxPossible+0xcc>)
 800aa1c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aa1e:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aa20:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800aa24:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800aa28:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800aa2c:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800aa30:	4b2c      	ldr	r3, [pc, #176]	@ (800aae4 <LoRaMacQueryTxPossible+0xd0>)
 800aa32:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800aa36:	f88d 200d 	strb.w	r2, [sp, #13]
    size_t macCmdsSize = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9302      	str	r3, [sp, #8]
    if( txInfo == NULL )
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	d048      	beq.n	800aad4 <LoRaMacQueryTxPossible+0xc0>
 800aa42:	460d      	mov	r5, r1
    adrNext.UpdateChanMask = false;
 800aa44:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800aa48:	4b25      	ldr	r3, [pc, #148]	@ (800aae0 <LoRaMacQueryTxPossible+0xcc>)
 800aa4a:	f893 111a 	ldrb.w	r1, [r3, #282]	@ 0x11a
 800aa4e:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aa52:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800aa54:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800aa58:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800aa5c:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800aa60:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aa64:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800aa68:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800aa6c:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800aa70:	f88d 1021 	strb.w	r1, [sp, #33]	@ 0x21
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800aa74:	f88d 2022 	strb.w	r2, [sp, #34]	@ 0x22
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aa78:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800aa7c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800aa80:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800aa84:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800aa88:	ab04      	add	r3, sp, #16
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	f10d 030d 	add.w	r3, sp, #13
 800aa90:	f10d 020e 	add.w	r2, sp, #14
 800aa94:	f10d 010f 	add.w	r1, sp, #15
 800aa98:	a805      	add	r0, sp, #20
 800aa9a:	f000 fed7 	bl	800b84c <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800aa9e:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800aaa2:	f7fd fc87 	bl	80083b4 <GetMaxAppPayloadWithoutFOptsLength>
 800aaa6:	7068      	strb	r0, [r5, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800aaa8:	a802      	add	r0, sp, #8
 800aaaa:	f001 f891 	bl	800bbd0 <LoRaMacCommandsGetSizeSerializedCmds>
 800aaae:	b998      	cbnz	r0, 800aad8 <LoRaMacQueryTxPossible+0xc4>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800aab0:	9b02      	ldr	r3, [sp, #8]
 800aab2:	2b0f      	cmp	r3, #15
 800aab4:	d80a      	bhi.n	800aacc <LoRaMacQueryTxPossible+0xb8>
 800aab6:	786a      	ldrb	r2, [r5, #1]
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d807      	bhi.n	800aacc <LoRaMacQueryTxPossible+0xb8>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	702b      	strb	r3, [r5, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	441c      	add	r4, r3
 800aac4:	42a2      	cmp	r2, r4
 800aac6:	d309      	bcc.n	800aadc <LoRaMacQueryTxPossible+0xc8>
}
 800aac8:	b00b      	add	sp, #44	@ 0x2c
 800aaca:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800aad0:	2008      	movs	r0, #8
 800aad2:	e7f9      	b.n	800aac8 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aad4:	2003      	movs	r0, #3
 800aad6:	e7f7      	b.n	800aac8 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aad8:	2013      	movs	r0, #19
 800aada:	e7f5      	b.n	800aac8 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800aadc:	2008      	movs	r0, #8
 800aade:	e7f3      	b.n	800aac8 <LoRaMacQueryTxPossible+0xb4>
 800aae0:	20008000 	.word	0x20008000
 800aae4:	20000754 	.word	0x20000754

0800aae8 <LoRaMacMibGetRequestConfirm>:
    if( mibGet == NULL )
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f000 817c 	beq.w	800ade6 <LoRaMacMibGetRequestConfirm+0x2fe>
{
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	4604      	mov	r4, r0
    switch( mibGet->Type )
 800aaf4:	7800      	ldrb	r0, [r0, #0]
 800aaf6:	2841      	cmp	r0, #65	@ 0x41
 800aaf8:	f200 8171 	bhi.w	800adde <LoRaMacMibGetRequestConfirm+0x2f6>
 800aafc:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ab00:	00480042 	.word	0x00480042
 800ab04:	0053004e 	.word	0x0053004e
 800ab08:	005e0058 	.word	0x005e0058
 800ab0c:	016f0064 	.word	0x016f0064
 800ab10:	016f016f 	.word	0x016f016f
 800ab14:	016f016f 	.word	0x016f016f
 800ab18:	016f016f 	.word	0x016f016f
 800ab1c:	006c016f 	.word	0x006c016f
 800ab20:	00780072 	.word	0x00780072
 800ab24:	008d0085 	.word	0x008d0085
 800ab28:	009d0095 	.word	0x009d0095
 800ab2c:	00a500b2 	.word	0x00a500b2
 800ab30:	00c500bf 	.word	0x00c500bf
 800ab34:	00cf00ca 	.word	0x00cf00ca
 800ab38:	00d900d4 	.word	0x00d900d4
 800ab3c:	00ef00de 	.word	0x00ef00de
 800ab40:	010100f5 	.word	0x010100f5
 800ab44:	010700fb 	.word	0x010700fb
 800ab48:	0112010c 	.word	0x0112010c
 800ab4c:	01180120 	.word	0x01180120
 800ab50:	016f011c 	.word	0x016f011c
 800ab54:	016f0126 	.word	0x016f0126
 800ab58:	016f016f 	.word	0x016f016f
 800ab5c:	016f016f 	.word	0x016f016f
 800ab60:	016f016f 	.word	0x016f016f
 800ab64:	016f016f 	.word	0x016f016f
 800ab68:	016f016f 	.word	0x016f016f
 800ab6c:	016f016f 	.word	0x016f016f
 800ab70:	016f016f 	.word	0x016f016f
 800ab74:	0135012f 	.word	0x0135012f
 800ab78:	0141013b 	.word	0x0141013b
 800ab7c:	014d0147 	.word	0x014d0147
 800ab80:	01610153 	.word	0x01610153
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800ab84:	4b99      	ldr	r3, [pc, #612]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ab86:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ab8a:	7123      	strb	r3, [r4, #4]
}
 800ab8c:	b004      	add	sp, #16
 800ab8e:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ab90:	4b96      	ldr	r3, [pc, #600]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ab92:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ab96:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab98:	2000      	movs	r0, #0
            break;
 800ab9a:	e7f7      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800ab9c:	6860      	ldr	r0, [r4, #4]
 800ab9e:	f003 fed3 	bl	800e948 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aba2:	2000      	movs	r0, #0
            break;
 800aba4:	e7f2      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800aba6:	6860      	ldr	r0, [r4, #4]
 800aba8:	f003 feec 	bl	800e984 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abac:	2000      	movs	r0, #0
            break;
 800abae:	e7ed      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800abb0:	4b8e      	ldr	r3, [pc, #568]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800abb2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800abb6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abb8:	2000      	movs	r0, #0
            break;
 800abba:	e7e7      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800abbc:	4b8b      	ldr	r3, [pc, #556]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800abbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abc2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abc4:	2000      	movs	r0, #0
            break;
 800abc6:	e7e1      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800abc8:	1d21      	adds	r1, r4, #4
 800abca:	4b88      	ldr	r3, [pc, #544]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800abcc:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800abd0:	f003 fef4 	bl	800e9bc <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abd4:	2000      	movs	r0, #0
            break;
 800abd6:	e7d9      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800abd8:	4b84      	ldr	r3, [pc, #528]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800abda:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800abde:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abe0:	2000      	movs	r0, #0
            break;
 800abe2:	e7d3      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800abe4:	4b81      	ldr	r3, [pc, #516]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800abe6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800abea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abec:	2000      	movs	r0, #0
            break;
 800abee:	e7cd      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS;
 800abf0:	231c      	movs	r3, #28
 800abf2:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800abf6:	a902      	add	r1, sp, #8
 800abf8:	4b7c      	ldr	r3, [pc, #496]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800abfa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800abfe:	f001 fe9a 	bl	800c936 <RegionGetPhyParam>
 800ac02:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800ac04:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac06:	2000      	movs	r0, #0
            break;
 800ac08:	e7c0      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ac0a:	3404      	adds	r4, #4
 800ac0c:	4b78      	ldr	r3, [pc, #480]	@ (800adf0 <LoRaMacMibGetRequestConfirm+0x308>)
 800ac0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac12:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac16:	2000      	movs	r0, #0
            break;
 800ac18:	e7b8      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ac1a:	3404      	adds	r4, #4
 800ac1c:	4b75      	ldr	r3, [pc, #468]	@ (800adf4 <LoRaMacMibGetRequestConfirm+0x30c>)
 800ac1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac22:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac26:	2000      	movs	r0, #0
            break;
 800ac28:	e7b0      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800ac2a:	3404      	adds	r4, #4
 800ac2c:	4b72      	ldr	r3, [pc, #456]	@ (800adf8 <LoRaMacMibGetRequestConfirm+0x310>)
 800ac2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac32:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac36:	2000      	movs	r0, #0
            break;
 800ac38:	e7a8      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ac3a:	3404      	adds	r4, #4
 800ac3c:	4b6f      	ldr	r3, [pc, #444]	@ (800adfc <LoRaMacMibGetRequestConfirm+0x314>)
 800ac3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac42:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac46:	2000      	movs	r0, #0
            break;
 800ac48:	e7a0      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800ac4a:	231a      	movs	r3, #26
 800ac4c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ac50:	a902      	add	r1, sp, #8
 800ac52:	4b66      	ldr	r3, [pc, #408]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ac54:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ac58:	f001 fe6d 	bl	800c936 <RegionGetPhyParam>
 800ac5c:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800ac5e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac60:	2000      	movs	r0, #0
            break;
 800ac62:	e793      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ac64:	2319      	movs	r3, #25
 800ac66:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ac6a:	a902      	add	r1, sp, #8
 800ac6c:	4b5f      	ldr	r3, [pc, #380]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ac6e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ac72:	f001 fe60 	bl	800c936 <RegionGetPhyParam>
 800ac76:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800ac78:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac7a:	2000      	movs	r0, #0
            break;
 800ac7c:	e786      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ac7e:	4b5b      	ldr	r3, [pc, #364]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ac80:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ac84:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac86:	2000      	movs	r0, #0
            break;
 800ac88:	e780      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800ac8a:	4b58      	ldr	r3, [pc, #352]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ac8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac8e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac90:	2000      	movs	r0, #0
            break;
 800ac92:	e77b      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800ac94:	4b55      	ldr	r3, [pc, #340]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ac96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac98:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac9a:	2000      	movs	r0, #0
            break;
 800ac9c:	e776      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800ac9e:	4b53      	ldr	r3, [pc, #332]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800aca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aca2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aca4:	2000      	movs	r0, #0
            break;
 800aca6:	e771      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800aca8:	4b50      	ldr	r3, [pc, #320]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800acaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acac:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acae:	2000      	movs	r0, #0
            break;
 800acb0:	e76c      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800acb2:	4b4e      	ldr	r3, [pc, #312]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800acb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acb8:	2000      	movs	r0, #0
            break;
 800acba:	e767      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800acbc:	2302      	movs	r3, #2
 800acbe:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800acc2:	4b4a      	ldr	r3, [pc, #296]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800acc4:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800acc8:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800accc:	a902      	add	r1, sp, #8
 800acce:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800acd2:	f001 fe30 	bl	800c936 <RegionGetPhyParam>
 800acd6:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800acd8:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acda:	2000      	movs	r0, #0
            break;
 800acdc:	e756      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800acde:	4b43      	ldr	r3, [pc, #268]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ace0:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800ace4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ace6:	2000      	movs	r0, #0
            break;
 800ace8:	e750      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800acea:	4b40      	ldr	r3, [pc, #256]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800acec:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800acf0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acf2:	2000      	movs	r0, #0
            break;
 800acf4:	e74a      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800acf6:	4b3d      	ldr	r3, [pc, #244]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800acf8:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800acfc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acfe:	2000      	movs	r0, #0
            break;
 800ad00:	e744      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ad02:	4b3a      	ldr	r3, [pc, #232]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad04:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800ad08:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad0a:	2000      	movs	r0, #0
            break;
 800ad0c:	e73e      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800ad0e:	4b37      	ldr	r3, [pc, #220]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad12:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad14:	2000      	movs	r0, #0
            break;
 800ad16:	e739      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800ad18:	4b34      	ldr	r3, [pc, #208]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad1e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad20:	2000      	movs	r0, #0
            break;
 800ad22:	e733      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ad24:	4b31      	ldr	r3, [pc, #196]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad2a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad2c:	2000      	movs	r0, #0
            break;
 800ad2e:	e72d      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Contexts = &Nvm;
 800ad30:	4b2e      	ldr	r3, [pc, #184]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad32:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad34:	2000      	movs	r0, #0
            break;
 800ad36:	e729      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.BackupContexts = &NvmBackup;
 800ad38:	4b31      	ldr	r3, [pc, #196]	@ (800ae00 <LoRaMacMibGetRequestConfirm+0x318>)
 800ad3a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad3c:	2000      	movs	r0, #0
            break;
 800ad3e:	e725      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ad40:	4b2a      	ldr	r3, [pc, #168]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ad46:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad48:	2000      	movs	r0, #0
            break;
 800ad4a:	e71f      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800ad4c:	4b27      	ldr	r3, [pc, #156]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad4e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800ad52:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800ad54:	f001 fe98 	bl	800ca88 <RegionGetVersion>
 800ad58:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad5a:	2000      	movs	r0, #0
            break;
 800ad5c:	e716      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ad5e:	4b23      	ldr	r3, [pc, #140]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad64:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad66:	2000      	movs	r0, #0
            break;
 800ad68:	e710      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800ad6a:	4b20      	ldr	r3, [pc, #128]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad6c:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800ad70:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad72:	2000      	movs	r0, #0
            break;
 800ad74:	e70a      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ad76:	4b1d      	ldr	r3, [pc, #116]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad78:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800ad7c:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad7e:	2000      	movs	r0, #0
            break;
 800ad80:	e704      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ad82:	4b1a      	ldr	r3, [pc, #104]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad84:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800ad88:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad8a:	2000      	movs	r0, #0
            break;
 800ad8c:	e6fe      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ad8e:	4b17      	ldr	r3, [pc, #92]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad90:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800ad94:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad96:	2000      	movs	r0, #0
            break;
 800ad98:	e6f8      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ad9a:	4b14      	ldr	r3, [pc, #80]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ad9c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800ada0:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ada2:	2000      	movs	r0, #0
            break;
 800ada4:	e6f2      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800ada6:	4b11      	ldr	r3, [pc, #68]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800ada8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800adac:	b11b      	cbz	r3, 800adb6 <LoRaMacMibGetRequestConfirm+0x2ce>
 800adae:	2b06      	cmp	r3, #6
 800adb0:	d001      	beq.n	800adb6 <LoRaMacMibGetRequestConfirm+0x2ce>
                status = LORAMAC_STATUS_ERROR;
 800adb2:	2018      	movs	r0, #24
 800adb4:	e6ea      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 800adb6:	4b0d      	ldr	r3, [pc, #52]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800adb8:	f9b3 35a0 	ldrsh.w	r3, [r3, #1440]	@ 0x5a0
 800adbc:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adbe:	2000      	movs	r0, #0
 800adc0:	e6e4      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800adc2:	4b0a      	ldr	r3, [pc, #40]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800adc4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800adc8:	b11b      	cbz	r3, 800add2 <LoRaMacMibGetRequestConfirm+0x2ea>
 800adca:	2b06      	cmp	r3, #6
 800adcc:	d001      	beq.n	800add2 <LoRaMacMibGetRequestConfirm+0x2ea>
                status = LORAMAC_STATUS_ERROR;
 800adce:	2018      	movs	r0, #24
 800add0:	e6dc      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 800add2:	4b06      	ldr	r3, [pc, #24]	@ (800adec <LoRaMacMibGetRequestConfirm+0x304>)
 800add4:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800add8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adda:	2000      	movs	r0, #0
 800addc:	e6d6      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 fdc6 	bl	800b970 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ade4:	e6d2      	b.n	800ab8c <LoRaMacMibGetRequestConfirm+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ade6:	2003      	movs	r0, #3
}
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	20008000 	.word	0x20008000
 800adf0:	2000806c 	.word	0x2000806c
 800adf4:	200080b4 	.word	0x200080b4
 800adf8:	20008074 	.word	0x20008074
 800adfc:	200080bc 	.word	0x200080bc
 800ae00:	200085c4 	.word	0x200085c4

0800ae04 <LoRaMacMibSetRequestConfirm>:
{
 800ae04:	b530      	push	{r4, r5, lr}
 800ae06:	b085      	sub	sp, #20
    if( mibSet == NULL )
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f000 82e1 	beq.w	800b3d0 <LoRaMacMibSetRequestConfirm+0x5cc>
 800ae0e:	4605      	mov	r5, r0
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ae10:	4ba2      	ldr	r3, [pc, #648]	@ (800b09c <LoRaMacMibSetRequestConfirm+0x298>)
 800ae12:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ae16:	f013 0f02 	tst.w	r3, #2
 800ae1a:	f040 82db 	bne.w	800b3d4 <LoRaMacMibSetRequestConfirm+0x5d0>
    switch( mibSet->Type )
 800ae1e:	7804      	ldrb	r4, [r0, #0]
 800ae20:	2c41      	cmp	r4, #65	@ 0x41
 800ae22:	f200 829f 	bhi.w	800b364 <LoRaMacMibSetRequestConfirm+0x560>
 800ae26:	e8df f014 	tbh	[pc, r4, lsl #1]
 800ae2a:	0042      	.short	0x0042
 800ae2c:	005a0051 	.word	0x005a0051
 800ae30:	00690062 	.word	0x00690062
 800ae34:	0075006f 	.word	0x0075006f
 800ae38:	00900084 	.word	0x00900084
 800ae3c:	00a8009c 	.word	0x00a8009c
 800ae40:	00c000b4 	.word	0x00c000b4
 800ae44:	00da00cd 	.word	0x00da00cd
 800ae48:	00f200e7 	.word	0x00f200e7
 800ae4c:	00f8029d 	.word	0x00f8029d
 800ae50:	0143011e 	.word	0x0143011e
 800ae54:	019b0171 	.word	0x019b0171
 800ae58:	01ab018b 	.word	0x01ab018b
 800ae5c:	01bb01b6 	.word	0x01bb01b6
 800ae60:	01c501c0 	.word	0x01c501c0
 800ae64:	029d01ca 	.word	0x029d01ca
 800ae68:	01e401cf 	.word	0x01e401cf
 800ae6c:	01fd0212 	.word	0x01fd0212
 800ae70:	02320227 	.word	0x02320227
 800ae74:	0240023a 	.word	0x0240023a
 800ae78:	029d0246 	.word	0x029d0246
 800ae7c:	029d024a 	.word	0x029d024a
 800ae80:	029d029d 	.word	0x029d029d
 800ae84:	029d029d 	.word	0x029d029d
 800ae88:	029d029d 	.word	0x029d029d
 800ae8c:	029d029d 	.word	0x029d029d
 800ae90:	029d029d 	.word	0x029d029d
 800ae94:	029d029d 	.word	0x029d029d
 800ae98:	029d029d 	.word	0x029d029d
 800ae9c:	025c029d 	.word	0x025c029d
 800aea0:	02680262 	.word	0x02680262
 800aea4:	0274026e 	.word	0x0274026e
 800aea8:	0280027a 	.word	0x0280027a
 800aeac:	028f      	.short	0x028f
            status = SwitchClass( mibSet->Param.Class );
 800aeae:	7900      	ldrb	r0, [r0, #4]
 800aeb0:	f7ff f8f0 	bl	800a094 <SwitchClass>
 800aeb4:	4604      	mov	r4, r0
    if( status == LORAMAC_STATUS_OK )
 800aeb6:	2c00      	cmp	r4, #0
 800aeb8:	f040 828d 	bne.w	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800aebc:	4a77      	ldr	r2, [pc, #476]	@ (800b09c <LoRaMacMibSetRequestConfirm+0x298>)
 800aebe:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800aec2:	f043 0320 	orr.w	r3, r3, #32
 800aec6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800aeca:	e284      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800aecc:	7903      	ldrb	r3, [r0, #4]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	f000 824c 	beq.w	800b36c <LoRaMacMibSetRequestConfirm+0x568>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800aed4:	4a72      	ldr	r2, [pc, #456]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800aed6:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aeda:	2400      	movs	r4, #0
 800aedc:	e7eb      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800aede:	6840      	ldr	r0, [r0, #4]
 800aee0:	f003 fd24 	bl	800e92c <SecureElementSetDevEui>
 800aee4:	4604      	mov	r4, r0
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d0e5      	beq.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aeea:	2403      	movs	r4, #3
 800aeec:	e7e3      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800aeee:	6840      	ldr	r0, [r0, #4]
 800aef0:	f003 fd38 	bl	800e964 <SecureElementSetJoinEui>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d1de      	bne.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aef8:	4604      	mov	r4, r0
 800aefa:	e7dc      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800aefc:	7902      	ldrb	r2, [r0, #4]
 800aefe:	4b68      	ldr	r3, [pc, #416]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800af00:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af04:	2400      	movs	r4, #0
            break;
 800af06:	e7d6      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800af08:	6842      	ldr	r2, [r0, #4]
 800af0a:	4b65      	ldr	r3, [pc, #404]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800af0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af10:	2400      	movs	r4, #0
            break;
 800af12:	e7d0      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800af14:	6841      	ldr	r1, [r0, #4]
 800af16:	4b62      	ldr	r3, [pc, #392]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800af18:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800af1c:	f003 fd40 	bl	800e9a0 <SecureElementSetDevAddr>
 800af20:	4604      	mov	r4, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	f040 8224 	bne.w	800b370 <LoRaMacMibSetRequestConfirm+0x56c>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800af28:	686a      	ldr	r2, [r5, #4]
 800af2a:	4b5d      	ldr	r3, [pc, #372]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800af2c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800af30:	e7c1      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800af32:	6841      	ldr	r1, [r0, #4]
 800af34:	2900      	cmp	r1, #0
 800af36:	f000 821d 	beq.w	800b374 <LoRaMacMibSetRequestConfirm+0x570>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800af3a:	2000      	movs	r0, #0
 800af3c:	f001 fadc 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800af40:	4604      	mov	r4, r0
 800af42:	2800      	cmp	r0, #0
 800af44:	d0b7      	beq.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af46:	2411      	movs	r4, #17
 800af48:	e245      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.NwkKey != NULL )
 800af4a:	6841      	ldr	r1, [r0, #4]
 800af4c:	2900      	cmp	r1, #0
 800af4e:	f000 8213 	beq.w	800b378 <LoRaMacMibSetRequestConfirm+0x574>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800af52:	2001      	movs	r0, #1
 800af54:	f001 fad0 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800af58:	4604      	mov	r4, r0
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d0ab      	beq.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af5e:	2411      	movs	r4, #17
 800af60:	e239      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.NwkSKey != NULL )
 800af62:	6841      	ldr	r1, [r0, #4]
 800af64:	2900      	cmp	r1, #0
 800af66:	f000 8209 	beq.w	800b37c <LoRaMacMibSetRequestConfirm+0x578>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800af6a:	2008      	movs	r0, #8
 800af6c:	f001 fac4 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800af70:	4604      	mov	r4, r0
 800af72:	2800      	cmp	r0, #0
 800af74:	d09f      	beq.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af76:	2411      	movs	r4, #17
 800af78:	e22d      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.AppSKey != NULL )
 800af7a:	6841      	ldr	r1, [r0, #4]
 800af7c:	2900      	cmp	r1, #0
 800af7e:	f000 81ff 	beq.w	800b380 <LoRaMacMibSetRequestConfirm+0x57c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800af82:	2009      	movs	r0, #9
 800af84:	f001 fab8 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800af88:	4604      	mov	r4, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d093      	beq.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af8e:	2411      	movs	r4, #17
 800af90:	e221      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.McKEKey != NULL )
 800af92:	6841      	ldr	r1, [r0, #4]
 800af94:	2900      	cmp	r1, #0
 800af96:	f000 81f5 	beq.w	800b384 <LoRaMacMibSetRequestConfirm+0x580>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800af9a:	200c      	movs	r0, #12
 800af9c:	f001 faac 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800afa0:	4604      	mov	r4, r0
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d087      	beq.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afa6:	2411      	movs	r4, #17
 800afa8:	e215      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.McKey0 != NULL )
 800afaa:	6841      	ldr	r1, [r0, #4]
 800afac:	2900      	cmp	r1, #0
 800afae:	f000 81eb 	beq.w	800b388 <LoRaMacMibSetRequestConfirm+0x584>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800afb2:	200d      	movs	r0, #13
 800afb4:	f001 faa0 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800afb8:	4604      	mov	r4, r0
 800afba:	2800      	cmp	r0, #0
 800afbc:	f43f af7b 	beq.w	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afc0:	2411      	movs	r4, #17
 800afc2:	e208      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.McAppSKey0 != NULL )
 800afc4:	6841      	ldr	r1, [r0, #4]
 800afc6:	2900      	cmp	r1, #0
 800afc8:	f000 81e6 	beq.w	800b398 <LoRaMacMibSetRequestConfirm+0x594>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800afcc:	200e      	movs	r0, #14
 800afce:	f001 fa93 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800afd2:	4604      	mov	r4, r0
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f43f af6e 	beq.w	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afda:	2411      	movs	r4, #17
 800afdc:	e1fb      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800afde:	6841      	ldr	r1, [r0, #4]
 800afe0:	2900      	cmp	r1, #0
 800afe2:	f000 81db 	beq.w	800b39c <LoRaMacMibSetRequestConfirm+0x598>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800afe6:	200f      	movs	r0, #15
 800afe8:	f001 fa86 	bl	800c4f8 <LoRaMacCryptoSetKey>
 800afec:	4604      	mov	r4, r0
 800afee:	2800      	cmp	r0, #0
 800aff0:	f43f af61 	beq.w	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aff4:	2411      	movs	r4, #17
 800aff6:	e1ee      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800aff8:	7900      	ldrb	r0, [r0, #4]
 800affa:	4b29      	ldr	r3, [pc, #164]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800affc:	f883 0119 	strb.w	r0, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b000:	4c28      	ldr	r4, [pc, #160]	@ (800b0a4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b004:	4798      	blx	r3
            Radio.Sleep( );
 800b006:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b008:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b00a:	2400      	movs	r4, #0
            break;
 800b00c:	e753      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b00e:	7902      	ldrb	r2, [r0, #4]
 800b010:	4b23      	ldr	r3, [pc, #140]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800b012:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b016:	2400      	movs	r4, #0
            break;
 800b018:	e74d      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b01a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b01e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b022:	4b1f      	ldr	r3, [pc, #124]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800b024:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b028:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800b02c:	2207      	movs	r2, #7
 800b02e:	a901      	add	r1, sp, #4
 800b030:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b034:	f001 fc9d 	bl	800c972 <RegionVerify>
 800b038:	b908      	cbnz	r0, 800b03e <LoRaMacMibSetRequestConfirm+0x23a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b03a:	2403      	movs	r4, #3
 800b03c:	e73b      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b03e:	686b      	ldr	r3, [r5, #4]
 800b040:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800b042:	2200      	movs	r2, #0
 800b044:	a901      	add	r1, sp, #4
 800b046:	4b16      	ldr	r3, [pc, #88]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800b048:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b04c:	f001 fc91 	bl	800c972 <RegionVerify>
 800b050:	2800      	cmp	r0, #0
 800b052:	f000 81a5 	beq.w	800b3a0 <LoRaMacMibSetRequestConfirm+0x59c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b056:	4b14      	ldr	r3, [pc, #80]	@ (800b0a8 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800b058:	3504      	adds	r5, #4
 800b05a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b05e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b062:	2400      	movs	r4, #0
 800b064:	e727      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b066:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b06a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b06e:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800b070:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b074:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b078:	2207      	movs	r2, #7
 800b07a:	a901      	add	r1, sp, #4
 800b07c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b080:	f001 fc77 	bl	800c972 <RegionVerify>
 800b084:	2800      	cmp	r0, #0
 800b086:	f000 818d 	beq.w	800b3a4 <LoRaMacMibSetRequestConfirm+0x5a0>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b08a:	4b08      	ldr	r3, [pc, #32]	@ (800b0ac <LoRaMacMibSetRequestConfirm+0x2a8>)
 800b08c:	3504      	adds	r5, #4
 800b08e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b092:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b096:	2400      	movs	r4, #0
 800b098:	e70d      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
 800b09a:	bf00      	nop
 800b09c:	20000754 	.word	0x20000754
 800b0a0:	20008000 	.word	0x20008000
 800b0a4:	08013274 	.word	0x08013274
 800b0a8:	2000806c 	.word	0x2000806c
 800b0ac:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b0b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b0b4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b0b8:	4bb4      	ldr	r3, [pc, #720]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b0ba:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b0be:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b0c2:	2207      	movs	r2, #7
 800b0c4:	a901      	add	r1, sp, #4
 800b0c6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b0ca:	f001 fc52 	bl	800c972 <RegionVerify>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f000 816a 	beq.w	800b3a8 <LoRaMacMibSetRequestConfirm+0x5a4>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b0d4:	4bad      	ldr	r3, [pc, #692]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b0d6:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800b0da:	3504      	adds	r5, #4
 800b0dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b0e0:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b0e4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d001      	beq.n	800b0f0 <LoRaMacMibSetRequestConfirm+0x2ec>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0ec:	2400      	movs	r4, #0
 800b0ee:	e6e2      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b0f0:	f1a2 0374 	sub.w	r3, r2, #116	@ 0x74
 800b0f4:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	f43f aedc 	beq.w	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    Radio.Sleep( );
 800b0fe:	4ba4      	ldr	r3, [pc, #656]	@ (800b390 <LoRaMacMibSetRequestConfirm+0x58c>)
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800b104:	f7fe fcbe 	bl	8009a84 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b108:	2400      	movs	r4, #0
 800b10a:	e6d4      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b10c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b110:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b114:	4b9d      	ldr	r3, [pc, #628]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b116:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b11a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b11e:	2207      	movs	r2, #7
 800b120:	a901      	add	r1, sp, #4
 800b122:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b126:	f001 fc24 	bl	800c972 <RegionVerify>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	f000 813e 	beq.w	800b3ac <LoRaMacMibSetRequestConfirm+0x5a8>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b130:	4b98      	ldr	r3, [pc, #608]	@ (800b394 <LoRaMacMibSetRequestConfirm+0x590>)
 800b132:	3504      	adds	r5, #4
 800b134:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b138:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b13c:	2400      	movs	r4, #0
 800b13e:	e6ba      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b140:	6843      	ldr	r3, [r0, #4]
 800b142:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b144:	2301      	movs	r3, #1
 800b146:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b14a:	a902      	add	r1, sp, #8
 800b14c:	4b8f      	ldr	r3, [pc, #572]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b14e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b152:	f001 fc1f 	bl	800c994 <RegionChanMaskSet>
 800b156:	2800      	cmp	r0, #0
 800b158:	f000 812a 	beq.w	800b3b0 <LoRaMacMibSetRequestConfirm+0x5ac>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b15c:	2400      	movs	r4, #0
 800b15e:	e6aa      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b160:	6843      	ldr	r3, [r0, #4]
 800b162:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b164:	2300      	movs	r3, #0
 800b166:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b16a:	a902      	add	r1, sp, #8
 800b16c:	4b87      	ldr	r3, [pc, #540]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b16e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b172:	f001 fc0f 	bl	800c994 <RegionChanMaskSet>
 800b176:	2800      	cmp	r0, #0
 800b178:	f000 811c 	beq.w	800b3b4 <LoRaMacMibSetRequestConfirm+0x5b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b17c:	2400      	movs	r4, #0
 800b17e:	e69a      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b180:	7902      	ldrb	r2, [r0, #4]
 800b182:	1e53      	subs	r3, r2, #1
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b0e      	cmp	r3, #14
 800b188:	f200 8116 	bhi.w	800b3b8 <LoRaMacMibSetRequestConfirm+0x5b4>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b18c:	4b7f      	ldr	r3, [pc, #508]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b18e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b192:	2400      	movs	r4, #0
 800b194:	e68f      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b196:	6842      	ldr	r2, [r0, #4]
 800b198:	4b7c      	ldr	r3, [pc, #496]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b19a:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b19c:	2400      	movs	r4, #0
            break;
 800b19e:	e68a      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b1a0:	6842      	ldr	r2, [r0, #4]
 800b1a2:	4b7a      	ldr	r3, [pc, #488]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1a4:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1a6:	2400      	movs	r4, #0
            break;
 800b1a8:	e685      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b1aa:	6842      	ldr	r2, [r0, #4]
 800b1ac:	4b77      	ldr	r3, [pc, #476]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1b0:	2400      	movs	r4, #0
            break;
 800b1b2:	e680      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b1b4:	6842      	ldr	r2, [r0, #4]
 800b1b6:	4b75      	ldr	r3, [pc, #468]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1b8:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1ba:	2400      	movs	r4, #0
            break;
 800b1bc:	e67b      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b1be:	6842      	ldr	r2, [r0, #4]
 800b1c0:	4b72      	ldr	r3, [pc, #456]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1c2:	665a      	str	r2, [r3, #100]	@ 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1c4:	2400      	movs	r4, #0
            break;
 800b1c6:	e676      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b1c8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b1cc:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800b1d0:	2206      	movs	r2, #6
 800b1d2:	a901      	add	r1, sp, #4
 800b1d4:	4b6d      	ldr	r3, [pc, #436]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1d6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b1da:	f001 fbca 	bl	800c972 <RegionVerify>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f000 80ec 	beq.w	800b3bc <LoRaMacMibSetRequestConfirm+0x5b8>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800b1e4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b1e8:	4b68      	ldr	r3, [pc, #416]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1ea:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1ee:	2400      	movs	r4, #0
 800b1f0:	e661      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b1f2:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b1f6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b1fa:	4b64      	ldr	r3, [pc, #400]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b1fc:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b200:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b204:	2205      	movs	r2, #5
 800b206:	a901      	add	r1, sp, #4
 800b208:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b20c:	f001 fbb1 	bl	800c972 <RegionVerify>
 800b210:	2800      	cmp	r0, #0
 800b212:	f000 80d5 	beq.w	800b3c0 <LoRaMacMibSetRequestConfirm+0x5bc>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b216:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b21a:	4b5c      	ldr	r3, [pc, #368]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b21c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b220:	2400      	movs	r4, #0
 800b222:	e648      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b224:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b228:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b22c:	220a      	movs	r2, #10
 800b22e:	a901      	add	r1, sp, #4
 800b230:	4b56      	ldr	r3, [pc, #344]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b232:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b236:	f001 fb9c 	bl	800c972 <RegionVerify>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	f000 80c2 	beq.w	800b3c4 <LoRaMacMibSetRequestConfirm+0x5c0>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800b240:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b244:	4b51      	ldr	r3, [pc, #324]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b246:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b24a:	2400      	movs	r4, #0
 800b24c:	e633      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b24e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b252:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800b256:	2209      	movs	r2, #9
 800b258:	a901      	add	r1, sp, #4
 800b25a:	4b4c      	ldr	r3, [pc, #304]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b25c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b260:	f001 fb87 	bl	800c972 <RegionVerify>
 800b264:	2800      	cmp	r0, #0
 800b266:	f000 80af 	beq.w	800b3c8 <LoRaMacMibSetRequestConfirm+0x5c4>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800b26a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b26e:	4b47      	ldr	r3, [pc, #284]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b270:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b274:	2400      	movs	r4, #0
 800b276:	e61e      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.SystemMaxRxError <= 500 )
 800b278:	6843      	ldr	r3, [r0, #4]
 800b27a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b27e:	f200 80a5 	bhi.w	800b3cc <LoRaMacMibSetRequestConfirm+0x5c8>
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b282:	4a42      	ldr	r2, [pc, #264]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b288:	64d3      	str	r3, [r2, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b28a:	2400      	movs	r4, #0
 800b28c:	e613      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b28e:	7902      	ldrb	r2, [r0, #4]
 800b290:	4b3e      	ldr	r3, [pc, #248]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b292:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800b296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b29a:	2400      	movs	r4, #0
            break;
 800b29c:	e60b      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b29e:	6842      	ldr	r2, [r0, #4]
 800b2a0:	4b3a      	ldr	r3, [pc, #232]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b2a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2a6:	2400      	movs	r4, #0
            break;
 800b2a8:	e605      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b2aa:	6842      	ldr	r2, [r0, #4]
 800b2ac:	4b37      	ldr	r3, [pc, #220]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b2ae:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2b2:	2400      	movs	r4, #0
            break;
 800b2b4:	e5ff      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800b2b6:	f7fe fcf9 	bl	8009cac <RestoreNvmData>
 800b2ba:	4604      	mov	r4, r0
            break;
 800b2bc:	e5fb      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b2be:	7983      	ldrb	r3, [r0, #6]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d901      	bls.n	800b2c8 <LoRaMacMibSetRequestConfirm+0x4c4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b2c4:	2403      	movs	r4, #3
 800b2c6:	e5f6      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b2c8:	6842      	ldr	r2, [r0, #4]
 800b2ca:	4b30      	ldr	r3, [pc, #192]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b2cc:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b2d0:	6840      	ldr	r0, [r0, #4]
 800b2d2:	f000 ffcd 	bl	800c270 <LoRaMacCryptoSetLrWanVersion>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	f43f adec 	beq.w	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b2de:	2411      	movs	r4, #17
 800b2e0:	e079      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800b2e2:	6842      	ldr	r2, [r0, #4]
 800b2e4:	4b29      	ldr	r3, [pc, #164]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2ea:	2400      	movs	r4, #0
            break;
 800b2ec:	e5e3      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800b2ee:	7902      	ldrb	r2, [r0, #4]
 800b2f0:	4b26      	ldr	r3, [pc, #152]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b2f2:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2f6:	2400      	movs	r4, #0
            break;
 800b2f8:	e5dd      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b2fa:	8882      	ldrh	r2, [r0, #4]
 800b2fc:	4b23      	ldr	r3, [pc, #140]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b2fe:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b302:	2400      	movs	r4, #0
            break;
 800b304:	e5d7      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b306:	8882      	ldrh	r2, [r0, #4]
 800b308:	4b20      	ldr	r3, [pc, #128]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b30a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b30e:	2400      	movs	r4, #0
            break;
 800b310:	e5d1      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b312:	8882      	ldrh	r2, [r0, #4]
 800b314:	4b1d      	ldr	r3, [pc, #116]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b316:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b31a:	2400      	movs	r4, #0
            break;
 800b31c:	e5cb      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b31e:	8882      	ldrh	r2, [r0, #4]
 800b320:	4b1a      	ldr	r3, [pc, #104]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b322:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b326:	2400      	movs	r4, #0
            break;
 800b328:	e5c5      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800b32a:	4b18      	ldr	r3, [pc, #96]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b32c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b330:	b11b      	cbz	r3, 800b33a <LoRaMacMibSetRequestConfirm+0x536>
 800b332:	2b06      	cmp	r3, #6
 800b334:	d001      	beq.n	800b33a <LoRaMacMibSetRequestConfirm+0x536>
                status = LORAMAC_STATUS_ERROR;
 800b336:	2418      	movs	r4, #24
 800b338:	e5bd      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 800b33a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b33e:	4b13      	ldr	r3, [pc, #76]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b340:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b344:	2400      	movs	r4, #0
 800b346:	e5b6      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800b348:	4b10      	ldr	r3, [pc, #64]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b34a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b34e:	b11b      	cbz	r3, 800b358 <LoRaMacMibSetRequestConfirm+0x554>
 800b350:	2b06      	cmp	r3, #6
 800b352:	d001      	beq.n	800b358 <LoRaMacMibSetRequestConfirm+0x554>
                status = LORAMAC_STATUS_ERROR;
 800b354:	2418      	movs	r4, #24
 800b356:	e5ae      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 800b358:	686a      	ldr	r2, [r5, #4]
 800b35a:	4b0c      	ldr	r3, [pc, #48]	@ (800b38c <LoRaMacMibSetRequestConfirm+0x588>)
 800b35c:	f8c3 25a4 	str.w	r2, [r3, #1444]	@ 0x5a4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b360:	2400      	movs	r4, #0
 800b362:	e5a8      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b364:	f000 fb06 	bl	800b974 <LoRaMacMibClassBSetRequestConfirm>
 800b368:	4604      	mov	r4, r0
            break;
 800b36a:	e5a4      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b36c:	2403      	movs	r4, #3
 800b36e:	e5a2      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b370:	2403      	movs	r4, #3
 800b372:	e5a0      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b374:	2403      	movs	r4, #3
 800b376:	e59e      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b378:	2403      	movs	r4, #3
 800b37a:	e59c      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b37c:	2403      	movs	r4, #3
 800b37e:	e59a      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b380:	2403      	movs	r4, #3
 800b382:	e598      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b384:	2403      	movs	r4, #3
 800b386:	e596      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b388:	2403      	movs	r4, #3
 800b38a:	e594      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
 800b38c:	20008000 	.word	0x20008000
 800b390:	08013274 	.word	0x08013274
 800b394:	200080bc 	.word	0x200080bc
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b398:	2403      	movs	r4, #3
 800b39a:	e58c      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b39c:	2403      	movs	r4, #3
 800b39e:	e58a      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3a0:	2403      	movs	r4, #3
 800b3a2:	e588      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3a4:	2403      	movs	r4, #3
 800b3a6:	e586      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3a8:	2403      	movs	r4, #3
 800b3aa:	e584      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3ac:	2403      	movs	r4, #3
 800b3ae:	e582      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3b0:	2403      	movs	r4, #3
 800b3b2:	e580      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3b4:	2403      	movs	r4, #3
 800b3b6:	e57e      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3b8:	2403      	movs	r4, #3
 800b3ba:	e57c      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3bc:	2403      	movs	r4, #3
 800b3be:	e57a      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3c0:	2403      	movs	r4, #3
 800b3c2:	e578      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3c4:	2403      	movs	r4, #3
 800b3c6:	e576      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3c8:	2403      	movs	r4, #3
 800b3ca:	e574      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3cc:	2403      	movs	r4, #3
 800b3ce:	e572      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0xb2>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b3d0:	2403      	movs	r4, #3
 800b3d2:	e000      	b.n	800b3d6 <LoRaMacMibSetRequestConfirm+0x5d2>
        return LORAMAC_STATUS_BUSY;
 800b3d4:	2401      	movs	r4, #1
}
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	b005      	add	sp, #20
 800b3da:	bd30      	pop	{r4, r5, pc}

0800b3dc <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3de:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f000 80fb 	beq.w	800b5e2 <LoRaMacMlmeRequest+0x206>
 800b3ec:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b3ee:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b3f0:	f7ff f860 	bl	800a4b4 <LoRaMacIsBusy>
 800b3f4:	b118      	cbz	r0, 800b3fe <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b3f6:	2401      	movs	r4, #1
            AbpJoinPendingStart( );
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
}
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	b007      	add	sp, #28
 800b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b3fe:	f000 fd6b 	bl	800bed8 <LoRaMacConfirmQueueIsFull>
 800b402:	4606      	mov	r6, r0
 800b404:	b108      	cbz	r0, 800b40a <LoRaMacMlmeRequest+0x2e>
        return LORAMAC_STATUS_BUSY;
 800b406:	2401      	movs	r4, #1
 800b408:	e7f6      	b.n	800b3f8 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b40a:	f000 fd5f 	bl	800becc <LoRaMacConfirmQueueGetCnt>
 800b40e:	b308      	cbz	r0, 800b454 <LoRaMacMlmeRequest+0x78>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b410:	4b75      	ldr	r3, [pc, #468]	@ (800b5e8 <LoRaMacMlmeRequest+0x20c>)
 800b412:	2101      	movs	r1, #1
 800b414:	f883 1455 	strb.w	r1, [r3, #1109]	@ 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b418:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b41c:	f042 0204 	orr.w	r2, r2, #4
 800b420:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800b424:	782b      	ldrb	r3, [r5, #0]
 800b426:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b42a:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800b42e:	2200      	movs	r2, #0
 800b430:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800b434:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800b438:	461c      	mov	r4, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	2b0c      	cmp	r3, #12
 800b43e:	f200 80b1 	bhi.w	800b5a4 <LoRaMacMlmeRequest+0x1c8>
 800b442:	e8df f003 	tbb	[pc, r3]
 800b446:	af0d      	.short	0xaf0d
 800b448:	675dafaf 	.word	0x675dafaf
 800b44c:	af70afaf 	.word	0xaf70afaf
 800b450:	7f9e      	.short	0x7f9e
 800b452:	95          	.byte	0x95
 800b453:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b454:	2214      	movs	r2, #20
 800b456:	2100      	movs	r1, #0
 800b458:	4864      	ldr	r0, [pc, #400]	@ (800b5ec <LoRaMacMlmeRequest+0x210>)
 800b45a:	f003 fbc8 	bl	800ebee <memset1>
 800b45e:	e7d7      	b.n	800b410 <LoRaMacMlmeRequest+0x34>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b460:	4b61      	ldr	r3, [pc, #388]	@ (800b5e8 <LoRaMacMlmeRequest+0x20c>)
 800b462:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b466:	f013 0f20 	tst.w	r3, #32
 800b46a:	d1c5      	bne.n	800b3f8 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800b46c:	792b      	ldrb	r3, [r5, #4]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d003      	beq.n	800b47a <LoRaMacMlmeRequest+0x9e>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800b472:	2b01      	cmp	r3, #1
 800b474:	d026      	beq.n	800b4c4 <LoRaMacMlmeRequest+0xe8>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b476:	2402      	movs	r4, #2
 800b478:	e095      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
                ResetMacParameters( false );
 800b47a:	2000      	movs	r0, #0
 800b47c:	f7fe fd40 	bl	8009f00 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b480:	4c5b      	ldr	r4, [pc, #364]	@ (800b5f0 <LoRaMacMlmeRequest+0x214>)
 800b482:	2200      	movs	r2, #0
 800b484:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b488:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b48c:	f001 fadb 	bl	800ca46 <RegionAlternateDr>
 800b490:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800b494:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800b498:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b49c:	2307      	movs	r3, #7
 800b49e:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800b4a2:	20ff      	movs	r0, #255	@ 0xff
 800b4a4:	f7fe fe8a 	bl	800a1bc <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d07b      	beq.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b4ae:	4f50      	ldr	r7, [pc, #320]	@ (800b5f0 <LoRaMacMlmeRequest+0x214>)
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b4b6:	f897 0048 	ldrb.w	r0, [r7, #72]	@ 0x48
 800b4ba:	f001 fac4 	bl	800ca46 <RegionAlternateDr>
 800b4be:	f887 0039 	strb.w	r0, [r7, #57]	@ 0x39
 800b4c2:	e070      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b4c4:	4e4a      	ldr	r6, [pc, #296]	@ (800b5f0 <LoRaMacMlmeRequest+0x214>)
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	f886 411d 	strb.w	r4, [r6, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b4d2:	4669      	mov	r1, sp
 800b4d4:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b4d8:	f001 fa44 	bl	800c964 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800b4dc:	792b      	ldrb	r3, [r5, #4]
 800b4de:	f886 3130 	strb.w	r3, [r6, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b4e2:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800b4e6:	2601      	movs	r6, #1
 800b4e8:	f88d 6016 	strb.w	r6, [sp, #22]
                OnMacProcessNotify( );
 800b4ec:	f7fc ff1e 	bl	800832c <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b4f0:	4a3d      	ldr	r2, [pc, #244]	@ (800b5e8 <LoRaMacMlmeRequest+0x20c>)
 800b4f2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b4f6:	f043 0310 	orr.w	r3, r3, #16
 800b4fa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800b4fe:	e052      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b500:	2200      	movs	r2, #0
 800b502:	a904      	add	r1, sp, #16
 800b504:	2002      	movs	r0, #2
 800b506:	f000 fad5 	bl	800bab4 <LoRaMacCommandsAddCmd>
 800b50a:	4604      	mov	r4, r0
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d04a      	beq.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b510:	2413      	movs	r4, #19
 800b512:	e048      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b514:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	68a9      	ldr	r1, [r5, #8]
 800b51c:	88a8      	ldrh	r0, [r5, #4]
 800b51e:	f7fc fe5b 	bl	80081d8 <SetTxContinuousWave>
 800b522:	4604      	mov	r4, r0
            break;
 800b524:	e03f      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800b526:	4669      	mov	r1, sp
 800b528:	200d      	movs	r0, #13
 800b52a:	f000 fb0f 	bl	800bb4c <LoRaMacCommandsGetCmd>
 800b52e:	4604      	mov	r4, r0
 800b530:	b3c8      	cbz	r0, 800b5a6 <LoRaMacMlmeRequest+0x1ca>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b532:	2200      	movs	r2, #0
 800b534:	a904      	add	r1, sp, #16
 800b536:	200d      	movs	r0, #13
 800b538:	f000 fabc 	bl	800bab4 <LoRaMacCommandsAddCmd>
 800b53c:	4604      	mov	r4, r0
 800b53e:	b390      	cbz	r0, 800b5a6 <LoRaMacMlmeRequest+0x1ca>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b540:	2413      	movs	r4, #19
            break;
 800b542:	e030      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b544:	4b2a      	ldr	r3, [pc, #168]	@ (800b5f0 <LoRaMacMlmeRequest+0x214>)
 800b546:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b54a:	b10b      	cbz	r3, 800b550 <LoRaMacMlmeRequest+0x174>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b54c:	2402      	movs	r4, #2
 800b54e:	e02a      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b550:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b552:	f004 0007 	and.w	r0, r4, #7
 800b556:	f000 fa06 	bl	800b966 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b55a:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b55e:	2201      	movs	r2, #1
 800b560:	a904      	add	r1, sp, #16
 800b562:	2010      	movs	r0, #16
 800b564:	f000 faa6 	bl	800bab4 <LoRaMacCommandsAddCmd>
 800b568:	4604      	mov	r4, r0
 800b56a:	b1e0      	cbz	r0, 800b5a6 <LoRaMacMlmeRequest+0x1ca>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b56c:	2413      	movs	r4, #19
 800b56e:	e01a      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b570:	2200      	movs	r2, #0
 800b572:	a904      	add	r1, sp, #16
 800b574:	2012      	movs	r0, #18
 800b576:	f000 fa9d 	bl	800bab4 <LoRaMacCommandsAddCmd>
 800b57a:	4604      	mov	r4, r0
 800b57c:	b198      	cbz	r0, 800b5a6 <LoRaMacMlmeRequest+0x1ca>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b57e:	2413      	movs	r4, #19
 800b580:	e011      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
            queueElement.RestrictCommonReadyToHandle = true;
 800b582:	2301      	movs	r3, #1
 800b584:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b588:	f000 f9de 	bl	800b948 <LoRaMacClassBIsAcquisitionInProgress>
 800b58c:	4604      	mov	r4, r0
 800b58e:	b108      	cbz	r0, 800b594 <LoRaMacMlmeRequest+0x1b8>
                status = LORAMAC_STATUS_BUSY;
 800b590:	2401      	movs	r4, #1
 800b592:	e008      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b594:	f000 f9d5 	bl	800b942 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b598:	2000      	movs	r0, #0
 800b59a:	f000 f9d7 	bl	800b94c <LoRaMacClassBBeaconTimerEvent>
    bool isAbpJoinPending = false;
 800b59e:	4626      	mov	r6, r4
                status = LORAMAC_STATUS_OK;
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	e000      	b.n	800b5a6 <LoRaMacMlmeRequest+0x1ca>
    switch( mlmeRequest->Type )
 800b5a4:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b5a6:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <LoRaMacMlmeRequest+0x20c>)
 800b5a8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b5ac:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b5ae:	b17c      	cbz	r4, 800b5d0 <LoRaMacMlmeRequest+0x1f4>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b5b0:	f000 fc8c 	bl	800becc <LoRaMacConfirmQueueGetCnt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f47f af1f 	bne.w	800b3f8 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <LoRaMacMlmeRequest+0x20c>)
 800b5bc:	2100      	movs	r1, #0
 800b5be:	f883 141a 	strb.w	r1, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b5c2:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b5c6:	f361 0282 	bfi	r2, r1, #2, #1
 800b5ca:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800b5ce:	e713      	b.n	800b3f8 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b5d0:	a805      	add	r0, sp, #20
 800b5d2:	f000 fbb1 	bl	800bd38 <LoRaMacConfirmQueueAdd>
        if( isAbpJoinPending == true )
 800b5d6:	2e00      	cmp	r6, #0
 800b5d8:	f43f af0e 	beq.w	800b3f8 <LoRaMacMlmeRequest+0x1c>
            AbpJoinPendingStart( );
 800b5dc:	f7fe fbec 	bl	8009db8 <AbpJoinPendingStart>
 800b5e0:	e70a      	b.n	800b3f8 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b5e2:	2403      	movs	r4, #3
 800b5e4:	e708      	b.n	800b3f8 <LoRaMacMlmeRequest+0x1c>
 800b5e6:	bf00      	nop
 800b5e8:	20000754 	.word	0x20000754
 800b5ec:	20000ba8 	.word	0x20000ba8
 800b5f0:	20008000 	.word	0x20008000

0800b5f4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	b091      	sub	sp, #68	@ 0x44
 800b5fa:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f000 80db 	beq.w	800b7b8 <LoRaMacMcpsRequest+0x1c4>
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b608:	f8c0 8010 	str.w	r8, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800b60c:	f7fe ff52 	bl	800a4b4 <LoRaMacIsBusy>
 800b610:	4607      	mov	r7, r0
 800b612:	b118      	cbz	r0, 800b61c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b614:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b616:	b011      	add	sp, #68	@ 0x44
 800b618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b61c:	ac06      	add	r4, sp, #24
 800b61e:	462e      	mov	r6, r5
 800b620:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b624:	f8c4 8000 	str.w	r8, [r4]
    macHdr.Value = 0;
 800b628:	4641      	mov	r1, r8
 800b62a:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b62e:	4c64      	ldr	r4, [pc, #400]	@ (800b7c0 <LoRaMacMcpsRequest+0x1cc>)
 800b630:	2214      	movs	r2, #20
 800b632:	4620      	mov	r0, r4
 800b634:	f003 fadb 	bl	800ebee <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	7063      	strb	r3, [r4, #1]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b63c:	4b61      	ldr	r3, [pc, #388]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b63e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b642:	2b02      	cmp	r3, #2
 800b644:	d071      	beq.n	800b72a <LoRaMacMcpsRequest+0x136>
    switch( request.Type )
 800b646:	f89d 9018 	ldrb.w	r9, [sp, #24]
 800b64a:	f1b9 0f01 	cmp.w	r9, #1
 800b64e:	d07f      	beq.n	800b750 <LoRaMacMcpsRequest+0x15c>
 800b650:	f1b9 0f03 	cmp.w	r9, #3
 800b654:	f000 808e 	beq.w	800b774 <LoRaMacMcpsRequest+0x180>
 800b658:	f1b9 0f00 	cmp.w	r9, #0
 800b65c:	f040 809a 	bne.w	800b794 <LoRaMacMcpsRequest+0x1a0>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b660:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800b664:	2202      	movs	r2, #2
 800b666:	f362 1347 	bfi	r3, r2, #5, #3
 800b66a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b66e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b672:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b678:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b67c:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800b680:	2701      	movs	r7, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b682:	2302      	movs	r3, #2
 800b684:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b688:	4e4e      	ldr	r6, [pc, #312]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b68a:	f896 307c 	ldrb.w	r3, [r6, #124]	@ 0x7c
 800b68e:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b692:	a90e      	add	r1, sp, #56	@ 0x38
 800b694:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b698:	f001 f94d 	bl	800c936 <RegionGetPhyParam>
 800b69c:	900d      	str	r0, [sp, #52]	@ 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b69e:	b244      	sxtb	r4, r0
 800b6a0:	45a3      	cmp	fp, r4
 800b6a2:	bfb8      	it	lt
 800b6a4:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b6a6:	f896 a11a 	ldrb.w	sl, [r6, #282]	@ 0x11a
 800b6aa:	f896 211d 	ldrb.w	r2, [r6, #285]	@ 0x11d
 800b6ae:	f896 1130 	ldrb.w	r1, [r6, #304]	@ 0x130
 800b6b2:	4650      	mov	r0, sl
 800b6b4:	f7fc fd62 	bl	800817c <CheckForMinimumAbpDatarate>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	b900      	cbnz	r0, 800b6be <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b6bc:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b6be:	2f00      	cmp	r7, #0
 800b6c0:	d074      	beq.n	800b7ac <LoRaMacMcpsRequest+0x1b8>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b6c2:	f1ba 0f00 	cmp.w	sl, #0
 800b6c6:	d000      	beq.n	800b6ca <LoRaMacMcpsRequest+0xd6>
 800b6c8:	b19b      	cbz	r3, 800b6f2 <LoRaMacMcpsRequest+0xfe>
            verify.DatarateParams.Datarate = datarate;
 800b6ca:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b6ce:	4b3d      	ldr	r3, [pc, #244]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b6d0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b6d4:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b6d8:	2205      	movs	r2, #5
 800b6da:	a90b      	add	r1, sp, #44	@ 0x2c
 800b6dc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b6e0:	f001 f947 	bl	800c972 <RegionVerify>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d069      	beq.n	800b7bc <LoRaMacMcpsRequest+0x1c8>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b6e8:	f99d 202c 	ldrsb.w	r2, [sp, #44]	@ 0x2c
 800b6ec:	4b35      	ldr	r3, [pc, #212]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b6ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b6f2:	4b35      	ldr	r3, [pc, #212]	@ (800b7c8 <LoRaMacMcpsRequest+0x1d4>)
 800b6f4:	f8d3 1498 	ldr.w	r1, [r3, #1176]	@ 0x498
 800b6f8:	4b32      	ldr	r3, [pc, #200]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b6fa:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800b6fe:	f7fd ff01 	bl	8009504 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	4643      	mov	r3, r8
 800b708:	9a05      	ldr	r2, [sp, #20]
 800b70a:	9904      	ldr	r1, [sp, #16]
 800b70c:	a80c      	add	r0, sp, #48	@ 0x30
 800b70e:	f7fe fe41 	bl	800a394 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b712:	2800      	cmp	r0, #0
 800b714:	d145      	bne.n	800b7a2 <LoRaMacMcpsRequest+0x1ae>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800b716:	4b2c      	ldr	r3, [pc, #176]	@ (800b7c8 <LoRaMacMcpsRequest+0x1d4>)
 800b718:	f883 9440 	strb.w	r9, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b71c:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800b728:	e041      	b.n	800b7ae <LoRaMacMcpsRequest+0x1ba>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b72a:	4b26      	ldr	r3, [pc, #152]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b72c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b730:	2b02      	cmp	r3, #2
 800b732:	d188      	bne.n	800b646 <LoRaMacMcpsRequest+0x52>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b734:	4b23      	ldr	r3, [pc, #140]	@ (800b7c4 <LoRaMacMcpsRequest+0x1d0>)
 800b736:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d183      	bne.n	800b646 <LoRaMacMcpsRequest+0x52>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b73e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b742:	2b00      	cmp	r3, #0
 800b744:	f47f af7f 	bne.w	800b646 <LoRaMacMcpsRequest+0x52>
        request.Type = MCPS_CONFIRMED;
 800b748:	2301      	movs	r3, #1
 800b74a:	f88d 3018 	strb.w	r3, [sp, #24]
 800b74e:	e77a      	b.n	800b646 <LoRaMacMcpsRequest+0x52>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b750:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800b754:	2204      	movs	r2, #4
 800b756:	f362 1347 	bfi	r3, r2, #5, #3
 800b75a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Confirmed.fPort;
 800b75e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b762:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b764:	9b08      	ldr	r3, [sp, #32]
 800b766:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b768:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b76c:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800b770:	2701      	movs	r7, #1
            break;
 800b772:	e786      	b.n	800b682 <LoRaMacMcpsRequest+0x8e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b774:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800b778:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800b77c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b780:	9b07      	ldr	r3, [sp, #28]
 800b782:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b784:	f8bd 8020 	ldrh.w	r8, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b788:	f99d b022 	ldrsb.w	fp, [sp, #34]	@ 0x22
            readyToSend = true;
 800b78c:	2701      	movs	r7, #1
    uint8_t fPort = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	9304      	str	r3, [sp, #16]
            break;
 800b792:	e776      	b.n	800b682 <LoRaMacMcpsRequest+0x8e>
    switch( request.Type )
 800b794:	f04f 0b00 	mov.w	fp, #0
 800b798:	f8cd b014 	str.w	fp, [sp, #20]
 800b79c:	f8cd b010 	str.w	fp, [sp, #16]
 800b7a0:	e76f      	b.n	800b682 <LoRaMacMcpsRequest+0x8e>
            MacCtx.NodeAckRequested = false;
 800b7a2:	4b09      	ldr	r3, [pc, #36]	@ (800b7c8 <LoRaMacMcpsRequest+0x1d4>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
 800b7aa:	e000      	b.n	800b7ae <LoRaMacMcpsRequest+0x1ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b7ac:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b7ae:	4b06      	ldr	r3, [pc, #24]	@ (800b7c8 <LoRaMacMcpsRequest+0x1d4>)
 800b7b0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b7b4:	612b      	str	r3, [r5, #16]
    return status;
 800b7b6:	e72e      	b.n	800b616 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b7b8:	2003      	movs	r0, #3
 800b7ba:	e72c      	b.n	800b616 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b7bc:	2003      	movs	r0, #3
 800b7be:	e72a      	b.n	800b616 <LoRaMacMcpsRequest+0x22>
 800b7c0:	20000b94 	.word	0x20000b94
 800b7c4:	20008000 	.word	0x20008000
 800b7c8:	20000754 	.word	0x20000754

0800b7cc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b7d2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b7d6:	220f      	movs	r2, #15
 800b7d8:	a901      	add	r1, sp, #4
 800b7da:	4b09      	ldr	r3, [pc, #36]	@ (800b800 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b7dc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b7e0:	f001 f8c7 	bl	800c972 <RegionVerify>
 800b7e4:	b148      	cbz	r0, 800b7fa <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b7e6:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b7e8:	f883 411c 	strb.w	r4, [r3, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b7ec:	4a05      	ldr	r2, [pc, #20]	@ (800b804 <LoRaMacTestSetDutyCycleOn+0x38>)
 800b7ee:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b7f2:	f043 0320 	orr.w	r3, r3, #32
 800b7f6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800b7fa:	b002      	add	sp, #8
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop
 800b800:	20008000 	.word	0x20008000
 800b804:	20000754 	.word	0x20000754

0800b808 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b808:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b80a:	f7ff f8b1 	bl	800a970 <LoRaMacStop>
 800b80e:	b110      	cbz	r0, 800b816 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b810:	2401      	movs	r4, #1
    }
}
 800b812:	4620      	mov	r0, r4
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b818:	4d0a      	ldr	r5, [pc, #40]	@ (800b844 <LoRaMacDeInitialization+0x3c>)
 800b81a:	4628      	mov	r0, r5
 800b81c:	f005 fbb8 	bl	8010f90 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b820:	f105 0018 	add.w	r0, r5, #24
 800b824:	f005 fbb4 	bl	8010f90 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b828:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800b82c:	f005 fbb0 	bl	8010f90 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b830:	f000 f89a 	bl	800b968 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800b834:	2000      	movs	r0, #0
 800b836:	f7fe fb63 	bl	8009f00 <ResetMacParameters>
        Radio.Sleep( );
 800b83a:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <LoRaMacDeInitialization+0x40>)
 800b83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b840:	e7e7      	b.n	800b812 <LoRaMacDeInitialization+0xa>
 800b842:	bf00      	nop
 800b844:	20000abc 	.word	0x20000abc
 800b848:	08013274 	.word	0x08013274

0800b84c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	b08b      	sub	sp, #44	@ 0x2c
 800b852:	460f      	mov	r7, r1
 800b854:	4616      	mov	r6, r2
 800b856:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b858:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b85c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b860:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b864:	6842      	ldr	r2, [r0, #4]
 800b866:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b868:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b86a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b86e:	f1b8 0f00 	cmp.w	r8, #0
 800b872:	d109      	bne.n	800b888 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b874:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b878:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b87c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b880:	4640      	mov	r0, r8
 800b882:	b00b      	add	sp, #44	@ 0x2c
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b88a:	2302      	movs	r3, #2
 800b88c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b890:	7bc3      	ldrb	r3, [r0, #15]
 800b892:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b896:	a908      	add	r1, sp, #32
 800b898:	7c00      	ldrb	r0, [r0, #16]
 800b89a:	f001 f84c 	bl	800c936 <RegionGetPhyParam>
 800b89e:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b8a0:	b243      	sxtb	r3, r0
 800b8a2:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b8a4:	454b      	cmp	r3, r9
 800b8a6:	bfb8      	it	lt
 800b8a8:	464b      	movlt	r3, r9
 800b8aa:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b8ac:	6862      	ldr	r2, [r4, #4]
 800b8ae:	8923      	ldrh	r3, [r4, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d201      	bcs.n	800b8b8 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b8b4:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b8b8:	8961      	ldrh	r1, [r4, #10]
 800b8ba:	440b      	add	r3, r1
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d224      	bcs.n	800b90a <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b8c0:	6863      	ldr	r3, [r4, #4]
 800b8c2:	8921      	ldrh	r1, [r4, #8]
 800b8c4:	8962      	ldrh	r2, [r4, #10]
 800b8c6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b8ca:	4283      	cmp	r3, r0
 800b8cc:	d332      	bcc.n	800b934 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b8ce:	1a5b      	subs	r3, r3, r1
 800b8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8d4:	fb02 3311 	mls	r3, r2, r1, r3
 800b8d8:	bb7b      	cbnz	r3, 800b93a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	4599      	cmp	r9, r3
 800b8de:	dc03      	bgt.n	800b8e8 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b8e0:	7823      	ldrb	r3, [r4, #0]
 800b8e2:	b9eb      	cbnz	r3, 800b920 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b8e4:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b8e8:	2321      	movs	r3, #33	@ 0x21
 800b8ea:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b8ee:	9b00      	ldr	r3, [sp, #0]
 800b8f0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b8f4:	7be3      	ldrb	r3, [r4, #15]
 800b8f6:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b8fa:	a908      	add	r1, sp, #32
 800b8fc:	7c20      	ldrb	r0, [r4, #16]
 800b8fe:	f001 f81a 	bl	800c936 <RegionGetPhyParam>
 800b902:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b904:	fa4f f980 	sxtb.w	r9, r0
 800b908:	e7b4      	b.n	800b874 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b90a:	230a      	movs	r3, #10
 800b90c:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b910:	a908      	add	r1, sp, #32
 800b912:	7c20      	ldrb	r0, [r4, #16]
 800b914:	f001 f80f 	bl	800c936 <RegionGetPhyParam>
 800b918:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b91a:	fa4f fa80 	sxtb.w	sl, r0
 800b91e:	e7cf      	b.n	800b8c0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b920:	2302      	movs	r3, #2
 800b922:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b926:	a903      	add	r1, sp, #12
 800b928:	7c20      	ldrb	r0, [r4, #16]
 800b92a:	f001 f81b 	bl	800c964 <RegionInitDefaults>
                    nbTrans = 1;
 800b92e:	f04f 0b01 	mov.w	fp, #1
 800b932:	e7d9      	b.n	800b8e8 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b934:	f8dd 9000 	ldr.w	r9, [sp]
 800b938:	e79c      	b.n	800b874 <LoRaMacAdrCalcNext+0x28>
 800b93a:	f8dd 9000 	ldr.w	r9, [sp]
 800b93e:	e799      	b.n	800b874 <LoRaMacAdrCalcNext+0x28>

0800b940 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b940:	4770      	bx	lr

0800b942 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b942:	4770      	bx	lr

0800b944 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b944:	4770      	bx	lr

0800b946 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b946:	4770      	bx	lr

0800b948 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b948:	2000      	movs	r0, #0
 800b94a:	4770      	bx	lr

0800b94c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b94c:	4770      	bx	lr

0800b94e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b94e:	4770      	bx	lr

0800b950 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b950:	4770      	bx	lr

0800b952 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b952:	2000      	movs	r0, #0
 800b954:	4770      	bx	lr

0800b956 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b956:	2000      	movs	r0, #0
 800b958:	4770      	bx	lr

0800b95a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b95a:	2000      	movs	r0, #0
 800b95c:	4770      	bx	lr

0800b95e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b95e:	2000      	movs	r0, #0
 800b960:	4770      	bx	lr

0800b962 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b962:	2000      	movs	r0, #0
 800b964:	4770      	bx	lr

0800b966 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b966:	4770      	bx	lr

0800b968 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b968:	4770      	bx	lr

0800b96a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b96a:	4770      	bx	lr

0800b96c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b96c:	2002      	movs	r0, #2
 800b96e:	4770      	bx	lr

0800b970 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b970:	2002      	movs	r0, #2
 800b972:	4770      	bx	lr

0800b974 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b974:	2002      	movs	r0, #2
 800b976:	4770      	bx	lr

0800b978 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b978:	4770      	bx	lr

0800b97a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b97a:	2000      	movs	r0, #0
 800b97c:	4770      	bx	lr

0800b97e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b97e:	4770      	bx	lr

0800b980 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b980:	4770      	bx	lr

0800b982 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b982:	2000      	movs	r0, #0
 800b984:	4770      	bx	lr

0800b986 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b986:	2000      	movs	r0, #0
 800b988:	4770      	bx	lr

0800b98a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b98a:	4770      	bx	lr

0800b98c <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b98c:	4770      	bx	lr

0800b98e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b98e:	4770      	bx	lr

0800b990 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b990:	2300      	movs	r3, #0
 800b992:	2b0f      	cmp	r3, #15
 800b994:	d804      	bhi.n	800b9a0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b996:	5cc2      	ldrb	r2, [r0, r3]
 800b998:	b922      	cbnz	r2, 800b9a4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b99a:	3301      	adds	r3, #1
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	e7f8      	b.n	800b992 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	4770      	bx	lr
            return false;
 800b9a4:	2000      	movs	r0, #0
}
 800b9a6:	4770      	bx	lr

0800b9a8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b9a8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b9aa:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b9ac:	012c      	lsls	r4, r5, #4
 800b9ae:	3408      	adds	r4, #8
 800b9b0:	4b06      	ldr	r3, [pc, #24]	@ (800b9cc <MallocNewMacCommandSlot+0x24>)
 800b9b2:	441c      	add	r4, r3
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff ffeb 	bl	800b990 <IsSlotFree>
 800b9ba:	b920      	cbnz	r0, 800b9c6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800b9bc:	3501      	adds	r5, #1
 800b9be:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800b9c0:	2d20      	cmp	r5, #32
 800b9c2:	d1f3      	bne.n	800b9ac <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b9c4:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20000c88 	.word	0x20000c88

0800b9d0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b9d0:	b120      	cbz	r0, 800b9dc <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b9d6:	6042      	str	r2, [r0, #4]

    return true;
 800b9d8:	2001      	movs	r0, #1
 800b9da:	4770      	bx	lr
        return false;
 800b9dc:	2000      	movs	r0, #0
}
 800b9de:	4770      	bx	lr

0800b9e0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	b160      	cbz	r0, 800b9fe <LinkedListAdd+0x1e>
 800b9e4:	b169      	cbz	r1, 800ba02 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b9e6:	6802      	ldr	r2, [r0, #0]
 800b9e8:	b13a      	cbz	r2, 800b9fa <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	b102      	cbz	r2, 800b9f0 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b9ee:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b9f4:	6059      	str	r1, [r3, #4]

    return true;
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	4770      	bx	lr
        list->First = element;
 800b9fa:	6001      	str	r1, [r0, #0]
 800b9fc:	e7f5      	b.n	800b9ea <LinkedListAdd+0xa>
        return false;
 800b9fe:	2000      	movs	r0, #0
 800ba00:	4770      	bx	lr
 800ba02:	2000      	movs	r0, #0
}
 800ba04:	4770      	bx	lr

0800ba06 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ba06:	b160      	cbz	r0, 800ba22 <LinkedListGetPrevious+0x1c>
 800ba08:	b161      	cbz	r1, 800ba24 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800ba0a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800ba0c:	4281      	cmp	r1, r0
 800ba0e:	d102      	bne.n	800ba16 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800ba10:	2000      	movs	r0, #0
    }

    return curElement;
}
 800ba12:	4770      	bx	lr
            curElement = curElement->Next;
 800ba14:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d0fb      	beq.n	800ba12 <LinkedListGetPrevious+0xc>
 800ba1a:	6803      	ldr	r3, [r0, #0]
 800ba1c:	428b      	cmp	r3, r1
 800ba1e:	d1f9      	bne.n	800ba14 <LinkedListGetPrevious+0xe>
 800ba20:	4770      	bx	lr
 800ba22:	4770      	bx	lr
        return NULL;
 800ba24:	4608      	mov	r0, r1
 800ba26:	4770      	bx	lr

0800ba28 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ba28:	b1b8      	cbz	r0, 800ba5a <LinkedListRemove+0x32>
{
 800ba2a:	b538      	push	{r3, r4, r5, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800ba30:	b1a9      	cbz	r1, 800ba5e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800ba32:	f7ff ffe8 	bl	800ba06 <LinkedListGetPrevious>

    if( list->First == element )
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	d009      	beq.n	800ba50 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800ba3c:	686b      	ldr	r3, [r5, #4]
 800ba3e:	42a3      	cmp	r3, r4
 800ba40:	d009      	beq.n	800ba56 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800ba42:	b108      	cbz	r0, 800ba48 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	6023      	str	r3, [r4, #0]

    return true;
 800ba4c:	2001      	movs	r0, #1
}
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	602b      	str	r3, [r5, #0]
 800ba54:	e7f2      	b.n	800ba3c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800ba56:	6068      	str	r0, [r5, #4]
 800ba58:	e7f3      	b.n	800ba42 <LinkedListRemove+0x1a>
        return false;
 800ba5a:	2000      	movs	r0, #0
}
 800ba5c:	4770      	bx	lr
        return false;
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e7f5      	b.n	800ba4e <LinkedListRemove+0x26>
	...

0800ba64 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800ba64:	2811      	cmp	r0, #17
 800ba66:	d805      	bhi.n	800ba74 <IsSticky+0x10>
 800ba68:	4b03      	ldr	r3, [pc, #12]	@ (800ba78 <IsSticky+0x14>)
 800ba6a:	fa23 f000 	lsr.w	r0, r3, r0
 800ba6e:	f000 0001 	and.w	r0, r0, #1
 800ba72:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800ba74:	2000      	movs	r0, #0
    }
}
 800ba76:	4770      	bx	lr
 800ba78:	00020720 	.word	0x00020720

0800ba7c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	4770      	bx	lr

0800ba80 <FreeMacCommandSlot>:
    if( slot == NULL )
 800ba80:	b130      	cbz	r0, 800ba90 <FreeMacCommandSlot+0x10>
{
 800ba82:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ba84:	2210      	movs	r2, #16
 800ba86:	2100      	movs	r1, #0
 800ba88:	f003 f8b1 	bl	800ebee <memset1>
    return true;
 800ba8c:	2001      	movs	r0, #1
}
 800ba8e:	bd08      	pop	{r3, pc}
        return false;
 800ba90:	2000      	movs	r0, #0
}
 800ba92:	4770      	bx	lr

0800ba94 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ba94:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ba96:	4c06      	ldr	r4, [pc, #24]	@ (800bab0 <LoRaMacCommandsInit+0x1c>)
 800ba98:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f003 f8a5 	bl	800ebee <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800baa4:	4620      	mov	r0, r4
 800baa6:	f7ff ff93 	bl	800b9d0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800baaa:	2000      	movs	r0, #0
 800baac:	bd10      	pop	{r4, pc}
 800baae:	bf00      	nop
 800bab0:	20000c88 	.word	0x20000c88

0800bab4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800bab4:	b321      	cbz	r1, 800bb00 <LoRaMacCommandsAddCmd+0x4c>
{
 800bab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab8:	4605      	mov	r5, r0
 800baba:	4614      	mov	r4, r2
 800babc:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800babe:	f7ff ff73 	bl	800b9a8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800bac2:	4606      	mov	r6, r0
 800bac4:	b1f0      	cbz	r0, 800bb04 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800bac6:	4601      	mov	r1, r0
 800bac8:	4810      	ldr	r0, [pc, #64]	@ (800bb0c <LoRaMacCommandsAddCmd+0x58>)
 800baca:	f7ff ff89 	bl	800b9e0 <LinkedListAdd>
 800bace:	b1d8      	cbz	r0, 800bb08 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800bad0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800bad2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800bad4:	b2a2      	uxth	r2, r4
 800bad6:	4639      	mov	r1, r7
 800bad8:	1d70      	adds	r0, r6, #5
 800bada:	f003 f870 	bl	800ebbe <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800bade:	4628      	mov	r0, r5
 800bae0:	f7ff ffc0 	bl	800ba64 <IsSticky>
 800bae4:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800bae6:	4628      	mov	r0, r5
 800bae8:	f7ff ffc8 	bl	800ba7c <IsConfirmationRequired>
 800baec:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800baee:	4a07      	ldr	r2, [pc, #28]	@ (800bb0c <LoRaMacCommandsAddCmd+0x58>)
 800baf0:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800baf4:	4423      	add	r3, r4
 800baf6:	3301      	adds	r3, #1
 800baf8:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800bafc:	2000      	movs	r0, #0
}
 800bafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bb00:	2001      	movs	r0, #1
}
 800bb02:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800bb04:	2002      	movs	r0, #2
 800bb06:	e7fa      	b.n	800bafe <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800bb08:	2005      	movs	r0, #5
 800bb0a:	e7f8      	b.n	800bafe <LoRaMacCommandsAddCmd+0x4a>
 800bb0c:	20000c88 	.word	0x20000c88

0800bb10 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800bb10:	b1a0      	cbz	r0, 800bb3c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800bb12:	b510      	push	{r4, lr}
 800bb14:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800bb16:	4601      	mov	r1, r0
 800bb18:	480b      	ldr	r0, [pc, #44]	@ (800bb48 <LoRaMacCommandsRemoveCmd+0x38>)
 800bb1a:	f7ff ff85 	bl	800ba28 <LinkedListRemove>
 800bb1e:	b178      	cbz	r0, 800bb40 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800bb20:	4a09      	ldr	r2, [pc, #36]	@ (800bb48 <LoRaMacCommandsRemoveCmd+0x38>)
 800bb22:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800bb26:	68a1      	ldr	r1, [r4, #8]
 800bb28:	1a5b      	subs	r3, r3, r1
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7ff ffa5 	bl	800ba80 <FreeMacCommandSlot>
 800bb36:	b128      	cbz	r0, 800bb44 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800bb38:	2000      	movs	r0, #0
}
 800bb3a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bb3c:	2001      	movs	r0, #1
}
 800bb3e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800bb40:	2003      	movs	r0, #3
 800bb42:	e7fa      	b.n	800bb3a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800bb44:	2005      	movs	r0, #5
 800bb46:	e7f8      	b.n	800bb3a <LoRaMacCommandsRemoveCmd+0x2a>
 800bb48:	20000c88 	.word	0x20000c88

0800bb4c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800bb4c:	4b06      	ldr	r3, [pc, #24]	@ (800bb68 <LoRaMacCommandsGetCmd+0x1c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800bb50:	e000      	b.n	800bb54 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800bb52:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800bb54:	b113      	cbz	r3, 800bb5c <LoRaMacCommandsGetCmd+0x10>
 800bb56:	791a      	ldrb	r2, [r3, #4]
 800bb58:	4282      	cmp	r2, r0
 800bb5a:	d1fa      	bne.n	800bb52 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800bb5c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800bb5e:	b10b      	cbz	r3, 800bb64 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800bb60:	2000      	movs	r0, #0
 800bb62:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800bb64:	2003      	movs	r0, #3
}
 800bb66:	4770      	bx	lr
 800bb68:	20000c88 	.word	0x20000c88

0800bb6c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800bb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb98 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800bb6e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bb70:	b120      	cbz	r0, 800bb7c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800bb72:	7b03      	ldrb	r3, [r0, #12]
 800bb74:	b11b      	cbz	r3, 800bb7e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800bb76:	6800      	ldr	r0, [r0, #0]
 800bb78:	e7fa      	b.n	800bb70 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	4770      	bx	lr
{
 800bb7e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800bb80:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800bb82:	f7ff ffc5 	bl	800bb10 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800bb86:	4620      	mov	r0, r4
    while( curElement != NULL )
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d0f6      	beq.n	800bb7a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800bb8c:	7b03      	ldrb	r3, [r0, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0f6      	beq.n	800bb80 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	e7f8      	b.n	800bb88 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800bb96:	bf00      	nop
 800bb98:	20000c88 	.word	0x20000c88

0800bb9c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800bb9c:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bbcc <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800bba0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bba2:	e000      	b.n	800bba6 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800bba4:	4634      	mov	r4, r6
    while( curElement != NULL )
 800bba6:	b17c      	cbz	r4, 800bbc8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800bba8:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800bbaa:	7925      	ldrb	r5, [r4, #4]
 800bbac:	4628      	mov	r0, r5
 800bbae:	f7ff ff59 	bl	800ba64 <IsSticky>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0f6      	beq.n	800bba4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f7ff ff60 	bl	800ba7c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d1f1      	bne.n	800bba4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f7ff ffa5 	bl	800bb10 <LoRaMacCommandsRemoveCmd>
 800bbc6:	e7ed      	b.n	800bba4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bbc8:	2000      	movs	r0, #0
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	20000c88 	.word	0x20000c88

0800bbd0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800bbd0:	b128      	cbz	r0, 800bbde <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800bbd2:	4a04      	ldr	r2, [pc, #16]	@ (800bbe4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800bbd4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800bbd8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800bbda:	2000      	movs	r0, #0
 800bbdc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bbde:	2001      	movs	r0, #1
}
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	20000c88 	.word	0x20000c88

0800bbe8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800bbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800bbec:	4b16      	ldr	r3, [pc, #88]	@ (800bc48 <LoRaMacCommandsSerializeCmds+0x60>)
 800bbee:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800bbf0:	b32a      	cbz	r2, 800bc3e <LoRaMacCommandsSerializeCmds+0x56>
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	4688      	mov	r8, r1
 800bbf6:	4616      	mov	r6, r2
 800bbf8:	b319      	cbz	r1, 800bc42 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800bbfa:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800bbfc:	b194      	cbz	r4, 800bc24 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800bbfe:	1a7a      	subs	r2, r7, r1
 800bc00:	68a3      	ldr	r3, [r4, #8]
 800bc02:	3301      	adds	r3, #1
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d30d      	bcc.n	800bc24 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800bc08:	1c4d      	adds	r5, r1, #1
 800bc0a:	b2ed      	uxtb	r5, r5
 800bc0c:	7923      	ldrb	r3, [r4, #4]
 800bc0e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800bc10:	8922      	ldrh	r2, [r4, #8]
 800bc12:	1d61      	adds	r1, r4, #5
 800bc14:	1970      	adds	r0, r6, r5
 800bc16:	f002 ffd2 	bl	800ebbe <memcpy1>
            itr += curElement->PayloadSize;
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	441d      	add	r5, r3
 800bc1e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800bc20:	6824      	ldr	r4, [r4, #0]
 800bc22:	e7eb      	b.n	800bbfc <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800bc24:	b12c      	cbz	r4, 800bc32 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800bc26:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f7ff ff71 	bl	800bb10 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800bc2e:	462c      	mov	r4, r5
 800bc30:	e7f8      	b.n	800bc24 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800bc32:	4640      	mov	r0, r8
 800bc34:	f7ff ffcc 	bl	800bbd0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800bc38:	2000      	movs	r0, #0
}
 800bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bc3e:	2001      	movs	r0, #1
 800bc40:	e7fb      	b.n	800bc3a <LoRaMacCommandsSerializeCmds+0x52>
 800bc42:	2001      	movs	r0, #1
 800bc44:	e7f9      	b.n	800bc3a <LoRaMacCommandsSerializeCmds+0x52>
 800bc46:	bf00      	nop
 800bc48:	20000c88 	.word	0x20000c88

0800bc4c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800bc4c:	1e83      	subs	r3, r0, #2
 800bc4e:	2b11      	cmp	r3, #17
 800bc50:	d80a      	bhi.n	800bc68 <LoRaMacCommandsGetCmdSize+0x1c>
 800bc52:	e8df f003 	tbb	[pc, r3]
 800bc56:	0b23      	.short	0x0b23
 800bc58:	110f240d 	.word	0x110f240d
 800bc5c:	09171513 	.word	0x09171513
 800bc60:	09091909 	.word	0x09091909
 800bc64:	211f1d1b 	.word	0x211f1d1b
 800bc68:	2000      	movs	r0, #0
 800bc6a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800bc6c:	2005      	movs	r0, #5
            break;
 800bc6e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800bc70:	2002      	movs	r0, #2
            break;
 800bc72:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800bc74:	2001      	movs	r0, #1
            break;
 800bc76:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800bc78:	2006      	movs	r0, #6
            break;
 800bc7a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800bc7c:	2002      	movs	r0, #2
            break;
 800bc7e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800bc80:	2002      	movs	r0, #2
            break;
 800bc82:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800bc84:	2005      	movs	r0, #5
            break;
 800bc86:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800bc88:	2006      	movs	r0, #6
            break;
 800bc8a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800bc8c:	2001      	movs	r0, #1
            break;
 800bc8e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800bc90:	2005      	movs	r0, #5
            break;
 800bc92:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800bc94:	2004      	movs	r0, #4
            break;
 800bc96:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800bc98:	2004      	movs	r0, #4
            break;
 800bc9a:	4770      	bx	lr
            cidSize = 3;
 800bc9c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800bc9e:	4770      	bx	lr

0800bca0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bca0:	4b03      	ldr	r3, [pc, #12]	@ (800bcb0 <IncreaseBufferPointer+0x10>)
 800bca2:	4298      	cmp	r0, r3
 800bca4:	d001      	beq.n	800bcaa <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800bca6:	3004      	adds	r0, #4
 800bca8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bcaa:	4802      	ldr	r0, [pc, #8]	@ (800bcb4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	20000eb0 	.word	0x20000eb0
 800bcb4:	20000ea0 	.word	0x20000ea0

0800bcb8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800bcb8:	b108      	cbz	r0, 800bcbe <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800bcba:	2000      	movs	r0, #0
 800bcbc:	4770      	bx	lr
        return true;
 800bcbe:	2001      	movs	r0, #1
}
 800bcc0:	4770      	bx	lr

0800bcc2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bcc2:	2804      	cmp	r0, #4
 800bcc4:	d801      	bhi.n	800bcca <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	4770      	bx	lr
        return true;
 800bcca:	2001      	movs	r0, #1
}
 800bccc:	4770      	bx	lr
	...

0800bcd0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd0c <GetElement+0x3c>)
 800bcd8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff ffeb 	bl	800bcb8 <IsListEmpty>
 800bce2:	b970      	cbnz	r0, 800bd02 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800bce4:	2500      	movs	r5, #0
 800bce6:	42af      	cmp	r7, r5
 800bce8:	d909      	bls.n	800bcfe <GetElement+0x2e>
    {
        if( element->Request == request )
 800bcea:	7823      	ldrb	r3, [r4, #0]
 800bcec:	42b3      	cmp	r3, r6
 800bcee:	d00a      	beq.n	800bd06 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f7ff ffd5 	bl	800bca0 <IncreaseBufferPointer>
 800bcf6:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800bcf8:	3501      	adds	r5, #1
 800bcfa:	b2ed      	uxtb	r5, r5
 800bcfc:	e7f3      	b.n	800bce6 <GetElement+0x16>
    }

    return NULL;
 800bcfe:	2000      	movs	r0, #0
}
 800bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800bd02:	2000      	movs	r0, #0
 800bd04:	e7fc      	b.n	800bd00 <GetElement+0x30>
            return element;
 800bd06:	4620      	mov	r0, r4
 800bd08:	e7fa      	b.n	800bd00 <GetElement+0x30>
 800bd0a:	bf00      	nop
 800bd0c:	20000e94 	.word	0x20000e94

0800bd10 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800bd10:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800bd12:	4c08      	ldr	r4, [pc, #32]	@ (800bd34 <LoRaMacConfirmQueueInit+0x24>)
 800bd14:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bd1c:	f104 000c 	add.w	r0, r4, #12
 800bd20:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bd22:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800bd24:	2214      	movs	r2, #20
 800bd26:	21ff      	movs	r1, #255	@ 0xff
 800bd28:	f002 ff61 	bl	800ebee <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800bd32:	bd10      	pop	{r4, pc}
 800bd34:	20000e94 	.word	0x20000e94

0800bd38 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd7c <LoRaMacConfirmQueueAdd+0x44>)
 800bd3e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bd42:	f7ff ffbe 	bl	800bcc2 <IsListFull>
 800bd46:	b9b8      	cbnz	r0, 800bd78 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800bd48:	4c0c      	ldr	r4, [pc, #48]	@ (800bd7c <LoRaMacConfirmQueueAdd+0x44>)
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	782a      	ldrb	r2, [r5, #0]
 800bd4e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	786a      	ldrb	r2, [r5, #1]
 800bd54:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800bd56:	68a3      	ldr	r3, [r4, #8]
 800bd58:	78ea      	ldrb	r2, [r5, #3]
 800bd5a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800bd5c:	68a3      	ldr	r3, [r4, #8]
 800bd5e:	78aa      	ldrb	r2, [r5, #2]
 800bd60:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800bd62:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bd66:	3301      	adds	r3, #1
 800bd68:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800bd6c:	68a0      	ldr	r0, [r4, #8]
 800bd6e:	f7ff ff97 	bl	800bca0 <IncreaseBufferPointer>
 800bd72:	60a0      	str	r0, [r4, #8]

    return true;
 800bd74:	2001      	movs	r0, #1
}
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e7fc      	b.n	800bd76 <LoRaMacConfirmQueueAdd+0x3e>
 800bd7c:	20000e94 	.word	0x20000e94

0800bd80 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800bd80:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bd82:	4b09      	ldr	r3, [pc, #36]	@ (800bda8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800bd84:	f893 4020 	ldrb.w	r4, [r3, #32]
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f7ff ff95 	bl	800bcb8 <IsListEmpty>
 800bd8e:	b948      	cbnz	r0, 800bda4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800bd90:	4d05      	ldr	r5, [pc, #20]	@ (800bda8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800bd92:	3c01      	subs	r4, #1
 800bd94:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800bd98:	6868      	ldr	r0, [r5, #4]
 800bd9a:	f7ff ff81 	bl	800bca0 <IncreaseBufferPointer>
 800bd9e:	6068      	str	r0, [r5, #4]

    return true;
 800bda0:	2001      	movs	r0, #1
}
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800bda4:	2000      	movs	r0, #0
 800bda6:	e7fc      	b.n	800bda2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800bda8:	20000e94 	.word	0x20000e94

0800bdac <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4605      	mov	r5, r0
 800bdb0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800bdb2:	4b08      	ldr	r3, [pc, #32]	@ (800bdd4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800bdb4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bdb8:	f7ff ff7e 	bl	800bcb8 <IsListEmpty>
 800bdbc:	b948      	cbnz	r0, 800bdd2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bdbe:	4b05      	ldr	r3, [pc, #20]	@ (800bdd4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800bdc0:	689a      	ldr	r2, [r3, #8]
 800bdc2:	6859      	ldr	r1, [r3, #4]
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f7ff ff83 	bl	800bcd0 <GetElement>
        if( element != NULL )
 800bdca:	b110      	cbz	r0, 800bdd2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800bdcc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800bdce:	2201      	movs	r2, #1
 800bdd0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20000e94 	.word	0x20000e94

0800bdd8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800bddc:	4b09      	ldr	r3, [pc, #36]	@ (800be04 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800bdde:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bde2:	f7ff ff69 	bl	800bcb8 <IsListEmpty>
 800bde6:	b940      	cbnz	r0, 800bdfa <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bde8:	4b06      	ldr	r3, [pc, #24]	@ (800be04 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	6859      	ldr	r1, [r3, #4]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff ff6e 	bl	800bcd0 <GetElement>
        if( element != NULL )
 800bdf4:	b118      	cbz	r0, 800bdfe <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800bdf6:	7840      	ldrb	r0, [r0, #1]
 800bdf8:	e000      	b.n	800bdfc <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdfa:	2001      	movs	r0, #1
}
 800bdfc:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdfe:	2001      	movs	r0, #1
 800be00:	e7fc      	b.n	800bdfc <LoRaMacConfirmQueueGetStatus+0x24>
 800be02:	bf00      	nop
 800be04:	20000e94 	.word	0x20000e94

0800be08 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800be0c:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800be0e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800be10:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800be14:	f893 0020 	ldrb.w	r0, [r3, #32]
 800be18:	f7ff ff4e 	bl	800bcb8 <IsListEmpty>
 800be1c:	b150      	cbz	r0, 800be34 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800be20:	2301      	movs	r3, #1
 800be22:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800be24:	4620      	mov	r0, r4
 800be26:	f7ff ff3b 	bl	800bca0 <IncreaseBufferPointer>
 800be2a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800be2c:	4b04      	ldr	r3, [pc, #16]	@ (800be40 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	4283      	cmp	r3, r0
 800be32:	d0f4      	beq.n	800be1e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800be34:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800be36:	78e3      	ldrb	r3, [r4, #3]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1f3      	bne.n	800be24 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800be3c:	e7f0      	b.n	800be20 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800be3e:	bf00      	nop
 800be40:	20000e94 	.word	0x20000e94

0800be44 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800be44:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800be46:	4b04      	ldr	r3, [pc, #16]	@ (800be58 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	6859      	ldr	r1, [r3, #4]
 800be4c:	f7ff ff40 	bl	800bcd0 <GetElement>
 800be50:	b100      	cbz	r0, 800be54 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800be52:	2001      	movs	r0, #1
    }
    return false;
}
 800be54:	bd08      	pop	{r3, pc}
 800be56:	bf00      	nop
 800be58:	20000e94 	.word	0x20000e94

0800be5c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be5e:	b083      	sub	sp, #12
 800be60:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800be62:	4b19      	ldr	r3, [pc, #100]	@ (800bec8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800be64:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800be68:	2204      	movs	r2, #4
 800be6a:	2100      	movs	r1, #0
 800be6c:	eb0d 0002 	add.w	r0, sp, r2
 800be70:	f002 febd 	bl	800ebee <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800be74:	2400      	movs	r4, #0
 800be76:	e00d      	b.n	800be94 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800be7e:	785a      	ldrb	r2, [r3, #1]
 800be80:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800be84:	78db      	ldrb	r3, [r3, #3]
 800be86:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800be8a:	f7ff ff79 	bl	800bd80 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800be8e:	b1a5      	cbz	r5, 800beba <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800be90:	3401      	adds	r4, #1
 800be92:	b2e4      	uxtb	r4, r4
 800be94:	42bc      	cmp	r4, r7
 800be96:	d214      	bcs.n	800bec2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800be98:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	7812      	ldrb	r2, [r2, #0]
 800be9e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	7852      	ldrb	r2, [r2, #1]
 800bea4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800beaa:	2d00      	cmp	r5, #0
 800beac:	d0e4      	beq.n	800be78 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800beae:	4b06      	ldr	r3, [pc, #24]	@ (800bec8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	4630      	mov	r0, r6
 800beb6:	4798      	blx	r3
 800beb8:	e7e7      	b.n	800be8a <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800beba:	a801      	add	r0, sp, #4
 800bebc:	f7ff ff3c 	bl	800bd38 <LoRaMacConfirmQueueAdd>
 800bec0:	e7e6      	b.n	800be90 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800bec2:	b003      	add	sp, #12
 800bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20000e94 	.word	0x20000e94

0800becc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800becc:	4b01      	ldr	r3, [pc, #4]	@ (800bed4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800bece:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bed2:	4770      	bx	lr
 800bed4:	20000e94 	.word	0x20000e94

0800bed8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800bed8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800beda:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <LoRaMacConfirmQueueIsFull+0x10>)
 800bedc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bee0:	f7ff feef 	bl	800bcc2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800bee4:	bd08      	pop	{r3, pc}
 800bee6:	bf00      	nop
 800bee8:	20000e94 	.word	0x20000e94

0800beec <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800beec:	b410      	push	{r4}
 800beee:	9c01      	ldr	r4, [sp, #4]
 800bef0:	9902      	ldr	r1, [sp, #8]
 800bef2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800bef4:	b1da      	cbz	r2, 800bf2e <PrepareB0+0x42>
 800bef6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800bef8:	2049      	movs	r0, #73	@ 0x49
 800befa:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800befc:	2000      	movs	r0, #0
 800befe:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800bf00:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800bf02:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800bf04:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800bf06:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800bf08:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bf0a:	0a23      	lsrs	r3, r4, #8
 800bf0c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bf0e:	0c23      	lsrs	r3, r4, #16
 800bf10:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bf12:	0e24      	lsrs	r4, r4, #24
 800bf14:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800bf16:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bf18:	0a0b      	lsrs	r3, r1, #8
 800bf1a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bf1c:	0c0b      	lsrs	r3, r1, #16
 800bf1e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bf20:	0e09      	lsrs	r1, r1, #24
 800bf22:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800bf24:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800bf26:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bf2a:	bc10      	pop	{r4}
 800bf2c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf2e:	2009      	movs	r0, #9
 800bf30:	e7fb      	b.n	800bf2a <PrepareB0+0x3e>
	...

0800bf34 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bf34:	2300      	movs	r3, #0
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d80d      	bhi.n	800bf56 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800bf3a:	4a08      	ldr	r2, [pc, #32]	@ (800bf5c <GetKeyAddrItem+0x28>)
 800bf3c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800bf40:	4282      	cmp	r2, r0
 800bf42:	d002      	beq.n	800bf4a <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bf44:	3301      	adds	r3, #1
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	e7f5      	b.n	800bf36 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800bf4a:	4a04      	ldr	r2, [pc, #16]	@ (800bf5c <GetKeyAddrItem+0x28>)
 800bf4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf50:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800bf52:	2000      	movs	r0, #0
 800bf54:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800bf56:	200b      	movs	r0, #11
}
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	200000f0 	.word	0x200000f0

0800bf60 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800bf60:	b1f1      	cbz	r1, 800bfa0 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800bf62:	3801      	subs	r0, #1
 800bf64:	2803      	cmp	r0, #3
 800bf66:	d81d      	bhi.n	800bfa4 <GetLastFcntDown+0x44>
 800bf68:	e8df f000 	tbb	[pc, r0]
 800bf6c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800bf70:	4a0d      	ldr	r2, [pc, #52]	@ (800bfa8 <GetLastFcntDown+0x48>)
 800bf72:	6812      	ldr	r2, [r2, #0]
 800bf74:	6912      	ldr	r2, [r2, #16]
 800bf76:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bf78:	2000      	movs	r0, #0
            break;
 800bf7a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800bf7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bfa8 <GetLastFcntDown+0x48>)
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	6952      	ldr	r2, [r2, #20]
 800bf82:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bf84:	2000      	movs	r0, #0
            break;
 800bf86:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800bf88:	4a07      	ldr	r2, [pc, #28]	@ (800bfa8 <GetLastFcntDown+0x48>)
 800bf8a:	6812      	ldr	r2, [r2, #0]
 800bf8c:	6992      	ldr	r2, [r2, #24]
 800bf8e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bf90:	2000      	movs	r0, #0
            break;
 800bf92:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800bf94:	4a04      	ldr	r2, [pc, #16]	@ (800bfa8 <GetLastFcntDown+0x48>)
 800bf96:	6812      	ldr	r2, [r2, #0]
 800bf98:	69d2      	ldr	r2, [r2, #28]
 800bf9a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bf9c:	2000      	movs	r0, #0
            break;
 800bf9e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfa0:	2009      	movs	r0, #9
 800bfa2:	4770      	bx	lr
    switch( fCntID )
 800bfa4:	2005      	movs	r0, #5
}
 800bfa6:	4770      	bx	lr
 800bfa8:	20000eb8 	.word	0x20000eb8

0800bfac <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800bfac:	b510      	push	{r4, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bfb6:	a901      	add	r1, sp, #4
 800bfb8:	f7ff ffd2 	bl	800bf60 <GetLastFcntDown>
 800bfbc:	b948      	cbnz	r0, 800bfd2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	d309      	bcc.n	800bfd8 <CheckFCntDown+0x2c>
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc8:	d001      	beq.n	800bfce <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e002      	b.n	800bfd4 <CheckFCntDown+0x28>
        return true;
 800bfce:	2001      	movs	r0, #1
 800bfd0:	e000      	b.n	800bfd4 <CheckFCntDown+0x28>
        return false;
 800bfd2:	2000      	movs	r0, #0
    }
}
 800bfd4:	b002      	add	sp, #8
 800bfd6:	bd10      	pop	{r4, pc}
        return true;
 800bfd8:	2001      	movs	r0, #1
 800bfda:	e7fb      	b.n	800bfd4 <CheckFCntDown+0x28>

0800bfdc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800bfdc:	3801      	subs	r0, #1
 800bfde:	2803      	cmp	r0, #3
 800bfe0:	d815      	bhi.n	800c00e <UpdateFCntDown+0x32>
 800bfe2:	e8df f000 	tbb	[pc, r0]
 800bfe6:	0702      	.short	0x0702
 800bfe8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800bfea:	4b09      	ldr	r3, [pc, #36]	@ (800c010 <UpdateFCntDown+0x34>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800bff0:	6219      	str	r1, [r3, #32]
            break;
 800bff2:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800bff4:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <UpdateFCntDown+0x34>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800bffa:	6219      	str	r1, [r3, #32]
            break;
 800bffc:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800bffe:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <UpdateFCntDown+0x34>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800c004:	6219      	str	r1, [r3, #32]
            break;
 800c006:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c008:	4b01      	ldr	r3, [pc, #4]	@ (800c010 <UpdateFCntDown+0x34>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800c00e:	4770      	bx	lr
 800c010:	20000eb8 	.word	0x20000eb8

0800c014 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800c014:	4b0a      	ldr	r3, [pc, #40]	@ (800c040 <ResetFCnts+0x2c>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	2300      	movs	r3, #0
 800c01a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c01c:	f04f 31ff 	mov.w	r1, #4294967295
 800c020:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c022:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c024:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c026:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dd00      	ble.n	800c02e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800c02c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800c02e:	1d99      	adds	r1, r3, #6
 800c030:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c03a:	3301      	adds	r3, #1
 800c03c:	e7f4      	b.n	800c028 <ResetFCnts+0x14>
 800c03e:	bf00      	nop
 800c040:	20000eb8 	.word	0x20000eb8

0800c044 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800c044:	4b03      	ldr	r3, [pc, #12]	@ (800c054 <IsJoinNonce10xOk+0x10>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800c04a:	4283      	cmp	r3, r0
 800c04c:	bf2c      	ite	cs
 800c04e:	2000      	movcs	r0, #0
 800c050:	2001      	movcc	r0, #1
 800c052:	4770      	bx	lr
 800c054:	20000eb8 	.word	0x20000eb8

0800c058 <ComputeCmacB0>:
{
 800c058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05c:	b088      	sub	sp, #32
 800c05e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c060:	b1f0      	cbz	r0, 800c0a0 <ComputeCmacB0+0x48>
 800c062:	460c      	mov	r4, r1
 800c064:	4615      	mov	r5, r2
 800c066:	461a      	mov	r2, r3
 800c068:	4680      	mov	r8, r0
 800c06a:	b1de      	cbz	r6, 800c0a4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c06c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800c070:	d81a      	bhi.n	800c0a8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c072:	af04      	add	r7, sp, #16
 800c074:	9702      	str	r7, [sp, #8]
 800c076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800c082:	4629      	mov	r1, r5
 800c084:	4620      	mov	r0, r4
 800c086:	f7ff ff31 	bl	800beec <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c08a:	9600      	str	r6, [sp, #0]
 800c08c:	462b      	mov	r3, r5
 800c08e:	4622      	mov	r2, r4
 800c090:	4641      	mov	r1, r8
 800c092:	4638      	mov	r0, r7
 800c094:	f002 fb4e 	bl	800e734 <SecureElementComputeAesCmac>
 800c098:	b940      	cbnz	r0, 800c0ac <ComputeCmacB0+0x54>
}
 800c09a:	b008      	add	sp, #32
 800c09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c0a0:	2009      	movs	r0, #9
 800c0a2:	e7fa      	b.n	800c09a <ComputeCmacB0+0x42>
 800c0a4:	2009      	movs	r0, #9
 800c0a6:	e7f8      	b.n	800c09a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c0a8:	200d      	movs	r0, #13
 800c0aa:	e7f6      	b.n	800c09a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0ac:	200e      	movs	r0, #14
 800c0ae:	e7f4      	b.n	800c09a <ComputeCmacB0+0x42>

0800c0b0 <DeriveSessionKey10x>:
{
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800c0b4:	2400      	movs	r4, #0
 800c0b6:	9400      	str	r4, [sp, #0]
 800c0b8:	9401      	str	r4, [sp, #4]
 800c0ba:	9402      	str	r4, [sp, #8]
 800c0bc:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800c0be:	2808      	cmp	r0, #8
 800c0c0:	d003      	beq.n	800c0ca <DeriveSessionKey10x+0x1a>
 800c0c2:	2809      	cmp	r0, #9
 800c0c4:	d025      	beq.n	800c112 <DeriveSessionKey10x+0x62>
 800c0c6:	200a      	movs	r0, #10
 800c0c8:	e021      	b.n	800c10e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800c0ca:	2401      	movs	r4, #1
 800c0cc:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800c0d0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800c0d4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c0d8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800c0dc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c0e0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800c0e4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800c0e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c0ec:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800c0f0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c0f4:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800c0f8:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800c0fc:	0a1b      	lsrs	r3, r3, #8
 800c0fe:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c102:	4602      	mov	r2, r0
 800c104:	2101      	movs	r1, #1
 800c106:	4668      	mov	r0, sp
 800c108:	f002 fbb2 	bl	800e870 <SecureElementDeriveAndStoreKey>
 800c10c:	b928      	cbnz	r0, 800c11a <DeriveSessionKey10x+0x6a>
}
 800c10e:	b004      	add	sp, #16
 800c110:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800c112:	2402      	movs	r4, #2
 800c114:	f88d 4000 	strb.w	r4, [sp]
            break;
 800c118:	e7da      	b.n	800c0d0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c11a:	200e      	movs	r0, #14
 800c11c:	e7f7      	b.n	800c10e <DeriveSessionKey10x+0x5e>

0800c11e <PayloadEncrypt>:
{
 800c11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	4690      	mov	r8, r2
 800c126:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800c128:	2800      	cmp	r0, #0
 800c12a:	d052      	beq.n	800c1d2 <PayloadEncrypt+0xb4>
 800c12c:	460d      	mov	r5, r1
 800c12e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800c130:	2600      	movs	r6, #0
 800c132:	9604      	str	r6, [sp, #16]
 800c134:	9605      	str	r6, [sp, #20]
 800c136:	9606      	str	r6, [sp, #24]
 800c138:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800c13a:	9600      	str	r6, [sp, #0]
 800c13c:	9601      	str	r6, [sp, #4]
 800c13e:	9602      	str	r6, [sp, #8]
 800c140:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800c142:	2701      	movs	r7, #1
 800c144:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800c148:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c14c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800c150:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c154:	0a19      	lsrs	r1, r3, #8
 800c156:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c15a:	0c19      	lsrs	r1, r3, #16
 800c15c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c160:	0e1b      	lsrs	r3, r3, #24
 800c162:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800c166:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c16a:	0a13      	lsrs	r3, r2, #8
 800c16c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c170:	0c13      	lsrs	r3, r2, #16
 800c172:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c176:	0e12      	lsrs	r2, r2, #24
 800c178:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800c17c:	e014      	b.n	800c1a8 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c17e:	18f2      	adds	r2, r6, r3
 800c180:	5ca0      	ldrb	r0, [r4, r2]
 800c182:	f103 0120 	add.w	r1, r3, #32
 800c186:	4469      	add	r1, sp
 800c188:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800c18c:	4048      	eors	r0, r1
 800c18e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c190:	3301      	adds	r3, #1
 800c192:	b2db      	uxtb	r3, r3
 800c194:	462a      	mov	r2, r5
 800c196:	2d10      	cmp	r5, #16
 800c198:	bfa8      	it	ge
 800c19a:	2210      	movge	r2, #16
 800c19c:	4293      	cmp	r3, r2
 800c19e:	dbee      	blt.n	800c17e <PayloadEncrypt+0x60>
        size -= 16;
 800c1a0:	3d10      	subs	r5, #16
 800c1a2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800c1a4:	3610      	adds	r6, #16
 800c1a6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	dd0e      	ble.n	800c1ca <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800c1ac:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800c1b0:	3701      	adds	r7, #1
 800c1b2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c1b4:	ab04      	add	r3, sp, #16
 800c1b6:	4642      	mov	r2, r8
 800c1b8:	2110      	movs	r1, #16
 800c1ba:	4668      	mov	r0, sp
 800c1bc:	f002 fadf 	bl	800e77e <SecureElementAesEncrypt>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d0e6      	beq.n	800c194 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c1c6:	200e      	movs	r0, #14
 800c1c8:	e000      	b.n	800c1cc <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800c1ca:	2000      	movs	r0, #0
}
 800c1cc:	b008      	add	sp, #32
 800c1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c1d2:	2009      	movs	r0, #9
 800c1d4:	e7fa      	b.n	800c1cc <PayloadEncrypt+0xae>

0800c1d6 <VerifyCmacB0>:
    if( msg == 0 )
 800c1d6:	b368      	cbz	r0, 800c234 <VerifyCmacB0+0x5e>
{
 800c1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1dc:	b0c8      	sub	sp, #288	@ 0x120
 800c1de:	460c      	mov	r4, r1
 800c1e0:	4615      	mov	r5, r2
 800c1e2:	461e      	mov	r6, r3
 800c1e4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c1e6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800c1ea:	d825      	bhi.n	800c238 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c1ec:	af04      	add	r7, sp, #16
 800c1ee:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f002 fcfa 	bl	800ebee <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c1fa:	9702      	str	r7, [sp, #8]
 800c1fc:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800c208:	4632      	mov	r2, r6
 800c20a:	4629      	mov	r1, r5
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7ff fe6d 	bl	800beec <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c212:	4622      	mov	r2, r4
 800c214:	4641      	mov	r1, r8
 800c216:	a808      	add	r0, sp, #32
 800c218:	f002 fcd1 	bl	800ebbe <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c21c:	462b      	mov	r3, r5
 800c21e:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800c220:	f104 0110 	add.w	r1, r4, #16
 800c224:	4638      	mov	r0, r7
 800c226:	f002 fa94 	bl	800e752 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c22a:	b130      	cbz	r0, 800c23a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c22c:	2801      	cmp	r0, #1
 800c22e:	d004      	beq.n	800c23a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c230:	200e      	movs	r0, #14
 800c232:	e002      	b.n	800c23a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c234:	2009      	movs	r0, #9
}
 800c236:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c238:	200d      	movs	r0, #13
}
 800c23a:	b048      	add	sp, #288	@ 0x120
 800c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c240 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800c240:	b188      	cbz	r0, 800c266 <LoRaMacCryptoInit+0x26>
{
 800c242:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800c244:	4c09      	ldr	r4, [pc, #36]	@ (800c26c <LoRaMacCryptoInit+0x2c>)
 800c246:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800c248:	2228      	movs	r2, #40	@ 0x28
 800c24a:	2100      	movs	r1, #0
 800c24c:	f002 fccf 	bl	800ebee <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	2201      	movs	r2, #1
 800c254:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800c256:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800c258:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800c25a:	2400      	movs	r4, #0
 800c25c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800c25e:	f7ff fed9 	bl	800c014 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800c262:	4620      	mov	r0, r4
}
 800c264:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800c266:	2008      	movs	r0, #8
}
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	20000eb8 	.word	0x20000eb8

0800c270 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800c270:	4b02      	ldr	r3, [pc, #8]	@ (800c27c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800c276:	2000      	movs	r0, #0
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	20000eb8 	.word	0x20000eb8

0800c280 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800c280:	b130      	cbz	r0, 800c290 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800c282:	4b04      	ldr	r3, [pc, #16]	@ (800c294 <LoRaMacCryptoGetFCntUp+0x14>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	3301      	adds	r3, #1
 800c28a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800c28c:	2000      	movs	r0, #0
 800c28e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c290:	2009      	movs	r0, #9
}
 800c292:	4770      	bx	lr
 800c294:	20000eb8 	.word	0x20000eb8

0800c298 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800c298:	b530      	push	{r4, r5, lr}
 800c29a:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800c2a0:	b1f2      	cbz	r2, 800c2e0 <LoRaMacCryptoGetFCntDown+0x48>
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c2a6:	a901      	add	r1, sp, #4
 800c2a8:	f7ff fe5a 	bl	800bf60 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c2ac:	b948      	cbnz	r0, 800c2c2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b4:	d007      	beq.n	800c2c6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800c2ba:	2a00      	cmp	r2, #0
 800c2bc:	dd05      	ble.n	800c2ca <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800c2be:	4413      	add	r3, r2
 800c2c0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c2c2:	b003      	add	sp, #12
 800c2c4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800c2c6:	602c      	str	r4, [r5, #0]
 800c2c8:	e7fb      	b.n	800c2c2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800c2ca:	b132      	cbz	r2, 800c2da <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c2cc:	f36f 030f 	bfc	r3, #0, #16
 800c2d0:	4423      	add	r3, r4
 800c2d2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	e7f3      	b.n	800c2c2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800c2da:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c2dc:	2007      	movs	r0, #7
 800c2de:	e7f0      	b.n	800c2c2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2e0:	2009      	movs	r0, #9
 800c2e2:	e7ee      	b.n	800c2c2 <LoRaMacCryptoGetFCntDown+0x2a>

0800c2e4 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	b908      	cbnz	r0, 800c2ec <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2e8:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c2ea:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dd01      	ble.n	800c2f6 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800c2f6:	4a07      	ldr	r2, [pc, #28]	@ (800c314 <LoRaMacCryptoSetMulticastReference+0x30>)
 800c2f8:	6812      	ldr	r2, [r2, #0]
 800c2fa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800c2fe:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c302:	f103 0c06 	add.w	ip, r3, #6
 800c306:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800c30a:	3204      	adds	r2, #4
 800c30c:	6242      	str	r2, [r0, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c30e:	3301      	adds	r3, #1
 800c310:	e7ed      	b.n	800c2ee <LoRaMacCryptoSetMulticastReference+0xa>
 800c312:	bf00      	nop
 800c314:	20000eb8 	.word	0x20000eb8

0800c318 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800c318:	b1d8      	cbz	r0, 800c352 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800c31a:	b510      	push	{r4, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800c320:	4b0f      	ldr	r3, [pc, #60]	@ (800c360 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	8893      	ldrh	r3, [r2, #4]
 800c326:	3301      	adds	r3, #1
 800c328:	b29b      	uxth	r3, r3
 800c32a:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800c32c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c32e:	f000 fa36 	bl	800c79e <LoRaMacSerializerJoinRequest>
 800c332:	b980      	cbnz	r0, 800c356 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c334:	4623      	mov	r3, r4
 800c336:	f853 1b18 	ldr.w	r1, [r3], #24
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	2301      	movs	r3, #1
 800c33e:	2213      	movs	r2, #19
 800c340:	f002 f9f8 	bl	800e734 <SecureElementComputeAesCmac>
 800c344:	b950      	cbnz	r0, 800c35c <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c346:	4620      	mov	r0, r4
 800c348:	f000 fa29 	bl	800c79e <LoRaMacSerializerJoinRequest>
 800c34c:	b120      	cbz	r0, 800c358 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c34e:	2010      	movs	r0, #16
 800c350:	e002      	b.n	800c358 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c352:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c354:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c356:	2010      	movs	r0, #16
}
 800c358:	b002      	add	sp, #8
 800c35a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c35c:	200e      	movs	r0, #14
 800c35e:	e7fb      	b.n	800c358 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800c360:	20000eb8 	.word	0x20000eb8

0800c364 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800c364:	2b00      	cmp	r3, #0
 800c366:	d036      	beq.n	800c3d6 <LoRaMacCryptoSecureMessage+0x72>
{
 800c368:	b530      	push	{r4, r5, lr}
 800c36a:	b085      	sub	sp, #20
 800c36c:	4604      	mov	r4, r0
 800c36e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800c370:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <LoRaMacCryptoSecureMessage+0x84>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	4283      	cmp	r3, r0
 800c378:	d82f      	bhi.n	800c3da <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800c37a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800c37e:	b342      	cbz	r2, 800c3d2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800c380:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800c382:	42a3      	cmp	r3, r4
 800c384:	d209      	bcs.n	800c39a <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c386:	9401      	str	r4, [sp, #4]
 800c388:	2300      	movs	r3, #0
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	68ab      	ldr	r3, [r5, #8]
 800c38e:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 800c392:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800c394:	f7ff fec3 	bl	800c11e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c398:	bb10      	cbnz	r0, 800c3e0 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c39a:	4628      	mov	r0, r5
 800c39c:	f000 fa35 	bl	800c80a <LoRaMacSerializerData>
 800c3a0:	b9e8      	cbnz	r0, 800c3de <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c3a2:	7929      	ldrb	r1, [r5, #4]
 800c3a4:	3904      	subs	r1, #4
 800c3a6:	462b      	mov	r3, r5
 800c3a8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800c3ac:	9303      	str	r3, [sp, #12]
 800c3ae:	9402      	str	r4, [sp, #8]
 800c3b0:	68ab      	ldr	r3, [r5, #8]
 800c3b2:	9301      	str	r3, [sp, #4]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	2208      	movs	r2, #8
 800c3ba:	b289      	uxth	r1, r1
 800c3bc:	f7ff fe4c 	bl	800c058 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c3c0:	b970      	cbnz	r0, 800c3e0 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 fa21 	bl	800c80a <LoRaMacSerializerData>
 800c3c8:	b960      	cbnz	r0, 800c3e4 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800c3ca:	4b07      	ldr	r3, [pc, #28]	@ (800c3e8 <LoRaMacCryptoSecureMessage+0x84>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800c3d0:	e006      	b.n	800c3e0 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c3d2:	2208      	movs	r2, #8
 800c3d4:	e7d5      	b.n	800c382 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c3d6:	2009      	movs	r0, #9
}
 800c3d8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c3da:	2006      	movs	r0, #6
 800c3dc:	e000      	b.n	800c3e0 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c3de:	2010      	movs	r0, #16
}
 800c3e0:	b005      	add	sp, #20
 800c3e2:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c3e4:	2010      	movs	r0, #16
 800c3e6:	e7fb      	b.n	800c3e0 <LoRaMacCryptoSecureMessage+0x7c>
 800c3e8:	20000eb8 	.word	0x20000eb8

0800c3ec <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800c3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	b087      	sub	sp, #28
 800c3f2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 800c3f4:	2e00      	cmp	r6, #0
 800c3f6:	d049      	beq.n	800c48c <LoRaMacCryptoUnsecureMessage+0xa0>
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	4688      	mov	r8, r1
 800c3fc:	4617      	mov	r7, r2
 800c3fe:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7ff fdd2 	bl	800bfac <CheckFCntDown>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d041      	beq.n	800c490 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c40c:	4630      	mov	r0, r6
 800c40e:	f000 f967 	bl	800c6e0 <LoRaMacParserData>
 800c412:	2800      	cmp	r0, #0
 800c414:	d141      	bne.n	800c49a <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800c416:	a905      	add	r1, sp, #20
 800c418:	4628      	mov	r0, r5
 800c41a:	f7ff fd8b 	bl	800bf34 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c41e:	4605      	mov	r5, r0
 800c420:	2800      	cmp	r0, #0
 800c422:	d136      	bne.n	800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800c424:	9b05      	ldr	r3, [sp, #20]
 800c426:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800c42a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800c42c:	68b3      	ldr	r3, [r6, #8]
 800c42e:	4543      	cmp	r3, r8
 800c430:	d135      	bne.n	800c49e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c432:	7b33      	ldrb	r3, [r6, #12]
 800c434:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800c438:	491a      	ldr	r1, [pc, #104]	@ (800c4a4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800c43a:	6809      	ldr	r1, [r1, #0]
 800c43c:	7889      	ldrb	r1, [r1, #2]
 800c43e:	b901      	cbnz	r1, 800c442 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800c440:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c442:	7931      	ldrb	r1, [r6, #4]
 800c444:	3904      	subs	r1, #4
 800c446:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800c448:	9003      	str	r0, [sp, #12]
 800c44a:	9402      	str	r4, [sp, #8]
 800c44c:	f8cd 8004 	str.w	r8, [sp, #4]
 800c450:	2001      	movs	r0, #1
 800c452:	9000      	str	r0, [sp, #0]
 800c454:	b289      	uxth	r1, r1
 800c456:	6830      	ldr	r0, [r6, #0]
 800c458:	f7ff febd 	bl	800c1d6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c45c:	4605      	mov	r5, r0
 800c45e:	b9c0      	cbnz	r0, 800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800c460:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c464:	b90b      	cbnz	r3, 800c46a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800c466:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c46a:	9401      	str	r4, [sp, #4]
 800c46c:	2301      	movs	r3, #1
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	4643      	mov	r3, r8
 800c472:	464a      	mov	r2, r9
 800c474:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800c478:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800c47a:	f7ff fe50 	bl	800c11e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c47e:	4605      	mov	r5, r0
 800c480:	b938      	cbnz	r0, 800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800c482:	4621      	mov	r1, r4
 800c484:	4638      	mov	r0, r7
 800c486:	f7ff fda9 	bl	800bfdc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800c48a:	e002      	b.n	800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c48c:	2509      	movs	r5, #9
 800c48e:	e000      	b.n	800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c490:	2506      	movs	r5, #6
}
 800c492:	4628      	mov	r0, r5
 800c494:	b007      	add	sp, #28
 800c496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c49a:	250f      	movs	r5, #15
 800c49c:	e7f9      	b.n	800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c49e:	2502      	movs	r5, #2
 800c4a0:	e7f7      	b.n	800c492 <LoRaMacCryptoUnsecureMessage+0xa6>
 800c4a2:	bf00      	nop
 800c4a4:	20000eb8 	.word	0x20000eb8

0800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800c4a8:	b500      	push	{lr}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	9302      	str	r3, [sp, #8]
 800c4b6:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800c4b8:	290b      	cmp	r1, #11
 800c4ba:	d005      	beq.n	800c4c8 <LoRaMacCryptoDeriveLifeTimeKey+0x20>
 800c4bc:	290c      	cmp	r1, #12
 800c4be:	d011      	beq.n	800c4e4 <LoRaMacCryptoDeriveLifeTimeKey+0x3c>
 800c4c0:	290a      	cmp	r1, #10
 800c4c2:	d00a      	beq.n	800c4da <LoRaMacCryptoDeriveLifeTimeKey+0x32>
 800c4c4:	200a      	movs	r0, #10
 800c4c6:	e012      	b.n	800c4ee <LoRaMacCryptoDeriveLifeTimeKey+0x46>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800c4c8:	2801      	cmp	r0, #1
 800c4ca:	d001      	beq.n	800c4d0 <LoRaMacCryptoDeriveLifeTimeKey+0x28>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	e00a      	b.n	800c4e6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            {
                compBase[0] = 0x20;
 800c4d0:	2320      	movs	r3, #32
 800c4d2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	e005      	b.n	800c4e6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            break;
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
            break;
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800c4da:	2330      	movs	r3, #48	@ 0x30
 800c4dc:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c4e0:	2100      	movs	r1, #0
            break;
 800c4e2:	e000      	b.n	800c4e6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
    switch( keyID )
 800c4e4:	210b      	movs	r1, #11
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c4e6:	4668      	mov	r0, sp
 800c4e8:	f002 f9c2 	bl	800e870 <SecureElementDeriveAndStoreKey>
 800c4ec:	b910      	cbnz	r0, 800c4f4 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c4ee:	b005      	add	sp, #20
 800c4f0:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c4f4:	200e      	movs	r0, #14
 800c4f6:	e7fa      	b.n	800c4ee <LoRaMacCryptoDeriveLifeTimeKey+0x46>

0800c4f8 <LoRaMacCryptoSetKey>:
{
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c4fc:	f002 f976 	bl	800e7ec <SecureElementSetKey>
 800c500:	b998      	cbnz	r0, 800c52a <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800c502:	b104      	cbz	r4, 800c506 <LoRaMacCryptoSetKey+0xe>
}
 800c504:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c506:	4b0c      	ldr	r3, [pc, #48]	@ (800c538 <LoRaMacCryptoSetKey+0x40>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	210b      	movs	r1, #11
 800c50c:	7898      	ldrb	r0, [r3, #2]
 800c50e:	f7ff ffcb 	bl	800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c512:	b960      	cbnz	r0, 800c52e <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c514:	210c      	movs	r1, #12
 800c516:	f7ff ffc7 	bl	800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c51a:	b950      	cbnz	r0, 800c532 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c51c:	210a      	movs	r1, #10
 800c51e:	f7ff ffc3 	bl	800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c522:	2800      	cmp	r0, #0
 800c524:	d0ee      	beq.n	800c504 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c526:	200e      	movs	r0, #14
 800c528:	e7ec      	b.n	800c504 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c52a:	200e      	movs	r0, #14
 800c52c:	e7ea      	b.n	800c504 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c52e:	200e      	movs	r0, #14
 800c530:	e7e8      	b.n	800c504 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c532:	200e      	movs	r0, #14
 800c534:	e7e6      	b.n	800c504 <LoRaMacCryptoSetKey+0xc>
 800c536:	bf00      	nop
 800c538:	20000eb8 	.word	0x20000eb8

0800c53c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c53c:	2a00      	cmp	r2, #0
 800c53e:	d06e      	beq.n	800c61e <LoRaMacCryptoHandleJoinAccept+0xe2>
{
 800c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c544:	b08e      	sub	sp, #56	@ 0x38
 800c546:	4606      	mov	r6, r0
 800c548:	460d      	mov	r5, r1
 800c54a:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c54c:	2900      	cmp	r1, #0
 800c54e:	d068      	beq.n	800c622 <LoRaMacCryptoHandleJoinAccept+0xe6>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c550:	f10d 0814 	add.w	r8, sp, #20
 800c554:	2221      	movs	r2, #33	@ 0x21
 800c556:	2100      	movs	r1, #0
 800c558:	4640      	mov	r0, r8
 800c55a:	f005 f985 	bl	8011868 <memset>
    uint8_t versionMinor         = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	f88d 3013 	strb.w	r3, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c564:	4b34      	ldr	r3, [pc, #208]	@ (800c638 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c56a:	f10d 0313 	add.w	r3, sp, #19
 800c56e:	9302      	str	r3, [sp, #8]
 800c570:	f8cd 8004 	str.w	r8, [sp, #4]
 800c574:	7923      	ldrb	r3, [r4, #4]
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	463a      	mov	r2, r7
 800c57c:	4629      	mov	r1, r5
 800c57e:	4630      	mov	r0, r6
 800c580:	f002 f996 	bl	800e8b0 <SecureElementProcessJoinAccept>
 800c584:	2800      	cmp	r0, #0
 800c586:	d14e      	bne.n	800c626 <LoRaMacCryptoHandleJoinAccept+0xea>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800c588:	7922      	ldrb	r2, [r4, #4]
 800c58a:	4641      	mov	r1, r8
 800c58c:	6820      	ldr	r0, [r4, #0]
 800c58e:	f002 fb16 	bl	800ebbe <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c592:	4620      	mov	r0, r4
 800c594:	f000 f852 	bl	800c63c <LoRaMacParserJoinAccept>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d148      	bne.n	800c62e <LoRaMacCryptoHandleJoinAccept+0xf2>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800c59c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c59e:	79e3      	ldrb	r3, [r4, #7]
 800c5a0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c5a4:	7a23      	ldrb	r3, [r4, #8]
 800c5a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f7ff fd4a 	bl	800c044 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d03e      	beq.n	800c632 <LoRaMacCryptoHandleJoinAccept+0xf6>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800c5b4:	4b20      	ldr	r3, [pc, #128]	@ (800c638 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800c5ba:	210b      	movs	r1, #11
 800c5bc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800c5c0:	f7ff ff72 	bl	800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c5c4:	bb80      	cbnz	r0, 800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800c5c6:	210c      	movs	r1, #12
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	f7ff ff6d 	bl	800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c5ce:	bb58      	cbnz	r0, 800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800c5d0:	210a      	movs	r1, #10
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	f7ff ff68 	bl	800c4a8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c5d8:	bb30      	cbnz	r0, 800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
        netID = ( uint32_t )macMsg->NetID[0];
 800c5da:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c5dc:	7aa2      	ldrb	r2, [r4, #10]
 800c5de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c5e2:	7ae2      	ldrb	r2, [r4, #11]
 800c5e4:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800c5e8:	463b      	mov	r3, r7
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	2009      	movs	r0, #9
 800c5f0:	f7ff fd5e 	bl	800c0b0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c5f4:	b9c0      	cbnz	r0, 800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800c5f6:	463b      	mov	r3, r7
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	2008      	movs	r0, #8
 800c5fe:	f7ff fd57 	bl	800c0b0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c602:	b988      	cbnz	r0, 800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c604:	4b0c      	ldr	r3, [pc, #48]	@ (800c638 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c60c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800c60e:	2200      	movs	r2, #0
 800c610:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c612:	f04f 32ff 	mov.w	r2, #4294967295
 800c616:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c618:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c61a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800c61c:	e004      	b.n	800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c61e:	2009      	movs	r0, #9
}
 800c620:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c622:	2009      	movs	r0, #9
 800c624:	e000      	b.n	800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c626:	200e      	movs	r0, #14
}
 800c628:	b00e      	add	sp, #56	@ 0x38
 800c62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c62e:	200f      	movs	r0, #15
 800c630:	e7fa      	b.n	800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c632:	2003      	movs	r0, #3
 800c634:	e7f8      	b.n	800c628 <LoRaMacCryptoHandleJoinAccept+0xec>
 800c636:	bf00      	nop
 800c638:	20000eb8 	.word	0x20000eb8

0800c63c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d049      	beq.n	800c6d4 <LoRaMacParserJoinAccept+0x98>
{
 800c640:	b510      	push	{r4, lr}
 800c642:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c644:	6801      	ldr	r1, [r0, #0]
 800c646:	2900      	cmp	r1, #0
 800c648:	d046      	beq.n	800c6d8 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c64a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c64e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c650:	2203      	movs	r2, #3
 800c652:	3006      	adds	r0, #6
 800c654:	f002 fab3 	bl	800ebbe <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c658:	4620      	mov	r0, r4
 800c65a:	f850 1b09 	ldr.w	r1, [r0], #9
 800c65e:	2203      	movs	r2, #3
 800c660:	3104      	adds	r1, #4
 800c662:	f002 faac 	bl	800ebbe <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c666:	6821      	ldr	r1, [r4, #0]
 800c668:	79cb      	ldrb	r3, [r1, #7]
 800c66a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c66c:	7a0a      	ldrb	r2, [r1, #8]
 800c66e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c672:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c674:	7a4a      	ldrb	r2, [r1, #9]
 800c676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c67a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c67c:	7a8a      	ldrb	r2, [r1, #10]
 800c67e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c682:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c684:	7acb      	ldrb	r3, [r1, #11]
 800c686:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c688:	7b0b      	ldrb	r3, [r1, #12]
 800c68a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c68c:	7923      	ldrb	r3, [r4, #4]
 800c68e:	2b21      	cmp	r3, #33	@ 0x21
 800c690:	d018      	beq.n	800c6c4 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c692:	2b11      	cmp	r3, #17
 800c694:	dc22      	bgt.n	800c6dc <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c696:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c698:	6821      	ldr	r1, [r4, #0]
 800c69a:	f102 0c01 	add.w	ip, r2, #1
 800c69e:	5c8b      	ldrb	r3, [r1, r2]
 800c6a0:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c6a2:	1c90      	adds	r0, r2, #2
 800c6a4:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800c6a8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c6ac:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c6ae:	3203      	adds	r2, #3
 800c6b0:	5c08      	ldrb	r0, [r1, r0]
 800c6b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c6b6:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c6b8:	5c8a      	ldrb	r2, [r1, r2]
 800c6ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c6be:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c6c0:	2000      	movs	r0, #0
}
 800c6c2:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c6c4:	2210      	movs	r2, #16
 800c6c6:	310d      	adds	r1, #13
 800c6c8:	f104 0012 	add.w	r0, r4, #18
 800c6cc:	f002 fa77 	bl	800ebbe <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c6d0:	221d      	movs	r2, #29
 800c6d2:	e7e1      	b.n	800c698 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c6d4:	2002      	movs	r0, #2
}
 800c6d6:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c6d8:	2002      	movs	r0, #2
 800c6da:	e7f2      	b.n	800c6c2 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800c6dc:	2001      	movs	r0, #1
 800c6de:	e7f0      	b.n	800c6c2 <LoRaMacParserJoinAccept+0x86>

0800c6e0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d058      	beq.n	800c796 <LoRaMacParserData+0xb6>
{
 800c6e4:	b510      	push	{r4, lr}
 800c6e6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c6e8:	6801      	ldr	r1, [r0, #0]
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	d055      	beq.n	800c79a <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c6ee:	780b      	ldrb	r3, [r1, #0]
 800c6f0:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c6f2:	784b      	ldrb	r3, [r1, #1]
 800c6f4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c6f6:	788a      	ldrb	r2, [r1, #2]
 800c6f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c6fc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c6fe:	78ca      	ldrb	r2, [r1, #3]
 800c700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c704:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c706:	790a      	ldrb	r2, [r1, #4]
 800c708:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c70c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c70e:	794b      	ldrb	r3, [r1, #5]
 800c710:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c712:	798b      	ldrb	r3, [r1, #6]
 800c714:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c716:	79ca      	ldrb	r2, [r1, #7]
 800c718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c71c:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c71e:	7b02      	ldrb	r2, [r0, #12]
 800c720:	f002 020f 	and.w	r2, r2, #15
 800c724:	3108      	adds	r1, #8
 800c726:	3010      	adds	r0, #16
 800c728:	f002 fa49 	bl	800ebbe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c72c:	7b23      	ldrb	r3, [r4, #12]
 800c72e:	f003 030f 	and.w	r3, r3, #15
 800c732:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c736:	2200      	movs	r2, #0
 800c738:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800c73c:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c740:	7922      	ldrb	r2, [r4, #4]
 800c742:	1a11      	subs	r1, r2, r0
 800c744:	2904      	cmp	r1, #4
 800c746:	dc16      	bgt.n	800c776 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c748:	6822      	ldr	r2, [r4, #0]
 800c74a:	7923      	ldrb	r3, [r4, #4]
 800c74c:	441a      	add	r2, r3
 800c74e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800c752:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c754:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c758:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c75c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c75e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c762:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c766:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c768:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c76c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c770:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c772:	2000      	movs	r0, #0
}
 800c774:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c776:	6821      	ldr	r1, [r4, #0]
 800c778:	3309      	adds	r3, #9
 800c77a:	5c08      	ldrb	r0, [r1, r0]
 800c77c:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c780:	1ad2      	subs	r2, r2, r3
 800c782:	b2d2      	uxtb	r2, r2
 800c784:	3a04      	subs	r2, #4
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c78c:	4419      	add	r1, r3
 800c78e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c790:	f002 fa15 	bl	800ebbe <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c794:	e7d8      	b.n	800c748 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c796:	2002      	movs	r0, #2
}
 800c798:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c79a:	2002      	movs	r0, #2
 800c79c:	e7ea      	b.n	800c774 <LoRaMacParserData+0x94>

0800c79e <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c79e:	b370      	cbz	r0, 800c7fe <LoRaMacSerializerJoinRequest+0x60>
{
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c7a4:	6803      	ldr	r3, [r0, #0]
 800c7a6:	b363      	cbz	r3, 800c802 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c7a8:	7902      	ldrb	r2, [r0, #4]
 800c7aa:	2a16      	cmp	r2, #22
 800c7ac:	d92b      	bls.n	800c806 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c7ae:	7942      	ldrb	r2, [r0, #5]
 800c7b0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	f851 0b06 	ldr.w	r0, [r1], #6
 800c7b8:	2208      	movs	r2, #8
 800c7ba:	3001      	adds	r0, #1
 800c7bc:	f002 fa0a 	bl	800ebd4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c7c6:	2208      	movs	r2, #8
 800c7c8:	3009      	adds	r0, #9
 800c7ca:	f002 fa03 	bl	800ebd4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c7ce:	8ae2      	ldrh	r2, [r4, #22]
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c7d4:	8ae3      	ldrh	r3, [r4, #22]
 800c7d6:	6822      	ldr	r2, [r4, #0]
 800c7d8:	0a1b      	lsrs	r3, r3, #8
 800c7da:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c7dc:	69a2      	ldr	r2, [r4, #24]
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c7e2:	69a3      	ldr	r3, [r4, #24]
 800c7e4:	0a1b      	lsrs	r3, r3, #8
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c7ea:	8b62      	ldrh	r2, [r4, #26]
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c7f0:	7ee2      	ldrb	r2, [r4, #27]
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c7f6:	2317      	movs	r3, #23
 800c7f8:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c7fa:	2000      	movs	r0, #0
}
 800c7fc:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c7fe:	2001      	movs	r0, #1
}
 800c800:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c802:	2001      	movs	r0, #1
 800c804:	e7fa      	b.n	800c7fc <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c806:	2002      	movs	r0, #2
 800c808:	e7f8      	b.n	800c7fc <LoRaMacSerializerJoinRequest+0x5e>

0800c80a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d066      	beq.n	800c8dc <LoRaMacSerializerData+0xd2>
{
 800c80e:	b538      	push	{r3, r4, r5, lr}
 800c810:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c812:	6801      	ldr	r1, [r0, #0]
 800c814:	2900      	cmp	r1, #0
 800c816:	d063      	beq.n	800c8e0 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c818:	7b02      	ldrb	r2, [r0, #12]
 800c81a:	f002 020f 	and.w	r2, r2, #15
 800c81e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c822:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c826:	b10b      	cbz	r3, 800c82c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c828:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c82c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c82e:	3304      	adds	r3, #4
 800c830:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c832:	7922      	ldrb	r2, [r4, #4]
 800c834:	429a      	cmp	r2, r3
 800c836:	d355      	bcc.n	800c8e4 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c838:	7963      	ldrb	r3, [r4, #5]
 800c83a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c83c:	68a2      	ldr	r2, [r4, #8]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	0a1b      	lsrs	r3, r3, #8
 800c846:	6822      	ldr	r2, [r4, #0]
 800c848:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c84a:	8962      	ldrh	r2, [r4, #10]
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c850:	7ae2      	ldrb	r2, [r4, #11]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c856:	6823      	ldr	r3, [r4, #0]
 800c858:	7b22      	ldrb	r2, [r4, #12]
 800c85a:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c85c:	89e2      	ldrh	r2, [r4, #14]
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c862:	89e3      	ldrh	r3, [r4, #14]
 800c864:	6822      	ldr	r2, [r4, #0]
 800c866:	0a1b      	lsrs	r3, r3, #8
 800c868:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c86a:	4621      	mov	r1, r4
 800c86c:	f851 0b10 	ldr.w	r0, [r1], #16
 800c870:	7b22      	ldrb	r2, [r4, #12]
 800c872:	f002 020f 	and.w	r2, r2, #15
 800c876:	3008      	adds	r0, #8
 800c878:	f002 f9a1 	bl	800ebbe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c87c:	7b23      	ldrb	r3, [r4, #12]
 800c87e:	f003 030f 	and.w	r3, r3, #15
 800c882:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c886:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800c88a:	b12a      	cbz	r2, 800c898 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c88c:	6822      	ldr	r2, [r4, #0]
 800c88e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c892:	5551      	strb	r1, [r2, r5]
 800c894:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c898:	6820      	ldr	r0, [r4, #0]
 800c89a:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800c89e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c8a0:	4428      	add	r0, r5
 800c8a2:	f002 f98c 	bl	800ebbe <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c8a6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c8aa:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c8ac:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c8ae:	6821      	ldr	r1, [r4, #0]
 800c8b0:	1c5a      	adds	r2, r3, #1
 800c8b2:	b292      	uxth	r2, r2
 800c8b4:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c8b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c8b8:	0a08      	lsrs	r0, r1, #8
 800c8ba:	6825      	ldr	r5, [r4, #0]
 800c8bc:	1c99      	adds	r1, r3, #2
 800c8be:	b289      	uxth	r1, r1
 800c8c0:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c8c2:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 800c8c4:	6820      	ldr	r0, [r4, #0]
 800c8c6:	1cda      	adds	r2, r3, #3
 800c8c8:	b292      	uxth	r2, r2
 800c8ca:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c8cc:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800c8d0:	6821      	ldr	r1, [r4, #0]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c8d6:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c8d8:	2000      	movs	r0, #0
}
 800c8da:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c8dc:	2001      	movs	r0, #1
}
 800c8de:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	e7fa      	b.n	800c8da <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c8e4:	2002      	movs	r0, #2
 800c8e6:	e7f8      	b.n	800c8da <LoRaMacSerializerData+0xd0>

0800c8e8 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c8e8:	4b02      	ldr	r3, [pc, #8]	@ (800c8f4 <NvmDataMgmtEvent+0xc>)
 800c8ea:	881a      	ldrh	r2, [r3, #0]
 800c8ec:	4310      	orrs	r0, r2
 800c8ee:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	20000ebc 	.word	0x20000ebc

0800c8f8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c8f8:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c8fa:	4b06      	ldr	r3, [pc, #24]	@ (800c914 <NvmDataMgmtStoreBegin+0x1c>)
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	b11b      	cbz	r3, 800c908 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c900:	f7fe f836 	bl	800a970 <LoRaMacStop>
 800c904:	b918      	cbnz	r0, 800c90e <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c906:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c908:	f06f 0001 	mvn.w	r0, #1
 800c90c:	e7fb      	b.n	800c906 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c90e:	f06f 0002 	mvn.w	r0, #2
 800c912:	e7f8      	b.n	800c906 <NvmDataMgmtStoreBegin+0xe>
 800c914:	20000ebc 	.word	0x20000ebc

0800c918 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c918:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c91a:	2400      	movs	r4, #0
 800c91c:	4b02      	ldr	r3, [pc, #8]	@ (800c928 <NvmDataMgmtStoreEnd+0x10>)
 800c91e:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800c920:	f7fe f81a 	bl	800a958 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c924:	4620      	mov	r0, r4
 800c926:	bd10      	pop	{r4, pc}
 800c928:	20000ebc 	.word	0x20000ebc

0800c92c <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c92c:	b908      	cbnz	r0, 800c932 <RegionIsActive+0x6>
    {
        AS923_IS_ACTIVE( );
 800c92e:	2001      	movs	r0, #1
 800c930:	4770      	bx	lr
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c932:	2000      	movs	r0, #0
        }
    }
}
 800c934:	4770      	bx	lr

0800c936 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c936:	b500      	push	{lr}
 800c938:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800c93a:	2300      	movs	r3, #0
 800c93c:	9300      	str	r3, [sp, #0]
    switch( region )
 800c93e:	b128      	cbz	r0, 800c94c <RegionGetPhyParam+0x16>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	9301      	str	r3, [sp, #4]
        }
    }
}
 800c944:	9801      	ldr	r0, [sp, #4]
 800c946:	b003      	add	sp, #12
 800c948:	f85d fb04 	ldr.w	pc, [sp], #4
        AS923_GET_PHY_PARAM( );
 800c94c:	4608      	mov	r0, r1
 800c94e:	f000 f8e5 	bl	800cb1c <RegionAS923GetPhyParam>
 800c952:	9001      	str	r0, [sp, #4]
 800c954:	e7f6      	b.n	800c944 <RegionGetPhyParam+0xe>

0800c956 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800c956:	b100      	cbz	r0, 800c95a <RegionSetBandTxDone+0x4>
 800c958:	4770      	bx	lr
{
 800c95a:	b508      	push	{r3, lr}
    {
        AS923_SET_BAND_TX_DONE( );
 800c95c:	4608      	mov	r0, r1
 800c95e:	f000 f9e1 	bl	800cd24 <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c962:	bd08      	pop	{r3, pc}

0800c964 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800c964:	b100      	cbz	r0, 800c968 <RegionInitDefaults+0x4>
 800c966:	4770      	bx	lr
{
 800c968:	b508      	push	{r3, lr}
    {
        AS923_INIT_DEFAULTS( );
 800c96a:	4608      	mov	r0, r1
 800c96c:	f000 f9f8 	bl	800cd60 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c970:	bd08      	pop	{r3, pc}

0800c972 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800c972:	b108      	cbz	r0, 800c978 <RegionVerify+0x6>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c974:	2000      	movs	r0, #0
        }
    }
}
 800c976:	4770      	bx	lr
{
 800c978:	b508      	push	{r3, lr}
 800c97a:	460b      	mov	r3, r1
        AS923_VERIFY( );
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 fa52 	bl	800ce28 <RegionAS923Verify>
}
 800c984:	bd08      	pop	{r3, pc}

0800c986 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800c986:	b100      	cbz	r0, 800c98a <RegionApplyCFList+0x4>
 800c988:	4770      	bx	lr
{
 800c98a:	b508      	push	{r3, lr}
    {
        AS923_APPLY_CF_LIST( );
 800c98c:	4608      	mov	r0, r1
 800c98e:	f000 fe11 	bl	800d5b4 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c992:	bd08      	pop	{r3, pc}

0800c994 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800c994:	b108      	cbz	r0, 800c99a <RegionChanMaskSet+0x6>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c996:	2000      	movs	r0, #0
        }
    }
}
 800c998:	4770      	bx	lr
{
 800c99a:	b508      	push	{r3, lr}
        AS923_CHAN_MASK_SET( );
 800c99c:	4608      	mov	r0, r1
 800c99e:	f000 fa95 	bl	800cecc <RegionAS923ChanMaskSet>
}
 800c9a2:	bd08      	pop	{r3, pc}

0800c9a4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800c9a4:	b100      	cbz	r0, 800c9a8 <RegionComputeRxWindowParameters+0x4>
 800c9a6:	4770      	bx	lr
{
 800c9a8:	b508      	push	{r3, lr}
 800c9aa:	468c      	mov	ip, r1
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	461a      	mov	r2, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c9b0:	9b02      	ldr	r3, [sp, #8]
 800c9b2:	4660      	mov	r0, ip
 800c9b4:	f000 faa8 	bl	800cf08 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c9b8:	bd08      	pop	{r3, pc}

0800c9ba <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800c9ba:	b108      	cbz	r0, 800c9c0 <RegionRxConfig+0x6>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c9bc:	2000      	movs	r0, #0
        }
    }
}
 800c9be:	4770      	bx	lr
{
 800c9c0:	b508      	push	{r3, lr}
 800c9c2:	460b      	mov	r3, r1
        AS923_RX_CONFIG( );
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 fad4 	bl	800cf74 <RegionAS923RxConfig>
}
 800c9cc:	bd08      	pop	{r3, pc}

0800c9ce <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800c9ce:	b108      	cbz	r0, 800c9d4 <RegionTxConfig+0x6>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c9d0:	2000      	movs	r0, #0
        }
    }
}
 800c9d2:	4770      	bx	lr
{
 800c9d4:	b508      	push	{r3, lr}
 800c9d6:	468c      	mov	ip, r1
 800c9d8:	4611      	mov	r1, r2
        AS923_TX_CONFIG( );
 800c9da:	461a      	mov	r2, r3
 800c9dc:	4660      	mov	r0, ip
 800c9de:	f000 fb4d 	bl	800d07c <RegionAS923TxConfig>
}
 800c9e2:	bd08      	pop	{r3, pc}

0800c9e4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800c9e4:	b108      	cbz	r0, 800c9ea <RegionLinkAdrReq+0x6>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c9e6:	2000      	movs	r0, #0
        }
    }
}
 800c9e8:	4770      	bx	lr
{
 800c9ea:	b500      	push	{lr}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	468c      	mov	ip, r1
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	461a      	mov	r2, r3
        AS923_LINK_ADR_REQ( );
 800c9f4:	9b05      	ldr	r3, [sp, #20]
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	9b04      	ldr	r3, [sp, #16]
 800c9fa:	4660      	mov	r0, ip
 800c9fc:	f000 fbd6 	bl	800d1ac <RegionAS923LinkAdrReq>
}
 800ca00:	b003      	add	sp, #12
 800ca02:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca06 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800ca06:	b108      	cbz	r0, 800ca0c <RegionRxParamSetupReq+0x6>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800ca08:	2000      	movs	r0, #0
        }
    }
}
 800ca0a:	4770      	bx	lr
{
 800ca0c:	b508      	push	{r3, lr}
        AS923_RX_PARAM_SETUP_REQ( );
 800ca0e:	4608      	mov	r0, r1
 800ca10:	f000 fc92 	bl	800d338 <RegionAS923RxParamSetupReq>
}
 800ca14:	bd08      	pop	{r3, pc}

0800ca16 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800ca16:	b108      	cbz	r0, 800ca1c <RegionNewChannelReq+0x6>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800ca18:	2000      	movs	r0, #0
        }
    }
}
 800ca1a:	4770      	bx	lr
{
 800ca1c:	b508      	push	{r3, lr}
        AS923_NEW_CHANNEL_REQ( );
 800ca1e:	4608      	mov	r0, r1
 800ca20:	f000 fe09 	bl	800d636 <RegionAS923NewChannelReq>
}
 800ca24:	bd08      	pop	{r3, pc}

0800ca26 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800ca26:	b108      	cbz	r0, 800ca2c <RegionTxParamSetupReq+0x6>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800ca28:	2000      	movs	r0, #0
        }
    }
}
 800ca2a:	4770      	bx	lr
{
 800ca2c:	b508      	push	{r3, lr}
        AS923_TX_PARAM_SETUP_REQ( );
 800ca2e:	4608      	mov	r0, r1
 800ca30:	f000 fc9f 	bl	800d372 <RegionAS923TxParamSetupReq>
}
 800ca34:	bd08      	pop	{r3, pc}

0800ca36 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800ca36:	b108      	cbz	r0, 800ca3c <RegionDlChannelReq+0x6>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800ca38:	2000      	movs	r0, #0
        }
    }
}
 800ca3a:	4770      	bx	lr
{
 800ca3c:	b508      	push	{r3, lr}
        AS923_DL_CHANNEL_REQ( );
 800ca3e:	4608      	mov	r0, r1
 800ca40:	f000 fc9a 	bl	800d378 <RegionAS923DlChannelReq>
}
 800ca44:	bd08      	pop	{r3, pc}

0800ca46 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800ca46:	b108      	cbz	r0, 800ca4c <RegionAlternateDr+0x6>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800ca48:	2000      	movs	r0, #0
        }
    }
}
 800ca4a:	4770      	bx	lr
{
 800ca4c:	b508      	push	{r3, lr}
 800ca4e:	460b      	mov	r3, r1
        AS923_ALTERNATE_DR( );
 800ca50:	4611      	mov	r1, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 fcb6 	bl	800d3c4 <RegionAS923AlternateDr>
}
 800ca58:	bd08      	pop	{r3, pc}

0800ca5a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800ca5a:	b108      	cbz	r0, 800ca60 <RegionNextChannel+0x6>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ca5c:	2009      	movs	r0, #9
        }
    }
}
 800ca5e:	4770      	bx	lr
{
 800ca60:	b508      	push	{r3, lr}
 800ca62:	468c      	mov	ip, r1
 800ca64:	4611      	mov	r1, r2
 800ca66:	461a      	mov	r2, r3
        AS923_NEXT_CHANNEL( );
 800ca68:	9b02      	ldr	r3, [sp, #8]
 800ca6a:	4660      	mov	r0, ip
 800ca6c:	f000 fcac 	bl	800d3c8 <RegionAS923NextChannel>
}
 800ca70:	bd08      	pop	{r3, pc}

0800ca72 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ca72:	468c      	mov	ip, r1
 800ca74:	4611      	mov	r1, r2
    switch( region )
 800ca76:	b108      	cbz	r0, 800ca7c <RegionApplyDrOffset+0xa>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800ca78:	b2d0      	uxtb	r0, r2
        }
    }
}
 800ca7a:	4770      	bx	lr
{
 800ca7c:	b508      	push	{r3, lr}
        AS923_APPLY_DR_OFFSET( );
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4660      	mov	r0, ip
 800ca82:	f000 fe03 	bl	800d68c <RegionAS923ApplyDrOffset>
}
 800ca86:	bd08      	pop	{r3, pc}

0800ca88 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800ca88:	4800      	ldr	r0, [pc, #0]	@ (800ca8c <RegionGetVersion+0x4>)
 800ca8a:	4770      	bx	lr
 800ca8c:	02010003 	.word	0x02010003

0800ca90 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800ca90:	b510      	push	{r4, lr}
 800ca92:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800ca94:	4b05      	ldr	r3, [pc, #20]	@ (800caac <VerifyRfFreq+0x1c>)
 800ca96:	6a1b      	ldr	r3, [r3, #32]
 800ca98:	4798      	blx	r3
 800ca9a:	b120      	cbz	r0, 800caa6 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 800ca9c:	4b04      	ldr	r3, [pc, #16]	@ (800cab0 <VerifyRfFreq+0x20>)
 800ca9e:	4423      	add	r3, r4
 800caa0:	4a04      	ldr	r2, [pc, #16]	@ (800cab4 <VerifyRfFreq+0x24>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d800      	bhi.n	800caa8 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800caa6:	bd10      	pop	{r4, pc}
        return false;
 800caa8:	2000      	movs	r0, #0
 800caaa:	e7fc      	b.n	800caa6 <VerifyRfFreq+0x16>
 800caac:	08013274 	.word	0x08013274
 800cab0:	c957b0c0 	.word	0xc957b0c0
 800cab4:	002dc6c0 	.word	0x002dc6c0

0800cab8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800cab8:	b570      	push	{r4, r5, r6, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 800cac0:	4b13      	ldr	r3, [pc, #76]	@ (800cb10 <GetTimeOnAir+0x58>)
 800cac2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 800cac4:	4913      	ldr	r1, [pc, #76]	@ (800cb14 <GetTimeOnAir+0x5c>)
 800cac6:	f001 f90b 	bl	800dce0 <RegionCommonGetBandwidth>
 800caca:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800cacc:	2d07      	cmp	r5, #7
 800cace:	d00e      	beq.n	800caee <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800cad0:	4b11      	ldr	r3, [pc, #68]	@ (800cb18 <GetTimeOnAir+0x60>)
 800cad2:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800cad4:	2001      	movs	r0, #1
 800cad6:	9003      	str	r0, [sp, #12]
 800cad8:	b2e4      	uxtb	r4, r4
 800cada:	9402      	str	r4, [sp, #8]
 800cadc:	2300      	movs	r3, #0
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2308      	movs	r3, #8
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	4603      	mov	r3, r0
 800cae6:	4632      	mov	r2, r6
 800cae8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800caea:	b004      	add	sp, #16
 800caec:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800caee:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <GetTimeOnAir+0x60>)
 800caf0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800caf2:	2301      	movs	r3, #1
 800caf4:	9303      	str	r3, [sp, #12]
 800caf6:	b2e4      	uxtb	r4, r4
 800caf8:	9402      	str	r4, [sp, #8]
 800cafa:	2000      	movs	r0, #0
 800cafc:	9001      	str	r0, [sp, #4]
 800cafe:	2305      	movs	r3, #5
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4603      	mov	r3, r0
 800cb04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cb08:	fb06 f202 	mul.w	r2, r6, r2
 800cb0c:	47a8      	blx	r5
 800cb0e:	e7ec      	b.n	800caea <GetTimeOnAir+0x32>
 800cb10:	08012ecc 	.word	0x08012ecc
 800cb14:	08012eac 	.word	0x08012eac
 800cb18:	08013274 	.word	0x08013274

0800cb1c <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800cb1c:	b500      	push	{lr}
 800cb1e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800cb20:	2300      	movs	r3, #0
 800cb22:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 800cb24:	7803      	ldrb	r3, [r0, #0]
 800cb26:	3b01      	subs	r3, #1
 800cb28:	2b37      	cmp	r3, #55	@ 0x37
 800cb2a:	d845      	bhi.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
 800cb2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cb30:	003d0038 	.word	0x003d0038
 800cb34:	00440044 	.word	0x00440044
 800cb38:	00420044 	.word	0x00420044
 800cb3c:	00440044 	.word	0x00440044
 800cb40:	00440044 	.word	0x00440044
 800cb44:	00660063 	.word	0x00660063
 800cb48:	00770069 	.word	0x00770069
 800cb4c:	00850044 	.word	0x00850044
 800cb50:	008d0089 	.word	0x008d0089
 800cb54:	00950091 	.word	0x00950091
 800cb58:	00440099 	.word	0x00440099
 800cb5c:	00a500a2 	.word	0x00a500a2
 800cb60:	00ae00a8 	.word	0x00ae00a8
 800cb64:	00b700b4 	.word	0x00b700b4
 800cb68:	004400bb 	.word	0x004400bb
 800cb6c:	00c200be 	.word	0x00c200be
 800cb70:	00440049 	.word	0x00440049
 800cb74:	00440044 	.word	0x00440044
 800cb78:	00440044 	.word	0x00440044
 800cb7c:	00440044 	.word	0x00440044
 800cb80:	00440044 	.word	0x00440044
 800cb84:	00440044 	.word	0x00440044
 800cb88:	00440044 	.word	0x00440044
 800cb8c:	00c800c5 	.word	0x00c800c5
 800cb90:	004400cf 	.word	0x004400cf
 800cb94:	00d20044 	.word	0x00d20044
 800cb98:	004400d5 	.word	0x004400d5
 800cb9c:	00de00d8 	.word	0x00de00d8
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800cba0:	78c3      	ldrb	r3, [r0, #3]
 800cba2:	b14b      	cbz	r3, 800cbb8 <RegionAS923GetPhyParam+0x9c>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800cba4:	2302      	movs	r3, #2
 800cba6:	9304      	str	r3, [sp, #16]
 800cba8:	e006      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800cbaa:	7883      	ldrb	r3, [r0, #2]
 800cbac:	b123      	cbz	r3, 800cbb8 <RegionAS923GetPhyParam+0x9c>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800cbae:	2302      	movs	r3, #2
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	e001      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 800cbb8:	9804      	ldr	r0, [sp, #16]
 800cbba:	9005      	str	r0, [sp, #20]
}
 800cbbc:	b007      	add	sp, #28
 800cbbe:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800cbc2:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cbc6:	f88d 3004 	strb.w	r3, [sp, #4]
 800cbca:	2307      	movs	r3, #7
 800cbcc:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 800cbd0:	7883      	ldrb	r3, [r0, #2]
 800cbd2:	b103      	cbz	r3, 800cbd6 <RegionAS923GetPhyParam+0xba>
 800cbd4:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cbd6:	f88d 3006 	strb.w	r3, [sp, #6]
 800cbda:	2310      	movs	r3, #16
 800cbdc:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800cbe0:	4b46      	ldr	r3, [pc, #280]	@ (800ccfc <RegionAS923GetPhyParam+0x1e0>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cbe8:	9202      	str	r2, [sp, #8]
 800cbea:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800cbec:	a801      	add	r0, sp, #4
 800cbee:	f001 f854 	bl	800dc9a <RegionCommonGetNextLowerTxDr>
 800cbf2:	9004      	str	r0, [sp, #16]
            break;
 800cbf4:	e7e0      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800cbf6:	2340      	movs	r3, #64	@ 0x40
 800cbf8:	9304      	str	r3, [sp, #16]
            break;
 800cbfa:	e7dd      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800cbfc:	2320      	movs	r3, #32
 800cbfe:	9304      	str	r3, [sp, #16]
            break;
 800cc00:	e7da      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            if( getPhy->UplinkDwellTime == 0 )
 800cc02:	7883      	ldrb	r3, [r0, #2]
 800cc04:	b92b      	cbnz	r3, 800cc12 <RegionAS923GetPhyParam+0xf6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800cc06:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cc0a:	4a3d      	ldr	r2, [pc, #244]	@ (800cd00 <RegionAS923GetPhyParam+0x1e4>)
 800cc0c:	5cd3      	ldrb	r3, [r2, r3]
 800cc0e:	9304      	str	r3, [sp, #16]
 800cc10:	e7d2      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800cc12:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cc16:	4a3b      	ldr	r2, [pc, #236]	@ (800cd04 <RegionAS923GetPhyParam+0x1e8>)
 800cc18:	5cd3      	ldrb	r3, [r2, r3]
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	e7cc      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            if( getPhy->UplinkDwellTime == 0 )
 800cc1e:	7883      	ldrb	r3, [r0, #2]
 800cc20:	b92b      	cbnz	r3, 800cc2e <RegionAS923GetPhyParam+0x112>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800cc22:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cc26:	4a38      	ldr	r2, [pc, #224]	@ (800cd08 <RegionAS923GetPhyParam+0x1ec>)
 800cc28:	5cd3      	ldrb	r3, [r2, r3]
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	e7c4      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800cc2e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cc32:	4a34      	ldr	r2, [pc, #208]	@ (800cd04 <RegionAS923GetPhyParam+0x1e8>)
 800cc34:	5cd3      	ldrb	r3, [r2, r3]
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	e7be      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800cc3a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800cc3e:	9304      	str	r3, [sp, #16]
            break;
 800cc40:	e7ba      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800cc42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cc46:	9304      	str	r3, [sp, #16]
            break;
 800cc48:	e7b6      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800cc4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800cc4e:	9304      	str	r3, [sp, #16]
            break;
 800cc50:	e7b2      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800cc52:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cc56:	9304      	str	r3, [sp, #16]
            break;
 800cc58:	e7ae      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cc5a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800cc5e:	9304      	str	r3, [sp, #16]
            break;
 800cc60:	e7aa      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800cc62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800cc66:	4829      	ldr	r0, [pc, #164]	@ (800cd0c <RegionAS923GetPhyParam+0x1f0>)
 800cc68:	f001 ff9c 	bl	800eba4 <randr>
 800cc6c:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800cc70:	9004      	str	r0, [sp, #16]
            break;
 800cc72:	e7a1      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 800cc74:	4b26      	ldr	r3, [pc, #152]	@ (800cd10 <RegionAS923GetPhyParam+0x1f4>)
 800cc76:	9304      	str	r3, [sp, #16]
            break;
 800cc78:	e79e      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_RX_WND_2_DR;
 800cc7a:	2302      	movs	r3, #2
 800cc7c:	9304      	str	r3, [sp, #16]
            break;
 800cc7e:	e79b      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cc80:	4b1e      	ldr	r3, [pc, #120]	@ (800ccfc <RegionAS923GetPhyParam+0x1e0>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800cc88:	9304      	str	r3, [sp, #16]
            break;
 800cc8a:	e795      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800cc8c:	4b1b      	ldr	r3, [pc, #108]	@ (800ccfc <RegionAS923GetPhyParam+0x1e0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800cc94:	9304      	str	r3, [sp, #16]
            break;
 800cc96:	e78f      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800cc98:	2310      	movs	r3, #16
 800cc9a:	9304      	str	r3, [sp, #16]
            break;
 800cc9c:	e78c      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cc9e:	4b17      	ldr	r3, [pc, #92]	@ (800ccfc <RegionAS923GetPhyParam+0x1e0>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	9304      	str	r3, [sp, #16]
            break;
 800cca4:	e788      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800cca6:	2301      	movs	r3, #1
 800cca8:	9304      	str	r3, [sp, #16]
            break;
 800ccaa:	e785      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800ccac:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800ccb0:	9304      	str	r3, [sp, #16]
            break;
 800ccb2:	e781      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800ccb4:	4b17      	ldr	r3, [pc, #92]	@ (800cd14 <RegionAS923GetPhyParam+0x1f8>)
 800ccb6:	9304      	str	r3, [sp, #16]
            break;
 800ccb8:	e77e      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800ccba:	4b17      	ldr	r3, [pc, #92]	@ (800cd18 <RegionAS923GetPhyParam+0x1fc>)
 800ccbc:	9304      	str	r3, [sp, #16]
            break;
 800ccbe:	e77b      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800ccc0:	2311      	movs	r3, #17
 800ccc2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800cccc:	e774      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	9304      	str	r3, [sp, #16]
            break;
 800ccd2:	e771      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800ccd4:	4b10      	ldr	r3, [pc, #64]	@ (800cd18 <RegionAS923GetPhyParam+0x1fc>)
 800ccd6:	9304      	str	r3, [sp, #16]
            break;
 800ccd8:	e76e      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	9304      	str	r3, [sp, #16]
            break;
 800ccde:	e76b      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800cce0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cce4:	4a0d      	ldr	r2, [pc, #52]	@ (800cd1c <RegionAS923GetPhyParam+0x200>)
 800cce6:	5cd3      	ldrb	r3, [r2, r3]
 800cce8:	9304      	str	r3, [sp, #16]
            break;
 800ccea:	e765      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 800ccec:	490c      	ldr	r1, [pc, #48]	@ (800cd20 <RegionAS923GetPhyParam+0x204>)
 800ccee:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ccf2:	f000 fff5 	bl	800dce0 <RegionCommonGetBandwidth>
 800ccf6:	9004      	str	r0, [sp, #16]
            break;
 800ccf8:	e75e      	b.n	800cbb8 <RegionAS923GetPhyParam+0x9c>
 800ccfa:	bf00      	nop
 800ccfc:	20000ec4 	.word	0x20000ec4
 800cd00:	08012ea4 	.word	0x08012ea4
 800cd04:	08012e94 	.word	0x08012e94
 800cd08:	08012e9c 	.word	0x08012e9c
 800cd0c:	fffffc18 	.word	0xfffffc18
 800cd10:	36ace320 	.word	0x36ace320
 800cd14:	4009999a 	.word	0x4009999a
 800cd18:	36aff060 	.word	0x36aff060
 800cd1c:	08012ecc 	.word	0x08012ecc
 800cd20:	08012eac 	.word	0x08012eac

0800cd24 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800cd24:	b510      	push	{r4, lr}
 800cd26:	b082      	sub	sp, #8
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cd28:	4b0b      	ldr	r3, [pc, #44]	@ (800cd58 <RegionAS923SetBandTxDone+0x34>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	7803      	ldrb	r3, [r0, #0]
 800cd2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cd32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd36:	7a5b      	ldrb	r3, [r3, #9]
 800cd38:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800cd3c:	4b07      	ldr	r3, [pc, #28]	@ (800cd5c <RegionAS923SetBandTxDone+0x38>)
 800cd3e:	681c      	ldr	r4, [r3, #0]
 800cd40:	6903      	ldr	r3, [r0, #16]
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	68c3      	ldr	r3, [r0, #12]
 800cd46:	7842      	ldrb	r2, [r0, #1]
 800cd48:	6881      	ldr	r1, [r0, #8]
 800cd4a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800cd4e:	f000 fdab 	bl	800d8a8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 800cd52:	b002      	add	sp, #8
 800cd54:	bd10      	pop	{r4, pc}
 800cd56:	bf00      	nop
 800cd58:	20000ec4 	.word	0x20000ec4
 800cd5c:	20000ec0 	.word	0x20000ec0

0800cd60 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800cd60:	b510      	push	{r4, lr}
 800cd62:	b086      	sub	sp, #24
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 800cd64:	2364      	movs	r3, #100	@ 0x64
 800cd66:	f8ad 3000 	strh.w	r3, [sp]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f88d 3002 	strb.w	r3, [sp, #2]
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	9302      	str	r3, [sp, #8]
 800cd74:	9303      	str	r3, [sp, #12]
 800cd76:	9304      	str	r3, [sp, #16]
 800cd78:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800cd7c:	7b03      	ldrb	r3, [r0, #12]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d031      	beq.n	800cde6 <RegionAS923InitDefaults+0x86>
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d03d      	beq.n	800ce02 <RegionAS923InitDefaults+0xa2>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d139      	bne.n	800cdfe <RegionAS923InitDefaults+0x9e>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cd8a:	6803      	ldr	r3, [r0, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d036      	beq.n	800cdfe <RegionAS923InitDefaults+0x9e>
 800cd90:	6843      	ldr	r3, [r0, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d033      	beq.n	800cdfe <RegionAS923InitDefaults+0x9e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cd96:	4c20      	ldr	r4, [pc, #128]	@ (800ce18 <RegionAS923InitDefaults+0xb8>)
 800cd98:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800cd9a:	6880      	ldr	r0, [r0, #8]
 800cd9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ce1c <RegionAS923InitDefaults+0xbc>)
 800cd9e:	6018      	str	r0, [r3, #0]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800cda0:	2218      	movs	r2, #24
 800cda2:	4669      	mov	r1, sp
 800cda4:	f001 ff0b 	bl	800ebbe <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	4c1d      	ldr	r4, [pc, #116]	@ (800ce20 <RegionAS923InitDefaults+0xc0>)
 800cdac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cdb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800cdb4:	f103 0c0c 	add.w	ip, r3, #12
 800cdb8:	340c      	adds	r4, #12
 800cdba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cdbe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

            // Apply frequency offset
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 800cdc2:	4a18      	ldr	r2, [pc, #96]	@ (800ce24 <RegionAS923InitDefaults+0xc4>)
 800cdc4:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 800cdc6:	f502 3243 	add.w	r2, r2, #199680	@ 0x30c00
 800cdca:	f502 72a0 	add.w	r2, r2, #320	@ 0x140
 800cdce:	60da      	str	r2, [r3, #12]

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f503 715b 	add.w	r1, r3, #876	@ 0x36c
 800cddc:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800cde0:	f000 fd53 	bl	800d88a <RegionCommonChanMaskCopy>
	( REGION_AS923_DEFAULT_CHANNEL_PLAN == CHANNEL_PLAN_GROUP_AS923_1_JP_CH24_CH38_LBT ) || \
      ( REGION_AS923_DEFAULT_CHANNEL_PLAN == CHANNEL_PLAN_GROUP_AS923_1_JP_CH37_CH61_LBT_DC ) )
            RegionNvmGroup2->RssiFreeThreshold = AS923_RSSI_FREE_TH;
            RegionNvmGroup2->CarrierSenseTime = AS923_CARRIER_SENSE_TIME;
#endif
            break;
 800cde4:	e00b      	b.n	800cdfe <RegionAS923InitDefaults+0x9e>
        }
        case INIT_TYPE_RESET_TO_DEFAULT_CHANNELS:
        {
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800cde6:	4b0c      	ldr	r3, [pc, #48]	@ (800ce18 <RegionAS923InitDefaults+0xb8>)
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	2300      	movs	r3, #0
 800cdec:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800cdee:	6103      	str	r3, [r0, #16]
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800cdf6:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800cdfa:	f000 fd46 	bl	800d88a <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 800cdfe:	b006      	add	sp, #24
 800ce00:	bd10      	pop	{r4, pc}
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ce02:	4b05      	ldr	r3, [pc, #20]	@ (800ce18 <RegionAS923InitDefaults+0xb8>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800ce0a:	f8b3 136c 	ldrh.w	r1, [r3, #876]	@ 0x36c
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 800ce14:	e7f3      	b.n	800cdfe <RegionAS923InitDefaults+0x9e>
 800ce16:	bf00      	nop
 800ce18:	20000ec4 	.word	0x20000ec4
 800ce1c:	20000ec0 	.word	0x20000ec0
 800ce20:	080124c0 	.word	0x080124c0
 800ce24:	36ace320 	.word	0x36ace320

0800ce28 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ce28:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800ce2a:	290a      	cmp	r1, #10
 800ce2c:	d84b      	bhi.n	800cec6 <RegionAS923Verify+0x9e>
 800ce2e:	e8df f001 	tbb	[pc, r1]
 800ce32:	4a06      	.short	0x4a06
 800ce34:	0a4a4a4a 	.word	0x0a4a4a4a
 800ce38:	404a2a20 	.word	0x404a2a20
 800ce3c:	40          	.byte	0x40
 800ce3d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800ce3e:	6800      	ldr	r0, [r0, #0]
 800ce40:	f7ff fe26 	bl	800ca90 <VerifyRfFreq>
 800ce44:	e040      	b.n	800cec8 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800ce46:	7883      	ldrb	r3, [r0, #2]
 800ce48:	b94b      	cbnz	r3, 800ce5e <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800ce4a:	2207      	movs	r2, #7
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	f990 0000 	ldrsb.w	r0, [r0]
 800ce52:	f000 fca6 	bl	800d7a2 <RegionCommonValueInRange>
 800ce56:	3800      	subs	r0, #0
 800ce58:	bf18      	it	ne
 800ce5a:	2001      	movne	r0, #1
 800ce5c:	e034      	b.n	800cec8 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800ce5e:	2207      	movs	r2, #7
 800ce60:	2102      	movs	r1, #2
 800ce62:	f990 0000 	ldrsb.w	r0, [r0]
 800ce66:	f000 fc9c 	bl	800d7a2 <RegionCommonValueInRange>
 800ce6a:	3800      	subs	r0, #0
 800ce6c:	bf18      	it	ne
 800ce6e:	2001      	movne	r0, #1
 800ce70:	e02a      	b.n	800cec8 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ce72:	2205      	movs	r2, #5
 800ce74:	2100      	movs	r1, #0
 800ce76:	f990 0000 	ldrsb.w	r0, [r0]
 800ce7a:	f000 fc92 	bl	800d7a2 <RegionCommonValueInRange>
 800ce7e:	3800      	subs	r0, #0
 800ce80:	bf18      	it	ne
 800ce82:	2001      	movne	r0, #1
 800ce84:	e020      	b.n	800cec8 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800ce86:	7843      	ldrb	r3, [r0, #1]
 800ce88:	b94b      	cbnz	r3, 800ce9e <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800ce8a:	2207      	movs	r2, #7
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	f990 0000 	ldrsb.w	r0, [r0]
 800ce92:	f000 fc86 	bl	800d7a2 <RegionCommonValueInRange>
 800ce96:	3800      	subs	r0, #0
 800ce98:	bf18      	it	ne
 800ce9a:	2001      	movne	r0, #1
 800ce9c:	e014      	b.n	800cec8 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800ce9e:	2207      	movs	r2, #7
 800cea0:	2102      	movs	r1, #2
 800cea2:	f990 0000 	ldrsb.w	r0, [r0]
 800cea6:	f000 fc7c 	bl	800d7a2 <RegionCommonValueInRange>
 800ceaa:	3800      	subs	r0, #0
 800ceac:	bf18      	it	ne
 800ceae:	2001      	movne	r0, #1
 800ceb0:	e00a      	b.n	800cec8 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800ceb2:	2207      	movs	r2, #7
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	f990 0000 	ldrsb.w	r0, [r0]
 800ceba:	f000 fc72 	bl	800d7a2 <RegionCommonValueInRange>
 800cebe:	3800      	subs	r0, #0
 800cec0:	bf18      	it	ne
 800cec2:	2001      	movne	r0, #1
 800cec4:	e000      	b.n	800cec8 <RegionAS923Verify+0xa0>
    switch( phyAttribute )
 800cec6:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800cec8:	bd08      	pop	{r3, pc}
	...

0800cecc <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800cecc:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800cece:	7903      	ldrb	r3, [r0, #4]
 800ced0:	b11b      	cbz	r3, 800ceda <RegionAS923ChanMaskSet+0xe>
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d00b      	beq.n	800ceee <RegionAS923ChanMaskSet+0x22>
 800ced6:	2000      	movs	r0, #0
 800ced8:	e008      	b.n	800ceec <RegionAS923ChanMaskSet+0x20>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800ceda:	4b0a      	ldr	r3, [pc, #40]	@ (800cf04 <RegionAS923ChanMaskSet+0x38>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2201      	movs	r2, #1
 800cee0:	6801      	ldr	r1, [r0, #0]
 800cee2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800cee6:	f000 fcd0 	bl	800d88a <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800ceea:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800ceec:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800ceee:	4b05      	ldr	r3, [pc, #20]	@ (800cf04 <RegionAS923ChanMaskSet+0x38>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2201      	movs	r2, #1
 800cef4:	6801      	ldr	r1, [r0, #0]
 800cef6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800cefa:	f000 fcc6 	bl	800d88a <RegionCommonChanMaskCopy>
    return true;
 800cefe:	2001      	movs	r0, #1
            break;
 800cf00:	e7f4      	b.n	800ceec <RegionAS923ChanMaskSet+0x20>
 800cf02:	bf00      	nop
 800cf04:	20000ec4 	.word	0x20000ec4

0800cf08 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	460e      	mov	r6, r1
 800cf0e:	4617      	mov	r7, r2
 800cf10:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800cf12:	2807      	cmp	r0, #7
 800cf14:	bfa8      	it	ge
 800cf16:	2007      	movge	r0, #7
 800cf18:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800cf1a:	4913      	ldr	r1, [pc, #76]	@ (800cf68 <RegionAS923ComputeRxWindowParameters+0x60>)
 800cf1c:	f000 fee0 	bl	800dce0 <RegionCommonGetBandwidth>
 800cf20:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800cf22:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800cf26:	2b07      	cmp	r3, #7
 800cf28:	d017      	beq.n	800cf5a <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800cf2a:	4a0f      	ldr	r2, [pc, #60]	@ (800cf68 <RegionAS923ComputeRxWindowParameters+0x60>)
 800cf2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cf30:	4a0e      	ldr	r2, [pc, #56]	@ (800cf6c <RegionAS923ComputeRxWindowParameters+0x64>)
 800cf32:	5cd0      	ldrb	r0, [r2, r3]
 800cf34:	f000 fda4 	bl	800da80 <RegionCommonComputeSymbolTimeLoRa>
 800cf38:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800cf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf70 <RegionAS923ComputeRxWindowParameters+0x68>)
 800cf3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf3e:	4798      	blx	r3
 800cf40:	4603      	mov	r3, r0
 800cf42:	f104 020c 	add.w	r2, r4, #12
 800cf46:	9201      	str	r2, [sp, #4]
 800cf48:	3408      	adds	r4, #8
 800cf4a:	9400      	str	r4, [sp, #0]
 800cf4c:	463a      	mov	r2, r7
 800cf4e:	4631      	mov	r1, r6
 800cf50:	4628      	mov	r0, r5
 800cf52:	f000 fda3 	bl	800da9c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800cf56:	b003      	add	sp, #12
 800cf58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800cf5a:	4a04      	ldr	r2, [pc, #16]	@ (800cf6c <RegionAS923ComputeRxWindowParameters+0x64>)
 800cf5c:	5cd0      	ldrb	r0, [r2, r3]
 800cf5e:	f000 fd97 	bl	800da90 <RegionCommonComputeSymbolTimeFsk>
 800cf62:	4605      	mov	r5, r0
 800cf64:	e7e9      	b.n	800cf3a <RegionAS923ComputeRxWindowParameters+0x32>
 800cf66:	bf00      	nop
 800cf68:	08012eac 	.word	0x08012eac
 800cf6c:	08012ecc 	.word	0x08012ecc
 800cf70:	08013274 	.word	0x08013274

0800cf74 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf78:	b08a      	sub	sp, #40	@ 0x28
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800cf7e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800cf82:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cf86:	4b37      	ldr	r3, [pc, #220]	@ (800d064 <RegionAS923RxConfig+0xf0>)
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	4798      	blx	r3
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d167      	bne.n	800d060 <RegionAS923RxConfig+0xec>
 800cf90:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800cf92:	7ce3      	ldrb	r3, [r4, #19]
 800cf94:	b983      	cbnz	r3, 800cfb8 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800cf96:	4b34      	ldr	r3, [pc, #208]	@ (800d068 <RegionAS923RxConfig+0xf4>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	7823      	ldrb	r3, [r4, #0]
 800cf9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cfa0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800cfa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cfa8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cfac:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800cfb0:	f1b8 0f00 	cmp.w	r8, #0
 800cfb4:	d100      	bne.n	800cfb8 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800cfb6:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800cfb8:	4b2c      	ldr	r3, [pc, #176]	@ (800d06c <RegionAS923RxConfig+0xf8>)
 800cfba:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800cfbe:	4b29      	ldr	r3, [pc, #164]	@ (800d064 <RegionAS923RxConfig+0xf0>)
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800cfc6:	2d07      	cmp	r5, #7
 800cfc8:	d02b      	beq.n	800d022 <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800cfca:	4b26      	ldr	r3, [pc, #152]	@ (800d064 <RegionAS923RxConfig+0xf0>)
 800cfcc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800cfd0:	7ca3      	ldrb	r3, [r4, #18]
 800cfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd4:	2601      	movs	r6, #1
 800cfd6:	9608      	str	r6, [sp, #32]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9307      	str	r3, [sp, #28]
 800cfdc:	9306      	str	r3, [sp, #24]
 800cfde:	9305      	str	r3, [sp, #20]
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	9303      	str	r3, [sp, #12]
 800cfe4:	8922      	ldrh	r2, [r4, #8]
 800cfe6:	9202      	str	r2, [sp, #8]
 800cfe8:	2208      	movs	r2, #8
 800cfea:	9201      	str	r2, [sp, #4]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	4633      	mov	r3, r6
 800cff0:	464a      	mov	r2, r9
 800cff2:	78a1      	ldrb	r1, [r4, #2]
 800cff4:	4630      	mov	r0, r6
 800cff6:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800cff8:	7c63      	ldrb	r3, [r4, #17]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d02d      	beq.n	800d05a <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800cffe:	4b1c      	ldr	r3, [pc, #112]	@ (800d070 <RegionAS923RxConfig+0xfc>)
 800d000:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d002:	4b18      	ldr	r3, [pc, #96]	@ (800d064 <RegionAS923RxConfig+0xf0>)
 800d004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d006:	310d      	adds	r1, #13
 800d008:	b2c9      	uxtb	r1, r1
 800d00a:	4630      	mov	r0, r6
 800d00c:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d00e:	462a      	mov	r2, r5
 800d010:	4641      	mov	r1, r8
 800d012:	7ce0      	ldrb	r0, [r4, #19]
 800d014:	f000 fe76 	bl	800dd04 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800d018:	703d      	strb	r5, [r7, #0]
    return true;
 800d01a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800d01c:	b00a      	add	sp, #40	@ 0x28
 800d01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d022:	4b10      	ldr	r3, [pc, #64]	@ (800d064 <RegionAS923RxConfig+0xf0>)
 800d024:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d028:	7ca3      	ldrb	r3, [r4, #18]
 800d02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d02c:	2000      	movs	r0, #0
 800d02e:	9008      	str	r0, [sp, #32]
 800d030:	9007      	str	r0, [sp, #28]
 800d032:	9006      	str	r0, [sp, #24]
 800d034:	2301      	movs	r3, #1
 800d036:	9305      	str	r3, [sp, #20]
 800d038:	9004      	str	r0, [sp, #16]
 800d03a:	9003      	str	r0, [sp, #12]
 800d03c:	8923      	ldrh	r3, [r4, #8]
 800d03e:	9302      	str	r3, [sp, #8]
 800d040:	2305      	movs	r3, #5
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	4b0b      	ldr	r3, [pc, #44]	@ (800d074 <RegionAS923RxConfig+0x100>)
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	4603      	mov	r3, r0
 800d04a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d04e:	fb02 f209 	mul.w	r2, r2, r9
 800d052:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d056:	47d0      	blx	sl
 800d058:	e7ce      	b.n	800cff8 <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800d05a:	4b07      	ldr	r3, [pc, #28]	@ (800d078 <RegionAS923RxConfig+0x104>)
 800d05c:	5d59      	ldrb	r1, [r3, r5]
 800d05e:	e7d0      	b.n	800d002 <RegionAS923RxConfig+0x8e>
        return false;
 800d060:	2000      	movs	r0, #0
 800d062:	e7db      	b.n	800d01c <RegionAS923RxConfig+0xa8>
 800d064:	08013274 	.word	0x08013274
 800d068:	20000ec4 	.word	0x20000ec4
 800d06c:	08012ecc 	.word	0x08012ecc
 800d070:	08012e9c 	.word	0x08012e9c
 800d074:	00014585 	.word	0x00014585
 800d078:	08012ea4 	.word	0x08012ea4

0800d07c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	b08d      	sub	sp, #52	@ 0x34
 800d082:	4604      	mov	r4, r0
 800d084:	460f      	mov	r7, r1
 800d086:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800d088:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d08c:	4a42      	ldr	r2, [pc, #264]	@ (800d198 <RegionAS923TxConfig+0x11c>)
 800d08e:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d092:	4d42      	ldr	r5, [pc, #264]	@ (800d19c <RegionAS923TxConfig+0x120>)
 800d094:	682a      	ldr	r2, [r5, #0]
 800d096:	7803      	ldrb	r3, [r0, #0]
 800d098:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d09c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d0a0:	7a53      	ldrb	r3, [r2, #9]
 800d0a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d0a6:	4a3e      	ldr	r2, [pc, #248]	@ (800d1a0 <RegionAS923TxConfig+0x124>)
 800d0a8:	6812      	ldr	r2, [r2, #0]
 800d0aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0ae:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d0b2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d0b6:	f000 fe0f 	bl	800dcd8 <RegionCommonLimitTxPower>
 800d0ba:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800d0bc:	4939      	ldr	r1, [pc, #228]	@ (800d1a4 <RegionAS923TxConfig+0x128>)
 800d0be:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d0c2:	f000 fe0d 	bl	800dce0 <RegionCommonGetBandwidth>
 800d0c6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d0c8:	68a2      	ldr	r2, [r4, #8]
 800d0ca:	6861      	ldr	r1, [r4, #4]
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f000 fd21 	bl	800db14 <RegionCommonComputeTxPower>
 800d0d2:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d0d4:	4b34      	ldr	r3, [pc, #208]	@ (800d1a8 <RegionAS923TxConfig+0x12c>)
 800d0d6:	68da      	ldr	r2, [r3, #12]
 800d0d8:	6829      	ldr	r1, [r5, #0]
 800d0da:	7823      	ldrb	r3, [r4, #0]
 800d0dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d0e0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d0e4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d0e6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d0ea:	2b07      	cmp	r3, #7
 800d0ec:	d031      	beq.n	800d152 <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d0ee:	4b2e      	ldr	r3, [pc, #184]	@ (800d1a8 <RegionAS923TxConfig+0x12c>)
 800d0f0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d0f4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d0f8:	9308      	str	r3, [sp, #32]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	9207      	str	r2, [sp, #28]
 800d0fe:	9206      	str	r2, [sp, #24]
 800d100:	9205      	str	r2, [sp, #20]
 800d102:	2501      	movs	r5, #1
 800d104:	9504      	str	r5, [sp, #16]
 800d106:	9203      	str	r2, [sp, #12]
 800d108:	2308      	movs	r3, #8
 800d10a:	9302      	str	r3, [sp, #8]
 800d10c:	9501      	str	r5, [sp, #4]
 800d10e:	f8cd a000 	str.w	sl, [sp]
 800d112:	464b      	mov	r3, r9
 800d114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d116:	4628      	mov	r0, r5
 800d118:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d11a:	4b20      	ldr	r3, [pc, #128]	@ (800d19c <RegionAS923TxConfig+0x120>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	7823      	ldrb	r3, [r4, #0]
 800d120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d124:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d12c:	f000 fe0c 	bl	800dd48 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d130:	89a1      	ldrh	r1, [r4, #12]
 800d132:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d136:	f7ff fcbf 	bl	800cab8 <GetTimeOnAir>
 800d13a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d13e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1a8 <RegionAS923TxConfig+0x12c>)
 800d140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d142:	7b21      	ldrb	r1, [r4, #12]
 800d144:	4628      	mov	r0, r5
 800d146:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d148:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800d14a:	2001      	movs	r0, #1
 800d14c:	b00d      	add	sp, #52	@ 0x34
 800d14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d152:	4b15      	ldr	r3, [pc, #84]	@ (800d1a8 <RegionAS923TxConfig+0x12c>)
 800d154:	69dd      	ldr	r5, [r3, #28]
 800d156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d15a:	fb03 f30a 	mul.w	r3, r3, sl
 800d15e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800d162:	9208      	str	r2, [sp, #32]
 800d164:	f04f 0a00 	mov.w	sl, #0
 800d168:	f8cd a01c 	str.w	sl, [sp, #28]
 800d16c:	f8cd a018 	str.w	sl, [sp, #24]
 800d170:	f8cd a014 	str.w	sl, [sp, #20]
 800d174:	2201      	movs	r2, #1
 800d176:	9204      	str	r2, [sp, #16]
 800d178:	f8cd a00c 	str.w	sl, [sp, #12]
 800d17c:	2205      	movs	r2, #5
 800d17e:	9202      	str	r2, [sp, #8]
 800d180:	f8cd a004 	str.w	sl, [sp, #4]
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	464b      	mov	r3, r9
 800d188:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800d18c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d18e:	4650      	mov	r0, sl
 800d190:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d192:	4655      	mov	r5, sl
 800d194:	e7c1      	b.n	800d11a <RegionAS923TxConfig+0x9e>
 800d196:	bf00      	nop
 800d198:	08012ecc 	.word	0x08012ecc
 800d19c:	20000ec4 	.word	0x20000ec4
 800d1a0:	20000ec0 	.word	0x20000ec0
 800d1a4:	08012eac 	.word	0x08012eac
 800d1a8:	08013274 	.word	0x08013274

0800d1ac <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d1ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1b0:	b08f      	sub	sp, #60	@ 0x3c
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	4689      	mov	r9, r1
 800d1b6:	4690      	mov	r8, r2
 800d1b8:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d1ba:	2400      	movs	r4, #0
 800d1bc:	940c      	str	r4, [sp, #48]	@ 0x30
 800d1be:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d1c2:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
    uint8_t status = 0x07;
 800d1c6:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d1c8:	e030      	b.n	800d22c <RegionAS923LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800d1ca:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800d1ce:	2607      	movs	r6, #7
 800d1d0:	e012      	b.n	800d1f8 <RegionAS923LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d1d2:	4a58      	ldr	r2, [pc, #352]	@ (800d334 <RegionAS923LinkAdrReq+0x188>)
 800d1d4:	6812      	ldr	r2, [r2, #0]
 800d1d6:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d1da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d1de:	b13a      	cbz	r2, 800d1f0 <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	fa02 f20c 	lsl.w	r2, r2, ip
 800d1e6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800d1f0:	f10c 0c01 	add.w	ip, ip, #1
 800d1f4:	fa5f fc8c 	uxtb.w	ip, ip
 800d1f8:	f1bc 0f0f 	cmp.w	ip, #15
 800d1fc:	d816      	bhi.n	800d22c <RegionAS923LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d1fe:	2b06      	cmp	r3, #6
 800d200:	d0e7      	beq.n	800d1d2 <RegionAS923LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d202:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800d206:	fa4e fe0c 	asr.w	lr, lr, ip
 800d20a:	f01e 0f01 	tst.w	lr, #1
 800d20e:	d0ef      	beq.n	800d1f0 <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d210:	4a48      	ldr	r2, [pc, #288]	@ (800d334 <RegionAS923LinkAdrReq+0x188>)
 800d212:	6812      	ldr	r2, [r2, #0]
 800d214:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d218:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d21c:	2a00      	cmp	r2, #0
 800d21e:	d1e7      	bne.n	800d1f0 <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d220:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800d224:	e7e4      	b.n	800d1f0 <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d226:	2606      	movs	r6, #6
 800d228:	e000      	b.n	800d22c <RegionAS923LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800d22a:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d22c:	7a2b      	ldrb	r3, [r5, #8]
 800d22e:	42a3      	cmp	r3, r4
 800d230:	d919      	bls.n	800d266 <RegionAS923LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d232:	6868      	ldr	r0, [r5, #4]
 800d234:	a90c      	add	r1, sp, #48	@ 0x30
 800d236:	4420      	add	r0, r4
 800d238:	f000 fba8 	bl	800d98c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d23c:	4603      	mov	r3, r0
 800d23e:	b190      	cbz	r0, 800d266 <RegionAS923LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800d240:	4423      	add	r3, r4
 800d242:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800d244:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800d248:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d24c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d250:	b90b      	cbnz	r3, 800d256 <RegionAS923LinkAdrReq+0xaa>
 800d252:	2a00      	cmp	r2, #0
 800d254:	d0e7      	beq.n	800d226 <RegionAS923LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d256:	1e5a      	subs	r2, r3, #1
 800d258:	b2d2      	uxtb	r2, r2
 800d25a:	2a04      	cmp	r2, #4
 800d25c:	d9e5      	bls.n	800d22a <RegionAS923LinkAdrReq+0x7e>
 800d25e:	2b06      	cmp	r3, #6
 800d260:	d9b3      	bls.n	800d1ca <RegionAS923LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800d262:	2606      	movs	r6, #6
 800d264:	e7e2      	b.n	800d22c <RegionAS923LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d266:	2302      	movs	r3, #2
 800d268:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d26c:	7a6b      	ldrb	r3, [r5, #9]
 800d26e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800d272:	a80a      	add	r0, sp, #40	@ 0x28
 800d274:	f7ff fc52 	bl	800cb1c <RegionAS923GetPhyParam>
 800d278:	9009      	str	r0, [sp, #36]	@ 0x24

    linkAdrVerifyParams.Status = status;
 800d27a:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d27e:	7aab      	ldrb	r3, [r5, #10]
 800d280:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d284:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800d288:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d28c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800d290:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d294:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800d298:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d29c:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d2a0:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d2a4:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d2a8:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d2ac:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d2b0:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800d2b4:	2310      	movs	r3, #16
 800d2b6:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d2ba:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800d2be:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d2c0:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800d2c4:	2307      	movs	r3, #7
 800d2c6:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d2ca:	4a1a      	ldr	r2, [pc, #104]	@ (800d334 <RegionAS923LinkAdrReq+0x188>)
 800d2cc:	6812      	ldr	r2, [r2, #0]
 800d2ce:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800d2d0:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d2de:	ab0c      	add	r3, sp, #48	@ 0x30
 800d2e0:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d2e4:	f10d 0131 	add.w	r1, sp, #49	@ 0x31
 800d2e8:	a801      	add	r0, sp, #4
 800d2ea:	f000 fb6d 	bl	800d9c8 <RegionCommonLinkAdrReqVerifyParams>
 800d2ee:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d2f0:	2807      	cmp	r0, #7
 800d2f2:	d010      	beq.n	800d316 <RegionAS923LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d2f4:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800d2f8:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d2fc:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800d300:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d304:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800d308:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d30a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d30c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 800d30e:	4628      	mov	r0, r5
 800d310:	b00f      	add	sp, #60	@ 0x3c
 800d312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d316:	4e07      	ldr	r6, [pc, #28]	@ (800d334 <RegionAS923LinkAdrReq+0x188>)
 800d318:	6830      	ldr	r0, [r6, #0]
 800d31a:	220c      	movs	r2, #12
 800d31c:	2100      	movs	r1, #0
 800d31e:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800d322:	f001 fc64 	bl	800ebee <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d326:	6833      	ldr	r3, [r6, #0]
 800d328:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800d32c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 800d330:	e7e0      	b.n	800d2f4 <RegionAS923LinkAdrReq+0x148>
 800d332:	bf00      	nop
 800d334:	20000ec4 	.word	0x20000ec4

0800d338 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800d33c:	6840      	ldr	r0, [r0, #4]
 800d33e:	f7ff fba7 	bl	800ca90 <VerifyRfFreq>
 800d342:	b1a0      	cbz	r0, 800d36e <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800d344:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800d346:	2207      	movs	r2, #7
 800d348:	2100      	movs	r1, #0
 800d34a:	f994 0000 	ldrsb.w	r0, [r4]
 800d34e:	f000 fa28 	bl	800d7a2 <RegionCommonValueInRange>
 800d352:	b908      	cbnz	r0, 800d358 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800d354:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800d358:	2207      	movs	r2, #7
 800d35a:	2100      	movs	r1, #0
 800d35c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d360:	f000 fa1f 	bl	800d7a2 <RegionCommonValueInRange>
 800d364:	b908      	cbnz	r0, 800d36a <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d366:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 800d36a:	4628      	mov	r0, r5
 800d36c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d36e:	2506      	movs	r5, #6
 800d370:	e7e9      	b.n	800d346 <RegionAS923RxParamSetupReq+0xe>

0800d372 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800d372:	2000      	movs	r0, #0
 800d374:	4770      	bx	lr
	...

0800d378 <RegionAS923DlChannelReq>:
int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800d378:	7803      	ldrb	r3, [r0, #0]
 800d37a:	2b0f      	cmp	r3, #15
 800d37c:	d901      	bls.n	800d382 <RegionAS923DlChannelReq+0xa>
    {
        return 0;
 800d37e:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 800d380:	4770      	bx	lr
{
 800d382:	b510      	push	{r4, lr}
 800d384:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800d386:	6840      	ldr	r0, [r0, #4]
 800d388:	f7ff fb82 	bl	800ca90 <VerifyRfFreq>
 800d38c:	b160      	cbz	r0, 800d3a8 <RegionAS923DlChannelReq+0x30>
    uint8_t status = 0x03;
 800d38e:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d390:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c0 <RegionAS923DlChannelReq+0x48>)
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	7823      	ldrb	r3, [r4, #0]
 800d396:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d39a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d39e:	b929      	cbnz	r1, 800d3ac <RegionAS923DlChannelReq+0x34>
        status &= 0xFD;
 800d3a0:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
    return status;
 800d3a4:	b240      	sxtb	r0, r0
}
 800d3a6:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800d3a8:	2002      	movs	r0, #2
 800d3aa:	e7f1      	b.n	800d390 <RegionAS923DlChannelReq+0x18>
    if( status == 0x03 )
 800d3ac:	2803      	cmp	r0, #3
 800d3ae:	d1f9      	bne.n	800d3a4 <RegionAS923DlChannelReq+0x2c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d3b0:	6861      	ldr	r1, [r4, #4]
 800d3b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d3ba:	6051      	str	r1, [r2, #4]
 800d3bc:	e7f2      	b.n	800d3a4 <RegionAS923DlChannelReq+0x2c>
 800d3be:	bf00      	nop
 800d3c0:	20000ec4 	.word	0x20000ec4

0800d3c4 <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 800d3c4:	2002      	movs	r0, #2
 800d3c6:	4770      	bx	lr

0800d3c8 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ca:	b097      	sub	sp, #92	@ 0x5c
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	460f      	mov	r7, r1
 800d3d0:	4616      	mov	r6, r2
 800d3d2:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	f88d 1057 	strb.w	r1, [sp, #87]	@ 0x57
    uint8_t nbRestrictedChannels = 0;
 800d3da:	f88d 1056 	strb.w	r1, [sp, #86]	@ 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800d3de:	9111      	str	r1, [sp, #68]	@ 0x44
 800d3e0:	9112      	str	r1, [sp, #72]	@ 0x48
 800d3e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d3e4:	9114      	str	r1, [sp, #80]	@ 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d3ec:	4b34      	ldr	r3, [pc, #208]	@ (800d4c0 <RegionAS923NextChannel+0xf8>)
 800d3ee:	6818      	ldr	r0, [r3, #0]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800d3f6:	f000 fa32 	bl	800d85e <RegionCommonCountChannels>
 800d3fa:	b938      	cbnz	r0, 800d40c <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800d3fc:	4b30      	ldr	r3, [pc, #192]	@ (800d4c0 <RegionAS923NextChannel+0xf8>)
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800d404:	f043 0303 	orr.w	r3, r3, #3
 800d408:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d40c:	7a63      	ldrb	r3, [r4, #9]
 800d40e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d412:	7a23      	ldrb	r3, [r4, #8]
 800d414:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d418:	4b29      	ldr	r3, [pc, #164]	@ (800d4c0 <RegionAS923NextChannel+0xf8>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 800d420:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d422:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 800d424:	4b27      	ldr	r3, [pc, #156]	@ (800d4c4 <RegionAS923NextChannel+0xfc>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800d42a:	2310      	movs	r3, #16
 800d42c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800d430:	f10d 030a 	add.w	r3, sp, #10
 800d434:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d43a:	6863      	ldr	r3, [r4, #4]
 800d43c:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d43e:	7aa3      	ldrb	r3, [r4, #10]
 800d440:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800d444:	2301      	movs	r3, #1
 800d446:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d44a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d44c:	f104 020c 	add.w	r2, r4, #12
 800d450:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d454:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d458:	7d23      	ldrb	r3, [r4, #20]
 800d45a:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d45e:	8ae1      	ldrh	r1, [r4, #22]
 800d460:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d464:	f7ff fb28 	bl	800cab8 <GetTimeOnAir>
 800d468:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d46a:	ab03      	add	r3, sp, #12
 800d46c:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d46e:	9601      	str	r6, [sp, #4]
 800d470:	f10d 0356 	add.w	r3, sp, #86	@ 0x56
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	f10d 0357 	add.w	r3, sp, #87	@ 0x57
 800d47a:	aa11      	add	r2, sp, #68	@ 0x44
 800d47c:	4629      	mov	r1, r5
 800d47e:	a809      	add	r0, sp, #36	@ 0x24
 800d480:	f000 fbc1 	bl	800dc06 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d484:	4604      	mov	r4, r0
 800d486:	b120      	cbz	r0, 800d492 <RegionAS923NextChannel+0xca>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d488:	280c      	cmp	r0, #12
 800d48a:	d00f      	beq.n	800d4ac <RegionAS923NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800d48c:	4620      	mov	r0, r4
 800d48e:	b017      	add	sp, #92	@ 0x5c
 800d490:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d492:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 800d496:	3901      	subs	r1, #1
 800d498:	f001 fb84 	bl	800eba4 <randr>
 800d49c:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800d4a0:	eb0d 0003 	add.w	r0, sp, r3
 800d4a4:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800d4a8:	703b      	strb	r3, [r7, #0]
 800d4aa:	e7ef      	b.n	800d48c <RegionAS923NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800d4ac:	4b04      	ldr	r3, [pc, #16]	@ (800d4c0 <RegionAS923NextChannel+0xf8>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800d4b4:	f043 0303 	orr.w	r3, r3, #3
 800d4b8:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
 800d4bc:	e7e6      	b.n	800d48c <RegionAS923NextChannel+0xc4>
 800d4be:	bf00      	nop
 800d4c0:	20000ec4 	.word	0x20000ec4
 800d4c4:	20000ec0 	.word	0x20000ec0

0800d4c8 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d4ca:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800d4cc:	2d01      	cmp	r5, #1
 800d4ce:	d94a      	bls.n	800d566 <RegionAS923ChannelAdd+0x9e>
 800d4d0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 800d4d2:	2d0f      	cmp	r5, #15
 800d4d4:	d849      	bhi.n	800d56a <RegionAS923ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800d4d6:	6803      	ldr	r3, [r0, #0]
 800d4d8:	7a18      	ldrb	r0, [r3, #8]
 800d4da:	f340 0003 	sbfx	r0, r0, #0, #4
 800d4de:	2207      	movs	r2, #7
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	b240      	sxtb	r0, r0
 800d4e4:	f000 f95d 	bl	800d7a2 <RegionCommonValueInRange>
 800d4e8:	b1f8      	cbz	r0, 800d52a <RegionAS923ChannelAdd+0x62>
    bool drInvalid = false;
 800d4ea:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	7a18      	ldrb	r0, [r3, #8]
 800d4f0:	f340 1003 	sbfx	r0, r0, #4, #4
 800d4f4:	2207      	movs	r2, #7
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	b240      	sxtb	r0, r0
 800d4fa:	f000 f952 	bl	800d7a2 <RegionCommonValueInRange>
 800d4fe:	b900      	cbnz	r0, 800d502 <RegionAS923ChannelAdd+0x3a>
    {
        drInvalid = true;
 800d500:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d502:	6821      	ldr	r1, [r4, #0]
 800d504:	7a0b      	ldrb	r3, [r1, #8]
 800d506:	f343 0203 	sbfx	r2, r3, #0, #4
 800d50a:	b252      	sxtb	r2, r2
 800d50c:	f343 1303 	sbfx	r3, r3, #4, #4
 800d510:	b25b      	sxtb	r3, r3
 800d512:	429a      	cmp	r2, r3
 800d514:	dd00      	ble.n	800d518 <RegionAS923ChannelAdd+0x50>
    {
        drInvalid = true;
 800d516:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800d518:	6808      	ldr	r0, [r1, #0]
 800d51a:	f7ff fab9 	bl	800ca90 <VerifyRfFreq>
 800d51e:	b130      	cbz	r0, 800d52e <RegionAS923ChannelAdd+0x66>
    bool freqInvalid = false;
 800d520:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d522:	b136      	cbz	r6, 800d532 <RegionAS923ChannelAdd+0x6a>
 800d524:	b31b      	cbz	r3, 800d56e <RegionAS923ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d526:	2006      	movs	r0, #6
 800d528:	e020      	b.n	800d56c <RegionAS923ChannelAdd+0xa4>
        drInvalid = true;
 800d52a:	2601      	movs	r6, #1
 800d52c:	e7de      	b.n	800d4ec <RegionAS923ChannelAdd+0x24>
            freqInvalid = true;
 800d52e:	2301      	movs	r3, #1
 800d530:	e7f7      	b.n	800d522 <RegionAS923ChannelAdd+0x5a>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800d532:	b9f3      	cbnz	r3, 800d572 <RegionAS923ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d534:	4f10      	ldr	r7, [pc, #64]	@ (800d578 <RegionAS923ChannelAdd+0xb0>)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	006e      	lsls	r6, r5, #1
 800d53a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d53e:	220c      	movs	r2, #12
 800d540:	6821      	ldr	r1, [r4, #0]
 800d542:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d546:	f001 fb3a 	bl	800ebbe <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	442e      	add	r6, r5
 800d54e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800d552:	2000      	movs	r0, #0
 800d554:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d556:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800d55a:	2101      	movs	r1, #1
 800d55c:	40a9      	lsls	r1, r5
 800d55e:	430a      	orrs	r2, r1
 800d560:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 800d564:	e002      	b.n	800d56c <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d566:	2006      	movs	r0, #6
 800d568:	e000      	b.n	800d56c <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d56a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d56e:	2005      	movs	r0, #5
 800d570:	e7fc      	b.n	800d56c <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d572:	2004      	movs	r0, #4
 800d574:	e7fa      	b.n	800d56c <RegionAS923ChannelAdd+0xa4>
 800d576:	bf00      	nop
 800d578:	20000ec4 	.word	0x20000ec4

0800d57c <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 800d57c:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800d57e:	2901      	cmp	r1, #1
 800d580:	d913      	bls.n	800d5aa <RegionAS923ChannelsRemove+0x2e>
{
 800d582:	b508      	push	{r3, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d584:	4b0a      	ldr	r3, [pc, #40]	@ (800d5b0 <RegionAS923ChannelsRemove+0x34>)
 800d586:	6818      	ldr	r0, [r3, #0]
 800d588:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d58c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d590:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d594:	2200      	movs	r2, #0
 800d596:	f840 200c 	str.w	r2, [r0, ip]
 800d59a:	605a      	str	r2, [r3, #4]
 800d59c:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800d59e:	2210      	movs	r2, #16
 800d5a0:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800d5a4:	f000 f93f 	bl	800d826 <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 800d5a8:	bd08      	pop	{r3, pc}
        return false;
 800d5aa:	2000      	movs	r0, #0
}
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	20000ec4 	.word	0x20000ec4

0800d5b4 <RegionAS923ApplyCFList>:
{
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d5b8:	2350      	movs	r3, #80	@ 0x50
 800d5ba:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d5be:	7a03      	ldrb	r3, [r0, #8]
 800d5c0:	2b10      	cmp	r3, #16
 800d5c2:	d136      	bne.n	800d632 <RegionAS923ApplyCFList+0x7e>
 800d5c4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800d5c6:	6843      	ldr	r3, [r0, #4]
 800d5c8:	7bdd      	ldrb	r5, [r3, #15]
 800d5ca:	2d00      	cmp	r5, #0
 800d5cc:	d131      	bne.n	800d632 <RegionAS923ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d5ce:	2402      	movs	r4, #2
 800d5d0:	e01b      	b.n	800d60a <RegionAS923ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d5d2:	6872      	ldr	r2, [r6, #4]
 800d5d4:	5d53      	ldrb	r3, [r2, r5]
 800d5d6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d5d8:	442a      	add	r2, r5
 800d5da:	7851      	ldrb	r1, [r2, #1]
 800d5dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d5e0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d5e2:	7892      	ldrb	r2, [r2, #2]
 800d5e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5e8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800d5ea:	2264      	movs	r2, #100	@ 0x64
 800d5ec:	fb02 f303 	mul.w	r3, r2, r3
 800d5f0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	e011      	b.n	800d61c <RegionAS923ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800d5f8:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 800d5fc:	4668      	mov	r0, sp
 800d5fe:	f7ff ffbd 	bl	800d57c <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d602:	3503      	adds	r5, #3
 800d604:	b2ed      	uxtb	r5, r5
 800d606:	3401      	adds	r4, #1
 800d608:	b2e4      	uxtb	r4, r4
 800d60a:	2c0f      	cmp	r4, #15
 800d60c:	d811      	bhi.n	800d632 <RegionAS923ApplyCFList+0x7e>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800d60e:	2c06      	cmp	r4, #6
 800d610:	d9df      	bls.n	800d5d2 <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d616:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d61a:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d61c:	9b03      	ldr	r3, [sp, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d0ea      	beq.n	800d5f8 <RegionAS923ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800d622:	ab03      	add	r3, sp, #12
 800d624:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d626:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 800d62a:	a801      	add	r0, sp, #4
 800d62c:	f7ff ff4c 	bl	800d4c8 <RegionAS923ChannelAdd>
 800d630:	e7e7      	b.n	800d602 <RegionAS923ApplyCFList+0x4e>
}
 800d632:	b006      	add	sp, #24
 800d634:	bd70      	pop	{r4, r5, r6, pc}

0800d636 <RegionAS923NewChannelReq>:
{
 800d636:	b500      	push	{lr}
 800d638:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d63a:	6803      	ldr	r3, [r0, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	b952      	cbnz	r2, 800d656 <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d640:	7903      	ldrb	r3, [r0, #4]
 800d642:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800d646:	a801      	add	r0, sp, #4
 800d648:	f7ff ff98 	bl	800d57c <RegionAS923ChannelsRemove>
 800d64c:	b1d0      	cbz	r0, 800d684 <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800d64e:	2003      	movs	r0, #3
}
 800d650:	b005      	add	sp, #20
 800d652:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d656:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d658:	7903      	ldrb	r3, [r0, #4]
 800d65a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800d65e:	a802      	add	r0, sp, #8
 800d660:	f7ff ff32 	bl	800d4c8 <RegionAS923ChannelAdd>
 800d664:	2806      	cmp	r0, #6
 800d666:	d80b      	bhi.n	800d680 <RegionAS923NewChannelReq+0x4a>
 800d668:	e8df f000 	tbb	[pc, r0]
 800d66c:	0a0a0a04 	.word	0x0a0a0a04
 800d670:	060e      	.short	0x060e
 800d672:	08          	.byte	0x08
 800d673:	00          	.byte	0x00
 800d674:	2003      	movs	r0, #3
 800d676:	e7eb      	b.n	800d650 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 800d678:	2001      	movs	r0, #1
                break;
 800d67a:	e7e9      	b.n	800d650 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800d67c:	2000      	movs	r0, #0
                break;
 800d67e:	e7e7      	b.n	800d650 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800d680:	2000      	movs	r0, #0
                break;
 800d682:	e7e5      	b.n	800d650 <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 800d684:	2000      	movs	r0, #0
 800d686:	e7e3      	b.n	800d650 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 800d688:	2002      	movs	r0, #2
 800d68a:	e7e1      	b.n	800d650 <RegionAS923NewChannelReq+0x1a>

0800d68c <RegionAS923ApplyDrOffset>:
{
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 800d68c:	b928      	cbnz	r0, 800d69a <RegionAS923ApplyDrOffset+0xe>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 800d68e:	4b05      	ldr	r3, [pc, #20]	@ (800d6a4 <RegionAS923ApplyDrOffset+0x18>)
 800d690:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d694:	5698      	ldrsb	r0, [r3, r2]
    return minDr;
#else
    return 0;
#endif /* REGION_AS923 */

}
 800d696:	b2c0      	uxtb	r0, r0
 800d698:	4770      	bx	lr
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 800d69a:	4b03      	ldr	r3, [pc, #12]	@ (800d6a8 <RegionAS923ApplyDrOffset+0x1c>)
 800d69c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d6a0:	5698      	ldrsb	r0, [r3, r2]
 800d6a2:	e7f8      	b.n	800d696 <RegionAS923ApplyDrOffset+0xa>
 800d6a4:	08012e54 	.word	0x08012e54
 800d6a8:	08012e14 	.word	0x08012e14

0800d6ac <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	f10d 0c08 	add.w	ip, sp, #8
 800d6b2:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800d6b6:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800d6b8:	b921      	cbnz	r1, 800d6c4 <GetDutyCycle+0x18>
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d6ba:	2864      	cmp	r0, #100	@ 0x64
 800d6bc:	bf38      	it	cc
 800d6be:	2064      	movcc	r0, #100	@ 0x64
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 800d6c0:	b002      	add	sp, #8
 800d6c2:	4770      	bx	lr
    if( dutyCycle == 0 )
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d1fb      	bne.n	800d6c0 <GetDutyCycle+0x14>
        dutyCycle = 1;
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	e7f9      	b.n	800d6c0 <GetDutyCycle+0x14>

0800d6cc <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	460d      	mov	r5, r1
 800d6d4:	46ec      	mov	ip, sp
 800d6d6:	e88c 000c 	stmia.w	ip, {r2, r3}
 800d6da:	f89d 6018 	ldrb.w	r6, [sp, #24]
    uint16_t dutyCycle = band->DCycle;
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d6de:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800d6e2:	f7ff ffe3 	bl	800d6ac <GetDutyCycle>

    if( joined == false )
 800d6e6:	b94d      	cbnz	r5, 800d6fc <SetMaxTimeCredits+0x30>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d6e8:	9b00      	ldr	r3, [sp, #0]
 800d6ea:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800d6ee:	d309      	bcc.n	800d704 <SetMaxTimeCredits+0x38>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d6f0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d809      	bhi.n	800d70c <SetMaxTimeCredits+0x40>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d6f8:	4b06      	ldr	r3, [pc, #24]	@ (800d714 <SetMaxTimeCredits+0x48>)
 800d6fa:	e004      	b.n	800d706 <SetMaxTimeCredits+0x3a>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 800d6fc:	b946      	cbnz	r6, 800d710 <SetMaxTimeCredits+0x44>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800d6fe:	4b05      	ldr	r3, [pc, #20]	@ (800d714 <SetMaxTimeCredits+0x48>)
 800d700:	60e3      	str	r3, [r4, #12]
 800d702:	e000      	b.n	800d706 <SetMaxTimeCredits+0x3a>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d704:	4b03      	ldr	r3, [pc, #12]	@ (800d714 <SetMaxTimeCredits+0x48>)
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800d706:	6123      	str	r3, [r4, #16]

    return dutyCycle;
}
 800d708:	b002      	add	sp, #8
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 800d70c:	4b02      	ldr	r3, [pc, #8]	@ (800d718 <SetMaxTimeCredits+0x4c>)
 800d70e:	e7fa      	b.n	800d706 <SetMaxTimeCredits+0x3a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d710:	4b00      	ldr	r3, [pc, #0]	@ (800d714 <SetMaxTimeCredits+0x48>)
 800d712:	e7f8      	b.n	800d706 <SetMaxTimeCredits+0x3a>
 800d714:	0036ee80 	.word	0x0036ee80
 800d718:	000d4670 	.word	0x000d4670

0800d71c <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 800d71c:	b530      	push	{r4, r5, lr}
 800d71e:	b083      	sub	sp, #12
 800d720:	4604      	mov	r4, r0
 800d722:	460d      	mov	r5, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	9200      	str	r2, [sp, #0]
 800d728:	ab06      	add	r3, sp, #24
 800d72a:	cb0c      	ldmia	r3, {r2, r3}
 800d72c:	f7ff ffce 	bl	800d6cc <SetMaxTimeCredits>
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;

    if( joined == false )
 800d730:	b94d      	cbnz	r5, 800d746 <UpdateTimeCredits+0x2a>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d732:	9b06      	ldr	r3, [sp, #24]
 800d734:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800d738:	d313      	bcc.n	800d762 <UpdateTimeCredits+0x46>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d73a:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800d73e:	4293      	cmp	r3, r2
 800d740:	d811      	bhi.n	800d766 <UpdateTimeCredits+0x4a>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 800d742:	4b0c      	ldr	r3, [pc, #48]	@ (800d774 <UpdateTimeCredits+0x58>)
 800d744:	e000      	b.n	800d748 <UpdateTimeCredits+0x2c>
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 800d746:	4b0c      	ldr	r3, [pc, #48]	@ (800d778 <UpdateTimeCredits+0x5c>)
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 800d748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d902      	bls.n	800d754 <UpdateTimeCredits+0x38>
        ( band->LastMaxCreditAssignTime != observation ) ||
 800d74e:	68a2      	ldr	r2, [r4, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 800d750:	429a      	cmp	r2, r3
 800d752:	d00a      	beq.n	800d76a <UpdateTimeCredits+0x4e>
        ( band->LastBandUpdateTime == 0 ) )
    {
        band->TimeCredits = band->MaxTimeCredits;
 800d754:	6922      	ldr	r2, [r4, #16]
 800d756:	60e2      	str	r2, [r4, #12]
        band->LastBandUpdateTime = currentTime;
 800d758:	9a08      	ldr	r2, [sp, #32]
 800d75a:	6062      	str	r2, [r4, #4]
        band->LastMaxCreditAssignTime = observation;
 800d75c:	60a3      	str	r3, [r4, #8]
    }
    return dutyCycle;
}
 800d75e:	b003      	add	sp, #12
 800d760:	bd30      	pop	{r4, r5, pc}
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 800d762:	4b05      	ldr	r3, [pc, #20]	@ (800d778 <UpdateTimeCredits+0x5c>)
 800d764:	e7f0      	b.n	800d748 <UpdateTimeCredits+0x2c>
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 800d766:	4b05      	ldr	r3, [pc, #20]	@ (800d77c <UpdateTimeCredits+0x60>)
 800d768:	e7ee      	b.n	800d748 <UpdateTimeCredits+0x2c>
        ( band->LastBandUpdateTime == 0 ) )
 800d76a:	6862      	ldr	r2, [r4, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 800d76c:	2a00      	cmp	r2, #0
 800d76e:	d1f6      	bne.n	800d75e <UpdateTimeCredits+0x42>
 800d770:	e7f0      	b.n	800d754 <UpdateTimeCredits+0x38>
 800d772:	bf00      	nop
 800d774:	025c3f80 	.word	0x025c3f80
 800d778:	0036ee80 	.word	0x0036ee80
 800d77c:	07829b80 	.word	0x07829b80

0800d780 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800d780:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800d782:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800d784:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800d786:	e001      	b.n	800d78c <CountChannels+0xc>
 800d788:	3301      	adds	r3, #1
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	428b      	cmp	r3, r1
 800d78e:	d207      	bcs.n	800d7a0 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800d790:	2201      	movs	r2, #1
 800d792:	409a      	lsls	r2, r3
 800d794:	ea32 020c 	bics.w	r2, r2, ip
 800d798:	d1f6      	bne.n	800d788 <CountChannels+0x8>
        {
            nbActiveBits++;
 800d79a:	3001      	adds	r0, #1
 800d79c:	b2c0      	uxtb	r0, r0
 800d79e:	e7f3      	b.n	800d788 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800d7a0:	4770      	bx	lr

0800d7a2 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d7a2:	4288      	cmp	r0, r1
 800d7a4:	db03      	blt.n	800d7ae <RegionCommonValueInRange+0xc>
 800d7a6:	4290      	cmp	r0, r2
 800d7a8:	dd03      	ble.n	800d7b2 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800d7aa:	2000      	movs	r0, #0
 800d7ac:	4770      	bx	lr
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	4770      	bx	lr
        return 1;
 800d7b2:	2001      	movs	r0, #1
}
 800d7b4:	4770      	bx	lr

0800d7b6 <RegionCommonChanVerifyDr>:
{
 800d7b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	460e      	mov	r6, r1
 800d7be:	4690      	mov	r8, r2
 800d7c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800d7c4:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	f7ff ffe9 	bl	800d7a2 <RegionCommonValueInRange>
 800d7d0:	b338      	cbz	r0, 800d822 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d7d2:	2500      	movs	r5, #0
 800d7d4:	462f      	mov	r7, r5
 800d7d6:	e01e      	b.n	800d816 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800d7d8:	3401      	adds	r4, #1
 800d7da:	b2e4      	uxtb	r4, r4
 800d7dc:	2c0f      	cmp	r4, #15
 800d7de:	d816      	bhi.n	800d80e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d7e0:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800d7e4:	4123      	asrs	r3, r4
 800d7e6:	f013 0f01 	tst.w	r3, #1
 800d7ea:	d0f5      	beq.n	800d7d8 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d7ec:	193b      	adds	r3, r7, r4
 800d7ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d7f2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d7f6:	7a19      	ldrb	r1, [r3, #8]
 800d7f8:	090a      	lsrs	r2, r1, #4
 800d7fa:	f001 010f 	and.w	r1, r1, #15
 800d7fe:	4640      	mov	r0, r8
 800d800:	f7ff ffcf 	bl	800d7a2 <RegionCommonValueInRange>
 800d804:	2801      	cmp	r0, #1
 800d806:	d1e7      	bne.n	800d7d8 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800d808:	2001      	movs	r0, #1
}
 800d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d80e:	3710      	adds	r7, #16
 800d810:	b2ff      	uxtb	r7, r7
 800d812:	3501      	adds	r5, #1
 800d814:	b2ed      	uxtb	r5, r5
 800d816:	4557      	cmp	r7, sl
 800d818:	d201      	bcs.n	800d81e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800d81a:	2400      	movs	r4, #0
 800d81c:	e7de      	b.n	800d7dc <RegionCommonChanVerifyDr+0x26>
    return false;
 800d81e:	2000      	movs	r0, #0
 800d820:	e7f3      	b.n	800d80a <RegionCommonChanVerifyDr+0x54>
        return false;
 800d822:	2000      	movs	r0, #0
 800d824:	e7f1      	b.n	800d80a <RegionCommonChanVerifyDr+0x54>

0800d826 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d826:	0913      	lsrs	r3, r2, #4
 800d828:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d82c:	d313      	bcc.n	800d856 <RegionCommonChanDisable+0x30>
{
 800d82e:	b500      	push	{lr}
 800d830:	4684      	mov	ip, r0
 800d832:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d836:	4291      	cmp	r1, r2
 800d838:	d20f      	bcs.n	800d85a <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d83a:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 800d83e:	f001 010f 	and.w	r1, r1, #15
 800d842:	2001      	movs	r0, #1
 800d844:	fa00 f101 	lsl.w	r1, r0, r1
 800d848:	43c9      	mvns	r1, r1
 800d84a:	b209      	sxth	r1, r1
 800d84c:	400b      	ands	r3, r1
 800d84e:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800d852:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800d856:	2000      	movs	r0, #0
}
 800d858:	4770      	bx	lr
        return false;
 800d85a:	2000      	movs	r0, #0
 800d85c:	e7f9      	b.n	800d852 <RegionCommonChanDisable+0x2c>

0800d85e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d860:	b188      	cbz	r0, 800d886 <RegionCommonCountChannels+0x28>
 800d862:	460c      	mov	r4, r1
 800d864:	4616      	mov	r6, r2
 800d866:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d868:	2500      	movs	r5, #0
 800d86a:	e008      	b.n	800d87e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d86c:	2110      	movs	r1, #16
 800d86e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d872:	f7ff ff85 	bl	800d780 <CountChannels>
 800d876:	4405      	add	r5, r0
 800d878:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d87a:	3401      	adds	r4, #1
 800d87c:	b2e4      	uxtb	r4, r4
 800d87e:	42b4      	cmp	r4, r6
 800d880:	d3f4      	bcc.n	800d86c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d882:	4628      	mov	r0, r5
 800d884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d886:	2500      	movs	r5, #0
 800d888:	e7fb      	b.n	800d882 <RegionCommonCountChannels+0x24>

0800d88a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d88a:	4684      	mov	ip, r0
 800d88c:	b158      	cbz	r0, 800d8a6 <RegionCommonChanMaskCopy+0x1c>
 800d88e:	b109      	cbz	r1, 800d894 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d890:	2300      	movs	r3, #0
 800d892:	e006      	b.n	800d8a2 <RegionCommonChanMaskCopy+0x18>
 800d894:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d896:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d89a:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d89e:	3301      	adds	r3, #1
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d3f7      	bcc.n	800d896 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800d8a6:	4770      	bx	lr

0800d8a8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	b538      	push	{r3, r4, r5, lr}
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	aa04      	add	r2, sp, #16
 800d8b4:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d8b8:	ca0c      	ldmia	r2, {r2, r3}
 800d8ba:	f7ff fef7 	bl	800d6ac <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d8be:	68e3      	ldr	r3, [r4, #12]
 800d8c0:	fb05 f100 	mul.w	r1, r5, r0
 800d8c4:	428b      	cmp	r3, r1
 800d8c6:	d905      	bls.n	800d8d4 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d8c8:	1a5b      	subs	r3, r3, r1
 800d8ca:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8d0:	b002      	add	sp, #8
 800d8d2:	4770      	bx	lr
        band->TimeCredits = 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60e3      	str	r3, [r4, #12]
}
 800d8d8:	e7f8      	b.n	800d8cc <RegionCommonSetBandTxDone+0x24>

0800d8da <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d8da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8de:	b089      	sub	sp, #36	@ 0x24
 800d8e0:	4681      	mov	r9, r0
 800d8e2:	468b      	mov	fp, r1
 800d8e4:	4692      	mov	sl, r2
 800d8e6:	4698      	mov	r8, r3
 800d8e8:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800d8ec:	9306      	str	r3, [sp, #24]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d8ee:	f003 fb0f 	bl	8010f10 <UTIL_TIMER_GetCurrentTime>
 800d8f2:	9005      	str	r0, [sp, #20]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d8f4:	2500      	movs	r5, #0
    uint8_t validBands = 0;
 800d8f6:	462f      	mov	r7, r5
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fc:	9307      	str	r3, [sp, #28]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d8fe:	e005      	b.n	800d90c <RegionCommonUpdateBandTimeOff+0x32>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d900:	2301      	movs	r3, #1
 800d902:	7523      	strb	r3, [r4, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d904:	441f      	add	r7, r3
 800d906:	b2ff      	uxtb	r7, r7
    for( uint8_t i = 0; i < nbBands; i++ )
 800d908:	3501      	adds	r5, #1
 800d90a:	b2ed      	uxtb	r5, r5
 800d90c:	4555      	cmp	r5, sl
 800d90e:	d234      	bcs.n	800d97a <RegionCommonUpdateBandTimeOff+0xa0>
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 800d910:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800d914:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d918:	6860      	ldr	r0, [r4, #4]
 800d91a:	f003 fb03 	bl	8010f24 <UTIL_TIMER_GetElapsedTime>
 800d91e:	4606      	mov	r6, r0
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d920:	9003      	str	r0, [sp, #12]
 800d922:	9b05      	ldr	r3, [sp, #20]
 800d924:	9302      	str	r3, [sp, #8]
 800d926:	ab13      	add	r3, sp, #76	@ 0x4c
 800d928:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d92c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d930:	9b06      	ldr	r3, [sp, #24]
 800d932:	4642      	mov	r2, r8
 800d934:	4649      	mov	r1, r9
 800d936:	4620      	mov	r0, r4
 800d938:	f7ff fef0 	bl	800d71c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d93c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d93e:	fb03 f000 	mul.w	r0, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d942:	68e3      	ldr	r3, [r4, #12]
 800d944:	4283      	cmp	r3, r0
 800d946:	d8db      	bhi.n	800d900 <RegionCommonUpdateBandTimeOff+0x26>
 800d948:	f1b8 0f00 	cmp.w	r8, #0
 800d94c:	d102      	bne.n	800d954 <RegionCommonUpdateBandTimeOff+0x7a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d94e:	f1b9 0f00 	cmp.w	r9, #0
 800d952:	d1d5      	bne.n	800d900 <RegionCommonUpdateBandTimeOff+0x26>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d954:	2300      	movs	r3, #0
 800d956:	7523      	strb	r3, [r4, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	4283      	cmp	r3, r0
 800d95c:	d9d4      	bls.n	800d908 <RegionCommonUpdateBandTimeOff+0x2e>
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 800d95e:	68a3      	ldr	r3, [r4, #8]
 800d960:	42b3      	cmp	r3, r6
 800d962:	d308      	bcc.n	800d976 <RegionCommonUpdateBandTimeOff+0x9c>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 800d964:	1b9b      	subs	r3, r3, r6
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 800d966:	9a07      	ldr	r2, [sp, #28]
 800d968:	429a      	cmp	r2, r3
 800d96a:	bf28      	it	cs
 800d96c:	461a      	movcs	r2, r3
 800d96e:	9207      	str	r2, [sp, #28]
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d970:	3701      	adds	r7, #1
 800d972:	b2ff      	uxtb	r7, r7
 800d974:	e7c8      	b.n	800d908 <RegionCommonUpdateBandTimeOff+0x2e>
                TimerTime_t observationTimeDiff = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	e7f5      	b.n	800d966 <RegionCommonUpdateBandTimeOff+0x8c>
#endif

        }
    }

    if( validBands == 0 )
 800d97a:	b11f      	cbz	r7, 800d984 <RegionCommonUpdateBandTimeOff+0xaa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d97c:	9807      	ldr	r0, [sp, #28]
 800d97e:	b009      	add	sp, #36	@ 0x24
 800d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d984:	f04f 33ff 	mov.w	r3, #4294967295
 800d988:	9307      	str	r3, [sp, #28]
 800d98a:	e7f7      	b.n	800d97c <RegionCommonUpdateBandTimeOff+0xa2>

0800d98c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d98c:	7803      	ldrb	r3, [r0, #0]
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d001      	beq.n	800d996 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d992:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d994:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d996:	7843      	ldrb	r3, [r0, #1]
 800d998:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d99c:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d99e:	f003 020f 	and.w	r2, r3, #15
 800d9a2:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d9a4:	091b      	lsrs	r3, r3, #4
 800d9a6:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d9a8:	7883      	ldrb	r3, [r0, #2]
 800d9aa:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d9ac:	78c2      	ldrb	r2, [r0, #3]
 800d9ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9b2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d9b4:	7903      	ldrb	r3, [r0, #4]
 800d9b6:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d9b8:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d9bc:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d9be:	f003 030f 	and.w	r3, r3, #15
 800d9c2:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d9c4:	2005      	movs	r0, #5
 800d9c6:	4770      	bx	lr

0800d9c8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9cc:	b085      	sub	sp, #20
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	460f      	mov	r7, r1
 800d9d2:	4616      	mov	r6, r2
 800d9d4:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800d9d6:	f890 8004 	ldrb.w	r8, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d9da:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d9de:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d9e2:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d9e6:	7943      	ldrb	r3, [r0, #5]
 800d9e8:	b92b      	cbnz	r3, 800d9f6 <RegionCommonLinkAdrReqVerifyParams+0x2e>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d9ea:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d9ee:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d9f2:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d9f6:	f1b8 0f00 	cmp.w	r8, #0
 800d9fa:	d02d      	beq.n	800da58 <RegionCommonLinkAdrReqVerifyParams+0x90>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800d9fc:	f1ba 0f0f 	cmp.w	sl, #15
 800da00:	d114      	bne.n	800da2c <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800da02:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800da06:	f1b9 0f0f 	cmp.w	r9, #15
 800da0a:	d020      	beq.n	800da4e <RegionCommonLinkAdrReqVerifyParams+0x86>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800da0c:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800da10:	9303      	str	r3, [sp, #12]
 800da12:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800da16:	461c      	mov	r4, r3
 800da18:	4619      	mov	r1, r3
 800da1a:	4648      	mov	r0, r9
 800da1c:	f7ff fec1 	bl	800d7a2 <RegionCommonValueInRange>
 800da20:	b9b8      	cbnz	r0, 800da52 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800da22:	454c      	cmp	r4, r9
 800da24:	dc22      	bgt.n	800da6c <RegionCommonLinkAdrReqVerifyParams+0xa4>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800da26:	f008 08fb 	and.w	r8, r8, #251	@ 0xfb
 800da2a:	e012      	b.n	800da52 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800da2c:	69a3      	ldr	r3, [r4, #24]
 800da2e:	9301      	str	r3, [sp, #4]
 800da30:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800da3a:	4652      	mov	r2, sl
 800da3c:	6921      	ldr	r1, [r4, #16]
 800da3e:	7b20      	ldrb	r0, [r4, #12]
 800da40:	f7ff feb9 	bl	800d7b6 <RegionCommonChanVerifyDr>
 800da44:	2800      	cmp	r0, #0
 800da46:	d1de      	bne.n	800da06 <RegionCommonLinkAdrReqVerifyParams+0x3e>
            status &= 0xFD; // Datarate KO
 800da48:	f008 08fd 	and.w	r8, r8, #253	@ 0xfd
 800da4c:	e7db      	b.n	800da06 <RegionCommonLinkAdrReqVerifyParams+0x3e>
            txPower =  verifyParams->CurrentTxPower;
 800da4e:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800da52:	f1b8 0f07 	cmp.w	r8, #7
 800da56:	d00c      	beq.n	800da72 <RegionCommonLinkAdrReqVerifyParams+0xaa>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800da58:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800da5c:	f886 9000 	strb.w	r9, [r6]
    *nbRep = nbRepetitions;
 800da60:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800da64:	4640      	mov	r0, r8
 800da66:	b005      	add	sp, #20
 800da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800da6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800da70:	e7ef      	b.n	800da52 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        if( nbRepetitions == 0 )
 800da72:	f1bb 0f00 	cmp.w	fp, #0
 800da76:	d1ef      	bne.n	800da58 <RegionCommonLinkAdrReqVerifyParams+0x90>
            nbRepetitions = 1;
 800da78:	f04f 0b01 	mov.w	fp, #1
 800da7c:	e7ec      	b.n	800da58 <RegionCommonLinkAdrReqVerifyParams+0x90>
	...

0800da80 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800da80:	4b02      	ldr	r3, [pc, #8]	@ (800da8c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800da82:	fa03 f000 	lsl.w	r0, r3, r0
}
 800da86:	fbb0 f0f1 	udiv	r0, r0, r1
 800da8a:	4770      	bx	lr
 800da8c:	000f4240 	.word	0x000f4240

0800da90 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800da90:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800da94:	fbb3 f0f0 	udiv	r0, r3, r0
 800da98:	4770      	bx	lr
	...

0800da9c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800da9c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800da9e:	f1a1 0c04 	sub.w	ip, r1, #4
 800daa2:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 800daa6:	fb0e f202 	mul.w	r2, lr, r2
 800daaa:	fb00 220c 	mla	r2, r0, ip, r2
 800daae:	0052      	lsls	r2, r2, #1
 800dab0:	d021      	beq.n	800daf6 <RegionCommonComputeRxWindowParameters+0x5a>
 800dab2:	4402      	add	r2, r0
 800dab4:	3a01      	subs	r2, #1
 800dab6:	fbb2 f2f0 	udiv	r2, r2, r0
 800daba:	4291      	cmp	r1, r2
 800dabc:	bf38      	it	cc
 800dabe:	4611      	movcc	r1, r2
 800dac0:	9a01      	ldr	r2, [sp, #4]
 800dac2:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800dac4:	0082      	lsls	r2, r0, #2
 800dac6:	fb01 f000 	mul.w	r0, r1, r0
 800daca:	b1b8      	cbz	r0, 800dafc <RegionCommonComputeRxWindowParameters+0x60>
 800dacc:	3001      	adds	r0, #1
 800dace:	0840      	lsrs	r0, r0, #1
 800dad0:	1a12      	subs	r2, r2, r0
 800dad2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dad6:	fb01 2313 	mls	r3, r1, r3, r2
 800dada:	2b00      	cmp	r3, #0
 800dadc:	dd10      	ble.n	800db00 <RegionCommonComputeRxWindowParameters+0x64>
 800dade:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800dae2:	4a0b      	ldr	r2, [pc, #44]	@ (800db10 <RegionCommonComputeRxWindowParameters+0x74>)
 800dae4:	fb82 1203 	smull	r1, r2, r2, r3
 800dae8:	17db      	asrs	r3, r3, #31
 800daea:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800daee:	9a02      	ldr	r2, [sp, #8]
 800daf0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800daf2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800daf6:	fbb2 f2f0 	udiv	r2, r2, r0
 800dafa:	e7de      	b.n	800daba <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800dafc:	0840      	lsrs	r0, r0, #1
 800dafe:	e7e7      	b.n	800dad0 <RegionCommonComputeRxWindowParameters+0x34>
 800db00:	4a03      	ldr	r2, [pc, #12]	@ (800db10 <RegionCommonComputeRxWindowParameters+0x74>)
 800db02:	fb82 1203 	smull	r1, r2, r2, r3
 800db06:	17db      	asrs	r3, r3, #31
 800db08:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800db0c:	e7ef      	b.n	800daee <RegionCommonComputeRxWindowParameters+0x52>
 800db0e:	bf00      	nop
 800db10:	10624dd3 	.word	0x10624dd3

0800db14 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	460d      	mov	r5, r1
 800db18:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800db1a:	0040      	lsls	r0, r0, #1
 800db1c:	f7f2 feaa 	bl	8000874 <__aeabi_ui2f>
 800db20:	4601      	mov	r1, r0
 800db22:	4628      	mov	r0, r5
 800db24:	f7f2 fdf4 	bl	8000710 <__aeabi_fsub>
 800db28:	4621      	mov	r1, r4
 800db2a:	f7f2 fdf1 	bl	8000710 <__aeabi_fsub>
 800db2e:	f7f2 fce3 	bl	80004f8 <__aeabi_f2d>
 800db32:	f004 fc15 	bl	8012360 <floor>
 800db36:	f7f2 fdbf 	bl	80006b8 <__aeabi_d2iz>

    return phyTxPower;
}
 800db3a:	b240      	sxtb	r0, r0
 800db3c:	bd38      	pop	{r3, r4, r5, pc}

0800db3e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800db3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db42:	b083      	sub	sp, #12
 800db44:	4605      	mov	r5, r0
 800db46:	468b      	mov	fp, r1
 800db48:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800db4a:	2600      	movs	r6, #0
 800db4c:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800db4e:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800db50:	46b1      	mov	r9, r6
 800db52:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800db54:	e049      	b.n	800dbea <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800db56:	7a3a      	ldrb	r2, [r7, #8]
 800db58:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800db5c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800db60:	b252      	sxtb	r2, r2
 800db62:	b249      	sxtb	r1, r1
 800db64:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800db68:	f7ff fe1b 	bl	800d7a2 <RegionCommonValueInRange>
 800db6c:	b178      	cbz	r0, 800db8e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800db6e:	68ea      	ldr	r2, [r5, #12]
 800db70:	7a7b      	ldrb	r3, [r7, #9]
 800db72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db76:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800db7a:	7d13      	ldrb	r3, [r2, #20]
 800db7c:	b353      	cbz	r3, 800dbd4 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800db7e:	f109 0301 	add.w	r3, r9, #1
 800db82:	eb08 0204 	add.w	r2, r8, r4
 800db86:	f80b 2009 	strb.w	r2, [fp, r9]
 800db8a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800db8e:	3401      	adds	r4, #1
 800db90:	b2e4      	uxtb	r4, r4
 800db92:	2c0f      	cmp	r4, #15
 800db94:	d823      	bhi.n	800dbde <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800db96:	686b      	ldr	r3, [r5, #4]
 800db98:	0072      	lsls	r2, r6, #1
 800db9a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800db9e:	4123      	asrs	r3, r4
 800dba0:	f013 0f01 	tst.w	r3, #1
 800dba4:	d0f3      	beq.n	800db8e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800dba6:	68a8      	ldr	r0, [r5, #8]
 800dba8:	eb08 0304 	add.w	r3, r8, r4
 800dbac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dbb0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800dbb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0e8      	beq.n	800db8e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800dbbc:	782b      	ldrb	r3, [r5, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1c9      	bne.n	800db56 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800dbc2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0c6      	beq.n	800db56 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800dbc8:	5a9b      	ldrh	r3, [r3, r2]
 800dbca:	4123      	asrs	r3, r4
 800dbcc:	f013 0f01 	tst.w	r3, #1
 800dbd0:	d1c1      	bne.n	800db56 <RegionCommonCountNbOfEnabledChannels+0x18>
 800dbd2:	e7dc      	b.n	800db8e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800dbd4:	f10a 0a01 	add.w	sl, sl, #1
 800dbd8:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800dbdc:	e7d7      	b.n	800db8e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800dbde:	f108 0810 	add.w	r8, r8, #16
 800dbe2:	fa5f f888 	uxtb.w	r8, r8
 800dbe6:	3601      	adds	r6, #1
 800dbe8:	b2f6      	uxtb	r6, r6
 800dbea:	8a2b      	ldrh	r3, [r5, #16]
 800dbec:	4598      	cmp	r8, r3
 800dbee:	d201      	bcs.n	800dbf4 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 800dbf0:	2400      	movs	r4, #0
 800dbf2:	e7ce      	b.n	800db92 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800dbf4:	9f01      	ldr	r7, [sp, #4]
 800dbf6:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800dbfa:	9b00      	ldr	r3, [sp, #0]
 800dbfc:	f883 a000 	strb.w	sl, [r3]
}
 800dc00:	b003      	add	sp, #12
 800dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc06 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800dc06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	460f      	mov	r7, r1
 800dc10:	4616      	mov	r6, r2
 800dc12:	461d      	mov	r5, r3
 800dc14:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800dc18:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800dc1c:	6840      	ldr	r0, [r0, #4]
 800dc1e:	f003 f981 	bl	8010f24 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	1a1b      	subs	r3, r3, r0
 800dc26:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800dc34:	6863      	ldr	r3, [r4, #4]
 800dc36:	b113      	cbz	r3, 800dc3e <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800dc38:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800dc3a:	4283      	cmp	r3, r0
 800dc3c:	d81e      	bhi.n	800dc7c <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800dc42:	69e3      	ldr	r3, [r4, #28]
 800dc44:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800dc48:	781f      	ldrb	r7, [r3, #0]
 800dc4a:	69a3      	ldr	r3, [r4, #24]
 800dc4c:	9303      	str	r3, [sp, #12]
 800dc4e:	ab01      	add	r3, sp, #4
 800dc50:	f104 020c 	add.w	r2, r4, #12
 800dc54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc58:	e883 0003 	stmia.w	r3, {r0, r1}
 800dc5c:	7d23      	ldrb	r3, [r4, #20]
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	7a23      	ldrb	r3, [r4, #8]
 800dc62:	7a62      	ldrb	r2, [r4, #9]
 800dc64:	4661      	mov	r1, ip
 800dc66:	4638      	mov	r0, r7
 800dc68:	f7ff fe37 	bl	800d8da <RegionCommonUpdateBandTimeOff>
 800dc6c:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800dc70:	4643      	mov	r3, r8
 800dc72:	462a      	mov	r2, r5
 800dc74:	4631      	mov	r1, r6
 800dc76:	69e0      	ldr	r0, [r4, #28]
 800dc78:	f7ff ff61 	bl	800db3e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800dc7c:	782b      	ldrb	r3, [r5, #0]
 800dc7e:	b923      	cbnz	r3, 800dc8a <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800dc80:	f898 3000 	ldrb.w	r3, [r8]
 800dc84:	b13b      	cbz	r3, 800dc96 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800dc86:	200b      	movs	r0, #11
 800dc88:	e002      	b.n	800dc90 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800dc90:	b005      	add	sp, #20
 800dc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800dc96:	200c      	movs	r0, #12
 800dc98:	e7fa      	b.n	800dc90 <RegionCommonIdentifyChannels+0x8a>

0800dc9a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	b082      	sub	sp, #8
 800dc9e:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800dca0:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800dca4:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800dca8:	42a6      	cmp	r6, r4
 800dcaa:	d011      	beq.n	800dcd0 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800dcac:	3c01      	subs	r4, #1
 800dcae:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800dcb0:	42a6      	cmp	r6, r4
 800dcb2:	d00e      	beq.n	800dcd2 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800dcb4:	68ab      	ldr	r3, [r5, #8]
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	4633      	mov	r3, r6
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	6869      	ldr	r1, [r5, #4]
 800dcc4:	78e8      	ldrb	r0, [r5, #3]
 800dcc6:	f7ff fd76 	bl	800d7b6 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d0ee      	beq.n	800dcac <RegionCommonGetNextLowerTxDr+0x12>
 800dcce:	e000      	b.n	800dcd2 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800dcd0:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	b002      	add	sp, #8
 800dcd6:	bd70      	pop	{r4, r5, r6, pc}

0800dcd8 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800dcd8:	4288      	cmp	r0, r1
 800dcda:	bfb8      	it	lt
 800dcdc:	4608      	movlt	r0, r1
 800dcde:	4770      	bx	lr

0800dce0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800dce0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800dce4:	4a05      	ldr	r2, [pc, #20]	@ (800dcfc <RegionCommonGetBandwidth+0x1c>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d004      	beq.n	800dcf4 <RegionCommonGetBandwidth+0x14>
 800dcea:	4a05      	ldr	r2, [pc, #20]	@ (800dd00 <RegionCommonGetBandwidth+0x20>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d103      	bne.n	800dcf8 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800dcf0:	2002      	movs	r0, #2
 800dcf2:	4770      	bx	lr
            return 1;
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800dcf8:	2000      	movs	r0, #0
    }
}
 800dcfa:	4770      	bx	lr
 800dcfc:	0003d090 	.word	0x0003d090
 800dd00:	0007a120 	.word	0x0007a120

0800dd04 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800dd04:	b500      	push	{lr}
 800dd06:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800dd08:	2805      	cmp	r0, #5
 800dd0a:	d80e      	bhi.n	800dd2a <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800dd0c:	9202      	str	r2, [sp, #8]
 800dd0e:	9101      	str	r1, [sp, #4]
 800dd10:	4b0a      	ldr	r3, [pc, #40]	@ (800dd3c <RegionCommonRxConfigPrint+0x38>)
 800dd12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	4b09      	ldr	r3, [pc, #36]	@ (800dd40 <RegionCommonRxConfigPrint+0x3c>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	2002      	movs	r0, #2
 800dd20:	f002 fe30 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800dd24:	b005      	add	sp, #20
 800dd26:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dd2a:	9201      	str	r2, [sp, #4]
 800dd2c:	9100      	str	r1, [sp, #0]
 800dd2e:	4b05      	ldr	r3, [pc, #20]	@ (800dd44 <RegionCommonRxConfigPrint+0x40>)
 800dd30:	2201      	movs	r2, #1
 800dd32:	2100      	movs	r1, #0
 800dd34:	2002      	movs	r0, #2
 800dd36:	f002 fe25 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 800dd3a:	e7f3      	b.n	800dd24 <RegionCommonRxConfigPrint+0x20>
 800dd3c:	08012ed4 	.word	0x08012ed4
 800dd40:	08012a10 	.word	0x08012a10
 800dd44:	08012a30 	.word	0x08012a30

0800dd48 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800dd48:	b500      	push	{lr}
 800dd4a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dd4c:	9101      	str	r1, [sp, #4]
 800dd4e:	9000      	str	r0, [sp, #0]
 800dd50:	4b04      	ldr	r3, [pc, #16]	@ (800dd64 <RegionCommonTxConfigPrint+0x1c>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	2100      	movs	r1, #0
 800dd56:	2002      	movs	r0, #2
 800dd58:	f002 fe14 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 800dd5c:	b003      	add	sp, #12
 800dd5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd62:	bf00      	nop
 800dd64:	08012a4c 	.word	0x08012a4c

0800dd68 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800dd6c:	2210      	movs	r2, #16
 800dd6e:	2100      	movs	r1, #0
 800dd70:	30f1      	adds	r0, #241	@ 0xf1
 800dd72:	f000 ff3c 	bl	800ebee <memset1>
    ctx->M_n = 0;
 800dd76:	2100      	movs	r1, #0
 800dd78:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800dd7c:	22f0      	movs	r2, #240	@ 0xf0
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 ff35 	bl	800ebee <memset1>
}
 800dd84:	bd10      	pop	{r4, pc}

0800dd86 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800dd86:	b508      	push	{r3, lr}
 800dd88:	4602      	mov	r2, r0
 800dd8a:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800dd8c:	2110      	movs	r1, #16
 800dd8e:	f000 fb3b 	bl	800e408 <lorawan_aes_set_key>
}
 800dd92:	bd08      	pop	{r3, pc}

0800dd94 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800dd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd98:	b084      	sub	sp, #16
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	460d      	mov	r5, r1
 800dd9e:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800dda0:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d054      	beq.n	800de52 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800dda8:	f1c3 0810 	rsb	r8, r3, #16
 800ddac:	4647      	mov	r7, r8
 800ddae:	4590      	cmp	r8, r2
 800ddb0:	bf28      	it	cs
 800ddb2:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ddb4:	f200 1001 	addw	r0, r0, #257	@ 0x101
 800ddb8:	b2ba      	uxth	r2, r7
 800ddba:	4418      	add	r0, r3
 800ddbc:	f000 feff 	bl	800ebbe <memcpy1>
        ctx->M_n += mlen;
 800ddc0:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800ddc4:	443b      	add	r3, r7
 800ddc6:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ddca:	2b0f      	cmp	r3, #15
 800ddcc:	d94d      	bls.n	800de6a <AES_CMAC_Update+0xd6>
 800ddce:	45b0      	cmp	r8, r6
 800ddd0:	d24b      	bcs.n	800de6a <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e008      	b.n	800dde8 <AES_CMAC_Update+0x54>
 800ddd6:	18e2      	adds	r2, r4, r3
 800ddd8:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 800dddc:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 800dde0:	4041      	eors	r1, r0
 800dde2:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 800dde6:	3301      	adds	r3, #1
 800dde8:	2b0f      	cmp	r3, #15
 800ddea:	ddf4      	ble.n	800ddd6 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ddec:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 800ddf0:	2210      	movs	r2, #16
 800ddf2:	4641      	mov	r1, r8
 800ddf4:	4668      	mov	r0, sp
 800ddf6:	f000 fee2 	bl	800ebbe <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	4669      	mov	r1, sp
 800ddfe:	4668      	mov	r0, sp
 800de00:	f000 fb84 	bl	800e50c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800de04:	2210      	movs	r2, #16
 800de06:	4669      	mov	r1, sp
 800de08:	4640      	mov	r0, r8
 800de0a:	f000 fed8 	bl	800ebbe <memcpy1>

        data += mlen;
 800de0e:	443d      	add	r5, r7
        len -= mlen;
 800de10:	1bf6      	subs	r6, r6, r7
 800de12:	e01e      	b.n	800de52 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800de14:	eb04 0e03 	add.w	lr, r4, r3
 800de18:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 800de1c:	5cea      	ldrb	r2, [r5, r3]
 800de1e:	ea8c 0c02 	eor.w	ip, ip, r2
 800de22:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 800de26:	3301      	adds	r3, #1
 800de28:	2b0f      	cmp	r3, #15
 800de2a:	ddf3      	ble.n	800de14 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de2c:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 800de30:	2210      	movs	r2, #16
 800de32:	4639      	mov	r1, r7
 800de34:	4668      	mov	r0, sp
 800de36:	f000 fec2 	bl	800ebbe <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de3a:	4622      	mov	r2, r4
 800de3c:	4669      	mov	r1, sp
 800de3e:	4668      	mov	r0, sp
 800de40:	f000 fb64 	bl	800e50c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800de44:	2210      	movs	r2, #16
 800de46:	4669      	mov	r1, sp
 800de48:	4638      	mov	r0, r7
 800de4a:	f000 feb8 	bl	800ebbe <memcpy1>

        data += 16;
 800de4e:	3510      	adds	r5, #16
        len -= 16;
 800de50:	3e10      	subs	r6, #16
    while( len > 16 )
 800de52:	2e10      	cmp	r6, #16
 800de54:	d901      	bls.n	800de5a <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800de56:	2300      	movs	r3, #0
 800de58:	e7e6      	b.n	800de28 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800de5a:	b2b2      	uxth	r2, r6
 800de5c:	4629      	mov	r1, r5
 800de5e:	f204 1001 	addw	r0, r4, #257	@ 0x101
 800de62:	f000 feac 	bl	800ebbe <memcpy1>
    ctx->M_n = len;
 800de66:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 800de6a:	b004      	add	sp, #16
 800de6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de70 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800de70:	b530      	push	{r4, r5, lr}
 800de72:	b089      	sub	sp, #36	@ 0x24
 800de74:	4605      	mov	r5, r0
 800de76:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800de78:	2210      	movs	r2, #16
 800de7a:	2100      	movs	r1, #0
 800de7c:	eb0d 0002 	add.w	r0, sp, r2
 800de80:	f000 feb5 	bl	800ebee <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800de84:	4622      	mov	r2, r4
 800de86:	a904      	add	r1, sp, #16
 800de88:	4608      	mov	r0, r1
 800de8a:	f000 fb3f 	bl	800e50c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800de8e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	db01      	blt.n	800de9a <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800de96:	2300      	movs	r3, #0
 800de98:	e030      	b.n	800defc <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800de9a:	2300      	movs	r3, #0
 800de9c:	2b0e      	cmp	r3, #14
 800de9e:	dc11      	bgt.n	800dec4 <AES_CMAC_Final+0x54>
 800dea0:	f103 0220 	add.w	r2, r3, #32
 800dea4:	eb0d 0102 	add.w	r1, sp, r2
 800dea8:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800deac:	3301      	adds	r3, #1
 800deae:	f103 0020 	add.w	r0, r3, #32
 800deb2:	4468      	add	r0, sp
 800deb4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800deb8:	0052      	lsls	r2, r2, #1
 800deba:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 800debe:	f801 2c10 	strb.w	r2, [r1, #-16]
 800dec2:	e7eb      	b.n	800de9c <AES_CMAC_Final+0x2c>
 800dec4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800ded0:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800ded4:	f88d 301f 	strb.w	r3, [sp, #31]
 800ded8:	e017      	b.n	800df0a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800deda:	f103 0220 	add.w	r2, r3, #32
 800dede:	eb0d 0102 	add.w	r1, sp, r2
 800dee2:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800dee6:	3301      	adds	r3, #1
 800dee8:	f103 0020 	add.w	r0, r3, #32
 800deec:	4468      	add	r0, sp
 800deee:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800def2:	0052      	lsls	r2, r2, #1
 800def4:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 800def8:	f801 2c10 	strb.w	r2, [r1, #-16]
 800defc:	2b0e      	cmp	r3, #14
 800defe:	ddec      	ble.n	800deda <AES_CMAC_Final+0x6a>
 800df00:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800df0a:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800df0e:	2810      	cmp	r0, #16
 800df10:	d014      	beq.n	800df3c <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800df12:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	db30      	blt.n	800df7c <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800df1a:	2300      	movs	r3, #0
 800df1c:	e041      	b.n	800dfa2 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800df1e:	18e1      	adds	r1, r4, r3
 800df20:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800df24:	f103 0020 	add.w	r0, r3, #32
 800df28:	4468      	add	r0, sp
 800df2a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800df2e:	4042      	eors	r2, r0
 800df30:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800df34:	3301      	adds	r3, #1
 800df36:	2b0f      	cmp	r3, #15
 800df38:	ddf1      	ble.n	800df1e <AES_CMAC_Final+0xae>
 800df3a:	e059      	b.n	800dff0 <AES_CMAC_Final+0x180>
 800df3c:	2300      	movs	r3, #0
 800df3e:	e7fa      	b.n	800df36 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800df40:	f103 0220 	add.w	r2, r3, #32
 800df44:	eb0d 0102 	add.w	r1, sp, r2
 800df48:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800df4c:	3301      	adds	r3, #1
 800df4e:	f103 0c20 	add.w	ip, r3, #32
 800df52:	44ec      	add	ip, sp
 800df54:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800df58:	0052      	lsls	r2, r2, #1
 800df5a:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800df5e:	f801 2c10 	strb.w	r2, [r1, #-16]
 800df62:	2b0e      	cmp	r3, #14
 800df64:	ddec      	ble.n	800df40 <AES_CMAC_Final+0xd0>
 800df66:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800df72:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800df76:	f88d 301f 	strb.w	r3, [sp, #31]
 800df7a:	e019      	b.n	800dfb0 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800df7c:	2300      	movs	r3, #0
 800df7e:	e7f0      	b.n	800df62 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800df80:	f103 0220 	add.w	r2, r3, #32
 800df84:	eb0d 0102 	add.w	r1, sp, r2
 800df88:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800df8c:	3301      	adds	r3, #1
 800df8e:	f103 0c20 	add.w	ip, r3, #32
 800df92:	44ec      	add	ip, sp
 800df94:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800df98:	0052      	lsls	r2, r2, #1
 800df9a:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800df9e:	f801 2c10 	strb.w	r2, [r1, #-16]
 800dfa2:	2b0e      	cmp	r3, #14
 800dfa4:	ddec      	ble.n	800df80 <AES_CMAC_Final+0x110>
 800dfa6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800dfb0:	4420      	add	r0, r4
 800dfb2:	2380      	movs	r3, #128	@ 0x80
 800dfb4:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800dfb8:	e003      	b.n	800dfc2 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800dfba:	4423      	add	r3, r4
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800dfc2:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 800dfcc:	2b0f      	cmp	r3, #15
 800dfce:	d9f4      	bls.n	800dfba <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e00b      	b.n	800dfec <AES_CMAC_Final+0x17c>
 800dfd4:	18e1      	adds	r1, r4, r3
 800dfd6:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800dfda:	f103 0020 	add.w	r0, r3, #32
 800dfde:	4468      	add	r0, sp
 800dfe0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800dfe4:	4042      	eors	r2, r0
 800dfe6:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800dfea:	3301      	adds	r3, #1
 800dfec:	2b0f      	cmp	r3, #15
 800dfee:	ddf1      	ble.n	800dfd4 <AES_CMAC_Final+0x164>
 800dff0:	2300      	movs	r3, #0
 800dff2:	e009      	b.n	800e008 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800dff4:	18e2      	adds	r2, r4, r3
 800dff6:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 800dffa:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 800dffe:	ea8c 0c01 	eor.w	ip, ip, r1
 800e002:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 800e006:	3301      	adds	r3, #1
 800e008:	2b0f      	cmp	r3, #15
 800e00a:	ddf3      	ble.n	800dff4 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e00c:	2210      	movs	r2, #16
 800e00e:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 800e012:	4668      	mov	r0, sp
 800e014:	f000 fdd3 	bl	800ebbe <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e018:	4622      	mov	r2, r4
 800e01a:	4629      	mov	r1, r5
 800e01c:	4668      	mov	r0, sp
 800e01e:	f000 fa75 	bl	800e50c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e022:	2210      	movs	r2, #16
 800e024:	2100      	movs	r1, #0
 800e026:	eb0d 0002 	add.w	r0, sp, r2
 800e02a:	f000 fde0 	bl	800ebee <memset1>
}
 800e02e:	b009      	add	sp, #36	@ 0x24
 800e030:	bd30      	pop	{r4, r5, pc}

0800e032 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e032:	780b      	ldrb	r3, [r1, #0]
 800e034:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e036:	784b      	ldrb	r3, [r1, #1]
 800e038:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e03a:	788b      	ldrb	r3, [r1, #2]
 800e03c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e03e:	78cb      	ldrb	r3, [r1, #3]
 800e040:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e042:	790b      	ldrb	r3, [r1, #4]
 800e044:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e046:	794b      	ldrb	r3, [r1, #5]
 800e048:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e04a:	798b      	ldrb	r3, [r1, #6]
 800e04c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e04e:	79cb      	ldrb	r3, [r1, #7]
 800e050:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e052:	7a0b      	ldrb	r3, [r1, #8]
 800e054:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e056:	7a4b      	ldrb	r3, [r1, #9]
 800e058:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e05a:	7a8b      	ldrb	r3, [r1, #10]
 800e05c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e05e:	7acb      	ldrb	r3, [r1, #11]
 800e060:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e062:	7b0b      	ldrb	r3, [r1, #12]
 800e064:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e066:	7b4b      	ldrb	r3, [r1, #13]
 800e068:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e06a:	7b8b      	ldrb	r3, [r1, #14]
 800e06c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e06e:	7bcb      	ldrb	r3, [r1, #15]
 800e070:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e072:	4770      	bx	lr

0800e074 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800e074:	e004      	b.n	800e080 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e07a:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800e07e:	461a      	mov	r2, r3
 800e080:	1e53      	subs	r3, r2, #1
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2a00      	cmp	r2, #0
 800e086:	d1f6      	bne.n	800e076 <copy_block_nn+0x2>
}
 800e088:	4770      	bx	lr

0800e08a <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e08a:	7803      	ldrb	r3, [r0, #0]
 800e08c:	780a      	ldrb	r2, [r1, #0]
 800e08e:	4053      	eors	r3, r2
 800e090:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e092:	7843      	ldrb	r3, [r0, #1]
 800e094:	784a      	ldrb	r2, [r1, #1]
 800e096:	4053      	eors	r3, r2
 800e098:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e09a:	7883      	ldrb	r3, [r0, #2]
 800e09c:	788a      	ldrb	r2, [r1, #2]
 800e09e:	4053      	eors	r3, r2
 800e0a0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e0a2:	78c3      	ldrb	r3, [r0, #3]
 800e0a4:	78ca      	ldrb	r2, [r1, #3]
 800e0a6:	4053      	eors	r3, r2
 800e0a8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e0aa:	7903      	ldrb	r3, [r0, #4]
 800e0ac:	790a      	ldrb	r2, [r1, #4]
 800e0ae:	4053      	eors	r3, r2
 800e0b0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e0b2:	7943      	ldrb	r3, [r0, #5]
 800e0b4:	794a      	ldrb	r2, [r1, #5]
 800e0b6:	4053      	eors	r3, r2
 800e0b8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e0ba:	7983      	ldrb	r3, [r0, #6]
 800e0bc:	798a      	ldrb	r2, [r1, #6]
 800e0be:	4053      	eors	r3, r2
 800e0c0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e0c2:	79c3      	ldrb	r3, [r0, #7]
 800e0c4:	79ca      	ldrb	r2, [r1, #7]
 800e0c6:	4053      	eors	r3, r2
 800e0c8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e0ca:	7a03      	ldrb	r3, [r0, #8]
 800e0cc:	7a0a      	ldrb	r2, [r1, #8]
 800e0ce:	4053      	eors	r3, r2
 800e0d0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e0d2:	7a43      	ldrb	r3, [r0, #9]
 800e0d4:	7a4a      	ldrb	r2, [r1, #9]
 800e0d6:	4053      	eors	r3, r2
 800e0d8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e0da:	7a83      	ldrb	r3, [r0, #10]
 800e0dc:	7a8a      	ldrb	r2, [r1, #10]
 800e0de:	4053      	eors	r3, r2
 800e0e0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e0e2:	7ac3      	ldrb	r3, [r0, #11]
 800e0e4:	7aca      	ldrb	r2, [r1, #11]
 800e0e6:	4053      	eors	r3, r2
 800e0e8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e0ea:	7b03      	ldrb	r3, [r0, #12]
 800e0ec:	7b0a      	ldrb	r2, [r1, #12]
 800e0ee:	4053      	eors	r3, r2
 800e0f0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e0f2:	7b43      	ldrb	r3, [r0, #13]
 800e0f4:	7b4a      	ldrb	r2, [r1, #13]
 800e0f6:	4053      	eors	r3, r2
 800e0f8:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e0fa:	7b83      	ldrb	r3, [r0, #14]
 800e0fc:	7b8a      	ldrb	r2, [r1, #14]
 800e0fe:	4053      	eors	r3, r2
 800e100:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e102:	7bc3      	ldrb	r3, [r0, #15]
 800e104:	7bca      	ldrb	r2, [r1, #15]
 800e106:	4053      	eors	r3, r2
 800e108:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e10a:	4770      	bx	lr

0800e10c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e10c:	780b      	ldrb	r3, [r1, #0]
 800e10e:	f892 c000 	ldrb.w	ip, [r2]
 800e112:	ea83 030c 	eor.w	r3, r3, ip
 800e116:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e118:	784b      	ldrb	r3, [r1, #1]
 800e11a:	f892 c001 	ldrb.w	ip, [r2, #1]
 800e11e:	ea83 030c 	eor.w	r3, r3, ip
 800e122:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e124:	788b      	ldrb	r3, [r1, #2]
 800e126:	f892 c002 	ldrb.w	ip, [r2, #2]
 800e12a:	ea83 030c 	eor.w	r3, r3, ip
 800e12e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e130:	78cb      	ldrb	r3, [r1, #3]
 800e132:	f892 c003 	ldrb.w	ip, [r2, #3]
 800e136:	ea83 030c 	eor.w	r3, r3, ip
 800e13a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e13c:	790b      	ldrb	r3, [r1, #4]
 800e13e:	f892 c004 	ldrb.w	ip, [r2, #4]
 800e142:	ea83 030c 	eor.w	r3, r3, ip
 800e146:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e148:	794b      	ldrb	r3, [r1, #5]
 800e14a:	f892 c005 	ldrb.w	ip, [r2, #5]
 800e14e:	ea83 030c 	eor.w	r3, r3, ip
 800e152:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e154:	798b      	ldrb	r3, [r1, #6]
 800e156:	f892 c006 	ldrb.w	ip, [r2, #6]
 800e15a:	ea83 030c 	eor.w	r3, r3, ip
 800e15e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e160:	79cb      	ldrb	r3, [r1, #7]
 800e162:	f892 c007 	ldrb.w	ip, [r2, #7]
 800e166:	ea83 030c 	eor.w	r3, r3, ip
 800e16a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e16c:	7a0b      	ldrb	r3, [r1, #8]
 800e16e:	f892 c008 	ldrb.w	ip, [r2, #8]
 800e172:	ea83 030c 	eor.w	r3, r3, ip
 800e176:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e178:	7a4b      	ldrb	r3, [r1, #9]
 800e17a:	f892 c009 	ldrb.w	ip, [r2, #9]
 800e17e:	ea83 030c 	eor.w	r3, r3, ip
 800e182:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e184:	7a8b      	ldrb	r3, [r1, #10]
 800e186:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800e18a:	ea83 030c 	eor.w	r3, r3, ip
 800e18e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e190:	7acb      	ldrb	r3, [r1, #11]
 800e192:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800e196:	ea83 030c 	eor.w	r3, r3, ip
 800e19a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e19c:	7b0b      	ldrb	r3, [r1, #12]
 800e19e:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800e1a2:	ea83 030c 	eor.w	r3, r3, ip
 800e1a6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e1a8:	7b4b      	ldrb	r3, [r1, #13]
 800e1aa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e1ae:	ea83 030c 	eor.w	r3, r3, ip
 800e1b2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e1b4:	7b8b      	ldrb	r3, [r1, #14]
 800e1b6:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800e1ba:	ea83 030c 	eor.w	r3, r3, ip
 800e1be:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e1c0:	7bcb      	ldrb	r3, [r1, #15]
 800e1c2:	7bd2      	ldrb	r2, [r2, #15]
 800e1c4:	4053      	eors	r3, r2
 800e1c6:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e1c8:	4770      	bx	lr

0800e1ca <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e1ca:	b508      	push	{r3, lr}
    xor_block(d, k);
 800e1cc:	f7ff ff5d 	bl	800e08a <xor_block>
}
 800e1d0:	bd08      	pop	{r3, pc}
	...

0800e1d4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e1d4:	7802      	ldrb	r2, [r0, #0]
 800e1d6:	4b18      	ldr	r3, [pc, #96]	@ (800e238 <shift_sub_rows+0x64>)
 800e1d8:	5c9a      	ldrb	r2, [r3, r2]
 800e1da:	7002      	strb	r2, [r0, #0]
 800e1dc:	7902      	ldrb	r2, [r0, #4]
 800e1de:	5c9a      	ldrb	r2, [r3, r2]
 800e1e0:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e1e2:	7a02      	ldrb	r2, [r0, #8]
 800e1e4:	5c9a      	ldrb	r2, [r3, r2]
 800e1e6:	7202      	strb	r2, [r0, #8]
 800e1e8:	7b02      	ldrb	r2, [r0, #12]
 800e1ea:	5c9a      	ldrb	r2, [r3, r2]
 800e1ec:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e1ee:	7842      	ldrb	r2, [r0, #1]
 800e1f0:	7941      	ldrb	r1, [r0, #5]
 800e1f2:	5c59      	ldrb	r1, [r3, r1]
 800e1f4:	7041      	strb	r1, [r0, #1]
 800e1f6:	7a41      	ldrb	r1, [r0, #9]
 800e1f8:	5c59      	ldrb	r1, [r3, r1]
 800e1fa:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e1fc:	7b41      	ldrb	r1, [r0, #13]
 800e1fe:	5c59      	ldrb	r1, [r3, r1]
 800e200:	7241      	strb	r1, [r0, #9]
 800e202:	5c9a      	ldrb	r2, [r3, r2]
 800e204:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e206:	7882      	ldrb	r2, [r0, #2]
 800e208:	7a81      	ldrb	r1, [r0, #10]
 800e20a:	5c59      	ldrb	r1, [r3, r1]
 800e20c:	7081      	strb	r1, [r0, #2]
 800e20e:	5c9a      	ldrb	r2, [r3, r2]
 800e210:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e212:	7982      	ldrb	r2, [r0, #6]
 800e214:	7b81      	ldrb	r1, [r0, #14]
 800e216:	5c59      	ldrb	r1, [r3, r1]
 800e218:	7181      	strb	r1, [r0, #6]
 800e21a:	5c9a      	ldrb	r2, [r3, r2]
 800e21c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e21e:	7bc2      	ldrb	r2, [r0, #15]
 800e220:	7ac1      	ldrb	r1, [r0, #11]
 800e222:	5c59      	ldrb	r1, [r3, r1]
 800e224:	73c1      	strb	r1, [r0, #15]
 800e226:	79c1      	ldrb	r1, [r0, #7]
 800e228:	5c59      	ldrb	r1, [r3, r1]
 800e22a:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e22c:	78c1      	ldrb	r1, [r0, #3]
 800e22e:	5c59      	ldrb	r1, [r3, r1]
 800e230:	71c1      	strb	r1, [r0, #7]
 800e232:	5c9b      	ldrb	r3, [r3, r2]
 800e234:	70c3      	strb	r3, [r0, #3]
}
 800e236:	4770      	bx	lr
 800e238:	080130ec 	.word	0x080130ec

0800e23c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e240:	b084      	sub	sp, #16
 800e242:	4604      	mov	r4, r0
    block_copy(st, dt);
 800e244:	4601      	mov	r1, r0
 800e246:	4668      	mov	r0, sp
 800e248:	f7ff fef3 	bl	800e032 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e24c:	f89d c000 	ldrb.w	ip, [sp]
 800e250:	4b6a      	ldr	r3, [pc, #424]	@ (800e3fc <mix_sub_columns+0x1c0>)
 800e252:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e256:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e25a:	4a69      	ldr	r2, [pc, #420]	@ (800e400 <mix_sub_columns+0x1c4>)
 800e25c:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e260:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800e264:	4967      	ldr	r1, [pc, #412]	@ (800e404 <mix_sub_columns+0x1c8>)
 800e266:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e26a:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800e26e:	5dce      	ldrb	r6, [r1, r7]
 800e270:	ea80 0009 	eor.w	r0, r0, r9
 800e274:	4068      	eors	r0, r5
 800e276:	4070      	eors	r0, r6
 800e278:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e27a:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e27e:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e282:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e286:	ea80 0a0a 	eor.w	sl, r0, sl
 800e28a:	ea89 090a 	eor.w	r9, r9, sl
 800e28e:	ea86 0609 	eor.w	r6, r6, r9
 800e292:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e294:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e298:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e29c:	5dd6      	ldrb	r6, [r2, r7]
 800e29e:	ea80 0008 	eor.w	r0, r0, r8
 800e2a2:	ea8e 0000 	eor.w	r0, lr, r0
 800e2a6:	4070      	eors	r0, r6
 800e2a8:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e2aa:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e2ae:	5dd8      	ldrb	r0, [r3, r7]
 800e2b0:	ea86 0608 	eor.w	r6, r6, r8
 800e2b4:	4075      	eors	r5, r6
 800e2b6:	4068      	eors	r0, r5
 800e2b8:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e2ba:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e2be:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e2c2:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800e2c6:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e2ca:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800e2ce:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e2d2:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800e2d6:	5dce      	ldrb	r6, [r1, r7]
 800e2d8:	ea80 0009 	eor.w	r0, r0, r9
 800e2dc:	4068      	eors	r0, r5
 800e2de:	4070      	eors	r0, r6
 800e2e0:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e2e2:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e2e6:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e2ea:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e2ee:	ea80 0a0a 	eor.w	sl, r0, sl
 800e2f2:	ea89 090a 	eor.w	r9, r9, sl
 800e2f6:	ea86 0609 	eor.w	r6, r6, r9
 800e2fa:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e2fc:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e300:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e304:	5dd6      	ldrb	r6, [r2, r7]
 800e306:	ea80 0008 	eor.w	r0, r0, r8
 800e30a:	ea8e 0000 	eor.w	r0, lr, r0
 800e30e:	4070      	eors	r0, r6
 800e310:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e312:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e316:	5dd8      	ldrb	r0, [r3, r7]
 800e318:	ea86 0608 	eor.w	r6, r6, r8
 800e31c:	4075      	eors	r5, r6
 800e31e:	4068      	eors	r0, r5
 800e320:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e322:	f89d c008 	ldrb.w	ip, [sp, #8]
 800e326:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e32a:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800e32e:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e332:	f89d e002 	ldrb.w	lr, [sp, #2]
 800e336:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e33a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800e33e:	5dce      	ldrb	r6, [r1, r7]
 800e340:	ea80 0009 	eor.w	r0, r0, r9
 800e344:	4068      	eors	r0, r5
 800e346:	4070      	eors	r0, r6
 800e348:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e34a:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e34e:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e352:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e356:	ea80 0a0a 	eor.w	sl, r0, sl
 800e35a:	ea89 090a 	eor.w	r9, r9, sl
 800e35e:	ea86 0609 	eor.w	r6, r6, r9
 800e362:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e364:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e368:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e36c:	5dd6      	ldrb	r6, [r2, r7]
 800e36e:	ea80 0008 	eor.w	r0, r0, r8
 800e372:	ea8e 0000 	eor.w	r0, lr, r0
 800e376:	4070      	eors	r0, r6
 800e378:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e37a:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e37e:	5dd8      	ldrb	r0, [r3, r7]
 800e380:	ea86 0608 	eor.w	r6, r6, r8
 800e384:	4075      	eors	r5, r6
 800e386:	4068      	eors	r0, r5
 800e388:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e38a:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800e38e:	5d98      	ldrb	r0, [r3, r6]
 800e390:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800e394:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e398:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800e39c:	f811 c007 	ldrb.w	ip, [r1, r7]
 800e3a0:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800e3a4:	f811 e005 	ldrb.w	lr, [r1, r5]
 800e3a8:	ea80 0009 	eor.w	r0, r0, r9
 800e3ac:	ea8c 0000 	eor.w	r0, ip, r0
 800e3b0:	ea8e 0000 	eor.w	r0, lr, r0
 800e3b4:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e3b6:	5d88      	ldrb	r0, [r1, r6]
 800e3b8:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e3bc:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e3c0:	ea80 0a0a 	eor.w	sl, r0, sl
 800e3c4:	ea89 090a 	eor.w	r9, r9, sl
 800e3c8:	ea8e 0e09 	eor.w	lr, lr, r9
 800e3cc:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e3d0:	f811 1008 	ldrb.w	r1, [r1, r8]
 800e3d4:	f813 e007 	ldrb.w	lr, [r3, r7]
 800e3d8:	5d57      	ldrb	r7, [r2, r5]
 800e3da:	4048      	eors	r0, r1
 800e3dc:	ea8e 0000 	eor.w	r0, lr, r0
 800e3e0:	4078      	eors	r0, r7
 800e3e2:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e3e4:	5d92      	ldrb	r2, [r2, r6]
 800e3e6:	5d5b      	ldrb	r3, [r3, r5]
 800e3e8:	4051      	eors	r1, r2
 800e3ea:	ea8c 0c01 	eor.w	ip, ip, r1
 800e3ee:	ea83 030c 	eor.w	r3, r3, ip
 800e3f2:	73e3      	strb	r3, [r4, #15]
  }
 800e3f4:	b004      	add	sp, #16
 800e3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3fa:	bf00      	nop
 800e3fc:	08012fec 	.word	0x08012fec
 800e400:	08012eec 	.word	0x08012eec
 800e404:	080130ec 	.word	0x080130ec

0800e408 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e40c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800e40e:	f1a1 0310 	sub.w	r3, r1, #16
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b10      	cmp	r3, #16
 800e416:	d81a      	bhi.n	800e44e <lorawan_aes_set_key+0x46>
 800e418:	460d      	mov	r5, r1
 800e41a:	4a3a      	ldr	r2, [pc, #232]	@ (800e504 <lorawan_aes_set_key+0xfc>)
 800e41c:	fa22 f303 	lsr.w	r3, r2, r3
 800e420:	f013 0f01 	tst.w	r3, #1
 800e424:	d013      	beq.n	800e44e <lorawan_aes_set_key+0x46>
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e426:	460a      	mov	r2, r1
 800e428:	4601      	mov	r1, r0
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7ff fe22 	bl	800e074 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e430:	f105 031c 	add.w	r3, r5, #28
 800e434:	b2db      	uxtb	r3, r3
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800e43c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e440:	3b01      	subs	r3, #1
 800e442:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e446:	462b      	mov	r3, r5
 800e448:	f04f 0c01 	mov.w	ip, #1
 800e44c:	e029      	b.n	800e4a2 <lorawan_aes_set_key+0x9a>
        ctx->rnd = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 800e454:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800e456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if( keylen > 24 && cc % keylen == 16 )
 800e45a:	2d18      	cmp	r5, #24
 800e45c:	d901      	bls.n	800e462 <lorawan_aes_set_key+0x5a>
 800e45e:	2a10      	cmp	r2, #16
 800e460:	d047      	beq.n	800e4f2 <lorawan_aes_set_key+0xea>
        tt = cc - keylen;
 800e462:	1b5a      	subs	r2, r3, r5
 800e464:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e466:	f814 9002 	ldrb.w	r9, [r4, r2]
 800e46a:	ea89 0808 	eor.w	r8, r9, r8
 800e46e:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e472:	f102 0801 	add.w	r8, r2, #1
 800e476:	f814 8008 	ldrb.w	r8, [r4, r8]
 800e47a:	f100 0901 	add.w	r9, r0, #1
 800e47e:	ea88 0707 	eor.w	r7, r8, r7
 800e482:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e486:	1c97      	adds	r7, r2, #2
 800e488:	5de7      	ldrb	r7, [r4, r7]
 800e48a:	f100 0802 	add.w	r8, r0, #2
 800e48e:	407e      	eors	r6, r7
 800e490:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e494:	3203      	adds	r2, #3
 800e496:	5ca6      	ldrb	r6, [r4, r2]
 800e498:	1cc2      	adds	r2, r0, #3
 800e49a:	4071      	eors	r1, r6
 800e49c:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e49e:	3304      	adds	r3, #4
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	4573      	cmp	r3, lr
 800e4a4:	d22c      	bcs.n	800e500 <lorawan_aes_set_key+0xf8>
        t0 = ctx->ksch[cc - 4];
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	1f1a      	subs	r2, r3, #4
 800e4aa:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800e4ae:	1eda      	subs	r2, r3, #3
 800e4b0:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800e4b2:	1e9a      	subs	r2, r3, #2
 800e4b4:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800e4b6:	1e5a      	subs	r2, r3, #1
 800e4b8:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800e4ba:	fbb3 f2f5 	udiv	r2, r3, r5
 800e4be:	fb05 3212 	mls	r2, r5, r2, r3
 800e4c2:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800e4c6:	d1c8      	bne.n	800e45a <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800e4c8:	4a0f      	ldr	r2, [pc, #60]	@ (800e508 <lorawan_aes_set_key+0x100>)
 800e4ca:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e4ce:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800e4d2:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800e4d4:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800e4d6:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800e4da:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800e4de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e4e2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800e4e6:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800e4ea:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800e4ee:	46c8      	mov	r8, r9
 800e4f0:	e7b7      	b.n	800e462 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800e4f2:	4a05      	ldr	r2, [pc, #20]	@ (800e508 <lorawan_aes_set_key+0x100>)
 800e4f4:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800e4f8:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800e4fa:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800e4fc:	5c51      	ldrb	r1, [r2, r1]
 800e4fe:	e7b0      	b.n	800e462 <lorawan_aes_set_key+0x5a>
    return 0;
 800e500:	2000      	movs	r0, #0
 800e502:	e7a8      	b.n	800e456 <lorawan_aes_set_key+0x4e>
 800e504:	00010101 	.word	0x00010101
 800e508:	080130ec 	.word	0x080130ec

0800e50c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800e50c:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800e510:	b31b      	cbz	r3, 800e55a <lorawan_aes_encrypt+0x4e>
{
 800e512:	b570      	push	{r4, r5, r6, lr}
 800e514:	b084      	sub	sp, #16
 800e516:	460e      	mov	r6, r1
 800e518:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e51a:	4601      	mov	r1, r0
 800e51c:	4668      	mov	r0, sp
 800e51e:	f7ff fdf5 	bl	800e10c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e522:	2401      	movs	r4, #1
 800e524:	e009      	b.n	800e53a <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e526:	4668      	mov	r0, sp
 800e528:	f7ff fe88 	bl	800e23c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e52c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800e530:	4668      	mov	r0, sp
 800e532:	f7ff fe4a 	bl	800e1ca <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e536:	3401      	adds	r4, #1
 800e538:	b2e4      	uxtb	r4, r4
 800e53a:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 800e53e:	42a3      	cmp	r3, r4
 800e540:	d8f1      	bhi.n	800e526 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e542:	4668      	mov	r0, sp
 800e544:	f7ff fe46 	bl	800e1d4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e548:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800e54c:	4669      	mov	r1, sp
 800e54e:	4630      	mov	r0, r6
 800e550:	f7ff fddc 	bl	800e10c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e554:	2000      	movs	r0, #0
}
 800e556:	b004      	add	sp, #16
 800e558:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800e55a:	20ff      	movs	r0, #255	@ 0xff
}
 800e55c:	4770      	bx	lr
	...

0800e560 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e560:	2300      	movs	r3, #0
 800e562:	2b0a      	cmp	r3, #10
 800e564:	d816      	bhi.n	800e594 <GetKeyByID+0x34>
{
 800e566:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e568:	4a0b      	ldr	r2, [pc, #44]	@ (800e598 <GetKeyByID+0x38>)
 800e56a:	6814      	ldr	r4, [r2, #0]
 800e56c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e570:	4422      	add	r2, r4
 800e572:	7e12      	ldrb	r2, [r2, #24]
 800e574:	4282      	cmp	r2, r0
 800e576:	d006      	beq.n	800e586 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e578:	3301      	adds	r3, #1
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b0a      	cmp	r3, #10
 800e57e:	d9f3      	bls.n	800e568 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e580:	2003      	movs	r0, #3
}
 800e582:	bc10      	pop	{r4}
 800e584:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e586:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e58a:	3318      	adds	r3, #24
 800e58c:	441c      	add	r4, r3
 800e58e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e590:	2000      	movs	r0, #0
 800e592:	e7f6      	b.n	800e582 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e594:	2003      	movs	r0, #3
}
 800e596:	4770      	bx	lr
 800e598:	20000ec8 	.word	0x20000ec8

0800e59c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a0:	b0cc      	sub	sp, #304	@ 0x130
 800e5a2:	9d52      	ldr	r5, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e5a4:	b3a9      	cbz	r1, 800e612 <ComputeCmac+0x76>
 800e5a6:	4607      	mov	r7, r0
 800e5a8:	4616      	mov	r6, r2
 800e5aa:	461c      	mov	r4, r3
 800e5ac:	4688      	mov	r8, r1
 800e5ae:	b395      	cbz	r5, 800e616 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e5b0:	a802      	add	r0, sp, #8
 800e5b2:	f7ff fbd9 	bl	800dd68 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e5b6:	a901      	add	r1, sp, #4
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff ffd1 	bl	800e560 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e5be:	4604      	mov	r4, r0
 800e5c0:	b118      	cbz	r0, 800e5ca <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	b04c      	add	sp, #304	@ 0x130
 800e5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e5ca:	9901      	ldr	r1, [sp, #4]
 800e5cc:	3101      	adds	r1, #1
 800e5ce:	a802      	add	r0, sp, #8
 800e5d0:	f7ff fbd9 	bl	800dd86 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800e5d4:	b127      	cbz	r7, 800e5e0 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800e5d6:	2210      	movs	r2, #16
 800e5d8:	4639      	mov	r1, r7
 800e5da:	a802      	add	r0, sp, #8
 800e5dc:	f7ff fbda 	bl	800dd94 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e5e0:	4632      	mov	r2, r6
 800e5e2:	4641      	mov	r1, r8
 800e5e4:	a802      	add	r0, sp, #8
 800e5e6:	f7ff fbd5 	bl	800dd94 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e5ea:	a902      	add	r1, sp, #8
 800e5ec:	a848      	add	r0, sp, #288	@ 0x120
 800e5ee:	f7ff fc3f 	bl	800de70 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800e5f2:	f89d 3120 	ldrb.w	r3, [sp, #288]	@ 0x120
 800e5f6:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 800e5fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5fe:	f89d 2122 	ldrb.w	r2, [sp, #290]	@ 0x122
 800e602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e606:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 800e60a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e60e:	602b      	str	r3, [r5, #0]
 800e610:	e7d7      	b.n	800e5c2 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800e612:	2402      	movs	r4, #2
 800e614:	e7d5      	b.n	800e5c2 <ComputeCmac+0x26>
 800e616:	2402      	movs	r4, #2
 800e618:	e7d3      	b.n	800e5c2 <ComputeCmac+0x26>
	...

0800e61c <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800e61c:	b140      	cbz	r0, 800e630 <SecureElementInit+0x14>
{
 800e61e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800e620:	4a04      	ldr	r2, [pc, #16]	@ (800e634 <SecureElementInit+0x18>)
 800e622:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800e624:	22d8      	movs	r2, #216	@ 0xd8
 800e626:	4904      	ldr	r1, [pc, #16]	@ (800e638 <SecureElementInit+0x1c>)
 800e628:	f000 fac9 	bl	800ebbe <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800e62c:	2000      	movs	r0, #0
}
 800e62e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e630:	2002      	movs	r0, #2
}
 800e632:	4770      	bx	lr
 800e634:	20000ec8 	.word	0x20000ec8
 800e638:	0803e500 	.word	0x0803e500

0800e63c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e63c:	2300      	movs	r3, #0
 800e63e:	2b0a      	cmp	r3, #10
 800e640:	d816      	bhi.n	800e670 <SecureElementGetKeyByID+0x34>
{
 800e642:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e644:	4a0b      	ldr	r2, [pc, #44]	@ (800e674 <SecureElementGetKeyByID+0x38>)
 800e646:	6814      	ldr	r4, [r2, #0]
 800e648:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e64c:	4422      	add	r2, r4
 800e64e:	7e12      	ldrb	r2, [r2, #24]
 800e650:	4282      	cmp	r2, r0
 800e652:	d006      	beq.n	800e662 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e654:	3301      	adds	r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b0a      	cmp	r3, #10
 800e65a:	d9f3      	bls.n	800e644 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e65c:	2003      	movs	r0, #3
}
 800e65e:	bc10      	pop	{r4}
 800e660:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e662:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e666:	3318      	adds	r3, #24
 800e668:	441c      	add	r4, r3
 800e66a:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e66c:	2000      	movs	r0, #0
 800e66e:	e7f6      	b.n	800e65e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e670:	2003      	movs	r0, #3
}
 800e672:	4770      	bx	lr
 800e674:	20000ec8 	.word	0x20000ec8

0800e678 <PrintKey>:
{
 800e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67c:	b099      	sub	sp, #100	@ 0x64
 800e67e:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e680:	a917      	add	r1, sp, #92	@ 0x5c
 800e682:	f7ff ffdb 	bl	800e63c <SecureElementGetKeyByID>
 800e686:	4603      	mov	r3, r0
 800e688:	2800      	cmp	r0, #0
 800e68a:	d042      	beq.n	800e712 <PrintKey+0x9a>
}
 800e68c:	b019      	add	sp, #100	@ 0x64
 800e68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800e692:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e696:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e69e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e6a0:	785a      	ldrb	r2, [r3, #1]
 800e6a2:	9214      	str	r2, [sp, #80]	@ 0x50
 800e6a4:	7899      	ldrb	r1, [r3, #2]
 800e6a6:	9115      	str	r1, [sp, #84]	@ 0x54
 800e6a8:	78da      	ldrb	r2, [r3, #3]
 800e6aa:	7919      	ldrb	r1, [r3, #4]
 800e6ac:	7958      	ldrb	r0, [r3, #5]
 800e6ae:	799c      	ldrb	r4, [r3, #6]
 800e6b0:	79dd      	ldrb	r5, [r3, #7]
 800e6b2:	7a1e      	ldrb	r6, [r3, #8]
 800e6b4:	7a5f      	ldrb	r7, [r3, #9]
 800e6b6:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800e6ba:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800e6be:	f893 800c 	ldrb.w	r8, [r3, #12]
 800e6c2:	f893 900d 	ldrb.w	r9, [r3, #13]
 800e6c6:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800e6ca:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800e6ce:	7c1b      	ldrb	r3, [r3, #16]
 800e6d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6d2:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800e6d6:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800e6da:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800e6de:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800e6e2:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800e6e6:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800e6ea:	9709      	str	r7, [sp, #36]	@ 0x24
 800e6ec:	9608      	str	r6, [sp, #32]
 800e6ee:	9507      	str	r5, [sp, #28]
 800e6f0:	9406      	str	r4, [sp, #24]
 800e6f2:	9005      	str	r0, [sp, #20]
 800e6f4:	9104      	str	r1, [sp, #16]
 800e6f6:	9203      	str	r2, [sp, #12]
 800e6f8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800e6fa:	9102      	str	r1, [sp, #8]
 800e6fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6fe:	9201      	str	r2, [sp, #4]
 800e700:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	4b09      	ldr	r3, [pc, #36]	@ (800e72c <PrintKey+0xb4>)
 800e706:	2200      	movs	r2, #0
 800e708:	4611      	mov	r1, r2
 800e70a:	2002      	movs	r0, #2
 800e70c:	f002 f93a 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800e710:	e7bc      	b.n	800e68c <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e712:	2b0a      	cmp	r3, #10
 800e714:	d8ba      	bhi.n	800e68c <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800e716:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e71a:	4905      	ldr	r1, [pc, #20]	@ (800e730 <PrintKey+0xb8>)
 800e71c:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800e720:	42a2      	cmp	r2, r4
 800e722:	d0b6      	beq.n	800e692 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e724:	3301      	adds	r3, #1
 800e726:	b2db      	uxtb	r3, r3
 800e728:	e7f3      	b.n	800e712 <PrintKey+0x9a>
 800e72a:	bf00      	nop
 800e72c:	08012a78 	.word	0x08012a78
 800e730:	080131ec 	.word	0x080131ec

0800e734 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800e734:	2b0b      	cmp	r3, #11
 800e736:	d80a      	bhi.n	800e74e <SecureElementComputeAesCmac+0x1a>
{
 800e738:	b500      	push	{lr}
 800e73a:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e73c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e740:	f8cd c000 	str.w	ip, [sp]
 800e744:	f7ff ff2a 	bl	800e59c <ComputeCmac>
}
 800e748:	b003      	add	sp, #12
 800e74a:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e74e:	2003      	movs	r0, #3
}
 800e750:	4770      	bx	lr

0800e752 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800e752:	b190      	cbz	r0, 800e77a <SecureElementVerifyAesCmac+0x28>
{
 800e754:	b510      	push	{r4, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	468c      	mov	ip, r1
 800e75a:	4614      	mov	r4, r2
 800e75c:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800e75e:	2000      	movs	r0, #0
 800e760:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e762:	aa03      	add	r2, sp, #12
 800e764:	9200      	str	r2, [sp, #0]
 800e766:	4662      	mov	r2, ip
 800e768:	f7ff ff18 	bl	800e59c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e76c:	b918      	cbnz	r0, 800e776 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	42a3      	cmp	r3, r4
 800e772:	d000      	beq.n	800e776 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e774:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800e776:	b004      	add	sp, #16
 800e778:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e77a:	2002      	movs	r0, #2
}
 800e77c:	4770      	bx	lr

0800e77e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800e77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e782:	b0be      	sub	sp, #248	@ 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800e784:	b348      	cbz	r0, 800e7da <SecureElementAesEncrypt+0x5c>
 800e786:	460d      	mov	r5, r1
 800e788:	4614      	mov	r4, r2
 800e78a:	461e      	mov	r6, r3
 800e78c:	4607      	mov	r7, r0
 800e78e:	b33b      	cbz	r3, 800e7e0 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800e790:	f011 0f0f 	tst.w	r1, #15
 800e794:	d127      	bne.n	800e7e6 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e796:	22f0      	movs	r2, #240	@ 0xf0
 800e798:	2100      	movs	r1, #0
 800e79a:	a801      	add	r0, sp, #4
 800e79c:	f000 fa27 	bl	800ebee <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e7a0:	4669      	mov	r1, sp
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7ff fedc 	bl	800e560 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e7a8:	4680      	mov	r8, r0
 800e7aa:	b118      	cbz	r0, 800e7b4 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	b03e      	add	sp, #248	@ 0xf8
 800e7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800e7b4:	aa01      	add	r2, sp, #4
 800e7b6:	2110      	movs	r1, #16
 800e7b8:	9800      	ldr	r0, [sp, #0]
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	f7ff fe24 	bl	800e408 <lorawan_aes_set_key>
        uint8_t block = 0;
 800e7c0:	4644      	mov	r4, r8
        while( size != 0 )
 800e7c2:	e007      	b.n	800e7d4 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800e7c4:	aa01      	add	r2, sp, #4
 800e7c6:	1931      	adds	r1, r6, r4
 800e7c8:	1938      	adds	r0, r7, r4
 800e7ca:	f7ff fe9f 	bl	800e50c <lorawan_aes_encrypt>
            block = block + 16;
 800e7ce:	3410      	adds	r4, #16
 800e7d0:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800e7d2:	3d10      	subs	r5, #16
        while( size != 0 )
 800e7d4:	2d00      	cmp	r5, #0
 800e7d6:	d1f5      	bne.n	800e7c4 <SecureElementAesEncrypt+0x46>
 800e7d8:	e7e8      	b.n	800e7ac <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800e7da:	f04f 0802 	mov.w	r8, #2
 800e7de:	e7e5      	b.n	800e7ac <SecureElementAesEncrypt+0x2e>
 800e7e0:	f04f 0802 	mov.w	r8, #2
 800e7e4:	e7e2      	b.n	800e7ac <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e7e6:	f04f 0805 	mov.w	r8, #5
 800e7ea:	e7df      	b.n	800e7ac <SecureElementAesEncrypt+0x2e>

0800e7ec <SecureElementSetKey>:
{
 800e7ec:	b530      	push	{r4, r5, lr}
 800e7ee:	b085      	sub	sp, #20
    if( key == NULL )
 800e7f0:	2900      	cmp	r1, #0
 800e7f2:	d038      	beq.n	800e866 <SecureElementSetKey+0x7a>
 800e7f4:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	2b0a      	cmp	r3, #10
 800e7fa:	d830      	bhi.n	800e85e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800e86c <SecureElementSetKey+0x80>)
 800e7fe:	6811      	ldr	r1, [r2, #0]
 800e800:	461c      	mov	r4, r3
 800e802:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e806:	440a      	add	r2, r1
 800e808:	7e12      	ldrb	r2, [r2, #24]
 800e80a:	4282      	cmp	r2, r0
 800e80c:	d002      	beq.n	800e814 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e80e:	3301      	adds	r3, #1
 800e810:	b2db      	uxtb	r3, r3
 800e812:	e7f1      	b.n	800e7f8 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800e814:	280d      	cmp	r0, #13
 800e816:	d00a      	beq.n	800e82e <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e818:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800e81c:	3418      	adds	r4, #24
 800e81e:	1908      	adds	r0, r1, r4
 800e820:	2210      	movs	r2, #16
 800e822:	4661      	mov	r1, ip
 800e824:	3001      	adds	r0, #1
 800e826:	f000 f9ca 	bl	800ebbe <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e82a:	2500      	movs	r5, #0
 800e82c:	e018      	b.n	800e860 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800e82e:	2300      	movs	r3, #0
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	9302      	str	r3, [sp, #8]
 800e836:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800e838:	466b      	mov	r3, sp
 800e83a:	220c      	movs	r2, #12
 800e83c:	2110      	movs	r1, #16
 800e83e:	4660      	mov	r0, ip
 800e840:	f7ff ff9d 	bl	800e77e <SecureElementAesEncrypt>
 800e844:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e846:	4b09      	ldr	r3, [pc, #36]	@ (800e86c <SecureElementSetKey+0x80>)
 800e848:	6818      	ldr	r0, [r3, #0]
 800e84a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e84e:	3418      	adds	r4, #24
 800e850:	4420      	add	r0, r4
 800e852:	2210      	movs	r2, #16
 800e854:	4669      	mov	r1, sp
 800e856:	3001      	adds	r0, #1
 800e858:	f000 f9b1 	bl	800ebbe <memcpy1>
                return retval;
 800e85c:	e000      	b.n	800e860 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e85e:	2503      	movs	r5, #3
}
 800e860:	4628      	mov	r0, r5
 800e862:	b005      	add	sp, #20
 800e864:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e866:	2502      	movs	r5, #2
 800e868:	e7fa      	b.n	800e860 <SecureElementSetKey+0x74>
 800e86a:	bf00      	nop
 800e86c:	20000ec8 	.word	0x20000ec8

0800e870 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e870:	b1d0      	cbz	r0, 800e8a8 <SecureElementDeriveAndStoreKey+0x38>
{
 800e872:	b510      	push	{r4, lr}
 800e874:	b084      	sub	sp, #16
 800e876:	4614      	mov	r4, r2
 800e878:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800e87a:	2a0c      	cmp	r2, #12
 800e87c:	d101      	bne.n	800e882 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e87e:	290b      	cmp	r1, #11
 800e880:	d114      	bne.n	800e8ac <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800e882:	2300      	movs	r3, #0
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	9302      	str	r3, [sp, #8]
 800e88a:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800e88c:	466b      	mov	r3, sp
 800e88e:	460a      	mov	r2, r1
 800e890:	2110      	movs	r1, #16
 800e892:	4660      	mov	r0, ip
 800e894:	f7ff ff73 	bl	800e77e <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e898:	b108      	cbz	r0, 800e89e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e89a:	b004      	add	sp, #16
 800e89c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e89e:	4669      	mov	r1, sp
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f7ff ffa3 	bl	800e7ec <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e8a6:	e7f8      	b.n	800e89a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e8a8:	2002      	movs	r0, #2
}
 800e8aa:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e8ac:	2003      	movs	r0, #3
 800e8ae:	e7f4      	b.n	800e89a <SecureElementDeriveAndStoreKey+0x2a>

0800e8b0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e8b6:	9c07      	ldr	r4, [sp, #28]
 800e8b8:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e8ba:	b35b      	cbz	r3, 800e914 <SecureElementProcessJoinAccept+0x64>
 800e8bc:	461f      	mov	r7, r3
 800e8be:	b35c      	cbz	r4, 800e918 <SecureElementProcessJoinAccept+0x68>
 800e8c0:	b366      	cbz	r6, 800e91c <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e8c2:	2d21      	cmp	r5, #33	@ 0x21
 800e8c4:	d82c      	bhi.n	800e920 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e8c6:	462a      	mov	r2, r5
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f000 f977 	bl	800ebbe <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e8d0:	1c63      	adds	r3, r4, #1
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	1e69      	subs	r1, r5, #1
 800e8d6:	18b8      	adds	r0, r7, r2
 800e8d8:	f7ff ff51 	bl	800e77e <SecureElementAesEncrypt>
 800e8dc:	bb10      	cbnz	r0, 800e924 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e8de:	7ae3      	ldrb	r3, [r4, #11]
 800e8e0:	09db      	lsrs	r3, r3, #7
 800e8e2:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800e8e4:	1961      	adds	r1, r4, r5
 800e8e6:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800e8ea:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800e8ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800e8f2:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800e8f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e8fa:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800e8fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800e902:	b98b      	cbnz	r3, 800e928 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e904:	2301      	movs	r3, #1
 800e906:	1f29      	subs	r1, r5, #4
 800e908:	4620      	mov	r0, r4
 800e90a:	f7ff ff22 	bl	800e752 <SecureElementVerifyAesCmac>
 800e90e:	b140      	cbz	r0, 800e922 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e910:	2001      	movs	r0, #1
 800e912:	e006      	b.n	800e922 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 800e914:	2002      	movs	r0, #2
 800e916:	e004      	b.n	800e922 <SecureElementProcessJoinAccept+0x72>
 800e918:	2002      	movs	r0, #2
 800e91a:	e002      	b.n	800e922 <SecureElementProcessJoinAccept+0x72>
 800e91c:	2002      	movs	r0, #2
 800e91e:	e000      	b.n	800e922 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e920:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e924:	2007      	movs	r0, #7
 800e926:	e7fc      	b.n	800e922 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e928:	2004      	movs	r0, #4
 800e92a:	e7fa      	b.n	800e922 <SecureElementProcessJoinAccept+0x72>

0800e92c <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800e92c:	b140      	cbz	r0, 800e940 <SecureElementSetDevEui+0x14>
{
 800e92e:	b508      	push	{r3, lr}
 800e930:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e932:	2208      	movs	r2, #8
 800e934:	4b03      	ldr	r3, [pc, #12]	@ (800e944 <SecureElementSetDevEui+0x18>)
 800e936:	6818      	ldr	r0, [r3, #0]
 800e938:	f000 f941 	bl	800ebbe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e93c:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e93e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e940:	2002      	movs	r0, #2
}
 800e942:	4770      	bx	lr
 800e944:	20000ec8 	.word	0x20000ec8

0800e948 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800e948:	b138      	cbz	r0, 800e95a <SecureElementGetDevEui+0x12>
{
 800e94a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e94c:	2208      	movs	r2, #8
 800e94e:	4904      	ldr	r1, [pc, #16]	@ (800e960 <SecureElementGetDevEui+0x18>)
 800e950:	6809      	ldr	r1, [r1, #0]
 800e952:	f000 f934 	bl	800ebbe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e956:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e958:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e95a:	2002      	movs	r0, #2
}
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20000ec8 	.word	0x20000ec8

0800e964 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800e964:	b148      	cbz	r0, 800e97a <SecureElementSetJoinEui+0x16>
{
 800e966:	b508      	push	{r3, lr}
 800e968:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e96a:	4b05      	ldr	r3, [pc, #20]	@ (800e980 <SecureElementSetJoinEui+0x1c>)
 800e96c:	6818      	ldr	r0, [r3, #0]
 800e96e:	2208      	movs	r2, #8
 800e970:	4410      	add	r0, r2
 800e972:	f000 f924 	bl	800ebbe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e976:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e978:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e97a:	2002      	movs	r0, #2
}
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	20000ec8 	.word	0x20000ec8

0800e984 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800e984:	b140      	cbz	r0, 800e998 <SecureElementGetJoinEui+0x14>
{
 800e986:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e988:	4a04      	ldr	r2, [pc, #16]	@ (800e99c <SecureElementGetJoinEui+0x18>)
 800e98a:	6811      	ldr	r1, [r2, #0]
 800e98c:	2208      	movs	r2, #8
 800e98e:	4411      	add	r1, r2
 800e990:	f000 f915 	bl	800ebbe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e994:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e996:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e998:	2002      	movs	r0, #2
}
 800e99a:	4770      	bx	lr
 800e99c:	20000ec8 	.word	0x20000ec8

0800e9a0 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e9a0:	2802      	cmp	r0, #2
 800e9a2:	d004      	beq.n	800e9ae <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e9a4:	4b04      	ldr	r3, [pc, #16]	@ (800e9b8 <SecureElementSetDevAddr+0x18>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e9ae:	4b02      	ldr	r3, [pc, #8]	@ (800e9b8 <SecureElementSetDevAddr+0x18>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6119      	str	r1, [r3, #16]
 800e9b4:	e7f9      	b.n	800e9aa <SecureElementSetDevAddr+0xa>
 800e9b6:	bf00      	nop
 800e9b8:	20000ec8 	.word	0x20000ec8

0800e9bc <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 800e9bc:	b169      	cbz	r1, 800e9da <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e9be:	2802      	cmp	r0, #2
 800e9c0:	d005      	beq.n	800e9ce <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e9c2:	4a07      	ldr	r2, [pc, #28]	@ (800e9e0 <SecureElementGetDevAddr+0x24>)
 800e9c4:	6812      	ldr	r2, [r2, #0]
 800e9c6:	6952      	ldr	r2, [r2, #20]
 800e9c8:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e9ce:	4a04      	ldr	r2, [pc, #16]	@ (800e9e0 <SecureElementGetDevAddr+0x24>)
 800e9d0:	6812      	ldr	r2, [r2, #0]
 800e9d2:	6912      	ldr	r2, [r2, #16]
 800e9d4:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 800e9da:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	20000ec8 	.word	0x20000ec8

0800e9e4 <SecureElementInitMcuID>:
{
 800e9e4:	b530      	push	{r4, r5, lr}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 800e9f0:	a802      	add	r0, sp, #8
 800e9f2:	f7ff ffa9 	bl	800e948 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800e9f6:	a901      	add	r1, sp, #4
 800e9f8:	2001      	movs	r0, #1
 800e9fa:	f7ff ffdf 	bl	800e9bc <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 800e9fe:	b195      	cbz	r5, 800ea26 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ea00:	2300      	movs	r3, #0
 800ea02:	2b07      	cmp	r3, #7
 800ea04:	d808      	bhi.n	800ea18 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 800ea06:	f103 0210 	add.w	r2, r3, #16
 800ea0a:	446a      	add	r2, sp
 800ea0c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800ea10:	b9aa      	cbnz	r2, 800ea3e <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ea12:	3301      	adds	r3, #1
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	e7f4      	b.n	800ea02 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 800ea18:	2300      	movs	r3, #0
        if( id_init == false )
 800ea1a:	b923      	cbnz	r3, 800ea26 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 800ea1c:	a802      	add	r0, sp, #8
 800ea1e:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 800ea20:	a802      	add	r0, sp, #8
 800ea22:	f7ff ff83 	bl	800e92c <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800ea26:	b13c      	cbz	r4, 800ea38 <SecureElementInitMcuID+0x54>
 800ea28:	9b01      	ldr	r3, [sp, #4]
 800ea2a:	b92b      	cbnz	r3, 800ea38 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 800ea2c:	a801      	add	r0, sp, #4
 800ea2e:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800ea30:	9901      	ldr	r1, [sp, #4]
 800ea32:	2001      	movs	r0, #1
 800ea34:	f7ff ffb4 	bl	800e9a0 <SecureElementSetDevAddr>
}
 800ea38:	2000      	movs	r0, #0
 800ea3a:	b005      	add	sp, #20
 800ea3c:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e7eb      	b.n	800ea1a <SecureElementInitMcuID+0x36>
	...

0800ea44 <PrintIds>:
{
 800ea44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea46:	b08f      	sub	sp, #60	@ 0x3c
 800ea48:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 800ea4a:	2400      	movs	r4, #0
 800ea4c:	9409      	str	r4, [sp, #36]	@ 0x24
    SecureElementGetDevEui( devEui );
 800ea4e:	a80a      	add	r0, sp, #40	@ 0x28
 800ea50:	f7ff ff7a 	bl	800e948 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ea54:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800ea58:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 800ea5c:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 800ea60:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 800ea64:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 800ea68:	f89d 702d 	ldrb.w	r7, [sp, #45]	@ 0x2d
 800ea6c:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 800ea70:	f89d e02f 	ldrb.w	lr, [sp, #47]	@ 0x2f
 800ea74:	f8cd e01c 	str.w	lr, [sp, #28]
 800ea78:	f8cd c018 	str.w	ip, [sp, #24]
 800ea7c:	9705      	str	r7, [sp, #20]
 800ea7e:	9604      	str	r6, [sp, #16]
 800ea80:	9003      	str	r0, [sp, #12]
 800ea82:	9102      	str	r1, [sp, #8]
 800ea84:	9201      	str	r2, [sp, #4]
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	4b20      	ldr	r3, [pc, #128]	@ (800eb0c <PrintIds+0xc8>)
 800ea8a:	4622      	mov	r2, r4
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	2002      	movs	r0, #2
 800ea90:	f001 ff78 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 800ea94:	a80c      	add	r0, sp, #48	@ 0x30
 800ea96:	f7ff ff75 	bl	800e984 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ea9a:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800ea9e:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 800eaa2:	f89d 1032 	ldrb.w	r1, [sp, #50]	@ 0x32
 800eaa6:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 800eaaa:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 800eaae:	f89d 7035 	ldrb.w	r7, [sp, #53]	@ 0x35
 800eab2:	f89d c036 	ldrb.w	ip, [sp, #54]	@ 0x36
 800eab6:	f89d e037 	ldrb.w	lr, [sp, #55]	@ 0x37
 800eaba:	f8cd e01c 	str.w	lr, [sp, #28]
 800eabe:	f8cd c018 	str.w	ip, [sp, #24]
 800eac2:	9705      	str	r7, [sp, #20]
 800eac4:	9604      	str	r6, [sp, #16]
 800eac6:	9003      	str	r0, [sp, #12]
 800eac8:	9102      	str	r1, [sp, #8]
 800eaca:	9201      	str	r2, [sp, #4]
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	4b10      	ldr	r3, [pc, #64]	@ (800eb10 <PrintIds+0xcc>)
 800ead0:	4622      	mov	r2, r4
 800ead2:	4621      	mov	r1, r4
 800ead4:	2002      	movs	r0, #2
 800ead6:	f001 ff55 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 800eada:	a909      	add	r1, sp, #36	@ 0x24
 800eadc:	4628      	mov	r0, r5
 800eade:	f7ff ff6d 	bl	800e9bc <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800eae2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800eae6:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800eaea:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 800eaee:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800eaf2:	9003      	str	r0, [sp, #12]
 800eaf4:	9102      	str	r1, [sp, #8]
 800eaf6:	9201      	str	r2, [sp, #4]
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4b06      	ldr	r3, [pc, #24]	@ (800eb14 <PrintIds+0xd0>)
 800eafc:	4622      	mov	r2, r4
 800eafe:	4621      	mov	r1, r4
 800eb00:	2002      	movs	r0, #2
 800eb02:	f001 ff3f 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb06:	b00f      	add	sp, #60	@ 0x3c
 800eb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08012ad4 	.word	0x08012ad4
 800eb10:	08012b14 	.word	0x08012b14
 800eb14:	08012b54 	.word	0x08012b54

0800eb18 <SecureElementPrintKeys>:
{
 800eb18:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	f7ff fdac 	bl	800e678 <PrintKey>
    PrintKey( NWK_KEY );
 800eb20:	2001      	movs	r0, #1
 800eb22:	f7ff fda9 	bl	800e678 <PrintKey>
    PrintKey( APP_S_KEY );
 800eb26:	2009      	movs	r0, #9
 800eb28:	f7ff fda6 	bl	800e678 <PrintKey>
    PrintKey( NWK_S_KEY );
 800eb2c:	2008      	movs	r0, #8
 800eb2e:	f7ff fda3 	bl	800e678 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800eb32:	2000      	movs	r0, #0
 800eb34:	f7ff ff86 	bl	800ea44 <PrintIds>
}
 800eb38:	2000      	movs	r0, #0
 800eb3a:	bd08      	pop	{r3, pc}

0800eb3c <SecureElementPrintSessionKeys>:
{
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800eb40:	200b      	movs	r0, #11
 800eb42:	f7ff fd99 	bl	800e678 <PrintKey>
    PrintKey( MC_KE_KEY );
 800eb46:	200c      	movs	r0, #12
 800eb48:	f7ff fd96 	bl	800e678 <PrintKey>
    PrintKey( APP_S_KEY );
 800eb4c:	2009      	movs	r0, #9
 800eb4e:	f7ff fd93 	bl	800e678 <PrintKey>
    PrintKey( NWK_S_KEY );
 800eb52:	2008      	movs	r0, #8
 800eb54:	f7ff fd90 	bl	800e678 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800eb58:	200a      	movs	r0, #10
 800eb5a:	f7ff fd8d 	bl	800e678 <PrintKey>
    PrintIds( mode );
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f7ff ff70 	bl	800ea44 <PrintIds>
}
 800eb64:	2000      	movs	r0, #0
 800eb66:	bd10      	pop	{r4, pc}

0800eb68 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800eb68:	4b09      	ldr	r3, [pc, #36]	@ (800eb90 <rand1+0x28>)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	4909      	ldr	r1, [pc, #36]	@ (800eb94 <rand1+0x2c>)
 800eb6e:	f243 0039 	movw	r0, #12345	@ 0x3039
 800eb72:	fb01 0002 	mla	r0, r1, r2, r0
 800eb76:	6018      	str	r0, [r3, #0]
 800eb78:	2303      	movs	r3, #3
 800eb7a:	fba3 2300 	umull	r2, r3, r3, r0
 800eb7e:	1ac2      	subs	r2, r0, r3
 800eb80:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800eb84:	0f9b      	lsrs	r3, r3, #30
 800eb86:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800eb8a:	1ac0      	subs	r0, r0, r3
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	200000f8 	.word	0x200000f8
 800eb94:	41c64e6d 	.word	0x41c64e6d

0800eb98 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800eb98:	4b01      	ldr	r3, [pc, #4]	@ (800eba0 <srand1+0x8>)
 800eb9a:	6018      	str	r0, [r3, #0]
}
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	200000f8 	.word	0x200000f8

0800eba4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	4605      	mov	r5, r0
 800eba8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800ebaa:	f7ff ffdd 	bl	800eb68 <rand1>
 800ebae:	1b61      	subs	r1, r4, r5
 800ebb0:	3101      	adds	r1, #1
 800ebb2:	fb90 f3f1 	sdiv	r3, r0, r1
 800ebb6:	fb01 0013 	mls	r0, r1, r3, r0
}
 800ebba:	4428      	add	r0, r5
 800ebbc:	bd38      	pop	{r3, r4, r5, pc}

0800ebbe <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800ebbe:	e004      	b.n	800ebca <memcpy1+0xc>
    {
        *dst++ = *src++;
 800ebc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebc4:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800ebc8:	461a      	mov	r2, r3
 800ebca:	1e53      	subs	r3, r2, #1
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	2a00      	cmp	r2, #0
 800ebd0:	d1f6      	bne.n	800ebc0 <memcpy1+0x2>
    }
}
 800ebd2:	4770      	bx	lr

0800ebd4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800ebd4:	1e53      	subs	r3, r2, #1
 800ebd6:	4418      	add	r0, r3
    while( size-- )
 800ebd8:	e004      	b.n	800ebe4 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800ebda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebde:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	1e53      	subs	r3, r2, #1
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	2a00      	cmp	r2, #0
 800ebea:	d1f6      	bne.n	800ebda <memcpyr+0x6>
    }
}
 800ebec:	4770      	bx	lr

0800ebee <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800ebee:	e002      	b.n	800ebf6 <memset1+0x8>
    {
        *dst++ = value;
 800ebf0:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	1e53      	subs	r3, r2, #1
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	2a00      	cmp	r2, #0
 800ebfc:	d1f8      	bne.n	800ebf0 <memset1+0x2>
    }
}
 800ebfe:	4770      	bx	lr

0800ec00 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800ec00:	b1f0      	cbz	r0, 800ec40 <Crc32+0x40>
{
 800ec02:	b510      	push	{r4, lr}
 800ec04:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800ec06:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800ec0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0e:	e00e      	b.n	800ec2e <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800ec10:	f340 0c00 	sbfx	ip, r0, #0, #1
 800ec14:	4a0b      	ldr	r2, [pc, #44]	@ (800ec44 <Crc32+0x44>)
 800ec16:	ea0c 0202 	and.w	r2, ip, r2
 800ec1a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800ec1e:	3301      	adds	r3, #1
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	2b07      	cmp	r3, #7
 800ec24:	d9f4      	bls.n	800ec10 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800ec26:	f10e 0e01 	add.w	lr, lr, #1
 800ec2a:	fa1f fe8e 	uxth.w	lr, lr
 800ec2e:	458e      	cmp	lr, r1
 800ec30:	d204      	bcs.n	800ec3c <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800ec32:	f814 300e 	ldrb.w	r3, [r4, lr]
 800ec36:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800ec38:	2300      	movs	r3, #0
 800ec3a:	e7f2      	b.n	800ec22 <Crc32+0x22>
        }
    }

    return ~crc;
 800ec3c:	43c0      	mvns	r0, r0
}
 800ec3e:	bd10      	pop	{r4, pc}
        return 0;
 800ec40:	2000      	movs	r0, #0
}
 800ec42:	4770      	bx	lr
 800ec44:	edb88320 	.word	0xedb88320

0800ec48 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800ec48:	2001      	movs	r0, #1
 800ec4a:	4770      	bx	lr

0800ec4c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800ec4c:	280a      	cmp	r0, #10
 800ec4e:	d807      	bhi.n	800ec60 <RadioGetLoRaBandwidthInHz+0x14>
 800ec50:	e8df f000 	tbb	[pc, r0]
 800ec54:	17110b20 	.word	0x17110b20
 800ec58:	061e1c1a 	.word	0x061e1c1a
 800ec5c:	0e08      	.short	0x0e08
 800ec5e:	14          	.byte	0x14
 800ec5f:	00          	.byte	0x00
 800ec60:	2000      	movs	r0, #0
 800ec62:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800ec64:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 800ec68:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800ec6a:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 800ec6e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800ec70:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 800ec74:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800ec76:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 800ec7a:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800ec7c:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 800ec80:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800ec82:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 800ec86:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800ec88:	4804      	ldr	r0, [pc, #16]	@ (800ec9c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800ec8a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800ec8c:	4804      	ldr	r0, [pc, #16]	@ (800eca0 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800ec8e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800ec90:	4804      	ldr	r0, [pc, #16]	@ (800eca4 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800ec92:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800ec94:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	0001e848 	.word	0x0001e848
 800eca0:	0003d090 	.word	0x0003d090
 800eca4:	0007a120 	.word	0x0007a120

0800eca8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800eca8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800ecac:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ecae:	b953      	cbnz	r3, 800ecc6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800ecb0:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800ecb2:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ecb4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800ecb6:	b141      	cbz	r1, 800ecca <RadioGetGfskTimeOnAirNumerator+0x22>
 800ecb8:	2302      	movs	r3, #2
 800ecba:	f89d 0000 	ldrb.w	r0, [sp]
 800ecbe:	4418      	add	r0, r3
}
 800ecc0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800ecc4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	e7f3      	b.n	800ecb2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800ecca:	2300      	movs	r3, #0
 800eccc:	e7f5      	b.n	800ecba <RadioGetGfskTimeOnAirNumerator+0x12>

0800ecce <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800ecce:	b570      	push	{r4, r5, r6, lr}
 800ecd0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800ecd4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800ecd8:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800ecda:	f1a1 0c05 	sub.w	ip, r1, #5
 800ecde:	f1bc 0f01 	cmp.w	ip, #1
 800ece2:	d931      	bls.n	800ed48 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ece4:	b918      	cbnz	r0, 800ecee <RadioGetLoRaTimeOnAirNumerator+0x20>
 800ece6:	f1a1 060b 	sub.w	r6, r1, #11
 800ecea:	2e01      	cmp	r6, #1
 800ecec:	d934      	bls.n	800ed58 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800ecee:	2801      	cmp	r0, #1
 800ecf0:	d02e      	beq.n	800ed50 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800ecf2:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ecf4:	f89d c014 	ldrb.w	ip, [sp, #20]
 800ecf8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800ecfc:	b385      	cbz	r5, 800ed60 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800ecfe:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ed00:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800ed02:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800ed04:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800ed08:	b364      	cbz	r4, 800ed64 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800ed0a:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800ed0e:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800ed10:	2906      	cmp	r1, #6
 800ed12:	d904      	bls.n	800ed1e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800ed14:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800ed18:	b10e      	cbz	r6, 800ed1e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800ed1a:	1e88      	subs	r0, r1, #2
 800ed1c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800ed1e:	f1bc 0f00 	cmp.w	ip, #0
 800ed22:	db22      	blt.n	800ed6a <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ed24:	4484      	add	ip, r0
 800ed26:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ed2a:	fb9c fcf0 	sdiv	ip, ip, r0
 800ed2e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800ed32:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800ed36:	2906      	cmp	r1, #6
 800ed38:	d801      	bhi.n	800ed3e <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800ed3a:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ed3e:	0080      	lsls	r0, r0, #2
 800ed40:	3001      	adds	r0, #1
 800ed42:	3902      	subs	r1, #2
}
 800ed44:	4088      	lsls	r0, r1
 800ed46:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800ed48:	2b0b      	cmp	r3, #11
 800ed4a:	d8cb      	bhi.n	800ece4 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800ed4c:	230c      	movs	r3, #12
 800ed4e:	e7c9      	b.n	800ece4 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ed50:	290c      	cmp	r1, #12
 800ed52:	d003      	beq.n	800ed5c <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800ed54:	2600      	movs	r6, #0
 800ed56:	e7cd      	b.n	800ecf4 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800ed58:	2601      	movs	r6, #1
 800ed5a:	e7cb      	b.n	800ecf4 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800ed5c:	2601      	movs	r6, #1
 800ed5e:	e7c9      	b.n	800ecf4 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800ed60:	2000      	movs	r0, #0
 800ed62:	e7cd      	b.n	800ed00 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800ed64:	f04f 0e14 	mov.w	lr, #20
 800ed68:	e7d1      	b.n	800ed0e <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800ed6a:	f04f 0c00 	mov.w	ip, #0
 800ed6e:	e7d9      	b.n	800ed24 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800ed70 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800ed70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed72:	b085      	sub	sp, #20
 800ed74:	460e      	mov	r6, r1
 800ed76:	4615      	mov	r5, r2
 800ed78:	4619      	mov	r1, r3
 800ed7a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800ed7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800ed82:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 800ed86:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800ed8a:	b120      	cbz	r0, 800ed96 <RadioTimeOnAir+0x26>
 800ed8c:	2801      	cmp	r0, #1
 800ed8e:	d011      	beq.n	800edb4 <RadioTimeOnAir+0x44>
 800ed90:	2501      	movs	r5, #1
 800ed92:	2400      	movs	r4, #0
 800ed94:	e008      	b.n	800eda8 <RadioTimeOnAir+0x38>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800ed96:	9701      	str	r7, [sp, #4]
 800ed98:	9400      	str	r4, [sp, #0]
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f7ff ff84 	bl	800eca8 <RadioGetGfskTimeOnAirNumerator>
 800eda0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eda4:	fb03 f400 	mul.w	r4, r3, r0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800eda8:	1960      	adds	r0, r4, r5
 800edaa:	3801      	subs	r0, #1
}
 800edac:	fbb0 f0f5 	udiv	r0, r0, r5
 800edb0:	b005      	add	sp, #20
 800edb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800edb4:	9702      	str	r7, [sp, #8]
 800edb6:	9401      	str	r4, [sp, #4]
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	4613      	mov	r3, r2
 800edbc:	460a      	mov	r2, r1
 800edbe:	4629      	mov	r1, r5
 800edc0:	4630      	mov	r0, r6
 800edc2:	f7ff ff84 	bl	800ecce <RadioGetLoRaTimeOnAirNumerator>
 800edc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800edca:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800edce:	4b03      	ldr	r3, [pc, #12]	@ (800eddc <RadioTimeOnAir+0x6c>)
 800edd0:	5d98      	ldrb	r0, [r3, r6]
 800edd2:	f7ff ff3b 	bl	800ec4c <RadioGetLoRaBandwidthInHz>
 800edd6:	4605      	mov	r5, r0
        break;
 800edd8:	e7e6      	b.n	800eda8 <RadioTimeOnAir+0x38>
 800edda:	bf00      	nop
 800eddc:	08013270 	.word	0x08013270

0800ede0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800ede0:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800ede2:	4b05      	ldr	r3, [pc, #20]	@ (800edf8 <RadioOnTxTimeoutProcess+0x18>)
 800ede4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ede8:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800edea:	4b04      	ldr	r3, [pc, #16]	@ (800edfc <RadioOnTxTimeoutProcess+0x1c>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	b113      	cbz	r3, 800edf6 <RadioOnTxTimeoutProcess+0x16>
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	b103      	cbz	r3, 800edf6 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800edf4:	4798      	blx	r3
    }
}
 800edf6:	bd08      	pop	{r3, pc}
 800edf8:	48000400 	.word	0x48000400
 800edfc:	20000f58 	.word	0x20000f58

0800ee00 <RadioOnTxTimeoutIrq>:
{
 800ee00:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800ee02:	f7ff ffed 	bl	800ede0 <RadioOnTxTimeoutProcess>
}
 800ee06:	bd08      	pop	{r3, pc}

0800ee08 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800ee08:	b508      	push	{r3, lr}
 800ee0a:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <RadioOnRxTimeoutProcess+0x18>)
 800ee0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ee10:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ee12:	4b04      	ldr	r3, [pc, #16]	@ (800ee24 <RadioOnRxTimeoutProcess+0x1c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	b113      	cbz	r3, 800ee1e <RadioOnRxTimeoutProcess+0x16>
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	b103      	cbz	r3, 800ee1e <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800ee1c:	4798      	blx	r3
    }
}
 800ee1e:	bd08      	pop	{r3, pc}
 800ee20:	48000400 	.word	0x48000400
 800ee24:	20000f58 	.word	0x20000f58

0800ee28 <RadioOnRxTimeoutIrq>:
{
 800ee28:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800ee2a:	f7ff ffed 	bl	800ee08 <RadioOnRxTimeoutProcess>
}
 800ee2e:	bd08      	pop	{r3, pc}

0800ee30 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	4770      	bx	lr

0800ee36 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800ee36:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3a:	4770      	bx	lr

0800ee3c <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800ee3c:	2001      	movs	r0, #1
 800ee3e:	4770      	bx	lr

0800ee40 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800ee40:	2001      	movs	r0, #1
 800ee42:	4770      	bx	lr

0800ee44 <RadioWrite>:
{
 800ee44:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800ee46:	f000 fe3f 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800ee4a:	bd08      	pop	{r3, pc}

0800ee4c <RadioTxCw>:
{
 800ee4c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800ee4e:	f001 fbd7 	bl	8010600 <SUBGRF_SetRfTxPower>
 800ee52:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ee54:	210e      	movs	r1, #14
 800ee56:	f640 101f 	movw	r0, #2335	@ 0x91f
 800ee5a:	f000 fe35 	bl	800fac8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800ee5e:	2101      	movs	r1, #1
 800ee60:	4620      	mov	r0, r4
 800ee62:	f001 fbb9 	bl	80105d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ee66:	f001 f807 	bl	800fe78 <SUBGRF_SetTxContinuousWave>
}
 800ee6a:	bd10      	pop	{r4, pc}

0800ee6c <RadioTxPrbs>:
{
 800ee6c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ee6e:	2101      	movs	r1, #1
 800ee70:	4b07      	ldr	r3, [pc, #28]	@ (800ee90 <RadioTxPrbs+0x24>)
 800ee72:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800ee76:	f001 fbaf 	bl	80105d8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800ee7a:	212d      	movs	r1, #45	@ 0x2d
 800ee7c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800ee80:	f7ff ffe0 	bl	800ee44 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800ee84:	f000 ffff 	bl	800fe86 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800ee88:	4802      	ldr	r0, [pc, #8]	@ (800ee94 <RadioTxPrbs+0x28>)
 800ee8a:	f000 ff35 	bl	800fcf8 <SUBGRF_SetTx>
}
 800ee8e:	bd08      	pop	{r3, pc}
 800ee90:	20000efc 	.word	0x20000efc
 800ee94:	000fffff 	.word	0x000fffff

0800ee98 <RadioSetRxDutyCycle>:
{
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800ee9e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800eea2:	4e09      	ldr	r6, [pc, #36]	@ (800eec8 <RadioSetRxDutyCycle+0x30>)
 800eea4:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800eea6:	2300      	movs	r3, #0
 800eea8:	461a      	mov	r2, r3
 800eeaa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eeae:	4608      	mov	r0, r1
 800eeb0:	f001 f8b5 	bl	801001e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800eeba:	f001 fb8d 	bl	80105d8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800eebe:	4629      	mov	r1, r5
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 ffa9 	bl	800fe18 <SUBGRF_SetRxDutyCycle>
}
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	20000efc 	.word	0x20000efc

0800eecc <RadioRxBoosted>:
{
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800eed0:	f001 fc71 	bl	80107b6 <RFW_Is_Init>
 800eed4:	2801      	cmp	r0, #1
 800eed6:	d019      	beq.n	800ef0c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800eed8:	2300      	movs	r3, #0
 800eeda:	461a      	mov	r2, r3
 800eedc:	f240 2162 	movw	r1, #610	@ 0x262
 800eee0:	4608      	mov	r0, r1
 800eee2:	f001 f89c 	bl	801001e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800eee6:	b9a4      	cbnz	r4, 800ef12 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800eee8:	4c11      	ldr	r4, [pc, #68]	@ (800ef30 <RadioRxBoosted+0x64>)
 800eeea:	2100      	movs	r1, #0
 800eeec:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800eeee:	4b11      	ldr	r3, [pc, #68]	@ (800ef34 <RadioRxBoosted+0x68>)
 800eef0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800eef4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800eef6:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800eefa:	f001 fb6d 	bl	80105d8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800eefe:	7863      	ldrb	r3, [r4, #1]
 800ef00:	b183      	cbz	r3, 800ef24 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800ef02:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800ef06:	f000 ff69 	bl	800fddc <SUBGRF_SetRxBoosted>
}
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800ef0c:	f001 fc5b 	bl	80107c6 <RFW_ReceiveInit>
 800ef10:	e7e9      	b.n	800eee6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ef12:	4d09      	ldr	r5, [pc, #36]	@ (800ef38 <RadioRxBoosted+0x6c>)
 800ef14:	4621      	mov	r1, r4
 800ef16:	4628      	mov	r0, r5
 800ef18:	f002 f8da 	bl	80110d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f002 f891 	bl	8011044 <UTIL_TIMER_Start>
 800ef22:	e7e1      	b.n	800eee8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800ef24:	4b02      	ldr	r3, [pc, #8]	@ (800ef30 <RadioRxBoosted+0x64>)
 800ef26:	6898      	ldr	r0, [r3, #8]
 800ef28:	0180      	lsls	r0, r0, #6
 800ef2a:	f000 ff57 	bl	800fddc <SUBGRF_SetRxBoosted>
}
 800ef2e:	e7ec      	b.n	800ef0a <RadioRxBoosted+0x3e>
 800ef30:	20000efc 	.word	0x20000efc
 800ef34:	48000400 	.word	0x48000400
 800ef38:	20000ecc 	.word	0x20000ecc

0800ef3c <RadioStandby>:
{
 800ef3c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800ef3e:	2000      	movs	r0, #0
 800ef40:	f000 fec0 	bl	800fcc4 <SUBGRF_SetStandby>
}
 800ef44:	bd08      	pop	{r3, pc}

0800ef46 <RadioRead>:
{
 800ef46:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800ef48:	f000 fdd2 	bl	800faf0 <SUBGRF_ReadRegister>
}
 800ef4c:	bd08      	pop	{r3, pc}

0800ef4e <RadioGetStatus>:
{
 800ef4e:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800ef50:	f000 fdae 	bl	800fab0 <SUBGRF_GetOperatingMode>
 800ef54:	2805      	cmp	r0, #5
 800ef56:	d005      	beq.n	800ef64 <RadioGetStatus+0x16>
 800ef58:	2807      	cmp	r0, #7
 800ef5a:	d005      	beq.n	800ef68 <RadioGetStatus+0x1a>
 800ef5c:	2804      	cmp	r0, #4
 800ef5e:	d105      	bne.n	800ef6c <RadioGetStatus+0x1e>
 800ef60:	2002      	movs	r0, #2
 800ef62:	e002      	b.n	800ef6a <RadioGetStatus+0x1c>
            return RF_RX_RUNNING;
 800ef64:	2001      	movs	r0, #1
 800ef66:	e000      	b.n	800ef6a <RadioGetStatus+0x1c>
            return RF_CAD;
 800ef68:	2003      	movs	r0, #3
}
 800ef6a:	bd08      	pop	{r3, pc}
            return RF_IDLE;
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	e7fc      	b.n	800ef6a <RadioGetStatus+0x1c>

0800ef70 <RadioIrqProcess>:
{
 800ef70:	b530      	push	{r4, r5, lr}
 800ef72:	b083      	sub	sp, #12
    uint8_t size = 0;
 800ef74:	2300      	movs	r3, #0
 800ef76:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800ef7a:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800ef7c:	4ba5      	ldr	r3, [pc, #660]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800ef7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ef82:	2b20      	cmp	r3, #32
 800ef84:	d829      	bhi.n	800efda <RadioIrqProcess+0x6a>
 800ef86:	b21a      	sxth	r2, r3
 800ef88:	2a00      	cmp	r2, #0
 800ef8a:	f000 8140 	beq.w	800f20e <RadioIrqProcess+0x29e>
 800ef8e:	3b01      	subs	r3, #1
 800ef90:	2b1f      	cmp	r3, #31
 800ef92:	f200 813c 	bhi.w	800f20e <RadioIrqProcess+0x29e>
 800ef96:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ef9a:	0063      	.short	0x0063
 800ef9c:	013a007f 	.word	0x013a007f
 800efa0:	013a00f7 	.word	0x013a00f7
 800efa4:	013a013a 	.word	0x013a013a
 800efa8:	013a0127 	.word	0x013a0127
 800efac:	013a013a 	.word	0x013a013a
 800efb0:	013a013a 	.word	0x013a013a
 800efb4:	013a013a 	.word	0x013a013a
 800efb8:	013a0134 	.word	0x013a0134
 800efbc:	013a013a 	.word	0x013a013a
 800efc0:	013a013a 	.word	0x013a013a
 800efc4:	013a013a 	.word	0x013a013a
 800efc8:	013a013a 	.word	0x013a013a
 800efcc:	013a013a 	.word	0x013a013a
 800efd0:	013a013a 	.word	0x013a013a
 800efd4:	013a013a 	.word	0x013a013a
 800efd8:	0155      	.short	0x0155
 800efda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800efde:	f000 80b3 	beq.w	800f148 <RadioIrqProcess+0x1d8>
 800efe2:	d814      	bhi.n	800f00e <RadioIrqProcess+0x9e>
 800efe4:	2b40      	cmp	r3, #64	@ 0x40
 800efe6:	f000 8146 	beq.w	800f276 <RadioIrqProcess+0x306>
 800efea:	2b80      	cmp	r3, #128	@ 0x80
 800efec:	f040 810f 	bne.w	800f20e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800eff0:	2000      	movs	r0, #0
 800eff2:	f000 fe67 	bl	800fcc4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800eff6:	4b88      	ldr	r3, [pc, #544]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 8107 	beq.w	800f20e <RadioIrqProcess+0x29e>
 800f000:	699b      	ldr	r3, [r3, #24]
 800f002:	2b00      	cmp	r3, #0
 800f004:	f000 8103 	beq.w	800f20e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800f008:	2000      	movs	r0, #0
 800f00a:	4798      	blx	r3
 800f00c:	e0ff      	b.n	800f20e <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800f00e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f012:	f040 80fc 	bne.w	800f20e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800f016:	4b81      	ldr	r3, [pc, #516]	@ (800f21c <RadioIrqProcess+0x2ac>)
 800f018:	2201      	movs	r2, #1
 800f01a:	2100      	movs	r1, #0
 800f01c:	2002      	movs	r0, #2
 800f01e:	f001 fcb1 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f022:	f000 fd45 	bl	800fab0 <SUBGRF_GetOperatingMode>
 800f026:	2804      	cmp	r0, #4
 800f028:	f000 809b 	beq.w	800f162 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f02c:	f000 fd40 	bl	800fab0 <SUBGRF_GetOperatingMode>
 800f030:	2805      	cmp	r0, #5
 800f032:	f040 80ec 	bne.w	800f20e <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800f036:	4b7a      	ldr	r3, [pc, #488]	@ (800f220 <RadioIrqProcess+0x2b0>)
 800f038:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f03c:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 800f03e:	4879      	ldr	r0, [pc, #484]	@ (800f224 <RadioIrqProcess+0x2b4>)
 800f040:	f001 ffa6 	bl	8010f90 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f044:	2000      	movs	r0, #0
 800f046:	f000 fe3d 	bl	800fcc4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f04a:	4b73      	ldr	r3, [pc, #460]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	f000 80dd 	beq.w	800f20e <RadioIrqProcess+0x29e>
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	f000 80d9 	beq.w	800f20e <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800f05c:	4798      	blx	r3
 800f05e:	e0d6      	b.n	800f20e <RadioIrqProcess+0x29e>
 800f060:	4b6f      	ldr	r3, [pc, #444]	@ (800f220 <RadioIrqProcess+0x2b0>)
 800f062:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f066:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 800f068:	486f      	ldr	r0, [pc, #444]	@ (800f228 <RadioIrqProcess+0x2b8>)
 800f06a:	f001 ff91 	bl	8010f90 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800f06e:	2000      	movs	r0, #0
 800f070:	f000 fe28 	bl	800fcc4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800f074:	f001 fba1 	bl	80107ba <RFW_Is_LongPacketModeEnabled>
 800f078:	2801      	cmp	r0, #1
 800f07a:	d00a      	beq.n	800f092 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f07c:	4b66      	ldr	r3, [pc, #408]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	f000 80c4 	beq.w	800f20e <RadioIrqProcess+0x29e>
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f000 80c0 	beq.w	800f20e <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800f08e:	4798      	blx	r3
 800f090:	e0bd      	b.n	800f20e <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800f092:	f001 fb9b 	bl	80107cc <RFW_DeInit_TxLongPacket>
 800f096:	e7f1      	b.n	800f07c <RadioIrqProcess+0x10c>
 800f098:	4b61      	ldr	r3, [pc, #388]	@ (800f220 <RadioIrqProcess+0x2b0>)
 800f09a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f09e:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 800f0a0:	4860      	ldr	r0, [pc, #384]	@ (800f224 <RadioIrqProcess+0x2b4>)
 800f0a2:	f001 ff75 	bl	8010f90 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f0a6:	4b5b      	ldr	r3, [pc, #364]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800f0a8:	785b      	ldrb	r3, [r3, #1]
 800f0aa:	b303      	cbz	r3, 800f0ee <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800f0ac:	22ff      	movs	r2, #255	@ 0xff
 800f0ae:	f10d 0107 	add.w	r1, sp, #7
 800f0b2:	485e      	ldr	r0, [pc, #376]	@ (800f22c <RadioIrqProcess+0x2bc>)
 800f0b4:	f001 fa3a 	bl	801052c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800f0b8:	485d      	ldr	r0, [pc, #372]	@ (800f230 <RadioIrqProcess+0x2c0>)
 800f0ba:	f001 fa51 	bl	8010560 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f0be:	4b56      	ldr	r3, [pc, #344]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 80a3 	beq.w	800f20e <RadioIrqProcess+0x29e>
 800f0c8:	689c      	ldr	r4, [r3, #8]
 800f0ca:	2c00      	cmp	r4, #0
 800f0cc:	f000 809f 	beq.w	800f20e <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800f0d0:	4b50      	ldr	r3, [pc, #320]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800f0d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d11d      	bne.n	800f116 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800f0da:	4a4e      	ldr	r2, [pc, #312]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800f0dc:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 800f0e0:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800f0e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f0e8:	4850      	ldr	r0, [pc, #320]	@ (800f22c <RadioIrqProcess+0x2bc>)
 800f0ea:	47a0      	blx	r4
                break;
 800f0ec:	e08f      	b.n	800f20e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	f000 fde8 	bl	800fcc4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	f640 1002 	movw	r0, #2306	@ 0x902
 800f0fa:	f000 fce5 	bl	800fac8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800f0fe:	f640 1044 	movw	r0, #2372	@ 0x944
 800f102:	f000 fcf5 	bl	800faf0 <SUBGRF_ReadRegister>
 800f106:	f040 0102 	orr.w	r1, r0, #2
 800f10a:	b2c9      	uxtb	r1, r1
 800f10c:	f640 1044 	movw	r0, #2372	@ 0x944
 800f110:	f000 fcda 	bl	800fac8 <SUBGRF_WriteRegister>
 800f114:	e7ca      	b.n	800f0ac <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800f116:	4c3f      	ldr	r4, [pc, #252]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800f118:	4669      	mov	r1, sp
 800f11a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f11c:	f001 fb00 	bl	8010720 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800f120:	4b3d      	ldr	r3, [pc, #244]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	689d      	ldr	r5, [r3, #8]
 800f126:	9b00      	ldr	r3, [sp, #0]
 800f128:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800f12c:	4a41      	ldr	r2, [pc, #260]	@ (800f234 <RadioIrqProcess+0x2c4>)
 800f12e:	fb82 1203 	smull	r1, r2, r2, r3
 800f132:	17db      	asrs	r3, r3, #31
 800f134:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800f138:	b25b      	sxtb	r3, r3
 800f13a:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800f13e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f142:	483a      	ldr	r0, [pc, #232]	@ (800f22c <RadioIrqProcess+0x2bc>)
 800f144:	47a8      	blx	r5
                break;
 800f146:	e062      	b.n	800f20e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f148:	2000      	movs	r0, #0
 800f14a:	f000 fdbb 	bl	800fcc4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f14e:	4b32      	ldr	r3, [pc, #200]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d05b      	beq.n	800f20e <RadioIrqProcess+0x29e>
 800f156:	699b      	ldr	r3, [r3, #24]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d058      	beq.n	800f20e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800f15c:	2001      	movs	r0, #1
 800f15e:	4798      	blx	r3
 800f160:	e055      	b.n	800f20e <RadioIrqProcess+0x29e>
 800f162:	4b2f      	ldr	r3, [pc, #188]	@ (800f220 <RadioIrqProcess+0x2b0>)
 800f164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f168:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 800f16a:	482f      	ldr	r0, [pc, #188]	@ (800f228 <RadioIrqProcess+0x2b8>)
 800f16c:	f001 ff10 	bl	8010f90 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f170:	2000      	movs	r0, #0
 800f172:	f000 fda7 	bl	800fcc4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f176:	4b28      	ldr	r3, [pc, #160]	@ (800f218 <RadioIrqProcess+0x2a8>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d047      	beq.n	800f20e <RadioIrqProcess+0x29e>
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d044      	beq.n	800f20e <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800f184:	4798      	blx	r3
 800f186:	e042      	b.n	800f20e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800f188:	4b2b      	ldr	r3, [pc, #172]	@ (800f238 <RadioIrqProcess+0x2c8>)
 800f18a:	2201      	movs	r2, #1
 800f18c:	2100      	movs	r1, #0
 800f18e:	2002      	movs	r0, #2
 800f190:	f001 fbf8 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800f194:	4b1f      	ldr	r3, [pc, #124]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800f196:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800f198:	b3c9      	cbz	r1, 800f20e <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800f19a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f19e:	f640 1003 	movw	r0, #2307	@ 0x903
 800f1a2:	f7ff fe4f 	bl	800ee44 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800f1a6:	4c1b      	ldr	r4, [pc, #108]	@ (800f214 <RadioIrqProcess+0x2a4>)
 800f1a8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f1ac:	f640 1004 	movw	r0, #2308	@ 0x904
 800f1b0:	f7ff fe48 	bl	800ee44 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800f1b4:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 800f1b8:	f640 1005 	movw	r0, #2309	@ 0x905
 800f1bc:	f7ff fe42 	bl	800ee44 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800f1c0:	f640 1002 	movw	r0, #2306	@ 0x902
 800f1c4:	f7ff febf 	bl	800ef46 <RadioRead>
 800f1c8:	f040 0101 	orr.w	r1, r0, #1
 800f1cc:	b2c9      	uxtb	r1, r1
 800f1ce:	f640 1002 	movw	r0, #2306	@ 0x902
 800f1d2:	f7ff fe37 	bl	800ee44 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f1da:	4613      	mov	r3, r2
 800f1dc:	f240 2162 	movw	r1, #610	@ 0x262
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	f000 ff1c 	bl	801001e <SUBGRF_SetDioIrqParams>
 800f1e6:	e012      	b.n	800f20e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800f1e8:	4b14      	ldr	r3, [pc, #80]	@ (800f23c <RadioIrqProcess+0x2cc>)
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	2002      	movs	r0, #2
 800f1f0:	f001 fbc8 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800f1f4:	f001 fadf 	bl	80107b6 <RFW_Is_Init>
 800f1f8:	2801      	cmp	r0, #1
 800f1fa:	d108      	bne.n	800f20e <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800f1fc:	f001 fae7 	bl	80107ce <RFW_ReceivePayload>
 800f200:	e005      	b.n	800f20e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800f202:	4b0f      	ldr	r3, [pc, #60]	@ (800f240 <RadioIrqProcess+0x2d0>)
 800f204:	2201      	movs	r2, #1
 800f206:	2100      	movs	r1, #0
 800f208:	2002      	movs	r0, #2
 800f20a:	f001 fbbb 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
}
 800f20e:	b003      	add	sp, #12
 800f210:	bd30      	pop	{r4, r5, pc}
 800f212:	bf00      	nop
 800f214:	20000efc 	.word	0x20000efc
 800f218:	20000f58 	.word	0x20000f58
 800f21c:	08012c10 	.word	0x08012c10
 800f220:	48000400 	.word	0x48000400
 800f224:	20000ecc 	.word	0x20000ecc
 800f228:	20000ee4 	.word	0x20000ee4
 800f22c:	20000f5c 	.word	0x20000f5c
 800f230:	20000f20 	.word	0x20000f20
 800f234:	10624dd3 	.word	0x10624dd3
 800f238:	08012c24 	.word	0x08012c24
 800f23c:	08012c30 	.word	0x08012c30
 800f240:	08012c3c 	.word	0x08012c3c
        TimerStop( &RxTimeoutTimer );
 800f244:	4817      	ldr	r0, [pc, #92]	@ (800f2a4 <RadioIrqProcess+0x334>)
 800f246:	f001 fea3 	bl	8010f90 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f24a:	4b17      	ldr	r3, [pc, #92]	@ (800f2a8 <RadioIrqProcess+0x338>)
 800f24c:	785b      	ldrb	r3, [r3, #1]
 800f24e:	b173      	cbz	r3, 800f26e <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f250:	4b16      	ldr	r3, [pc, #88]	@ (800f2ac <RadioIrqProcess+0x33c>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d0da      	beq.n	800f20e <RadioIrqProcess+0x29e>
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0d7      	beq.n	800f20e <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800f25e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800f260:	4b13      	ldr	r3, [pc, #76]	@ (800f2b0 <RadioIrqProcess+0x340>)
 800f262:	2201      	movs	r2, #1
 800f264:	2100      	movs	r1, #0
 800f266:	2002      	movs	r0, #2
 800f268:	f001 fb8c 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
 800f26c:	e7cf      	b.n	800f20e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f26e:	2000      	movs	r0, #0
 800f270:	f000 fd28 	bl	800fcc4 <SUBGRF_SetStandby>
 800f274:	e7ec      	b.n	800f250 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800f276:	4b0f      	ldr	r3, [pc, #60]	@ (800f2b4 <RadioIrqProcess+0x344>)
 800f278:	2201      	movs	r2, #1
 800f27a:	2100      	movs	r1, #0
 800f27c:	2002      	movs	r0, #2
 800f27e:	f001 fb81 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800f282:	4b09      	ldr	r3, [pc, #36]	@ (800f2a8 <RadioIrqProcess+0x338>)
 800f284:	785b      	ldrb	r3, [r3, #1]
 800f286:	b143      	cbz	r3, 800f29a <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800f288:	4b08      	ldr	r3, [pc, #32]	@ (800f2ac <RadioIrqProcess+0x33c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d0be      	beq.n	800f20e <RadioIrqProcess+0x29e>
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d0bb      	beq.n	800f20e <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800f296:	4798      	blx	r3
}
 800f298:	e7b9      	b.n	800f20e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f29a:	2000      	movs	r0, #0
 800f29c:	f000 fd12 	bl	800fcc4 <SUBGRF_SetStandby>
 800f2a0:	e7f2      	b.n	800f288 <RadioIrqProcess+0x318>
 800f2a2:	bf00      	nop
 800f2a4:	20000ecc 	.word	0x20000ecc
 800f2a8:	20000efc 	.word	0x20000efc
 800f2ac:	20000f58 	.word	0x20000f58
 800f2b0:	08012c48 	.word	0x08012c48
 800f2b4:	08012c54 	.word	0x08012c54

0800f2b8 <RadioOnDioIrq>:
{
 800f2b8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800f2ba:	4b03      	ldr	r3, [pc, #12]	@ (800f2c8 <RadioOnDioIrq+0x10>)
 800f2bc:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800f2c0:	f7ff fe56 	bl	800ef70 <RadioIrqProcess>
}
 800f2c4:	bd08      	pop	{r3, pc}
 800f2c6:	bf00      	nop
 800f2c8:	20000efc 	.word	0x20000efc

0800f2cc <RadioGetWakeupTime>:
{
 800f2cc:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800f2ce:	f001 f9ae 	bl	801062e <SUBGRF_GetRadioWakeUpTime>
}
 800f2d2:	3003      	adds	r0, #3
 800f2d4:	bd08      	pop	{r3, pc}
	...

0800f2d8 <RadioSetMaxPayloadLength>:
{
 800f2d8:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800f2da:	2801      	cmp	r0, #1
 800f2dc:	d004      	beq.n	800f2e8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f2de:	4b0a      	ldr	r3, [pc, #40]	@ (800f308 <RadioSetMaxPayloadLength+0x30>)
 800f2e0:	7d5b      	ldrb	r3, [r3, #21]
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d008      	beq.n	800f2f8 <RadioSetMaxPayloadLength+0x20>
}
 800f2e6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f2e8:	4b08      	ldr	r3, [pc, #32]	@ (800f30c <RadioSetMaxPayloadLength+0x34>)
 800f2ea:	7019      	strb	r1, [r3, #0]
 800f2ec:	4806      	ldr	r0, [pc, #24]	@ (800f308 <RadioSetMaxPayloadLength+0x30>)
 800f2ee:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2f0:	300e      	adds	r0, #14
 800f2f2:	f001 f85d 	bl	80103b0 <SUBGRF_SetPacketParams>
 800f2f6:	e7f6      	b.n	800f2e6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f2f8:	4b04      	ldr	r3, [pc, #16]	@ (800f30c <RadioSetMaxPayloadLength+0x34>)
 800f2fa:	7019      	strb	r1, [r3, #0]
 800f2fc:	4802      	ldr	r0, [pc, #8]	@ (800f308 <RadioSetMaxPayloadLength+0x30>)
 800f2fe:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f300:	300e      	adds	r0, #14
 800f302:	f001 f855 	bl	80103b0 <SUBGRF_SetPacketParams>
}
 800f306:	e7ee      	b.n	800f2e6 <RadioSetMaxPayloadLength+0xe>
 800f308:	20000efc 	.word	0x20000efc
 800f30c:	200000fc 	.word	0x200000fc

0800f310 <RadioReadRegisters>:
{
 800f310:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800f312:	f000 fc6f 	bl	800fbf4 <SUBGRF_ReadRegisters>
}
 800f316:	bd08      	pop	{r3, pc}

0800f318 <RadioWriteRegisters>:
{
 800f318:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800f31a:	f000 fc29 	bl	800fb70 <SUBGRF_WriteRegisters>
}
 800f31e:	bd08      	pop	{r3, pc}

0800f320 <RadioRssi>:
{
 800f320:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800f322:	f001 f8d3 	bl	80104cc <SUBGRF_GetRssiInst>
}
 800f326:	bd08      	pop	{r3, pc}

0800f328 <RadioSetTxContinuousWave>:
{
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800f32c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f330:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800f334:	f000 fee6 	bl	8010104 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800f338:	4628      	mov	r0, r5
 800f33a:	f001 f961 	bl	8010600 <SUBGRF_SetRfTxPower>
 800f33e:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f340:	210e      	movs	r1, #14
 800f342:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f346:	f000 fbbf 	bl	800fac8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800f34a:	2101      	movs	r1, #1
 800f34c:	4628      	mov	r0, r5
 800f34e:	f001 f943 	bl	80105d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f352:	f000 fd91 	bl	800fe78 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f356:	4d04      	ldr	r5, [pc, #16]	@ (800f368 <RadioSetTxContinuousWave+0x40>)
 800f358:	4621      	mov	r1, r4
 800f35a:	4628      	mov	r0, r5
 800f35c:	f001 feb8 	bl	80110d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800f360:	4628      	mov	r0, r5
 800f362:	f001 fe6f 	bl	8011044 <UTIL_TIMER_Start>
}
 800f366:	bd38      	pop	{r3, r4, r5, pc}
 800f368:	20000ee4 	.word	0x20000ee4

0800f36c <RadioSetChannel>:
{
 800f36c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800f36e:	f000 fec9 	bl	8010104 <SUBGRF_SetRfFrequency>
}
 800f372:	bd08      	pop	{r3, pc}

0800f374 <RadioStartCad>:
{
 800f374:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f376:	2100      	movs	r1, #0
 800f378:	4b07      	ldr	r3, [pc, #28]	@ (800f398 <RadioStartCad+0x24>)
 800f37a:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800f37e:	f001 f92b 	bl	80105d8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800f382:	2300      	movs	r3, #0
 800f384:	461a      	mov	r2, r3
 800f386:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800f38a:	4608      	mov	r0, r1
 800f38c:	f000 fe47 	bl	801001e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800f390:	f000 fd66 	bl	800fe60 <SUBGRF_SetCad>
}
 800f394:	bd08      	pop	{r3, pc}
 800f396:	bf00      	nop
 800f398:	20000efc 	.word	0x20000efc

0800f39c <RadioRx>:
{
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800f3a0:	f001 fa09 	bl	80107b6 <RFW_Is_Init>
 800f3a4:	2801      	cmp	r0, #1
 800f3a6:	d019      	beq.n	800f3dc <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f240 2162 	movw	r1, #610	@ 0x262
 800f3b0:	4608      	mov	r0, r1
 800f3b2:	f000 fe34 	bl	801001e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f3b6:	b9a4      	cbnz	r4, 800f3e2 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f3b8:	4c11      	ldr	r4, [pc, #68]	@ (800f400 <RadioRx+0x64>)
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f3be:	4b11      	ldr	r3, [pc, #68]	@ (800f404 <RadioRx+0x68>)
 800f3c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f3c4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f3c6:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800f3ca:	f001 f905 	bl	80105d8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f3ce:	7863      	ldrb	r3, [r4, #1]
 800f3d0:	b183      	cbz	r3, 800f3f4 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800f3d2:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800f3d6:	f000 fcb1 	bl	800fd3c <SUBGRF_SetRx>
}
 800f3da:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800f3dc:	f001 f9f3 	bl	80107c6 <RFW_ReceiveInit>
 800f3e0:	e7e9      	b.n	800f3b6 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f3e2:	4d09      	ldr	r5, [pc, #36]	@ (800f408 <RadioRx+0x6c>)
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f001 fe72 	bl	80110d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f001 fe29 	bl	8011044 <UTIL_TIMER_Start>
 800f3f2:	e7e1      	b.n	800f3b8 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800f3f4:	4b02      	ldr	r3, [pc, #8]	@ (800f400 <RadioRx+0x64>)
 800f3f6:	6898      	ldr	r0, [r3, #8]
 800f3f8:	0180      	lsls	r0, r0, #6
 800f3fa:	f000 fc9f 	bl	800fd3c <SUBGRF_SetRx>
}
 800f3fe:	e7ec      	b.n	800f3da <RadioRx+0x3e>
 800f400:	20000efc 	.word	0x20000efc
 800f404:	48000400 	.word	0x48000400
 800f408:	20000ecc 	.word	0x20000ecc

0800f40c <RadioSleep>:
{
 800f40c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800f40e:	f04f 0004 	mov.w	r0, #4
 800f412:	f000 fc37 	bl	800fc84 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800f416:	2002      	movs	r0, #2
 800f418:	f7f2 fb48 	bl	8001aac <HAL_Delay>
}
 800f41c:	bd08      	pop	{r3, pc}
	...

0800f420 <RadioSend>:
{
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	4605      	mov	r5, r0
 800f426:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800f428:	2300      	movs	r3, #0
 800f42a:	461a      	mov	r2, r3
 800f42c:	f240 2101 	movw	r1, #513	@ 0x201
 800f430:	4608      	mov	r0, r1
 800f432:	f000 fdf4 	bl	801001e <SUBGRF_SetDioIrqParams>
 800f436:	4b3f      	ldr	r3, [pc, #252]	@ (800f534 <RadioSend+0x114>)
 800f438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f43c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f43e:	4e3e      	ldr	r6, [pc, #248]	@ (800f538 <RadioSend+0x118>)
 800f440:	2101      	movs	r1, #1
 800f442:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800f446:	f001 f8c7 	bl	80105d8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800f44a:	7833      	ldrb	r3, [r6, #0]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d103      	bne.n	800f458 <RadioSend+0x38>
 800f450:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 800f454:	2b06      	cmp	r3, #6
 800f456:	d012      	beq.n	800f47e <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800f458:	f640 0089 	movw	r0, #2185	@ 0x889
 800f45c:	f000 fb48 	bl	800faf0 <SUBGRF_ReadRegister>
 800f460:	f040 0104 	orr.w	r1, r0, #4
 800f464:	b2c9      	uxtb	r1, r1
 800f466:	f640 0089 	movw	r0, #2185	@ 0x889
 800f46a:	f000 fb2d 	bl	800fac8 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800f46e:	4b32      	ldr	r3, [pc, #200]	@ (800f538 <RadioSend+0x118>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	2b03      	cmp	r3, #3
 800f474:	d818      	bhi.n	800f4a8 <RadioSend+0x88>
 800f476:	e8df f003 	tbb	[pc, r3]
 800f47a:	0d23      	.short	0x0d23
 800f47c:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800f47e:	f640 0089 	movw	r0, #2185	@ 0x889
 800f482:	f000 fb35 	bl	800faf0 <SUBGRF_ReadRegister>
 800f486:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800f48a:	f640 0089 	movw	r0, #2185	@ 0x889
 800f48e:	f000 fb1b 	bl	800fac8 <SUBGRF_WriteRegister>
 800f492:	e7ec      	b.n	800f46e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800f494:	4828      	ldr	r0, [pc, #160]	@ (800f538 <RadioSend+0x118>)
 800f496:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f498:	300e      	adds	r0, #14
 800f49a:	f000 ff89 	bl	80103b0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f49e:	2200      	movs	r2, #0
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f000 fc42 	bl	800fd2c <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800f4a8:	4c24      	ldr	r4, [pc, #144]	@ (800f53c <RadioSend+0x11c>)
 800f4aa:	4b23      	ldr	r3, [pc, #140]	@ (800f538 <RadioSend+0x118>)
 800f4ac:	6859      	ldr	r1, [r3, #4]
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f001 fe0e 	bl	80110d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f001 fdc5 	bl	8011044 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 800f4ba:	2000      	movs	r0, #0
}
 800f4bc:	b002      	add	sp, #8
 800f4be:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800f4c0:	f001 f979 	bl	80107b6 <RFW_Is_Init>
 800f4c4:	2801      	cmp	r0, #1
 800f4c6:	d00a      	beq.n	800f4de <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800f4c8:	481b      	ldr	r0, [pc, #108]	@ (800f538 <RadioSend+0x118>)
 800f4ca:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f4cc:	300e      	adds	r0, #14
 800f4ce:	f000 ff6f 	bl	80103b0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f000 fc28 	bl	800fd2c <SUBGRF_SendPayload>
 800f4dc:	e7e4      	b.n	800f4a8 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800f4de:	f10d 0207 	add.w	r2, sp, #7
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f001 f96b 	bl	80107c0 <RFW_TransmitInit>
 800f4ea:	b968      	cbnz	r0, 800f508 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800f4ec:	4812      	ldr	r0, [pc, #72]	@ (800f538 <RadioSend+0x118>)
 800f4ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4f2:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f4f4:	300e      	adds	r0, #14
 800f4f6:	f000 ff5b 	bl	80103b0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f500:	4628      	mov	r0, r5
 800f502:	f000 fc13 	bl	800fd2c <SUBGRF_SendPayload>
 800f506:	e7cf      	b.n	800f4a8 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800f508:	4b0d      	ldr	r3, [pc, #52]	@ (800f540 <RadioSend+0x120>)
 800f50a:	2201      	movs	r2, #1
 800f50c:	2100      	movs	r1, #0
 800f50e:	2002      	movs	r0, #2
 800f510:	f001 fa38 	bl	8010984 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800f514:	2003      	movs	r0, #3
 800f516:	e7d1      	b.n	800f4bc <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800f518:	4807      	ldr	r0, [pc, #28]	@ (800f538 <RadioSend+0x118>)
 800f51a:	2302      	movs	r3, #2
 800f51c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800f51e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f520:	300e      	adds	r0, #14
 800f522:	f000 ff45 	bl	80103b0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f526:	2200      	movs	r2, #0
 800f528:	4621      	mov	r1, r4
 800f52a:	4628      	mov	r0, r5
 800f52c:	f000 fbfe 	bl	800fd2c <SUBGRF_SendPayload>
            break;
 800f530:	e7ba      	b.n	800f4a8 <RadioSend+0x88>
 800f532:	bf00      	nop
 800f534:	48000400 	.word	0x48000400
 800f538:	20000efc 	.word	0x20000efc
 800f53c:	20000ee4 	.word	0x20000ee4
 800f540:	08012c64 	.word	0x08012c64

0800f544 <RadioRandom>:
{
 800f544:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f546:	2300      	movs	r3, #0
 800f548:	461a      	mov	r2, r3
 800f54a:	4619      	mov	r1, r3
 800f54c:	4618      	mov	r0, r3
 800f54e:	f000 fd66 	bl	801001e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800f552:	f000 fc0d 	bl	800fd70 <SUBGRF_GetRandom>
}
 800f556:	bd08      	pop	{r3, pc}

0800f558 <RadioSetModem>:
{
 800f558:	b510      	push	{r4, lr}
 800f55a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800f55c:	4b14      	ldr	r3, [pc, #80]	@ (800f5b0 <RadioSetModem+0x58>)
 800f55e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800f560:	f001 f936 	bl	80107d0 <RFW_SetRadioModem>
    switch( modem )
 800f564:	2c01      	cmp	r4, #1
 800f566:	d010      	beq.n	800f58a <RadioSetModem+0x32>
 800f568:	2c03      	cmp	r4, #3
 800f56a:	d01a      	beq.n	800f5a2 <RadioSetModem+0x4a>
 800f56c:	b134      	cbz	r4, 800f57c <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800f56e:	2003      	movs	r0, #3
 800f570:	f000 fdf4 	bl	801015c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f574:	4b0e      	ldr	r3, [pc, #56]	@ (800f5b0 <RadioSetModem+0x58>)
 800f576:	2200      	movs	r2, #0
 800f578:	735a      	strb	r2, [r3, #13]
}
 800f57a:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800f57c:	2000      	movs	r0, #0
 800f57e:	f000 fded 	bl	801015c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f582:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b0 <RadioSetModem+0x58>)
 800f584:	2200      	movs	r2, #0
 800f586:	735a      	strb	r2, [r3, #13]
        break;
 800f588:	e7f7      	b.n	800f57a <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800f58a:	2001      	movs	r0, #1
 800f58c:	f000 fde6 	bl	801015c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800f590:	4b07      	ldr	r3, [pc, #28]	@ (800f5b0 <RadioSetModem+0x58>)
 800f592:	7b5a      	ldrb	r2, [r3, #13]
 800f594:	7b18      	ldrb	r0, [r3, #12]
 800f596:	4282      	cmp	r2, r0
 800f598:	d0ef      	beq.n	800f57a <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800f59a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800f59c:	f000 f80a 	bl	800f5b4 <RadioSetPublicNetwork>
 800f5a0:	e7eb      	b.n	800f57a <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800f5a2:	2002      	movs	r0, #2
 800f5a4:	f000 fdda 	bl	801015c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f5a8:	4b01      	ldr	r3, [pc, #4]	@ (800f5b0 <RadioSetModem+0x58>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	735a      	strb	r2, [r3, #13]
}
 800f5ae:	e7e4      	b.n	800f57a <RadioSetModem+0x22>
 800f5b0:	20000efc 	.word	0x20000efc

0800f5b4 <RadioSetPublicNetwork>:
{
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f5f4 <RadioSetPublicNetwork+0x40>)
 800f5ba:	7318      	strb	r0, [r3, #12]
 800f5bc:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f5be:	2001      	movs	r0, #1
 800f5c0:	f7ff ffca 	bl	800f558 <RadioSetModem>
    if( enable == true )
 800f5c4:	b154      	cbz	r4, 800f5dc <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f5c6:	2134      	movs	r1, #52	@ 0x34
 800f5c8:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f5cc:	f000 fa7c 	bl	800fac8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f5d0:	2144      	movs	r1, #68	@ 0x44
 800f5d2:	f240 7041 	movw	r0, #1857	@ 0x741
 800f5d6:	f000 fa77 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800f5da:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f5dc:	2114      	movs	r1, #20
 800f5de:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f5e2:	f000 fa71 	bl	800fac8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f5e6:	2124      	movs	r1, #36	@ 0x24
 800f5e8:	f240 7041 	movw	r0, #1857	@ 0x741
 800f5ec:	f000 fa6c 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800f5f0:	e7f3      	b.n	800f5da <RadioSetPublicNetwork+0x26>
 800f5f2:	bf00      	nop
 800f5f4:	20000efc 	.word	0x20000efc

0800f5f8 <RadioSetTxConfig>:
{
 800f5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fc:	b083      	sub	sp, #12
 800f5fe:	4604      	mov	r4, r0
 800f600:	460e      	mov	r6, r1
 800f602:	4617      	mov	r7, r2
 800f604:	461d      	mov	r5, r3
 800f606:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
 800f60a:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 800f60e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 800f612:	f001 f8cf 	bl	80107b4 <RFW_DeInit>
    switch( modem )
 800f616:	2c00      	cmp	r4, #0
 800f618:	d043      	beq.n	800f6a2 <RadioSetTxConfig+0xaa>
 800f61a:	2c01      	cmp	r4, #1
 800f61c:	f040 8083 	bne.w	800f726 <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f620:	4a57      	ldr	r2, [pc, #348]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f622:	2301      	movs	r3, #1
 800f624:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f630:	4954      	ldr	r1, [pc, #336]	@ (800f784 <RadioSetTxConfig+0x18c>)
 800f632:	5d49      	ldrb	r1, [r1, r5]
 800f634:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f638:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800f63c:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f640:	b925      	cbnz	r5, 800f64c <RadioSetTxConfig+0x54>
 800f642:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f644:	3a0b      	subs	r2, #11
 800f646:	2a01      	cmp	r2, #1
 800f648:	f240 8089 	bls.w	800f75e <RadioSetTxConfig+0x166>
 800f64c:	2d01      	cmp	r5, #1
 800f64e:	f000 8082 	beq.w	800f756 <RadioSetTxConfig+0x15e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f652:	4a4b      	ldr	r2, [pc, #300]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f654:	2100      	movs	r1, #0
 800f656:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f65a:	4a49      	ldr	r2, [pc, #292]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f65c:	2101      	movs	r1, #1
 800f65e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f660:	3b05      	subs	r3, #5
 800f662:	b2db      	uxtb	r3, r3
 800f664:	428b      	cmp	r3, r1
 800f666:	d97f      	bls.n	800f768 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f668:	4b45      	ldr	r3, [pc, #276]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f66a:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f66e:	4c44      	ldr	r4, [pc, #272]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f670:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f674:	4b44      	ldr	r3, [pc, #272]	@ (800f788 <RadioSetTxConfig+0x190>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f67a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f67e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800f682:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800f686:	f7ff fc59 	bl	800ef3c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f68a:	2001      	movs	r0, #1
 800f68c:	f7ff ff64 	bl	800f558 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f690:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800f694:	f000 fe0a 	bl	80102ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f698:	f104 000e 	add.w	r0, r4, #14
 800f69c:	f000 fe88 	bl	80103b0 <SUBGRF_SetPacketParams>
            break;
 800f6a0:	e041      	b.n	800f726 <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f6a2:	4c37      	ldr	r4, [pc, #220]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f6a4:	f04f 0b00 	mov.w	fp, #0
 800f6a8:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f6ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f6b0:	230b      	movs	r3, #11
 800f6b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f001 f81a 	bl	80106f0 <SUBGRF_GetFskBandwidthRegValue>
 800f6bc:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f6c0:	6427      	str	r7, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f6c2:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f6c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800f6ca:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f6ce:	2304      	movs	r3, #4
 800f6d0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f6d2:	2318      	movs	r3, #24
 800f6d4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f6d6:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f6da:	f089 0901 	eor.w	r9, r9, #1
 800f6de:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 800f6e2:	f1ba 0f00 	cmp.w	sl, #0
 800f6e6:	d032      	beq.n	800f74e <RadioSetTxConfig+0x156>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f6e8:	22f2      	movs	r2, #242	@ 0xf2
 800f6ea:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f6ec:	4c24      	ldr	r4, [pc, #144]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f6f2:	f7ff fc23 	bl	800ef3c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	f7ff ff2e 	bl	800f558 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f6fc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800f700:	f000 fdd4 	bl	80102ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f704:	f104 000e 	add.w	r0, r4, #14
 800f708:	f000 fe52 	bl	80103b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f70c:	4a1f      	ldr	r2, [pc, #124]	@ (800f78c <RadioSetTxConfig+0x194>)
 800f70e:	466b      	mov	r3, sp
 800f710:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f714:	e883 0003 	stmia.w	r3, {r0, r1}
 800f718:	4618      	mov	r0, r3
 800f71a:	f000 fa39 	bl	800fb90 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f71e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800f722:	f000 fa0c 	bl	800fb3e <SUBGRF_SetWhiteningSeed>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f726:	4630      	mov	r0, r6
 800f728:	f000 ff6a 	bl	8010600 <SUBGRF_SetRfTxPower>
 800f72c:	4c14      	ldr	r4, [pc, #80]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f72e:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f732:	210e      	movs	r1, #14
 800f734:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f738:	f000 f9c6 	bl	800fac8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800f73c:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800f740:	f001 f83d 	bl	80107be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f744:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f746:	6063      	str	r3, [r4, #4]
}
 800f748:	b003      	add	sp, #12
 800f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f74e:	4b0c      	ldr	r3, [pc, #48]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f750:	2201      	movs	r2, #1
 800f752:	75da      	strb	r2, [r3, #23]
 800f754:	e7ca      	b.n	800f6ec <RadioSetTxConfig+0xf4>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f756:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f758:	2a0c      	cmp	r2, #12
 800f75a:	f47f af7a 	bne.w	800f652 <RadioSetTxConfig+0x5a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f75e:	4a08      	ldr	r2, [pc, #32]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f760:	2101      	movs	r1, #1
 800f762:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800f766:	e778      	b.n	800f65a <RadioSetTxConfig+0x62>
                if( preambleLen < 12 )
 800f768:	f1b8 0f0b 	cmp.w	r8, #11
 800f76c:	d803      	bhi.n	800f776 <RadioSetTxConfig+0x17e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f76e:	4613      	mov	r3, r2
 800f770:	220c      	movs	r2, #12
 800f772:	839a      	strh	r2, [r3, #28]
 800f774:	e77b      	b.n	800f66e <RadioSetTxConfig+0x76>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f776:	4b02      	ldr	r3, [pc, #8]	@ (800f780 <RadioSetTxConfig+0x188>)
 800f778:	f8a3 801c 	strh.w	r8, [r3, #28]
 800f77c:	e777      	b.n	800f66e <RadioSetTxConfig+0x76>
 800f77e:	bf00      	nop
 800f780:	20000efc 	.word	0x20000efc
 800f784:	08013270 	.word	0x08013270
 800f788:	200000fc 	.word	0x200000fc
 800f78c:	080124d8 	.word	0x080124d8

0800f790 <RadioSetRxConfig>:
{
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	b085      	sub	sp, #20
 800f796:	4604      	mov	r4, r0
 800f798:	460d      	mov	r5, r1
 800f79a:	4616      	mov	r6, r2
 800f79c:	9301      	str	r3, [sp, #4]
 800f79e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 800f7a2:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 800f7a6:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800f7aa:	f89d b04c 	ldrb.w	fp, [sp, #76]	@ 0x4c
 800f7ae:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
    SubgRf.RxContinuous = rxContinuous;
 800f7b2:	4b76      	ldr	r3, [pc, #472]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f7b4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 800f7b8:	f000 fffc 	bl	80107b4 <RFW_DeInit>
    if( rxContinuous == true )
 800f7bc:	f1b8 0f00 	cmp.w	r8, #0
 800f7c0:	d001      	beq.n	800f7c6 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f7c2:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f7c6:	2f00      	cmp	r7, #0
 800f7c8:	d06b      	beq.n	800f8a2 <RadioSetRxConfig+0x112>
        MaxPayloadLength = payloadLen;
 800f7ca:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 800f7ce:	4b70      	ldr	r3, [pc, #448]	@ (800f990 <RadioSetRxConfig+0x200>)
 800f7d0:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f7d2:	2c00      	cmp	r4, #0
 800f7d4:	d069      	beq.n	800f8aa <RadioSetRxConfig+0x11a>
 800f7d6:	2c01      	cmp	r4, #1
 800f7d8:	f040 80b3 	bne.w	800f942 <RadioSetRxConfig+0x1b2>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f7dc:	2000      	movs	r0, #0
 800f7de:	f000 fb59 	bl	800fe94 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f7e2:	4a6a      	ldr	r2, [pc, #424]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f7ea:	b2f3      	uxtb	r3, r6
 800f7ec:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f7f0:	4968      	ldr	r1, [pc, #416]	@ (800f994 <RadioSetRxConfig+0x204>)
 800f7f2:	5d49      	ldrb	r1, [r1, r5]
 800f7f4:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f7f8:	9901      	ldr	r1, [sp, #4]
 800f7fa:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f7fe:	b925      	cbnz	r5, 800f80a <RadioSetRxConfig+0x7a>
 800f800:	f1a6 020b 	sub.w	r2, r6, #11
 800f804:	2a01      	cmp	r2, #1
 800f806:	f240 80a6 	bls.w	800f956 <RadioSetRxConfig+0x1c6>
 800f80a:	2d01      	cmp	r5, #1
 800f80c:	f000 80a0 	beq.w	800f950 <RadioSetRxConfig+0x1c0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f810:	4a5e      	ldr	r2, [pc, #376]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f812:	2100      	movs	r1, #0
 800f814:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f818:	4a5c      	ldr	r2, [pc, #368]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f81a:	2101      	movs	r1, #1
 800f81c:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f81e:	3b05      	subs	r3, #5
 800f820:	b2db      	uxtb	r3, r3
 800f822:	428b      	cmp	r3, r1
 800f824:	f240 809c 	bls.w	800f960 <RadioSetRxConfig+0x1d0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f828:	4b58      	ldr	r3, [pc, #352]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f82a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f82e:	4c57      	ldr	r4, [pc, #348]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f830:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f832:	4b57      	ldr	r3, [pc, #348]	@ (800f990 <RadioSetRxConfig+0x200>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f838:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f83c:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f840:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800f844:	f7ff fb7a 	bl	800ef3c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f848:	2001      	movs	r0, #1
 800f84a:	f7ff fe85 	bl	800f558 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f84e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800f852:	f000 fd2b 	bl	80102ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f856:	f104 000e 	add.w	r0, r4, #14
 800f85a:	f000 fda9 	bl	80103b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f85e:	fa5f f08a 	uxtb.w	r0, sl
 800f862:	f000 fb24 	bl	800feae <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800f866:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800f86a:	f000 f941 	bl	800faf0 <SUBGRF_ReadRegister>
 800f86e:	f000 0101 	and.w	r1, r0, #1
 800f872:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800f876:	f000 f927 	bl	800fac8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f87a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d079      	beq.n	800f976 <RadioSetRxConfig+0x1e6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800f882:	f240 7036 	movw	r0, #1846	@ 0x736
 800f886:	f000 f933 	bl	800faf0 <SUBGRF_ReadRegister>
 800f88a:	f040 0104 	orr.w	r1, r0, #4
 800f88e:	b2c9      	uxtb	r1, r1
 800f890:	f240 7036 	movw	r0, #1846	@ 0x736
 800f894:	f000 f918 	bl	800fac8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f898:	4b3c      	ldr	r3, [pc, #240]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f89a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f89e:	609a      	str	r2, [r3, #8]
}
 800f8a0:	e04f      	b.n	800f942 <RadioSetRxConfig+0x1b2>
        MaxPayloadLength = 0xFF;
 800f8a2:	4b3b      	ldr	r3, [pc, #236]	@ (800f990 <RadioSetRxConfig+0x200>)
 800f8a4:	22ff      	movs	r2, #255	@ 0xff
 800f8a6:	701a      	strb	r2, [r3, #0]
 800f8a8:	e793      	b.n	800f7d2 <RadioSetRxConfig+0x42>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f000 faf2 	bl	800fe94 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f8b0:	4c36      	ldr	r4, [pc, #216]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f8b2:	f04f 0800 	mov.w	r8, #0
 800f8b6:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f8ba:	63e6      	str	r6, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f8bc:	230b      	movs	r3, #11
 800f8be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	f000 ff14 	bl	80106f0 <SUBGRF_GetFskBandwidthRegValue>
 800f8c8:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f8cc:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f8d0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f8d4:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f8d8:	2304      	movs	r3, #4
 800f8da:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f8dc:	2318      	movs	r3, #24
 800f8de:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f8e0:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f8e4:	f087 0701 	eor.w	r7, r7, #1
 800f8e8:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f8ea:	4b29      	ldr	r3, [pc, #164]	@ (800f990 <RadioSetRxConfig+0x200>)
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f8f0:	f1bb 0f00 	cmp.w	fp, #0
 800f8f4:	d028      	beq.n	800f948 <RadioSetRxConfig+0x1b8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f8f6:	22f2      	movs	r2, #242	@ 0xf2
 800f8f8:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f8fa:	4c24      	ldr	r4, [pc, #144]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f900:	f7ff fb1c 	bl	800ef3c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800f904:	2000      	movs	r0, #0
 800f906:	f7ff fe27 	bl	800f558 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f90a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800f90e:	f000 fccd 	bl	80102ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f912:	f104 000e 	add.w	r0, r4, #14
 800f916:	f000 fd4b 	bl	80103b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f91a:	4a1f      	ldr	r2, [pc, #124]	@ (800f998 <RadioSetRxConfig+0x208>)
 800f91c:	ab02      	add	r3, sp, #8
 800f91e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f922:	e883 0003 	stmia.w	r3, {r0, r1}
 800f926:	4618      	mov	r0, r3
 800f928:	f000 f932 	bl	800fb90 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f92c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800f930:	f000 f905 	bl	800fb3e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f934:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800f938:	fb03 f30a 	mul.w	r3, r3, sl
 800f93c:	fbb3 f3f6 	udiv	r3, r3, r6
 800f940:	60a3      	str	r3, [r4, #8]
}
 800f942:	b005      	add	sp, #20
 800f944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f948:	4b10      	ldr	r3, [pc, #64]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f94a:	2201      	movs	r2, #1
 800f94c:	75da      	strb	r2, [r3, #23]
 800f94e:	e7d4      	b.n	800f8fa <RadioSetRxConfig+0x16a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f950:	2e0c      	cmp	r6, #12
 800f952:	f47f af5d 	bne.w	800f810 <RadioSetRxConfig+0x80>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f956:	4a0d      	ldr	r2, [pc, #52]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f958:	2101      	movs	r1, #1
 800f95a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800f95e:	e75b      	b.n	800f818 <RadioSetRxConfig+0x88>
                if( preambleLen < 12 )
 800f960:	f1b9 0f0b 	cmp.w	r9, #11
 800f964:	d803      	bhi.n	800f96e <RadioSetRxConfig+0x1de>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f966:	4613      	mov	r3, r2
 800f968:	220c      	movs	r2, #12
 800f96a:	839a      	strh	r2, [r3, #28]
 800f96c:	e75f      	b.n	800f82e <RadioSetRxConfig+0x9e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f96e:	4b07      	ldr	r3, [pc, #28]	@ (800f98c <RadioSetRxConfig+0x1fc>)
 800f970:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f974:	e75b      	b.n	800f82e <RadioSetRxConfig+0x9e>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800f976:	f240 7036 	movw	r0, #1846	@ 0x736
 800f97a:	f000 f8b9 	bl	800faf0 <SUBGRF_ReadRegister>
 800f97e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800f982:	f240 7036 	movw	r0, #1846	@ 0x736
 800f986:	f000 f89f 	bl	800fac8 <SUBGRF_WriteRegister>
 800f98a:	e785      	b.n	800f898 <RadioSetRxConfig+0x108>
 800f98c:	20000efc 	.word	0x20000efc
 800f990:	200000fc 	.word	0x200000fc
 800f994:	08013270 	.word	0x08013270
 800f998:	080124d8 	.word	0x080124d8

0800f99c <RadioIsChannelFree>:
{
 800f99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f99e:	b08b      	sub	sp, #44	@ 0x2c
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	460f      	mov	r7, r1
 800f9a4:	4616      	mov	r6, r2
 800f9a6:	461d      	mov	r5, r3
    RadioStandby( );
 800f9a8:	f7ff fac8 	bl	800ef3c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	f7ff fdd3 	bl	800f558 <RadioSetModem>
    RadioSetChannel( freq );
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f7ff fcda 	bl	800f36c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9bc:	2400      	movs	r4, #0
 800f9be:	9408      	str	r4, [sp, #32]
 800f9c0:	9407      	str	r4, [sp, #28]
 800f9c2:	9406      	str	r4, [sp, #24]
 800f9c4:	9405      	str	r4, [sp, #20]
 800f9c6:	9404      	str	r4, [sp, #16]
 800f9c8:	9403      	str	r4, [sp, #12]
 800f9ca:	9402      	str	r4, [sp, #8]
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	9301      	str	r3, [sp, #4]
 800f9d0:	9700      	str	r7, [sp, #0]
 800f9d2:	4623      	mov	r3, r4
 800f9d4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800f9d8:	4639      	mov	r1, r7
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7ff fed8 	bl	800f790 <RadioSetRxConfig>
    RadioRx( 0 );
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f7ff fcdb 	bl	800f39c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f9e6:	f7ff fc71 	bl	800f2cc <RadioGetWakeupTime>
 800f9ea:	f7f2 f85f 	bl	8001aac <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f9ee:	f001 fa8f 	bl	8010f10 <UTIL_TIMER_GetCurrentTime>
 800f9f2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f001 fa95 	bl	8010f24 <UTIL_TIMER_GetElapsedTime>
 800f9fa:	42a8      	cmp	r0, r5
 800f9fc:	d206      	bcs.n	800fa0c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f9fe:	2000      	movs	r0, #0
 800fa00:	f7ff fc8e 	bl	800f320 <RadioRssi>
        if( rssi > rssiThresh )
 800fa04:	42b0      	cmp	r0, r6
 800fa06:	ddf5      	ble.n	800f9f4 <RadioIsChannelFree+0x58>
            status = false;
 800fa08:	2400      	movs	r4, #0
 800fa0a:	e000      	b.n	800fa0e <RadioIsChannelFree+0x72>
    bool status = true;
 800fa0c:	2401      	movs	r4, #1
    RadioStandby( );
 800fa0e:	f7ff fa95 	bl	800ef3c <RadioStandby>
}
 800fa12:	4620      	mov	r0, r4
 800fa14:	b00b      	add	sp, #44	@ 0x2c
 800fa16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa18 <RadioInit>:
{
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	b082      	sub	sp, #8
    RadioEvents = events;
 800fa1c:	4b1d      	ldr	r3, [pc, #116]	@ (800fa94 <RadioInit+0x7c>)
 800fa1e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800fa20:	4d1d      	ldr	r5, [pc, #116]	@ (800fa98 <RadioInit+0x80>)
 800fa22:	2400      	movs	r4, #0
 800fa24:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800fa26:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800fa28:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800fa2a:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800fa2c:	481b      	ldr	r0, [pc, #108]	@ (800fa9c <RadioInit+0x84>)
 800fa2e:	f000 fb2f 	bl	8010090 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800fa32:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800fa34:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800fa36:	f000 fa5b 	bl	800fef0 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f000 fd27 	bl	8010490 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800fa42:	2204      	movs	r2, #4
 800fa44:	4621      	mov	r1, r4
 800fa46:	2001      	movs	r0, #1
 800fa48:	f000 fba2 	bl	8010190 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fa4c:	4623      	mov	r3, r4
 800fa4e:	4622      	mov	r2, r4
 800fa50:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fa54:	4608      	mov	r0, r1
 800fa56:	f000 fae2 	bl	801001e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800fa5a:	f7ff fcd7 	bl	800f40c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800fa5e:	4e10      	ldr	r6, [pc, #64]	@ (800faa0 <RadioInit+0x88>)
 800fa60:	9400      	str	r4, [sp, #0]
 800fa62:	4b10      	ldr	r3, [pc, #64]	@ (800faa4 <RadioInit+0x8c>)
 800fa64:	4622      	mov	r2, r4
 800fa66:	f04f 31ff 	mov.w	r1, #4294967295
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f001 fa32 	bl	8010ed4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800fa70:	4d0d      	ldr	r5, [pc, #52]	@ (800faa8 <RadioInit+0x90>)
 800fa72:	9400      	str	r4, [sp, #0]
 800fa74:	4b0d      	ldr	r3, [pc, #52]	@ (800faac <RadioInit+0x94>)
 800fa76:	4622      	mov	r2, r4
 800fa78:	f04f 31ff 	mov.w	r1, #4294967295
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f001 fa29 	bl	8010ed4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800fa82:	4630      	mov	r0, r6
 800fa84:	f001 fa84 	bl	8010f90 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f001 fa81 	bl	8010f90 <UTIL_TIMER_Stop>
}
 800fa8e:	b002      	add	sp, #8
 800fa90:	bd70      	pop	{r4, r5, r6, pc}
 800fa92:	bf00      	nop
 800fa94:	20000f58 	.word	0x20000f58
 800fa98:	20000efc 	.word	0x20000efc
 800fa9c:	0800f2b9 	.word	0x0800f2b9
 800faa0:	20000ee4 	.word	0x20000ee4
 800faa4:	0800ee01 	.word	0x0800ee01
 800faa8:	20000ecc 	.word	0x20000ecc
 800faac:	0800ee29 	.word	0x0800ee29

0800fab0 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 800fab0:	4b01      	ldr	r3, [pc, #4]	@ (800fab8 <SUBGRF_GetOperatingMode+0x8>)
 800fab2:	7818      	ldrb	r0, [r3, #0]
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	2000106a 	.word	0x2000106a

0800fabc <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 800fabc:	4b01      	ldr	r3, [pc, #4]	@ (800fac4 <SUBGRF_GetPacketType+0x8>)
 800fabe:	7818      	ldrb	r0, [r3, #0]
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	20001069 	.word	0x20001069

0800fac8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800fac8:	b510      	push	{r4, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	f88d 1007 	strb.w	r1, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fad0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fad4:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800fad6:	2301      	movs	r3, #1
 800fad8:	f10d 0207 	add.w	r2, sp, #7
 800fadc:	4601      	mov	r1, r0
 800fade:	4803      	ldr	r0, [pc, #12]	@ (800faec <SUBGRF_WriteRegister+0x24>)
 800fae0:	f7f5 fea0 	bl	8005824 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fae4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800fae8:	b002      	add	sp, #8
 800faea:	bd10      	pop	{r4, pc}
 800faec:	20000224 	.word	0x20000224

0800faf0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800faf0:	b510      	push	{r4, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800faf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fafa:	b672      	cpsid	i
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800fafc:	2301      	movs	r3, #1
 800fafe:	f10d 0207 	add.w	r2, sp, #7
 800fb02:	4804      	ldr	r0, [pc, #16]	@ (800fb14 <SUBGRF_ReadRegister+0x24>)
 800fb04:	f7f5 fede 	bl	80058c4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb08:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
    return data;
}
 800fb0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fb10:	b002      	add	sp, #8
 800fb12:	bd10      	pop	{r4, pc}
 800fb14:	20000224 	.word	0x20000224

0800fb18 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fb1c:	f7f2 ffd0 	bl	8002ac0 <RBI_IsDCDC>
 800fb20:	2801      	cmp	r0, #1
 800fb22:	d000      	beq.n	800fb26 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fb24:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800fb26:	f640 1023 	movw	r0, #2339	@ 0x923
 800fb2a:	f7ff ffe1 	bl	800faf0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fb2e:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fb32:	4321      	orrs	r1, r4
 800fb34:	f640 1023 	movw	r0, #2339	@ 0x923
 800fb38:	f7ff ffc6 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800fb3c:	e7f2      	b.n	800fb24 <Radio_SMPS_Set+0xc>

0800fb3e <SUBGRF_SetWhiteningSeed>:
{
 800fb3e:	b510      	push	{r4, lr}
 800fb40:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fb42:	f7ff ffbb 	bl	800fabc <SUBGRF_GetPacketType>
 800fb46:	b100      	cbz	r0, 800fb4a <SUBGRF_SetWhiteningSeed+0xc>
}
 800fb48:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fb4a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800fb4e:	f7ff ffcf 	bl	800faf0 <SUBGRF_ReadRegister>
 800fb52:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fb56:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800fb5a:	4301      	orrs	r1, r0
 800fb5c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800fb60:	f7ff ffb2 	bl	800fac8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fb64:	b2e1      	uxtb	r1, r4
 800fb66:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800fb6a:	f7ff ffad 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800fb6e:	e7eb      	b.n	800fb48 <SUBGRF_SetWhiteningSeed+0xa>

0800fb70 <SUBGRF_WriteRegisters>:
{
 800fb70:	b510      	push	{r4, lr}
 800fb72:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb74:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fb78:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800fb7a:	460a      	mov	r2, r1
 800fb7c:	4601      	mov	r1, r0
 800fb7e:	4803      	ldr	r0, [pc, #12]	@ (800fb8c <SUBGRF_WriteRegisters+0x1c>)
 800fb80:	f7f5 fe50 	bl	8005824 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb84:	f384 8810 	msr	PRIMASK, r4
}
 800fb88:	bd10      	pop	{r4, pc}
 800fb8a:	bf00      	nop
 800fb8c:	20000224 	.word	0x20000224

0800fb90 <SUBGRF_SetSyncWord>:
{
 800fb90:	b508      	push	{r3, lr}
 800fb92:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800fb94:	2208      	movs	r2, #8
 800fb96:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800fb9a:	f7ff ffe9 	bl	800fb70 <SUBGRF_WriteRegisters>
}
 800fb9e:	2000      	movs	r0, #0
 800fba0:	bd08      	pop	{r3, pc}

0800fba2 <SUBGRF_SetCrcSeed>:
{
 800fba2:	b500      	push	{lr}
 800fba4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800fba6:	0a03      	lsrs	r3, r0, #8
 800fba8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800fbac:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800fbb0:	f7ff ff84 	bl	800fabc <SUBGRF_GetPacketType>
 800fbb4:	b110      	cbz	r0, 800fbbc <SUBGRF_SetCrcSeed+0x1a>
}
 800fbb6:	b003      	add	sp, #12
 800fbb8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	a901      	add	r1, sp, #4
 800fbc0:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800fbc4:	f7ff ffd4 	bl	800fb70 <SUBGRF_WriteRegisters>
}
 800fbc8:	e7f5      	b.n	800fbb6 <SUBGRF_SetCrcSeed+0x14>

0800fbca <SUBGRF_SetCrcPolynomial>:
{
 800fbca:	b500      	push	{lr}
 800fbcc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800fbce:	0a03      	lsrs	r3, r0, #8
 800fbd0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800fbd4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800fbd8:	f7ff ff70 	bl	800fabc <SUBGRF_GetPacketType>
 800fbdc:	b110      	cbz	r0, 800fbe4 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800fbde:	b003      	add	sp, #12
 800fbe0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	a901      	add	r1, sp, #4
 800fbe8:	f240 60be 	movw	r0, #1726	@ 0x6be
 800fbec:	f7ff ffc0 	bl	800fb70 <SUBGRF_WriteRegisters>
}
 800fbf0:	e7f5      	b.n	800fbde <SUBGRF_SetCrcPolynomial+0x14>
	...

0800fbf4 <SUBGRF_ReadRegisters>:
{
 800fbf4:	b510      	push	{r4, lr}
 800fbf6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbf8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fbfc:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800fbfe:	460a      	mov	r2, r1
 800fc00:	4601      	mov	r1, r0
 800fc02:	4803      	ldr	r0, [pc, #12]	@ (800fc10 <SUBGRF_ReadRegisters+0x1c>)
 800fc04:	f7f5 fe5e 	bl	80058c4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc08:	f384 8810 	msr	PRIMASK, r4
}
 800fc0c:	bd10      	pop	{r4, pc}
 800fc0e:	bf00      	nop
 800fc10:	20000224 	.word	0x20000224

0800fc14 <SUBGRF_WriteBuffer>:
{
 800fc14:	b510      	push	{r4, lr}
 800fc16:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc18:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fc1c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800fc1e:	460a      	mov	r2, r1
 800fc20:	4601      	mov	r1, r0
 800fc22:	4803      	ldr	r0, [pc, #12]	@ (800fc30 <SUBGRF_WriteBuffer+0x1c>)
 800fc24:	f7f5 ffb0 	bl	8005b88 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc28:	f384 8810 	msr	PRIMASK, r4
}
 800fc2c:	bd10      	pop	{r4, pc}
 800fc2e:	bf00      	nop
 800fc30:	20000224 	.word	0x20000224

0800fc34 <SUBGRF_SetPayload>:
{
 800fc34:	b508      	push	{r3, lr}
 800fc36:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800fc38:	4601      	mov	r1, r0
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	f7ff ffea 	bl	800fc14 <SUBGRF_WriteBuffer>
}
 800fc40:	bd08      	pop	{r3, pc}
	...

0800fc44 <SUBGRF_ReadBuffer>:
{
 800fc44:	b510      	push	{r4, lr}
 800fc46:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc48:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fc4c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800fc4e:	460a      	mov	r2, r1
 800fc50:	4601      	mov	r1, r0
 800fc52:	4803      	ldr	r0, [pc, #12]	@ (800fc60 <SUBGRF_ReadBuffer+0x1c>)
 800fc54:	f7f5 ffe2 	bl	8005c1c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc58:	f384 8810 	msr	PRIMASK, r4
}
 800fc5c:	bd10      	pop	{r4, pc}
 800fc5e:	bf00      	nop
 800fc60:	20000224 	.word	0x20000224

0800fc64 <SUBGRF_WriteCommand>:
{
 800fc64:	b510      	push	{r4, lr}
 800fc66:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc68:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fc6c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800fc6e:	460a      	mov	r2, r1
 800fc70:	4601      	mov	r1, r0
 800fc72:	4803      	ldr	r0, [pc, #12]	@ (800fc80 <SUBGRF_WriteCommand+0x1c>)
 800fc74:	f7f5 fe7a 	bl	800596c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc78:	f384 8810 	msr	PRIMASK, r4
}
 800fc7c:	bd10      	pop	{r4, pc}
 800fc7e:	bf00      	nop
 800fc80:	20000224 	.word	0x20000224

0800fc84 <SUBGRF_SetSleep>:
{
 800fc84:	b510      	push	{r4, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	f7f2 ff0c 	bl	8002aa8 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fc90:	2002      	movs	r0, #2
 800fc92:	f7ff ff41 	bl	800fb18 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fc96:	f004 0304 	and.w	r3, r4, #4
 800fc9a:	f004 0202 	and.w	r2, r4, #2
 800fc9e:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800fca0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fca4:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fca6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800fcaa:	2201      	movs	r2, #1
 800fcac:	f10d 0107 	add.w	r1, sp, #7
 800fcb0:	2084      	movs	r0, #132	@ 0x84
 800fcb2:	f7ff ffd7 	bl	800fc64 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fcb6:	4b02      	ldr	r3, [pc, #8]	@ (800fcc0 <SUBGRF_SetSleep+0x3c>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	701a      	strb	r2, [r3, #0]
}
 800fcbc:	b002      	add	sp, #8
 800fcbe:	bd10      	pop	{r4, pc}
 800fcc0:	2000106a 	.word	0x2000106a

0800fcc4 <SUBGRF_SetStandby>:
{
 800fcc4:	b500      	push	{lr}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800fccc:	2201      	movs	r2, #1
 800fcce:	f10d 0107 	add.w	r1, sp, #7
 800fcd2:	2080      	movs	r0, #128	@ 0x80
 800fcd4:	f7ff ffc6 	bl	800fc64 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800fcd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fcdc:	b92b      	cbnz	r3, 800fcea <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800fcde:	4b05      	ldr	r3, [pc, #20]	@ (800fcf4 <SUBGRF_SetStandby+0x30>)
 800fce0:	2201      	movs	r2, #1
 800fce2:	701a      	strb	r2, [r3, #0]
}
 800fce4:	b003      	add	sp, #12
 800fce6:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800fcea:	4b02      	ldr	r3, [pc, #8]	@ (800fcf4 <SUBGRF_SetStandby+0x30>)
 800fcec:	2202      	movs	r2, #2
 800fcee:	701a      	strb	r2, [r3, #0]
}
 800fcf0:	e7f8      	b.n	800fce4 <SUBGRF_SetStandby+0x20>
 800fcf2:	bf00      	nop
 800fcf4:	2000106a 	.word	0x2000106a

0800fcf8 <SUBGRF_SetTx>:
{
 800fcf8:	b500      	push	{lr}
 800fcfa:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800fcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800fd28 <SUBGRF_SetTx+0x30>)
 800fcfe:	2204      	movs	r2, #4
 800fd00:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fd02:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fd06:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fd0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fd0e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fd12:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800fd16:	2203      	movs	r2, #3
 800fd18:	a901      	add	r1, sp, #4
 800fd1a:	2083      	movs	r0, #131	@ 0x83
 800fd1c:	f7ff ffa2 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800fd20:	b003      	add	sp, #12
 800fd22:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd26:	bf00      	nop
 800fd28:	2000106a 	.word	0x2000106a

0800fd2c <SUBGRF_SendPayload>:
{
 800fd2c:	b510      	push	{r4, lr}
 800fd2e:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800fd30:	f7ff ff80 	bl	800fc34 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800fd34:	4620      	mov	r0, r4
 800fd36:	f7ff ffdf 	bl	800fcf8 <SUBGRF_SetTx>
}
 800fd3a:	bd10      	pop	{r4, pc}

0800fd3c <SUBGRF_SetRx>:
{
 800fd3c:	b500      	push	{lr}
 800fd3e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800fd40:	4b0a      	ldr	r3, [pc, #40]	@ (800fd6c <SUBGRF_SetRx+0x30>)
 800fd42:	2205      	movs	r2, #5
 800fd44:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fd46:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fd4a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fd4e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fd52:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fd56:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fd5a:	2203      	movs	r2, #3
 800fd5c:	a901      	add	r1, sp, #4
 800fd5e:	2082      	movs	r0, #130	@ 0x82
 800fd60:	f7ff ff80 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800fd64:	b003      	add	sp, #12
 800fd66:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd6a:	bf00      	nop
 800fd6c:	2000106a 	.word	0x2000106a

0800fd70 <SUBGRF_GetRandom>:
{
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	b082      	sub	sp, #8
    uint32_t number = 0;
 800fd74:	2600      	movs	r6, #0
 800fd76:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800fd78:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800fd7c:	f7ff feb8 	bl	800faf0 <SUBGRF_ReadRegister>
 800fd80:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800fd82:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 800fd86:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800fd8a:	f7ff fe9d 	bl	800fac8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800fd8e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800fd92:	f7ff fead 	bl	800faf0 <SUBGRF_ReadRegister>
 800fd96:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800fd98:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 800fd9c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800fda0:	f7ff fe92 	bl	800fac8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fda4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800fda8:	f7ff ffc8 	bl	800fd3c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800fdac:	2204      	movs	r2, #4
 800fdae:	eb0d 0102 	add.w	r1, sp, r2
 800fdb2:	f640 0019 	movw	r0, #2073	@ 0x819
 800fdb6:	f7ff ff1d 	bl	800fbf4 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800fdba:	4630      	mov	r0, r6
 800fdbc:	f7ff ff82 	bl	800fcc4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800fdc6:	f7ff fe7f 	bl	800fac8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800fdca:	4621      	mov	r1, r4
 800fdcc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800fdd0:	f7ff fe7a 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800fdd4:	9801      	ldr	r0, [sp, #4]
 800fdd6:	b002      	add	sp, #8
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fddc <SUBGRF_SetRxBoosted>:
{
 800fddc:	b510      	push	{r4, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800fde2:	4b0c      	ldr	r3, [pc, #48]	@ (800fe14 <SUBGRF_SetRxBoosted+0x38>)
 800fde4:	2205      	movs	r2, #5
 800fde6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800fde8:	2197      	movs	r1, #151	@ 0x97
 800fdea:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800fdee:	f7ff fe6b 	bl	800fac8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fdf2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fdf6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fdfa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800fdfe:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fe02:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fe06:	2203      	movs	r2, #3
 800fe08:	a901      	add	r1, sp, #4
 800fe0a:	2082      	movs	r0, #130	@ 0x82
 800fe0c:	f7ff ff2a 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800fe10:	b002      	add	sp, #8
 800fe12:	bd10      	pop	{r4, pc}
 800fe14:	2000106a 	.word	0x2000106a

0800fe18 <SUBGRF_SetRxDutyCycle>:
{
 800fe18:	b500      	push	{lr}
 800fe1a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800fe1c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fe20:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800fe24:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fe28:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800fe2c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800fe30:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fe34:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800fe38:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800fe3c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800fe40:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800fe44:	2206      	movs	r2, #6
 800fe46:	4669      	mov	r1, sp
 800fe48:	2094      	movs	r0, #148	@ 0x94
 800fe4a:	f7ff ff0b 	bl	800fc64 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800fe4e:	4b03      	ldr	r3, [pc, #12]	@ (800fe5c <SUBGRF_SetRxDutyCycle+0x44>)
 800fe50:	2206      	movs	r2, #6
 800fe52:	701a      	strb	r2, [r3, #0]
}
 800fe54:	b003      	add	sp, #12
 800fe56:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe5a:	bf00      	nop
 800fe5c:	2000106a 	.word	0x2000106a

0800fe60 <SUBGRF_SetCad>:
{
 800fe60:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800fe62:	2200      	movs	r2, #0
 800fe64:	4611      	mov	r1, r2
 800fe66:	20c5      	movs	r0, #197	@ 0xc5
 800fe68:	f7ff fefc 	bl	800fc64 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800fe6c:	4b01      	ldr	r3, [pc, #4]	@ (800fe74 <SUBGRF_SetCad+0x14>)
 800fe6e:	2207      	movs	r2, #7
 800fe70:	701a      	strb	r2, [r3, #0]
}
 800fe72:	bd08      	pop	{r3, pc}
 800fe74:	2000106a 	.word	0x2000106a

0800fe78 <SUBGRF_SetTxContinuousWave>:
{
 800fe78:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	20d1      	movs	r0, #209	@ 0xd1
 800fe80:	f7ff fef0 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800fe84:	bd08      	pop	{r3, pc}

0800fe86 <SUBGRF_SetTxInfinitePreamble>:
{
 800fe86:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800fe88:	2200      	movs	r2, #0
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	20d2      	movs	r0, #210	@ 0xd2
 800fe8e:	f7ff fee9 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800fe92:	bd08      	pop	{r3, pc}

0800fe94 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800fe94:	b500      	push	{lr}
 800fe96:	b083      	sub	sp, #12
 800fe98:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	f10d 0107 	add.w	r1, sp, #7
 800fea2:	209f      	movs	r0, #159	@ 0x9f
 800fea4:	f7ff fede 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800fea8:	b003      	add	sp, #12
 800feaa:	f85d fb04 	ldr.w	pc, [sp], #4

0800feae <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800feae:	b500      	push	{lr}
 800feb0:	b083      	sub	sp, #12
 800feb2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800feb6:	2201      	movs	r2, #1
 800feb8:	f10d 0107 	add.w	r1, sp, #7
 800febc:	20a0      	movs	r0, #160	@ 0xa0
 800febe:	f7ff fed1 	bl	800fc64 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800fec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fec6:	2b3f      	cmp	r3, #63	@ 0x3f
 800fec8:	d90f      	bls.n	800feea <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800feca:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800fecc:	2200      	movs	r2, #0
        while( mant > 31 )
 800fece:	e002      	b.n	800fed6 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800fed0:	089b      	lsrs	r3, r3, #2
            exp++;
 800fed2:	3201      	adds	r2, #1
 800fed4:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800fed6:	2b1f      	cmp	r3, #31
 800fed8:	d8fa      	bhi.n	800fed0 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800feda:	00d9      	lsls	r1, r3, #3
 800fedc:	b2c9      	uxtb	r1, r1
 800fede:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800fee0:	b2c9      	uxtb	r1, r1
 800fee2:	f240 7006 	movw	r0, #1798	@ 0x706
 800fee6:	f7ff fdef 	bl	800fac8 <SUBGRF_WriteRegister>
}
 800feea:	b003      	add	sp, #12
 800feec:	f85d fb04 	ldr.w	pc, [sp], #4

0800fef0 <SUBGRF_SetRegulatorMode>:
{
 800fef0:	b500      	push	{lr}
 800fef2:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800fef4:	f7f2 fde4 	bl	8002ac0 <RBI_IsDCDC>
 800fef8:	2801      	cmp	r0, #1
 800fefa:	d00b      	beq.n	800ff14 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800fefc:	2300      	movs	r3, #0
 800fefe:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ff02:	2201      	movs	r2, #1
 800ff04:	f10d 0107 	add.w	r1, sp, #7
 800ff08:	2096      	movs	r0, #150	@ 0x96
 800ff0a:	f7ff feab 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800ff0e:	b003      	add	sp, #12
 800ff10:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800ff14:	2301      	movs	r3, #1
 800ff16:	f88d 3007 	strb.w	r3, [sp, #7]
 800ff1a:	e7f2      	b.n	800ff02 <SUBGRF_SetRegulatorMode+0x12>

0800ff1c <SUBGRF_Calibrate>:
{
 800ff1c:	b500      	push	{lr}
 800ff1e:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ff20:	f000 0340 	and.w	r3, r0, #64	@ 0x40
 800ff24:	f000 0220 	and.w	r2, r0, #32
 800ff28:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ff2a:	f000 0210 	and.w	r2, r0, #16
 800ff2e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ff30:	f000 0208 	and.w	r2, r0, #8
 800ff34:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ff36:	f000 0204 	and.w	r2, r0, #4
 800ff3a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ff3c:	f000 0202 	and.w	r2, r0, #2
 800ff40:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ff42:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ff46:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ff48:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	f10d 0107 	add.w	r1, sp, #7
 800ff52:	2089      	movs	r0, #137	@ 0x89
 800ff54:	f7ff fe86 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800ff58:	b003      	add	sp, #12
 800ff5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ff60 <SUBGRF_CalibrateImage>:
{
 800ff60:	b500      	push	{lr}
 800ff62:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800ff64:	4b1f      	ldr	r3, [pc, #124]	@ (800ffe4 <SUBGRF_CalibrateImage+0x84>)
 800ff66:	4298      	cmp	r0, r3
 800ff68:	d90d      	bls.n	800ff86 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800ff6a:	23e1      	movs	r3, #225	@ 0xe1
 800ff6c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800ff70:	23e9      	movs	r3, #233	@ 0xe9
 800ff72:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800ff76:	2202      	movs	r2, #2
 800ff78:	a901      	add	r1, sp, #4
 800ff7a:	2098      	movs	r0, #152	@ 0x98
 800ff7c:	f7ff fe72 	bl	800fc64 <SUBGRF_WriteCommand>
}
 800ff80:	b003      	add	sp, #12
 800ff82:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800ff86:	4b18      	ldr	r3, [pc, #96]	@ (800ffe8 <SUBGRF_CalibrateImage+0x88>)
 800ff88:	4298      	cmp	r0, r3
 800ff8a:	d906      	bls.n	800ff9a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800ff8c:	23d7      	movs	r3, #215	@ 0xd7
 800ff8e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800ff92:	23db      	movs	r3, #219	@ 0xdb
 800ff94:	f88d 3005 	strb.w	r3, [sp, #5]
 800ff98:	e7ed      	b.n	800ff76 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800ff9a:	4b14      	ldr	r3, [pc, #80]	@ (800ffec <SUBGRF_CalibrateImage+0x8c>)
 800ff9c:	4298      	cmp	r0, r3
 800ff9e:	d906      	bls.n	800ffae <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800ffa0:	23c1      	movs	r3, #193	@ 0xc1
 800ffa2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800ffa6:	23c5      	movs	r3, #197	@ 0xc5
 800ffa8:	f88d 3005 	strb.w	r3, [sp, #5]
 800ffac:	e7e3      	b.n	800ff76 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800ffae:	4b10      	ldr	r3, [pc, #64]	@ (800fff0 <SUBGRF_CalibrateImage+0x90>)
 800ffb0:	4298      	cmp	r0, r3
 800ffb2:	d906      	bls.n	800ffc2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800ffb4:	2375      	movs	r3, #117	@ 0x75
 800ffb6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800ffba:	2381      	movs	r3, #129	@ 0x81
 800ffbc:	f88d 3005 	strb.w	r3, [sp, #5]
 800ffc0:	e7d9      	b.n	800ff76 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800ffc2:	4b0c      	ldr	r3, [pc, #48]	@ (800fff4 <SUBGRF_CalibrateImage+0x94>)
 800ffc4:	4298      	cmp	r0, r3
 800ffc6:	d906      	bls.n	800ffd6 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 800ffc8:	236b      	movs	r3, #107	@ 0x6b
 800ffca:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800ffce:	236f      	movs	r3, #111	@ 0x6f
 800ffd0:	f88d 3005 	strb.w	r3, [sp, #5]
 800ffd4:	e7cf      	b.n	800ff76 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 800ffd6:	2329      	movs	r3, #41	@ 0x29
 800ffd8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 800ffdc:	232b      	movs	r3, #43	@ 0x2b
 800ffde:	f88d 3005 	strb.w	r3, [sp, #5]
 800ffe2:	e7c8      	b.n	800ff76 <SUBGRF_CalibrateImage+0x16>
 800ffe4:	35a4e900 	.word	0x35a4e900
 800ffe8:	32a9f880 	.word	0x32a9f880
 800ffec:	2de54480 	.word	0x2de54480
 800fff0:	1b6b0b00 	.word	0x1b6b0b00
 800fff4:	1954fc40 	.word	0x1954fc40

0800fff8 <SUBGRF_SetPaConfig>:
{
 800fff8:	b500      	push	{lr}
 800fffa:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800fffc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010000:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010004:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8010008:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801000c:	2204      	movs	r2, #4
 801000e:	eb0d 0102 	add.w	r1, sp, r2
 8010012:	2095      	movs	r0, #149	@ 0x95
 8010014:	f7ff fe26 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010018:	b003      	add	sp, #12
 801001a:	f85d fb04 	ldr.w	pc, [sp], #4

0801001e <SUBGRF_SetDioIrqParams>:
{
 801001e:	b500      	push	{lr}
 8010020:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010022:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010026:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801002a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801002e:	0a08      	lsrs	r0, r1, #8
 8010030:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010034:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010038:	0a11      	lsrs	r1, r2, #8
 801003a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801003e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010042:	0a1a      	lsrs	r2, r3, #8
 8010044:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8010048:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801004c:	2208      	movs	r2, #8
 801004e:	4669      	mov	r1, sp
 8010050:	4610      	mov	r0, r2
 8010052:	f7ff fe07 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010056:	b003      	add	sp, #12
 8010058:	f85d fb04 	ldr.w	pc, [sp], #4

0801005c <SUBGRF_SetTcxoMode>:
{
 801005c:	b500      	push	{lr}
 801005e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010060:	f000 0007 	and.w	r0, r0, #7
 8010064:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010068:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801006c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010070:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010074:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8010078:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801007c:	2204      	movs	r2, #4
 801007e:	eb0d 0102 	add.w	r1, sp, r2
 8010082:	2097      	movs	r0, #151	@ 0x97
 8010084:	f7ff fdee 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010088:	b003      	add	sp, #12
 801008a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010090 <SUBGRF_Init>:
{
 8010090:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8010092:	b108      	cbz	r0, 8010098 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8010094:	4a18      	ldr	r2, [pc, #96]	@ (80100f8 <SUBGRF_Init+0x68>)
 8010096:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8010098:	f7f1 fbfc 	bl	8001894 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801009c:	2002      	movs	r0, #2
 801009e:	f7ff fd3b 	bl	800fb18 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80100a2:	2000      	movs	r0, #0
 80100a4:	4b15      	ldr	r3, [pc, #84]	@ (80100fc <SUBGRF_Init+0x6c>)
 80100a6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80100a8:	f7ff fe0c 	bl	800fcc4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80100ac:	f7f2 fd04 	bl	8002ab8 <RBI_IsTCXO>
 80100b0:	2801      	cmp	r0, #1
 80100b2:	d014      	beq.n	80100de <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80100b4:	2120      	movs	r1, #32
 80100b6:	f640 1011 	movw	r0, #2321	@ 0x911
 80100ba:	f7ff fd05 	bl	800fac8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80100be:	2120      	movs	r1, #32
 80100c0:	f640 1012 	movw	r0, #2322	@ 0x912
 80100c4:	f7ff fd00 	bl	800fac8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80100c8:	210e      	movs	r1, #14
 80100ca:	f640 101f 	movw	r0, #2335	@ 0x91f
 80100ce:	f7ff fcfb 	bl	800fac8 <SUBGRF_WriteRegister>
    RBI_Init();
 80100d2:	f7f2 fce5 	bl	8002aa0 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80100d6:	4b0a      	ldr	r3, [pc, #40]	@ (8010100 <SUBGRF_Init+0x70>)
 80100d8:	2201      	movs	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
}
 80100dc:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80100de:	2140      	movs	r1, #64	@ 0x40
 80100e0:	f7ff ffbc 	bl	801005c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80100e4:	2100      	movs	r1, #0
 80100e6:	f640 1011 	movw	r0, #2321	@ 0x911
 80100ea:	f7ff fced 	bl	800fac8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80100ee:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 80100f2:	f7ff ff13 	bl	800ff1c <SUBGRF_Calibrate>
 80100f6:	e7e7      	b.n	80100c8 <SUBGRF_Init+0x38>
 80100f8:	2000105c 	.word	0x2000105c
 80100fc:	20001060 	.word	0x20001060
 8010100:	2000106a 	.word	0x2000106a

08010104 <SUBGRF_SetRfFrequency>:
{
 8010104:	b510      	push	{r4, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801010a:	4b12      	ldr	r3, [pc, #72]	@ (8010154 <SUBGRF_SetRfFrequency+0x50>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	b1d3      	cbz	r3, 8010146 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8010110:	4a11      	ldr	r2, [pc, #68]	@ (8010158 <SUBGRF_SetRfFrequency+0x54>)
 8010112:	2300      	movs	r3, #0
 8010114:	0660      	lsls	r0, r4, #25
 8010116:	09e1      	lsrs	r1, r4, #7
 8010118:	f7f0 fd9a 	bl	8000c50 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801011c:	0e03      	lsrs	r3, r0, #24
 801011e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8010122:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010126:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801012a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801012e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010132:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010136:	2204      	movs	r2, #4
 8010138:	eb0d 0102 	add.w	r1, sp, r2
 801013c:	2086      	movs	r0, #134	@ 0x86
 801013e:	f7ff fd91 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010142:	b002      	add	sp, #8
 8010144:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8010146:	f7ff ff0b 	bl	800ff60 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801014a:	4b02      	ldr	r3, [pc, #8]	@ (8010154 <SUBGRF_SetRfFrequency+0x50>)
 801014c:	2201      	movs	r2, #1
 801014e:	701a      	strb	r2, [r3, #0]
 8010150:	e7de      	b.n	8010110 <SUBGRF_SetRfFrequency+0xc>
 8010152:	bf00      	nop
 8010154:	20001060 	.word	0x20001060
 8010158:	01e84800 	.word	0x01e84800

0801015c <SUBGRF_SetPacketType>:
{
 801015c:	b500      	push	{lr}
 801015e:	b083      	sub	sp, #12
 8010160:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010164:	b2c3      	uxtb	r3, r0
 8010166:	4a09      	ldr	r2, [pc, #36]	@ (801018c <SUBGRF_SetPacketType+0x30>)
 8010168:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801016a:	b143      	cbz	r3, 801017e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801016c:	2201      	movs	r2, #1
 801016e:	f10d 0107 	add.w	r1, sp, #7
 8010172:	208a      	movs	r0, #138	@ 0x8a
 8010174:	f7ff fd76 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010178:	b003      	add	sp, #12
 801017a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801017e:	2100      	movs	r1, #0
 8010180:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8010184:	f7ff fca0 	bl	800fac8 <SUBGRF_WriteRegister>
 8010188:	e7f0      	b.n	801016c <SUBGRF_SetPacketType+0x10>
 801018a:	bf00      	nop
 801018c:	20001069 	.word	0x20001069

08010190 <SUBGRF_SetTxParams>:
{
 8010190:	b570      	push	{r4, r5, r6, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	460c      	mov	r4, r1
 8010196:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8010198:	2801      	cmp	r0, #1
 801019a:	d035      	beq.n	8010208 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801019c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80101a0:	f7ff fca6 	bl	800faf0 <SUBGRF_ReadRegister>
 80101a4:	f040 011e 	orr.w	r1, r0, #30
 80101a8:	b2c9      	uxtb	r1, r1
 80101aa:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80101ae:	f7ff fc8b 	bl	800fac8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80101b2:	2001      	movs	r0, #1
 80101b4:	f7f2 fc88 	bl	8002ac8 <RBI_GetRFOMaxPowerConfig>
 80101b8:	4605      	mov	r5, r0
        if (power > max_power)
 80101ba:	4284      	cmp	r4, r0
 80101bc:	dd00      	ble.n	80101c0 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80101be:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80101c0:	2d14      	cmp	r5, #20
 80101c2:	d054      	beq.n	801026e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80101c4:	2d11      	cmp	r5, #17
 80101c6:	d05c      	beq.n	8010282 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80101c8:	2d0e      	cmp	r5, #14
 80101ca:	d064      	beq.n	8010296 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80101cc:	2301      	movs	r3, #1
 80101ce:	2200      	movs	r2, #0
 80101d0:	2107      	movs	r1, #7
 80101d2:	2004      	movs	r0, #4
 80101d4:	f7ff ff10 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80101d8:	1b64      	subs	r4, r4, r5
 80101da:	3416      	adds	r4, #22
 80101dc:	b265      	sxtb	r5, r4
        if (power < -9)
 80101de:	f115 0f09 	cmn.w	r5, #9
 80101e2:	da01      	bge.n	80101e8 <SUBGRF_SetTxParams+0x58>
            power = -9;
 80101e4:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80101e8:	2138      	movs	r1, #56	@ 0x38
 80101ea:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80101ee:	f7ff fc6b 	bl	800fac8 <SUBGRF_WriteRegister>
    buf[0] = power;
 80101f2:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80101f6:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80101fa:	2202      	movs	r2, #2
 80101fc:	a901      	add	r1, sp, #4
 80101fe:	208e      	movs	r0, #142	@ 0x8e
 8010200:	f7ff fd30 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010204:	b002      	add	sp, #8
 8010206:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8010208:	2000      	movs	r0, #0
 801020a:	f7f2 fc5d 	bl	8002ac8 <RBI_GetRFOMaxPowerConfig>
 801020e:	4605      	mov	r5, r0
        if (power >  max_power)
 8010210:	4284      	cmp	r4, r0
 8010212:	dd00      	ble.n	8010216 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8010214:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8010216:	2d0e      	cmp	r5, #14
 8010218:	d015      	beq.n	8010246 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801021a:	2d0a      	cmp	r5, #10
 801021c:	d01d      	beq.n	801025a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801021e:	2301      	movs	r3, #1
 8010220:	461a      	mov	r2, r3
 8010222:	2100      	movs	r1, #0
 8010224:	2007      	movs	r0, #7
 8010226:	f7ff fee7 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801022a:	1b65      	subs	r5, r4, r5
 801022c:	350e      	adds	r5, #14
 801022e:	b26d      	sxtb	r5, r5
        if (power < -17)
 8010230:	f115 0f11 	cmn.w	r5, #17
 8010234:	da01      	bge.n	801023a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8010236:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801023a:	2118      	movs	r1, #24
 801023c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8010240:	f7ff fc42 	bl	800fac8 <SUBGRF_WriteRegister>
 8010244:	e7d5      	b.n	80101f2 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8010246:	2301      	movs	r3, #1
 8010248:	461a      	mov	r2, r3
 801024a:	2100      	movs	r1, #0
 801024c:	2004      	movs	r0, #4
 801024e:	f7ff fed3 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010252:	1b65      	subs	r5, r4, r5
 8010254:	350e      	adds	r5, #14
 8010256:	b26d      	sxtb	r5, r5
 8010258:	e7ea      	b.n	8010230 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801025a:	2301      	movs	r3, #1
 801025c:	461a      	mov	r2, r3
 801025e:	2100      	movs	r1, #0
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fec9 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8010266:	1b65      	subs	r5, r4, r5
 8010268:	350d      	adds	r5, #13
 801026a:	b26d      	sxtb	r5, r5
 801026c:	e7e0      	b.n	8010230 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801026e:	2301      	movs	r3, #1
 8010270:	2200      	movs	r2, #0
 8010272:	2105      	movs	r1, #5
 8010274:	2003      	movs	r0, #3
 8010276:	f7ff febf 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801027a:	1b65      	subs	r5, r4, r5
 801027c:	3516      	adds	r5, #22
 801027e:	b26d      	sxtb	r5, r5
 8010280:	e7ad      	b.n	80101de <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8010282:	2301      	movs	r3, #1
 8010284:	2200      	movs	r2, #0
 8010286:	2103      	movs	r1, #3
 8010288:	2002      	movs	r0, #2
 801028a:	f7ff feb5 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801028e:	1b65      	subs	r5, r4, r5
 8010290:	3516      	adds	r5, #22
 8010292:	b26d      	sxtb	r5, r5
 8010294:	e7a3      	b.n	80101de <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8010296:	2301      	movs	r3, #1
 8010298:	2200      	movs	r2, #0
 801029a:	2102      	movs	r1, #2
 801029c:	4608      	mov	r0, r1
 801029e:	f7ff feab 	bl	800fff8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80102a2:	1b65      	subs	r5, r4, r5
 80102a4:	350e      	adds	r5, #14
 80102a6:	b26d      	sxtb	r5, r5
 80102a8:	e799      	b.n	80101de <SUBGRF_SetTxParams+0x4e>
	...

080102ac <SUBGRF_SetModulationParams>:
{
 80102ac:	b510      	push	{r4, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80102b2:	2300      	movs	r3, #0
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	9301      	str	r3, [sp, #4]
    if( PacketType != modulationParams->PacketType )
 80102b8:	7800      	ldrb	r0, [r0, #0]
 80102ba:	4b3a      	ldr	r3, [pc, #232]	@ (80103a4 <SUBGRF_SetModulationParams+0xf8>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	4298      	cmp	r0, r3
 80102c0:	d106      	bne.n	80102d0 <SUBGRF_SetModulationParams+0x24>
    switch( modulationParams->PacketType )
 80102c2:	7823      	ldrb	r3, [r4, #0]
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d82c      	bhi.n	8010322 <SUBGRF_SetModulationParams+0x76>
 80102c8:	e8df f003 	tbb	[pc, r3]
 80102cc:	542d4205 	.word	0x542d4205
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80102d0:	f7ff ff44 	bl	801015c <SUBGRF_SetPacketType>
 80102d4:	e7f5      	b.n	80102c2 <SUBGRF_SetModulationParams+0x16>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80102d6:	6862      	ldr	r2, [r4, #4]
 80102d8:	4b33      	ldr	r3, [pc, #204]	@ (80103a8 <SUBGRF_SetModulationParams+0xfc>)
 80102da:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80102de:	0c1a      	lsrs	r2, r3, #16
 80102e0:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80102e4:	0a1a      	lsrs	r2, r3, #8
 80102e6:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80102ea:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80102ee:	7b23      	ldrb	r3, [r4, #12]
 80102f0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80102f4:	7b63      	ldrb	r3, [r4, #13]
 80102f6:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80102fa:	68a1      	ldr	r1, [r4, #8]
 80102fc:	4a2b      	ldr	r2, [pc, #172]	@ (80103ac <SUBGRF_SetModulationParams+0x100>)
 80102fe:	2300      	movs	r3, #0
 8010300:	0648      	lsls	r0, r1, #25
 8010302:	09c9      	lsrs	r1, r1, #7
 8010304:	f7f0 fca4 	bl	8000c50 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8010308:	0c03      	lsrs	r3, r0, #16
 801030a:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801030e:	0a03      	lsrs	r3, r0, #8
 8010310:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8010314:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010318:	2208      	movs	r2, #8
 801031a:	4669      	mov	r1, sp
 801031c:	208b      	movs	r0, #139	@ 0x8b
 801031e:	f7ff fca1 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010322:	b002      	add	sp, #8
 8010324:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010326:	6922      	ldr	r2, [r4, #16]
 8010328:	4b1f      	ldr	r3, [pc, #124]	@ (80103a8 <SUBGRF_SetModulationParams+0xfc>)
 801032a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801032e:	0c1a      	lsrs	r2, r3, #16
 8010330:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010334:	0a1a      	lsrs	r2, r3, #8
 8010336:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801033a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801033e:	7d23      	ldrb	r3, [r4, #20]
 8010340:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010344:	2204      	movs	r2, #4
 8010346:	4669      	mov	r1, sp
 8010348:	208b      	movs	r0, #139	@ 0x8b
 801034a:	f7ff fc8b 	bl	800fc64 <SUBGRF_WriteCommand>
        break;
 801034e:	e7e8      	b.n	8010322 <SUBGRF_SetModulationParams+0x76>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010350:	7e23      	ldrb	r3, [r4, #24]
 8010352:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010356:	7e63      	ldrb	r3, [r4, #25]
 8010358:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801035c:	7ea3      	ldrb	r3, [r4, #26]
 801035e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010362:	7ee3      	ldrb	r3, [r4, #27]
 8010364:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010368:	2204      	movs	r2, #4
 801036a:	4669      	mov	r1, sp
 801036c:	208b      	movs	r0, #139	@ 0x8b
 801036e:	f7ff fc79 	bl	800fc64 <SUBGRF_WriteCommand>
        break;
 8010372:	e7d6      	b.n	8010322 <SUBGRF_SetModulationParams+0x76>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8010374:	6862      	ldr	r2, [r4, #4]
 8010376:	4b0c      	ldr	r3, [pc, #48]	@ (80103a8 <SUBGRF_SetModulationParams+0xfc>)
 8010378:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801037c:	0c1a      	lsrs	r2, r3, #16
 801037e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010382:	0a1a      	lsrs	r2, r3, #8
 8010384:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010388:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801038c:	7b23      	ldrb	r3, [r4, #12]
 801038e:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010392:	7b63      	ldrb	r3, [r4, #13]
 8010394:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010398:	2205      	movs	r2, #5
 801039a:	4669      	mov	r1, sp
 801039c:	208b      	movs	r0, #139	@ 0x8b
 801039e:	f7ff fc61 	bl	800fc64 <SUBGRF_WriteCommand>
}
 80103a2:	e7be      	b.n	8010322 <SUBGRF_SetModulationParams+0x76>
 80103a4:	20001069 	.word	0x20001069
 80103a8:	3d090000 	.word	0x3d090000
 80103ac:	01e84800 	.word	0x01e84800

080103b0 <SUBGRF_SetPacketParams>:
{
 80103b0:	b510      	push	{r4, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80103b6:	2300      	movs	r3, #0
 80103b8:	9301      	str	r3, [sp, #4]
 80103ba:	9302      	str	r3, [sp, #8]
 80103bc:	f88d 300c 	strb.w	r3, [sp, #12]
    if( PacketType != packetParams->PacketType )
 80103c0:	7800      	ldrb	r0, [r0, #0]
 80103c2:	4b31      	ldr	r3, [pc, #196]	@ (8010488 <SUBGRF_SetPacketParams+0xd8>)
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	4298      	cmp	r0, r3
 80103c8:	d106      	bne.n	80103d8 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80103ca:	7823      	ldrb	r3, [r4, #0]
 80103cc:	2b03      	cmp	r3, #3
 80103ce:	d82a      	bhi.n	8010426 <SUBGRF_SetPacketParams+0x76>
 80103d0:	e8df f003 	tbb	[pc, r3]
 80103d4:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80103d8:	f7ff fec0 	bl	801015c <SUBGRF_SetPacketType>
 80103dc:	e7f5      	b.n	80103ca <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80103de:	7a63      	ldrb	r3, [r4, #9]
 80103e0:	2bf1      	cmp	r3, #241	@ 0xf1
 80103e2:	d022      	beq.n	801042a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80103e4:	2bf2      	cmp	r3, #242	@ 0xf2
 80103e6:	d02a      	beq.n	801043e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80103e8:	8862      	ldrh	r2, [r4, #2]
 80103ea:	0a11      	lsrs	r1, r2, #8
 80103ec:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80103f0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80103f4:	7922      	ldrb	r2, [r4, #4]
 80103f6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80103fa:	7962      	ldrb	r2, [r4, #5]
 80103fc:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8010400:	79a2      	ldrb	r2, [r4, #6]
 8010402:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010406:	79e2      	ldrb	r2, [r4, #7]
 8010408:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801040c:	7a22      	ldrb	r2, [r4, #8]
 801040e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8010412:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010416:	7aa3      	ldrb	r3, [r4, #10]
 8010418:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 801041c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801041e:	a901      	add	r1, sp, #4
 8010420:	208c      	movs	r0, #140	@ 0x8c
 8010422:	f7ff fc1f 	bl	800fc64 <SUBGRF_WriteCommand>
}
 8010426:	b004      	add	sp, #16
 8010428:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801042a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801042e:	f7ff fbb8 	bl	800fba2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010432:	f248 0005 	movw	r0, #32773	@ 0x8005
 8010436:	f7ff fbc8 	bl	800fbca <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801043a:	2302      	movs	r3, #2
 801043c:	e7d4      	b.n	80103e8 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801043e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8010442:	f7ff fbae 	bl	800fba2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010446:	f241 0021 	movw	r0, #4129	@ 0x1021
 801044a:	f7ff fbbe 	bl	800fbca <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801044e:	2306      	movs	r3, #6
 8010450:	e7ca      	b.n	80103e8 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010452:	7b23      	ldrb	r3, [r4, #12]
 8010454:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8010458:	2201      	movs	r2, #1
        break;
 801045a:	e7e0      	b.n	801041e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801045c:	89e3      	ldrh	r3, [r4, #14]
 801045e:	0a1a      	lsrs	r2, r3, #8
 8010460:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010464:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010468:	7c23      	ldrb	r3, [r4, #16]
 801046a:	4a08      	ldr	r2, [pc, #32]	@ (801048c <SUBGRF_SetPacketParams+0xdc>)
 801046c:	7013      	strb	r3, [r2, #0]
 801046e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010472:	7c63      	ldrb	r3, [r4, #17]
 8010474:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010478:	7ca3      	ldrb	r3, [r4, #18]
 801047a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801047e:	7ce3      	ldrb	r3, [r4, #19]
 8010480:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8010484:	2206      	movs	r2, #6
        break;
 8010486:	e7ca      	b.n	801041e <SUBGRF_SetPacketParams+0x6e>
 8010488:	20001069 	.word	0x20001069
 801048c:	20001068 	.word	0x20001068

08010490 <SUBGRF_SetBufferBaseAddress>:
{
 8010490:	b500      	push	{lr}
 8010492:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8010494:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8010498:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801049c:	2202      	movs	r2, #2
 801049e:	a901      	add	r1, sp, #4
 80104a0:	208f      	movs	r0, #143	@ 0x8f
 80104a2:	f7ff fbdf 	bl	800fc64 <SUBGRF_WriteCommand>
}
 80104a6:	b003      	add	sp, #12
 80104a8:	f85d fb04 	ldr.w	pc, [sp], #4

080104ac <SUBGRF_ReadCommand>:
{
 80104ac:	b510      	push	{r4, lr}
 80104ae:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104b4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80104b6:	460a      	mov	r2, r1
 80104b8:	4601      	mov	r1, r0
 80104ba:	4803      	ldr	r0, [pc, #12]	@ (80104c8 <SUBGRF_ReadCommand+0x1c>)
 80104bc:	f7f5 faac 	bl	8005a18 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104c0:	f384 8810 	msr	PRIMASK, r4
}
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	bf00      	nop
 80104c8:	20000224 	.word	0x20000224

080104cc <SUBGRF_GetRssiInst>:
{
 80104cc:	b500      	push	{lr}
 80104ce:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80104d0:	2201      	movs	r2, #1
 80104d2:	a901      	add	r1, sp, #4
 80104d4:	2015      	movs	r0, #21
 80104d6:	f7ff ffe9 	bl	80104ac <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80104da:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80104de:	4240      	negs	r0, r0
}
 80104e0:	1040      	asrs	r0, r0, #1
 80104e2:	b003      	add	sp, #12
 80104e4:	f85d fb04 	ldr.w	pc, [sp], #4

080104e8 <SUBGRF_GetRxBufferStatus>:
{
 80104e8:	b530      	push	{r4, r5, lr}
 80104ea:	b083      	sub	sp, #12
 80104ec:	4605      	mov	r5, r0
 80104ee:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80104f0:	2202      	movs	r2, #2
 80104f2:	a901      	add	r1, sp, #4
 80104f4:	2013      	movs	r0, #19
 80104f6:	f7ff ffd9 	bl	80104ac <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80104fa:	f7ff fadf 	bl	800fabc <SUBGRF_GetPacketType>
 80104fe:	2801      	cmp	r0, #1
 8010500:	d007      	beq.n	8010512 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8010502:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010506:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8010508:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801050c:	7023      	strb	r3, [r4, #0]
}
 801050e:	b003      	add	sp, #12
 8010510:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010512:	4b05      	ldr	r3, [pc, #20]	@ (8010528 <SUBGRF_GetRxBufferStatus+0x40>)
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	b2db      	uxtb	r3, r3
 8010518:	2b01      	cmp	r3, #1
 801051a:	d1f2      	bne.n	8010502 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801051c:	f240 7002 	movw	r0, #1794	@ 0x702
 8010520:	f7ff fae6 	bl	800faf0 <SUBGRF_ReadRegister>
 8010524:	7028      	strb	r0, [r5, #0]
 8010526:	e7ef      	b.n	8010508 <SUBGRF_GetRxBufferStatus+0x20>
 8010528:	20001068 	.word	0x20001068

0801052c <SUBGRF_GetPayload>:
{
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	4606      	mov	r6, r0
 8010532:	460c      	mov	r4, r1
 8010534:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 801053c:	f10d 0107 	add.w	r1, sp, #7
 8010540:	4620      	mov	r0, r4
 8010542:	f7ff ffd1 	bl	80104e8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8010546:	7822      	ldrb	r2, [r4, #0]
 8010548:	42aa      	cmp	r2, r5
 801054a:	d902      	bls.n	8010552 <SUBGRF_GetPayload+0x26>
        return 1;
 801054c:	2001      	movs	r0, #1
}
 801054e:	b002      	add	sp, #8
 8010550:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010552:	4631      	mov	r1, r6
 8010554:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010558:	f7ff fb74 	bl	800fc44 <SUBGRF_ReadBuffer>
    return 0;
 801055c:	2000      	movs	r0, #0
 801055e:	e7f6      	b.n	801054e <SUBGRF_GetPayload+0x22>

08010560 <SUBGRF_GetPacketStatus>:
{
 8010560:	b510      	push	{r4, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8010566:	2203      	movs	r2, #3
 8010568:	a901      	add	r1, sp, #4
 801056a:	2014      	movs	r0, #20
 801056c:	f7ff ff9e 	bl	80104ac <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8010570:	f7ff faa4 	bl	800fabc <SUBGRF_GetPacketType>
 8010574:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8010576:	b148      	cbz	r0, 801058c <SUBGRF_GetPacketStatus+0x2c>
 8010578:	2801      	cmp	r0, #1
 801057a:	d018      	beq.n	80105ae <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801057c:	2214      	movs	r2, #20
 801057e:	2100      	movs	r1, #0
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fb20 	bl	8010bc6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8010586:	230f      	movs	r3, #15
 8010588:	7023      	strb	r3, [r4, #0]
}
 801058a:	e00e      	b.n	80105aa <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801058c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010590:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8010592:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010596:	425b      	negs	r3, r3
 8010598:	105b      	asrs	r3, r3, #1
 801059a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801059c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80105a0:	425b      	negs	r3, r3
 80105a2:	105b      	asrs	r3, r3, #1
 80105a4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60a3      	str	r3, [r4, #8]
}
 80105aa:	b002      	add	sp, #8
 80105ac:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80105ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80105b2:	425b      	negs	r3, r3
 80105b4:	105b      	asrs	r3, r3, #1
 80105b6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80105b8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80105bc:	3302      	adds	r3, #2
 80105be:	109b      	asrs	r3, r3, #2
 80105c0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80105c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80105c6:	425b      	negs	r3, r3
 80105c8:	105b      	asrs	r3, r3, #1
 80105ca:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80105cc:	4b01      	ldr	r3, [pc, #4]	@ (80105d4 <SUBGRF_GetPacketStatus+0x74>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6123      	str	r3, [r4, #16]
            break;
 80105d2:	e7ea      	b.n	80105aa <SUBGRF_GetPacketStatus+0x4a>
 80105d4:	20001064 	.word	0x20001064

080105d8 <SUBGRF_SetSwitch>:
{
 80105d8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80105da:	2901      	cmp	r1, #1
 80105dc:	d003      	beq.n	80105e6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80105de:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80105e0:	f7f2 fa62 	bl	8002aa8 <RBI_ConfigRFSwitch>
}
 80105e4:	bd10      	pop	{r4, pc}
 80105e6:	4604      	mov	r4, r0
 80105e8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80105ea:	2c01      	cmp	r4, #1
 80105ec:	d003      	beq.n	80105f6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80105ee:	2c02      	cmp	r4, #2
 80105f0:	d1f6      	bne.n	80105e0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80105f2:	2003      	movs	r0, #3
 80105f4:	e7f4      	b.n	80105e0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80105f6:	2004      	movs	r0, #4
 80105f8:	f7ff fa8e 	bl	800fb18 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80105fc:	2002      	movs	r0, #2
 80105fe:	e7f6      	b.n	80105ee <SUBGRF_SetSwitch+0x16>

08010600 <SUBGRF_SetRfTxPower>:
{
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8010604:	f7f2 fa54 	bl	8002ab0 <RBI_GetTxConfig>
    switch (TxConfig)
 8010608:	b148      	cbz	r0, 801061e <SUBGRF_SetRfTxPower+0x1e>
 801060a:	2802      	cmp	r0, #2
 801060c:	d10d      	bne.n	801062a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801060e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010610:	2202      	movs	r2, #2
 8010612:	4621      	mov	r1, r4
 8010614:	4628      	mov	r0, r5
 8010616:	f7ff fdbb 	bl	8010190 <SUBGRF_SetTxParams>
}
 801061a:	4628      	mov	r0, r5
 801061c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801061e:	2c0f      	cmp	r4, #15
 8010620:	dc01      	bgt.n	8010626 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8010622:	2501      	movs	r5, #1
 8010624:	e7f4      	b.n	8010610 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8010626:	2502      	movs	r5, #2
 8010628:	e7f2      	b.n	8010610 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801062a:	2501      	movs	r5, #1
 801062c:	e7f0      	b.n	8010610 <SUBGRF_SetRfTxPower+0x10>

0801062e <SUBGRF_GetRadioWakeUpTime>:
}
 801062e:	2001      	movs	r0, #1
 8010630:	4770      	bx	lr
	...

08010634 <HAL_SUBGHZ_TxCpltCallback>:
{
 8010634:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8010636:	4b02      	ldr	r3, [pc, #8]	@ (8010640 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2001      	movs	r0, #1
 801063c:	4798      	blx	r3
}
 801063e:	bd08      	pop	{r3, pc}
 8010640:	2000105c 	.word	0x2000105c

08010644 <HAL_SUBGHZ_RxCpltCallback>:
{
 8010644:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8010646:	4b02      	ldr	r3, [pc, #8]	@ (8010650 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2002      	movs	r0, #2
 801064c:	4798      	blx	r3
}
 801064e:	bd08      	pop	{r3, pc}
 8010650:	2000105c 	.word	0x2000105c

08010654 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8010654:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8010656:	4b02      	ldr	r3, [pc, #8]	@ (8010660 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2040      	movs	r0, #64	@ 0x40
 801065c:	4798      	blx	r3
}
 801065e:	bd08      	pop	{r3, pc}
 8010660:	2000105c 	.word	0x2000105c

08010664 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010664:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010666:	b139      	cbz	r1, 8010678 <HAL_SUBGHZ_CADStatusCallback+0x14>
 8010668:	2901      	cmp	r1, #1
 801066a:	d109      	bne.n	8010680 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801066c:	4b05      	ldr	r3, [pc, #20]	@ (8010684 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010674:	4798      	blx	r3
}
 8010676:	e003      	b.n	8010680 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8010678:	4b02      	ldr	r3, [pc, #8]	@ (8010684 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2080      	movs	r0, #128	@ 0x80
 801067e:	4798      	blx	r3
}
 8010680:	bd08      	pop	{r3, pc}
 8010682:	bf00      	nop
 8010684:	2000105c 	.word	0x2000105c

08010688 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8010688:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801068a:	4b03      	ldr	r3, [pc, #12]	@ (8010698 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010692:	4798      	blx	r3
}
 8010694:	bd08      	pop	{r3, pc}
 8010696:	bf00      	nop
 8010698:	2000105c 	.word	0x2000105c

0801069c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801069c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801069e:	4b02      	ldr	r3, [pc, #8]	@ (80106a8 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2020      	movs	r0, #32
 80106a4:	4798      	blx	r3
}
 80106a6:	bd08      	pop	{r3, pc}
 80106a8:	2000105c 	.word	0x2000105c

080106ac <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80106ac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80106ae:	4b02      	ldr	r3, [pc, #8]	@ (80106b8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2004      	movs	r0, #4
 80106b4:	4798      	blx	r3
}
 80106b6:	bd08      	pop	{r3, pc}
 80106b8:	2000105c 	.word	0x2000105c

080106bc <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80106bc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80106be:	4b02      	ldr	r3, [pc, #8]	@ (80106c8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2008      	movs	r0, #8
 80106c4:	4798      	blx	r3
}
 80106c6:	bd08      	pop	{r3, pc}
 80106c8:	2000105c 	.word	0x2000105c

080106cc <HAL_SUBGHZ_HeaderValidCallback>:
{
 80106cc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80106ce:	4b02      	ldr	r3, [pc, #8]	@ (80106d8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2010      	movs	r0, #16
 80106d4:	4798      	blx	r3
}
 80106d6:	bd08      	pop	{r3, pc}
 80106d8:	2000105c 	.word	0x2000105c

080106dc <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80106dc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80106de:	4b03      	ldr	r3, [pc, #12]	@ (80106ec <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80106e6:	4798      	blx	r3
}
 80106e8:	bd08      	pop	{r3, pc}
 80106ea:	bf00      	nop
 80106ec:	2000105c 	.word	0x2000105c

080106f0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80106f0:	4601      	mov	r1, r0
 80106f2:	b180      	cbz	r0, 8010716 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80106f4:	2300      	movs	r3, #0
 80106f6:	2b15      	cmp	r3, #21
 80106f8:	d80c      	bhi.n	8010714 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80106fa:	4a08      	ldr	r2, [pc, #32]	@ (801071c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80106fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010700:	428a      	cmp	r2, r1
 8010702:	d802      	bhi.n	801070a <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010704:	3301      	adds	r3, #1
 8010706:	b2db      	uxtb	r3, r3
 8010708:	e7f5      	b.n	80106f6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 801070a:	4a04      	ldr	r2, [pc, #16]	@ (801071c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801070c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010710:	7918      	ldrb	r0, [r3, #4]
 8010712:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8010714:	e7fe      	b.n	8010714 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 8010716:	201f      	movs	r0, #31
}
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop
 801071c:	08013300 	.word	0x08013300

08010720 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8010720:	b570      	push	{r4, r5, r6, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	4605      	mov	r5, r0
 8010726:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8010728:	4b1d      	ldr	r3, [pc, #116]	@ (80107a0 <SUBGRF_GetCFO+0x80>)
 801072a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801072c:	f640 0007 	movw	r0, #2055	@ 0x807
 8010730:	f7ff f9de 	bl	800faf0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010734:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8010738:	3308      	adds	r3, #8
 801073a:	446b      	add	r3, sp
 801073c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8010740:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8010744:	3301      	adds	r3, #1
 8010746:	409a      	lsls	r2, r3
 8010748:	4b16      	ldr	r3, [pc, #88]	@ (80107a4 <SUBGRF_GetCFO+0x84>)
 801074a:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 801074e:	fbb3 f0f5 	udiv	r0, r3, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010752:	2807      	cmp	r0, #7
 8010754:	d804      	bhi.n	8010760 <SUBGRF_GetCFO+0x40>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8010756:	0040      	lsls	r0, r0, #1
 8010758:	2803      	cmp	r0, #3
 801075a:	d91e      	bls.n	801079a <SUBGRF_GetCFO+0x7a>
 801075c:	2502      	movs	r5, #2
 801075e:	e000      	b.n	8010762 <SUBGRF_GetCFO+0x42>
  uint8_t interp = 1;
 8010760:	2501      	movs	r5, #1
  {
    interp = 4;
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010762:	fb03 f505 	mul.w	r5, r3, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010766:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801076a:	f7ff f9c1 	bl	800faf0 <SUBGRF_ReadRegister>
 801076e:	0206      	lsls	r6, r0, #8
 8010770:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010774:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8010778:	f7ff f9ba 	bl	800faf0 <SUBGRF_ReadRegister>
 801077c:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801077e:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8010782:	d003      	beq.n	801078c <SUBGRF_GetCFO+0x6c>
  {
    cfo_bin |= 0xFFFFF000;
 8010784:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010788:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801078c:	096d      	lsrs	r5, r5, #5
 801078e:	fb05 f000 	mul.w	r0, r5, r0
 8010792:	11c0      	asrs	r0, r0, #7
 8010794:	6020      	str	r0, [r4, #0]
}
 8010796:	b002      	add	sp, #8
 8010798:	bd70      	pop	{r4, r5, r6, pc}
    interp = 4;
 801079a:	2504      	movs	r5, #4
 801079c:	e7e1      	b.n	8010762 <SUBGRF_GetCFO+0x42>
 801079e:	bf00      	nop
 80107a0:	0c0a0804 	.word	0x0c0a0804
 80107a4:	01e84800 	.word	0x01e84800

080107a8 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80107a8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ac:	4770      	bx	lr

080107ae <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80107ae:	f04f 30ff 	mov.w	r0, #4294967295
 80107b2:	4770      	bx	lr

080107b4 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80107b4:	4770      	bx	lr

080107b6 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80107b6:	2000      	movs	r0, #0
 80107b8:	4770      	bx	lr

080107ba <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80107ba:	2000      	movs	r0, #0
 80107bc:	4770      	bx	lr

080107be <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80107be:	4770      	bx	lr

080107c0 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80107c0:	f04f 30ff 	mov.w	r0, #4294967295
 80107c4:	4770      	bx	lr

080107c6 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80107c6:	f04f 30ff 	mov.w	r0, #4294967295
 80107ca:	4770      	bx	lr

080107cc <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80107cc:	4770      	bx	lr

080107ce <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80107ce:	4770      	bx	lr

080107d0 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80107d0:	4770      	bx	lr
	...

080107d4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80107d4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107d6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107da:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80107dc:	4b1e      	ldr	r3, [pc, #120]	@ (8010858 <TRACE_AllocateBufer+0x84>)
 80107de:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80107e2:	8a1a      	ldrh	r2, [r3, #16]
 80107e4:	4596      	cmp	lr, r2
 80107e6:	d011      	beq.n	801080c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80107e8:	4596      	cmp	lr, r2
 80107ea:	d921      	bls.n	8010830 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80107ec:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 80107f0:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80107f2:	4283      	cmp	r3, r0
 80107f4:	d81f      	bhi.n	8010836 <TRACE_AllocateBufer+0x62>
 80107f6:	4282      	cmp	r2, r0
 80107f8:	d91d      	bls.n	8010836 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80107fa:	4b17      	ldr	r3, [pc, #92]	@ (8010858 <TRACE_AllocateBufer+0x84>)
 80107fc:	2401      	movs	r4, #1
 80107fe:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010800:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010804:	2400      	movs	r4, #0
 8010806:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010808:	4613      	mov	r3, r2
 801080a:	e014      	b.n	8010836 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801080c:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8010810:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8010812:	4298      	cmp	r0, r3
 8010814:	d30f      	bcc.n	8010836 <TRACE_AllocateBufer+0x62>
 8010816:	4282      	cmp	r2, r0
 8010818:	d90d      	bls.n	8010836 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801081a:	4b0f      	ldr	r3, [pc, #60]	@ (8010858 <TRACE_AllocateBufer+0x84>)
 801081c:	2401      	movs	r4, #1
 801081e:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010820:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010824:	f04f 0e00 	mov.w	lr, #0
 8010828:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801082c:	4613      	mov	r3, r2
 801082e:	e002      	b.n	8010836 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8010830:	eba2 020e 	sub.w	r2, r2, lr
 8010834:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8010836:	4283      	cmp	r3, r0
 8010838:	d90a      	bls.n	8010850 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801083a:	4a07      	ldr	r2, [pc, #28]	@ (8010858 <TRACE_AllocateBufer+0x84>)
 801083c:	8a53      	ldrh	r3, [r2, #18]
 801083e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010840:	4403      	add	r3, r0
 8010842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010846:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010848:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801084a:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801084e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8010850:	f04f 30ff 	mov.w	r0, #4294967295
 8010854:	e7f9      	b.n	801084a <TRACE_AllocateBufer+0x76>
 8010856:	bf00      	nop
 8010858:	2000166c 	.word	0x2000166c

0801085c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801085c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010860:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8010862:	4a03      	ldr	r2, [pc, #12]	@ (8010870 <TRACE_Lock+0x14>)
 8010864:	8ad3      	ldrh	r3, [r2, #22]
 8010866:	3301      	adds	r3, #1
 8010868:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801086a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801086e:	4770      	bx	lr
 8010870:	2000166c 	.word	0x2000166c

08010874 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010874:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010878:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801087a:	4a03      	ldr	r2, [pc, #12]	@ (8010888 <TRACE_UnLock+0x14>)
 801087c:	8ad3      	ldrh	r3, [r2, #22]
 801087e:	3b01      	subs	r3, #1
 8010880:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010882:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010886:	4770      	bx	lr
 8010888:	2000166c 	.word	0x2000166c

0801088c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801088c:	4b02      	ldr	r3, [pc, #8]	@ (8010898 <TRACE_IsLocked+0xc>)
 801088e:	8ad8      	ldrh	r0, [r3, #22]
}
 8010890:	3800      	subs	r0, #0
 8010892:	bf18      	it	ne
 8010894:	2001      	movne	r0, #1
 8010896:	4770      	bx	lr
 8010898:	2000166c 	.word	0x2000166c

0801089c <UTIL_ADV_TRACE_Init>:
{
 801089c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801089e:	2218      	movs	r2, #24
 80108a0:	2100      	movs	r1, #0
 80108a2:	4807      	ldr	r0, [pc, #28]	@ (80108c0 <UTIL_ADV_TRACE_Init+0x24>)
 80108a4:	f000 f98f 	bl	8010bc6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80108a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80108ac:	2100      	movs	r1, #0
 80108ae:	4805      	ldr	r0, [pc, #20]	@ (80108c4 <UTIL_ADV_TRACE_Init+0x28>)
 80108b0:	f000 f989 	bl	8010bc6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80108b4:	4b04      	ldr	r3, [pc, #16]	@ (80108c8 <UTIL_ADV_TRACE_Init+0x2c>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4804      	ldr	r0, [pc, #16]	@ (80108cc <UTIL_ADV_TRACE_Init+0x30>)
 80108ba:	4798      	blx	r3
}
 80108bc:	bd08      	pop	{r3, pc}
 80108be:	bf00      	nop
 80108c0:	2000166c 	.word	0x2000166c
 80108c4:	2000126c 	.word	0x2000126c
 80108c8:	08012d14 	.word	0x08012d14
 80108cc:	08010a4d 	.word	0x08010a4d

080108d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80108d0:	4b01      	ldr	r3, [pc, #4]	@ (80108d8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80108d2:	6058      	str	r0, [r3, #4]
}
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	2000166c 	.word	0x2000166c

080108dc <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80108dc:	4b01      	ldr	r3, [pc, #4]	@ (80108e4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80108de:	7218      	strb	r0, [r3, #8]
}
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	2000166c 	.word	0x2000166c

080108e8 <TRACE_Send>:
{
 80108e8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ea:	f3ef 8310 	mrs	r3, PRIMASK
 80108ee:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80108f0:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80108f2:	f7ff ffcb 	bl	801088c <TRACE_IsLocked>
 80108f6:	b118      	cbz	r0, 8010900 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108f8:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80108fc:	2000      	movs	r0, #0
}
 80108fe:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010900:	f7ff ffac 	bl	801085c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8010904:	4b1c      	ldr	r3, [pc, #112]	@ (8010978 <TRACE_Send+0x90>)
 8010906:	8a1a      	ldrh	r2, [r3, #16]
 8010908:	8a5b      	ldrh	r3, [r3, #18]
 801090a:	429a      	cmp	r2, r3
 801090c:	d02e      	beq.n	801096c <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801090e:	491a      	ldr	r1, [pc, #104]	@ (8010978 <TRACE_Send+0x90>)
 8010910:	7889      	ldrb	r1, [r1, #2]
 8010912:	2901      	cmp	r1, #1
 8010914:	d017      	beq.n	8010946 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010916:	4a18      	ldr	r2, [pc, #96]	@ (8010978 <TRACE_Send+0x90>)
 8010918:	7892      	ldrb	r2, [r2, #2]
 801091a:	b932      	cbnz	r2, 801092a <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801091c:	4a16      	ldr	r2, [pc, #88]	@ (8010978 <TRACE_Send+0x90>)
 801091e:	8a12      	ldrh	r2, [r2, #16]
 8010920:	4293      	cmp	r3, r2
 8010922:	d91e      	bls.n	8010962 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	4a14      	ldr	r2, [pc, #80]	@ (8010978 <TRACE_Send+0x90>)
 8010928:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801092a:	4e13      	ldr	r6, [pc, #76]	@ (8010978 <TRACE_Send+0x90>)
 801092c:	8a35      	ldrh	r5, [r6, #16]
 801092e:	4b13      	ldr	r3, [pc, #76]	@ (801097c <TRACE_Send+0x94>)
 8010930:	441d      	add	r5, r3
 8010932:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8010936:	f7f1 f89f 	bl	8001a78 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801093a:	4b11      	ldr	r3, [pc, #68]	@ (8010980 <TRACE_Send+0x98>)
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	8ab1      	ldrh	r1, [r6, #20]
 8010940:	4628      	mov	r0, r5
 8010942:	4798      	blx	r3
 8010944:	e7db      	b.n	80108fe <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8010946:	480c      	ldr	r0, [pc, #48]	@ (8010978 <TRACE_Send+0x90>)
 8010948:	8801      	ldrh	r1, [r0, #0]
 801094a:	1a8a      	subs	r2, r1, r2
 801094c:	b292      	uxth	r2, r2
 801094e:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010950:	2102      	movs	r1, #2
 8010952:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010954:	2100      	movs	r1, #0
 8010956:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010958:	2a00      	cmp	r2, #0
 801095a:	d1dc      	bne.n	8010916 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801095c:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801095e:	8201      	strh	r1, [r0, #16]
 8010960:	e7d9      	b.n	8010916 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010962:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 8010966:	4b04      	ldr	r3, [pc, #16]	@ (8010978 <TRACE_Send+0x90>)
 8010968:	829a      	strh	r2, [r3, #20]
 801096a:	e7de      	b.n	801092a <TRACE_Send+0x42>
      TRACE_UnLock();
 801096c:	f7ff ff82 	bl	8010874 <TRACE_UnLock>
 8010970:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010974:	2000      	movs	r0, #0
}
 8010976:	e7c2      	b.n	80108fe <TRACE_Send+0x16>
 8010978:	2000166c 	.word	0x2000166c
 801097c:	2000126c 	.word	0x2000126c
 8010980:	08012d14 	.word	0x08012d14

08010984 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010984:	b408      	push	{r3}
 8010986:	b530      	push	{r4, r5, lr}
 8010988:	b086      	sub	sp, #24
 801098a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 801098c:	2300      	movs	r3, #0
 801098e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8010992:	4b2b      	ldr	r3, [pc, #172]	@ (8010a40 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010994:	7a1b      	ldrb	r3, [r3, #8]
 8010996:	4283      	cmp	r3, r0
 8010998:	d34c      	bcc.n	8010a34 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801099a:	4b29      	ldr	r3, [pc, #164]	@ (8010a40 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801099c:	68db      	ldr	r3, [r3, #12]
 801099e:	4399      	bics	r1, r3
 80109a0:	d14b      	bne.n	8010a3a <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80109a2:	4b27      	ldr	r3, [pc, #156]	@ (8010a40 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	b123      	cbz	r3, 80109b2 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 80109a8:	b11a      	cbz	r2, 80109b2 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80109aa:	f10d 0102 	add.w	r1, sp, #2
 80109ae:	a801      	add	r0, sp, #4
 80109b0:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80109b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80109b4:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80109b6:	4622      	mov	r2, r4
 80109b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80109bc:	4821      	ldr	r0, [pc, #132]	@ (8010a44 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80109be:	f000 fc85 	bl	80112cc <tiny_vsnprintf_like>
 80109c2:	b285      	uxth	r5, r0
  TRACE_Lock();
 80109c4:	f7ff ff4a 	bl	801085c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80109c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80109cc:	18e8      	adds	r0, r5, r3
 80109ce:	4669      	mov	r1, sp
 80109d0:	b280      	uxth	r0, r0
 80109d2:	f7ff feff 	bl	80107d4 <TRACE_AllocateBufer>
 80109d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80109da:	d026      	beq.n	8010a2a <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 80109dc:	2300      	movs	r3, #0
 80109de:	e00d      	b.n	80109fc <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80109e0:	f8bd 2000 	ldrh.w	r2, [sp]
 80109e4:	f103 0118 	add.w	r1, r3, #24
 80109e8:	4469      	add	r1, sp
 80109ea:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80109ee:	4916      	ldr	r1, [pc, #88]	@ (8010a48 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80109f0:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80109f2:	3201      	adds	r2, #1
 80109f4:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80109f8:	3301      	adds	r3, #1
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d8ed      	bhi.n	80109e0 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010a04:	f8bd 0000 	ldrh.w	r0, [sp]
 8010a08:	9b05      	ldr	r3, [sp, #20]
 8010a0a:	4622      	mov	r2, r4
 8010a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010a10:	4c0d      	ldr	r4, [pc, #52]	@ (8010a48 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010a12:	4420      	add	r0, r4
 8010a14:	f000 fc5a 	bl	80112cc <tiny_vsnprintf_like>
    TRACE_UnLock();
 8010a18:	f7ff ff2c 	bl	8010874 <TRACE_UnLock>
    return TRACE_Send();
 8010a1c:	f7ff ff64 	bl	80108e8 <TRACE_Send>
}
 8010a20:	b006      	add	sp, #24
 8010a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a26:	b001      	add	sp, #4
 8010a28:	4770      	bx	lr
  TRACE_UnLock();
 8010a2a:	f7ff ff23 	bl	8010874 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8010a2e:	f06f 0002 	mvn.w	r0, #2
 8010a32:	e7f5      	b.n	8010a20 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8010a34:	f06f 0004 	mvn.w	r0, #4
 8010a38:	e7f2      	b.n	8010a20 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8010a3a:	f06f 0005 	mvn.w	r0, #5
 8010a3e:	e7ef      	b.n	8010a20 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8010a40:	2000166c 	.word	0x2000166c
 8010a44:	2000106c 	.word	0x2000106c
 8010a48:	2000126c 	.word	0x2000126c

08010a4c <TRACE_TxCpltCallback>:
{
 8010a4c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8010a52:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010a54:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8010a56:	4b26      	ldr	r3, [pc, #152]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010a58:	789b      	ldrb	r3, [r3, #2]
 8010a5a:	2b02      	cmp	r3, #2
 8010a5c:	d016      	beq.n	8010a8c <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010a5e:	4a24      	ldr	r2, [pc, #144]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010a60:	8a13      	ldrh	r3, [r2, #16]
 8010a62:	8a90      	ldrh	r0, [r2, #20]
 8010a64:	4403      	add	r3, r0
 8010a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a6a:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8010a6c:	4b20      	ldr	r3, [pc, #128]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010a6e:	8a1a      	ldrh	r2, [r3, #16]
 8010a70:	8a5b      	ldrh	r3, [r3, #18]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d003      	beq.n	8010a7e <TRACE_TxCpltCallback+0x32>
 8010a76:	481e      	ldr	r0, [pc, #120]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010a78:	8ac0      	ldrh	r0, [r0, #22]
 8010a7a:	2801      	cmp	r0, #1
 8010a7c:	d00b      	beq.n	8010a96 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a7e:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010a82:	f7f0 ffff 	bl	8001a84 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010a86:	f7ff fef5 	bl	8010874 <TRACE_UnLock>
}
 8010a8a:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010a8c:	4b18      	ldr	r3, [pc, #96]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010a92:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8010a94:	e7ea      	b.n	8010a6c <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010a96:	4816      	ldr	r0, [pc, #88]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010a98:	7880      	ldrb	r0, [r0, #2]
 8010a9a:	2801      	cmp	r0, #1
 8010a9c:	d014      	beq.n	8010ac8 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010a9e:	4a14      	ldr	r2, [pc, #80]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010aa0:	7892      	ldrb	r2, [r2, #2]
 8010aa2:	b932      	cbnz	r2, 8010ab2 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010aa4:	4a12      	ldr	r2, [pc, #72]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010aa6:	8a12      	ldrh	r2, [r2, #16]
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d91b      	bls.n	8010ae4 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010aac:	1a9b      	subs	r3, r3, r2
 8010aae:	4a10      	ldr	r2, [pc, #64]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010ab0:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010ab4:	8a18      	ldrh	r0, [r3, #16]
 8010ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8010af4 <TRACE_TxCpltCallback+0xa8>)
 8010ab8:	4410      	add	r0, r2
 8010aba:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010abe:	4a0e      	ldr	r2, [pc, #56]	@ (8010af8 <TRACE_TxCpltCallback+0xac>)
 8010ac0:	68d2      	ldr	r2, [r2, #12]
 8010ac2:	8a99      	ldrh	r1, [r3, #20]
 8010ac4:	4790      	blx	r2
 8010ac6:	e7e0      	b.n	8010a8a <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010ac8:	4c09      	ldr	r4, [pc, #36]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010aca:	8820      	ldrh	r0, [r4, #0]
 8010acc:	1a82      	subs	r2, r0, r2
 8010ace:	b292      	uxth	r2, r2
 8010ad0:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010ad2:	2002      	movs	r0, #2
 8010ad4:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d1df      	bne.n	8010a9e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010ade:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010ae0:	8220      	strh	r0, [r4, #16]
 8010ae2:	e7dc      	b.n	8010a9e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010ae4:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 8010ae8:	4b01      	ldr	r3, [pc, #4]	@ (8010af0 <TRACE_TxCpltCallback+0xa4>)
 8010aea:	829a      	strh	r2, [r3, #20]
 8010aec:	e7e1      	b.n	8010ab2 <TRACE_TxCpltCallback+0x66>
 8010aee:	bf00      	nop
 8010af0:	2000166c 	.word	0x2000166c
 8010af4:	2000126c 	.word	0x2000126c
 8010af8:	08012d14 	.word	0x08012d14

08010afc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010afc:	2300      	movs	r3, #0
 8010afe:	4a02      	ldr	r2, [pc, #8]	@ (8010b08 <UTIL_LPM_Init+0xc>)
 8010b00:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010b02:	4a02      	ldr	r2, [pc, #8]	@ (8010b0c <UTIL_LPM_Init+0x10>)
 8010b04:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010b06:	4770      	bx	lr
 8010b08:	20001688 	.word	0x20001688
 8010b0c:	20001684 	.word	0x20001684

08010b10 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b10:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b14:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8010b16:	b141      	cbz	r1, 8010b2a <UTIL_LPM_SetStopMode+0x1a>
 8010b18:	2901      	cmp	r1, #1
 8010b1a:	d103      	bne.n	8010b24 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8010b1c:	4906      	ldr	r1, [pc, #24]	@ (8010b38 <UTIL_LPM_SetStopMode+0x28>)
 8010b1e:	680a      	ldr	r2, [r1, #0]
 8010b20:	4302      	orrs	r2, r0
 8010b22:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b24:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010b28:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8010b2a:	4903      	ldr	r1, [pc, #12]	@ (8010b38 <UTIL_LPM_SetStopMode+0x28>)
 8010b2c:	680a      	ldr	r2, [r1, #0]
 8010b2e:	ea22 0200 	bic.w	r2, r2, r0
 8010b32:	600a      	str	r2, [r1, #0]
      break;
 8010b34:	e7f6      	b.n	8010b24 <UTIL_LPM_SetStopMode+0x14>
 8010b36:	bf00      	nop
 8010b38:	20001688 	.word	0x20001688

08010b3c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b3c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b40:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8010b42:	b141      	cbz	r1, 8010b56 <UTIL_LPM_SetOffMode+0x1a>
 8010b44:	2901      	cmp	r1, #1
 8010b46:	d103      	bne.n	8010b50 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010b48:	4906      	ldr	r1, [pc, #24]	@ (8010b64 <UTIL_LPM_SetOffMode+0x28>)
 8010b4a:	680a      	ldr	r2, [r1, #0]
 8010b4c:	4302      	orrs	r2, r0
 8010b4e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b50:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010b54:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8010b56:	4903      	ldr	r1, [pc, #12]	@ (8010b64 <UTIL_LPM_SetOffMode+0x28>)
 8010b58:	680a      	ldr	r2, [r1, #0]
 8010b5a:	ea22 0200 	bic.w	r2, r2, r0
 8010b5e:	600a      	str	r2, [r1, #0]
      break;
 8010b60:	e7f6      	b.n	8010b50 <UTIL_LPM_SetOffMode+0x14>
 8010b62:	bf00      	nop
 8010b64:	20001684 	.word	0x20001684

08010b68 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8010b68:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b6a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b6e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010b70:	4b0c      	ldr	r3, [pc, #48]	@ (8010ba4 <UTIL_LPM_EnterLowPower+0x3c>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	b13b      	cbz	r3, 8010b86 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010b76:	4d0c      	ldr	r5, [pc, #48]	@ (8010ba8 <UTIL_LPM_EnterLowPower+0x40>)
 8010b78:	682b      	ldr	r3, [r5, #0]
 8010b7a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8010b7c:	686b      	ldr	r3, [r5, #4]
 8010b7e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b80:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010b84:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010b86:	4b09      	ldr	r3, [pc, #36]	@ (8010bac <UTIL_LPM_EnterLowPower+0x44>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	b12b      	cbz	r3, 8010b98 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8010b8c:	4d06      	ldr	r5, [pc, #24]	@ (8010ba8 <UTIL_LPM_EnterLowPower+0x40>)
 8010b8e:	68ab      	ldr	r3, [r5, #8]
 8010b90:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8010b92:	68eb      	ldr	r3, [r5, #12]
 8010b94:	4798      	blx	r3
 8010b96:	e7f3      	b.n	8010b80 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8010b98:	4d03      	ldr	r5, [pc, #12]	@ (8010ba8 <UTIL_LPM_EnterLowPower+0x40>)
 8010b9a:	692b      	ldr	r3, [r5, #16]
 8010b9c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8010b9e:	696b      	ldr	r3, [r5, #20]
 8010ba0:	4798      	blx	r3
 8010ba2:	e7ed      	b.n	8010b80 <UTIL_LPM_EnterLowPower+0x18>
 8010ba4:	20001688 	.word	0x20001688
 8010ba8:	080124e0 	.word	0x080124e0
 8010bac:	20001684 	.word	0x20001684

08010bb0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8010bb0:	e004      	b.n	8010bbc <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8010bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bb6:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8010bba:	461a      	mov	r2, r3
 8010bbc:	1e53      	subs	r3, r2, #1
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	2a00      	cmp	r2, #0
 8010bc2:	d1f6      	bne.n	8010bb2 <UTIL_MEM_cpy_8+0x2>
    }
}
 8010bc4:	4770      	bx	lr

08010bc6 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8010bc6:	e002      	b.n	8010bce <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8010bc8:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8010bcc:	461a      	mov	r2, r3
 8010bce:	1e53      	subs	r3, r2, #1
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	2a00      	cmp	r2, #0
 8010bd4:	d1f8      	bne.n	8010bc8 <UTIL_MEM_set_8+0x2>
  }
}
 8010bd6:	4770      	bx	lr

08010bd8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bd8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bdc:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8010bde:	4a06      	ldr	r2, [pc, #24]	@ (8010bf8 <UTIL_SEQ_SetTask+0x20>)
 8010be0:	6813      	ldr	r3, [r2, #0]
 8010be2:	4303      	orrs	r3, r0
 8010be4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010be6:	4a05      	ldr	r2, [pc, #20]	@ (8010bfc <UTIL_SEQ_SetTask+0x24>)
 8010be8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8010bec:	4303      	orrs	r3, r0
 8010bee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bf2:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8010bf6:	4770      	bx	lr
 8010bf8:	200016b0 	.word	0x200016b0
 8010bfc:	2000168c 	.word	0x2000168c

08010c00 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010c00:	4770      	bx	lr

08010c02 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010c02:	4770      	bx	lr

08010c04 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010c04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c08:	d216      	bcs.n	8010c38 <SEQ_BitPosition+0x34>
 8010c0a:	0400      	lsls	r0, r0, #16
 8010c0c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010c0e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8010c12:	d202      	bcs.n	8010c1a <SEQ_BitPosition+0x16>
 8010c14:	3308      	adds	r3, #8
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010c1a:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8010c1e:	d202      	bcs.n	8010c26 <SEQ_BitPosition+0x22>
 8010c20:	3304      	adds	r3, #4
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010c26:	0f00      	lsrs	r0, r0, #28
 8010c28:	4a04      	ldr	r2, [pc, #16]	@ (8010c3c <SEQ_BitPosition+0x38>)
 8010c2a:	5c10      	ldrb	r0, [r2, r0]
 8010c2c:	4418      	add	r0, r3
 8010c2e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8010c30:	f1c0 001f 	rsb	r0, r0, #31
}
 8010c34:	b2c0      	uxtb	r0, r0
 8010c36:	4770      	bx	lr
uint8_t n = 0U;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	e7e8      	b.n	8010c0e <SEQ_BitPosition+0xa>
 8010c3c:	080133b0 	.word	0x080133b0

08010c40 <UTIL_SEQ_Run>:
{
 8010c40:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8010c42:	4b42      	ldr	r3, [pc, #264]	@ (8010d4c <UTIL_SEQ_Run+0x10c>)
 8010c44:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8010c46:	4020      	ands	r0, r4
 8010c48:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8010c4a:	4b41      	ldr	r3, [pc, #260]	@ (8010d50 <UTIL_SEQ_Run+0x110>)
 8010c4c:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8010c4e:	4b41      	ldr	r3, [pc, #260]	@ (8010d54 <UTIL_SEQ_Run+0x114>)
 8010c50:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8010c52:	4941      	ldr	r1, [pc, #260]	@ (8010d58 <UTIL_SEQ_Run+0x118>)
 8010c54:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8010c56:	4941      	ldr	r1, [pc, #260]	@ (8010d5c <UTIL_SEQ_Run+0x11c>)
 8010c58:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010c5a:	e02f      	b.n	8010cbc <UTIL_SEQ_Run+0x7c>
      counter++;
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	e034      	b.n	8010cca <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010c60:	4d3f      	ldr	r5, [pc, #252]	@ (8010d60 <UTIL_SEQ_Run+0x120>)
 8010c62:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010c66:	6868      	ldr	r0, [r5, #4]
 8010c68:	4010      	ands	r0, r2
 8010c6a:	f7ff ffcb 	bl	8010c04 <SEQ_BitPosition>
 8010c6e:	4e3d      	ldr	r6, [pc, #244]	@ (8010d64 <UTIL_SEQ_Run+0x124>)
 8010c70:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010c72:	686a      	ldr	r2, [r5, #4]
 8010c74:	2301      	movs	r3, #1
 8010c76:	fa03 f000 	lsl.w	r0, r3, r0
 8010c7a:	ea22 0200 	bic.w	r2, r2, r0
 8010c7e:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c80:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010c84:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010c86:	6832      	ldr	r2, [r6, #0]
 8010c88:	fa03 f202 	lsl.w	r2, r3, r2
 8010c8c:	43d6      	mvns	r6, r2
 8010c8e:	4d30      	ldr	r5, [pc, #192]	@ (8010d50 <UTIL_SEQ_Run+0x110>)
 8010c90:	6828      	ldr	r0, [r5, #0]
 8010c92:	ea20 0202 	bic.w	r2, r0, r2
 8010c96:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d12d      	bne.n	8010cf8 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c9c:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8010ca0:	4b30      	ldr	r3, [pc, #192]	@ (8010d64 <UTIL_SEQ_Run+0x124>)
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	4b30      	ldr	r3, [pc, #192]	@ (8010d68 <UTIL_SEQ_Run+0x128>)
 8010ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010caa:	4798      	blx	r3
    local_taskset = TaskSet;
 8010cac:	4b28      	ldr	r3, [pc, #160]	@ (8010d50 <UTIL_SEQ_Run+0x110>)
 8010cae:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8010cb0:	4b28      	ldr	r3, [pc, #160]	@ (8010d54 <UTIL_SEQ_Run+0x114>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8010cb4:	4928      	ldr	r1, [pc, #160]	@ (8010d58 <UTIL_SEQ_Run+0x118>)
 8010cb6:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 8010cb8:	4928      	ldr	r1, [pc, #160]	@ (8010d5c <UTIL_SEQ_Run+0x11c>)
 8010cba:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010cbc:	4002      	ands	r2, r0
 8010cbe:	4d23      	ldr	r5, [pc, #140]	@ (8010d4c <UTIL_SEQ_Run+0x10c>)
 8010cc0:	682d      	ldr	r5, [r5, #0]
 8010cc2:	422a      	tst	r2, r5
 8010cc4:	d020      	beq.n	8010d08 <UTIL_SEQ_Run+0xc8>
 8010cc6:	400b      	ands	r3, r1
 8010cc8:	d11e      	bne.n	8010d08 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010cca:	4a25      	ldr	r2, [pc, #148]	@ (8010d60 <UTIL_SEQ_Run+0x120>)
 8010ccc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010cd0:	4002      	ands	r2, r0
 8010cd2:	422a      	tst	r2, r5
 8010cd4:	d0c2      	beq.n	8010c5c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8010cd6:	4922      	ldr	r1, [pc, #136]	@ (8010d60 <UTIL_SEQ_Run+0x120>)
 8010cd8:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8010cdc:	4002      	ands	r2, r0
 8010cde:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ce4:	6849      	ldr	r1, [r1, #4]
 8010ce6:	4211      	tst	r1, r2
 8010ce8:	d1ba      	bne.n	8010c60 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010cea:	491d      	ldr	r1, [pc, #116]	@ (8010d60 <UTIL_SEQ_Run+0x120>)
 8010cec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf4:	6048      	str	r0, [r1, #4]
 8010cf6:	e7b3      	b.n	8010c60 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	4819      	ldr	r0, [pc, #100]	@ (8010d60 <UTIL_SEQ_Run+0x120>)
 8010cfc:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8010d00:	4032      	ands	r2, r6
 8010d02:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010d06:	e7c7      	b.n	8010c98 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010d08:	4b16      	ldr	r3, [pc, #88]	@ (8010d64 <UTIL_SEQ_Run+0x124>)
 8010d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010d10:	f7ff ff76 	bl	8010c00 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d14:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d18:	b672      	cpsid	i
  local_taskset = TaskSet;
 8010d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010d50 <UTIL_SEQ_Run+0x110>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8010d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8010d54 <UTIL_SEQ_Run+0x114>)
 8010d20:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8010d22:	4a0d      	ldr	r2, [pc, #52]	@ (8010d58 <UTIL_SEQ_Run+0x118>)
 8010d24:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010d26:	4013      	ands	r3, r2
 8010d28:	4a08      	ldr	r2, [pc, #32]	@ (8010d4c <UTIL_SEQ_Run+0x10c>)
 8010d2a:	6812      	ldr	r2, [r2, #0]
 8010d2c:	4213      	tst	r3, r2
 8010d2e:	d103      	bne.n	8010d38 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8010d30:	4b0a      	ldr	r3, [pc, #40]	@ (8010d5c <UTIL_SEQ_Run+0x11c>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	420b      	tst	r3, r1
 8010d36:	d006      	beq.n	8010d46 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d38:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8010d3c:	f7ff ff61 	bl	8010c02 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8010d40:	4b02      	ldr	r3, [pc, #8]	@ (8010d4c <UTIL_SEQ_Run+0x10c>)
 8010d42:	601c      	str	r4, [r3, #0]
}
 8010d44:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8010d46:	f7f0 fe1d 	bl	8001984 <UTIL_SEQ_Idle>
 8010d4a:	e7f5      	b.n	8010d38 <UTIL_SEQ_Run+0xf8>
 8010d4c:	20000100 	.word	0x20000100
 8010d50:	200016b0 	.word	0x200016b0
 8010d54:	200016ac 	.word	0x200016ac
 8010d58:	20000104 	.word	0x20000104
 8010d5c:	200016a8 	.word	0x200016a8
 8010d60:	2000168c 	.word	0x2000168c
 8010d64:	200016a4 	.word	0x200016a4
 8010d68:	20001694 	.word	0x20001694

08010d6c <UTIL_SEQ_RegTask>:
{
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d70:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d74:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010d76:	f7ff ff45 	bl	8010c04 <SEQ_BitPosition>
 8010d7a:	4b03      	ldr	r3, [pc, #12]	@ (8010d88 <UTIL_SEQ_RegTask+0x1c>)
 8010d7c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d80:	f385 8810 	msr	PRIMASK, r5
}
 8010d84:	bd38      	pop	{r3, r4, r5, pc}
 8010d86:	bf00      	nop
 8010d88:	20001694 	.word	0x20001694

08010d8c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	b082      	sub	sp, #8
 8010d90:	f10d 0c08 	add.w	ip, sp, #8
 8010d94:	e90c 0006 	stmdb	ip, {r1, r2}
 8010d98:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	6002      	str	r2, [r0, #0]
 8010d9e:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8010da0:	440b      	add	r3, r1
 8010da2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010da4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010da8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010dac:	440a      	add	r2, r1
 8010dae:	b291      	uxth	r1, r2
 8010db0:	b212      	sxth	r2, r2
 8010db2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8010db4:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8010db8:	db04      	blt.n	8010dc4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8010dba:	3301      	adds	r3, #1
 8010dbc:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8010dbe:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8010dc2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8010dc4:	b002      	add	sp, #8
 8010dc6:	b002      	add	sp, #8
 8010dc8:	4770      	bx	lr

08010dca <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8010dca:	b082      	sub	sp, #8
 8010dcc:	b082      	sub	sp, #8
 8010dce:	f10d 0c08 	add.w	ip, sp, #8
 8010dd2:	e90c 0006 	stmdb	ip, {r1, r2}
 8010dd6:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8010dd8:	2200      	movs	r2, #0
 8010dda:	6002      	str	r2, [r0, #0]
 8010ddc:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8010dde:	1acb      	subs	r3, r1, r3
 8010de0:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010de2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010de6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010dea:	1a52      	subs	r2, r2, r1
 8010dec:	b291      	uxth	r1, r2
 8010dee:	b212      	sxth	r2, r2
 8010df0:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8010df2:	2a00      	cmp	r2, #0
 8010df4:	db02      	blt.n	8010dfc <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8010df6:	b002      	add	sp, #8
 8010df8:	b002      	add	sp, #8
 8010dfa:	4770      	bx	lr
    c.Seconds--;
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8010e00:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8010e04:	8081      	strh	r1, [r0, #4]
  return c;
 8010e06:	e7f6      	b.n	8010df6 <SysTimeSub+0x2c>

08010e08 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8010e08:	b530      	push	{r4, r5, lr}
 8010e0a:	b089      	sub	sp, #36	@ 0x24
 8010e0c:	ac02      	add	r4, sp, #8
 8010e0e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010e12:	2300      	movs	r3, #0
 8010e14:	9304      	str	r3, [sp, #16]
 8010e16:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010e1a:	4d0b      	ldr	r5, [pc, #44]	@ (8010e48 <SysTimeSet+0x40>)
 8010e1c:	692b      	ldr	r3, [r5, #16]
 8010e1e:	a805      	add	r0, sp, #20
 8010e20:	4798      	blx	r3
 8010e22:	4603      	mov	r3, r0
 8010e24:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8010e26:	9a05      	ldr	r2, [sp, #20]
 8010e28:	9200      	str	r2, [sp, #0]
 8010e2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010e2e:	a806      	add	r0, sp, #24
 8010e30:	f7ff ffcb 	bl	8010dca <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8010e34:	682b      	ldr	r3, [r5, #0]
 8010e36:	9806      	ldr	r0, [sp, #24]
 8010e38:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8010e3a:	68ab      	ldr	r3, [r5, #8]
 8010e3c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010e40:	4798      	blx	r3
}
 8010e42:	b009      	add	sp, #36	@ 0x24
 8010e44:	bd30      	pop	{r4, r5, pc}
 8010e46:	bf00      	nop
 8010e48:	08012cd4 	.word	0x08012cd4

08010e4c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8010e4c:	b530      	push	{r4, r5, lr}
 8010e4e:	b087      	sub	sp, #28
 8010e50:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010e52:	2300      	movs	r3, #0
 8010e54:	9304      	str	r3, [sp, #16]
 8010e56:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8010e5a:	6003      	str	r3, [r0, #0]
 8010e5c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010e5e:	4d0b      	ldr	r5, [pc, #44]	@ (8010e8c <SysTimeGet+0x40>)
 8010e60:	692b      	ldr	r3, [r5, #16]
 8010e62:	a805      	add	r0, sp, #20
 8010e64:	4798      	blx	r3
 8010e66:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010e68:	68eb      	ldr	r3, [r5, #12]
 8010e6a:	4798      	blx	r3
 8010e6c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010e70:	686b      	ldr	r3, [r5, #4]
 8010e72:	4798      	blx	r3
 8010e74:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8010e76:	9b05      	ldr	r3, [sp, #20]
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	9b04      	ldr	r3, [sp, #16]
 8010e7c:	aa02      	add	r2, sp, #8
 8010e7e:	ca06      	ldmia	r2, {r1, r2}
 8010e80:	4620      	mov	r0, r4
 8010e82:	f7ff ff83 	bl	8010d8c <SysTimeAdd>

  return sysTime;
}
 8010e86:	4620      	mov	r0, r4
 8010e88:	b007      	add	sp, #28
 8010e8a:	bd30      	pop	{r4, r5, pc}
 8010e8c:	08012cd4 	.word	0x08012cd4

08010e90 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8010e90:	b530      	push	{r4, r5, lr}
 8010e92:	b083      	sub	sp, #12
 8010e94:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010e96:	2300      	movs	r3, #0
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010e9e:	4b06      	ldr	r3, [pc, #24]	@ (8010eb8 <SysTimeGetMcuTime+0x28>)
 8010ea0:	691b      	ldr	r3, [r3, #16]
 8010ea2:	466d      	mov	r5, sp
 8010ea4:	a801      	add	r0, sp, #4
 8010ea6:	4798      	blx	r3
 8010ea8:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8010eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010eae:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	b003      	add	sp, #12
 8010eb6:	bd30      	pop	{r4, r5, pc}
 8010eb8:	08012cd4 	.word	0x08012cd4

08010ebc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010ebc:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010ebe:	4b03      	ldr	r3, [pc, #12]	@ (8010ecc <UTIL_TIMER_Init+0x10>)
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8010ec4:	4b02      	ldr	r3, [pc, #8]	@ (8010ed0 <UTIL_TIMER_Init+0x14>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4798      	blx	r3
}
 8010eca:	bd08      	pop	{r3, pc}
 8010ecc:	200016b4 	.word	0x200016b4
 8010ed0:	08012ce8 	.word	0x08012ce8

08010ed4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8010ed4:	b1a8      	cbz	r0, 8010f02 <UTIL_TIMER_Create+0x2e>
{
 8010ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed8:	4617      	mov	r7, r2
 8010eda:	461e      	mov	r6, r3
 8010edc:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010ede:	b193      	cbz	r3, 8010f06 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010ee0:	2500      	movs	r5, #0
 8010ee2:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010ee4:	4b09      	ldr	r3, [pc, #36]	@ (8010f0c <UTIL_TIMER_Create+0x38>)
 8010ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ee8:	4608      	mov	r0, r1
 8010eea:	4798      	blx	r3
 8010eec:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010eee:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010ef0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010ef2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8010ef4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8010ef6:	9b06      	ldr	r3, [sp, #24]
 8010ef8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010efa:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010efc:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8010efe:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8010f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8010f02:	2001      	movs	r0, #1
}
 8010f04:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8010f06:	2001      	movs	r0, #1
 8010f08:	e7fa      	b.n	8010f00 <UTIL_TIMER_Create+0x2c>
 8010f0a:	bf00      	nop
 8010f0c:	08012ce8 	.word	0x08012ce8

08010f10 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010f10:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010f12:	4c03      	ldr	r4, [pc, #12]	@ (8010f20 <UTIL_TIMER_GetCurrentTime+0x10>)
 8010f14:	69e3      	ldr	r3, [r4, #28]
 8010f16:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010f18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010f1a:	4798      	blx	r3
}
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	bf00      	nop
 8010f20:	08012ce8 	.word	0x08012ce8

08010f24 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010f24:	b570      	push	{r4, r5, r6, lr}
 8010f26:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010f28:	4d05      	ldr	r5, [pc, #20]	@ (8010f40 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010f2a:	69eb      	ldr	r3, [r5, #28]
 8010f2c:	4798      	blx	r3
 8010f2e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010f30:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010f32:	4630      	mov	r0, r6
 8010f34:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010f36:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8010f38:	1a20      	subs	r0, r4, r0
 8010f3a:	4798      	blx	r3
}
 8010f3c:	bd70      	pop	{r4, r5, r6, pc}
 8010f3e:	bf00      	nop
 8010f40:	08012ce8 	.word	0x08012ce8

08010f44 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010f44:	4b05      	ldr	r3, [pc, #20]	@ (8010f5c <TimerExists+0x18>)
 8010f46:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8010f48:	e000      	b.n	8010f4c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8010f4a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8010f4c:	b11b      	cbz	r3, 8010f56 <TimerExists+0x12>
    if( cur == TimerObject )
 8010f4e:	4283      	cmp	r3, r0
 8010f50:	d1fb      	bne.n	8010f4a <TimerExists+0x6>
      return true;
 8010f52:	2001      	movs	r0, #1
  }
  return false;
}
 8010f54:	4770      	bx	lr
  return false;
 8010f56:	2000      	movs	r0, #0
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	200016b4 	.word	0x200016b4

08010f60 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f62:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010f64:	4e09      	ldr	r6, [pc, #36]	@ (8010f8c <TimerSetTimeout+0x2c>)
 8010f66:	6a33      	ldr	r3, [r6, #32]
 8010f68:	4798      	blx	r3
 8010f6a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010f70:	6827      	ldr	r7, [r4, #0]
 8010f72:	69b6      	ldr	r6, [r6, #24]
 8010f74:	47b0      	blx	r6
 8010f76:	4428      	add	r0, r5
 8010f78:	4287      	cmp	r7, r0
 8010f7a:	d202      	bcs.n	8010f82 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010f7c:	47b0      	blx	r6
 8010f7e:	4428      	add	r0, r5
 8010f80:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010f82:	4b02      	ldr	r3, [pc, #8]	@ (8010f8c <TimerSetTimeout+0x2c>)
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	6820      	ldr	r0, [r4, #0]
 8010f88:	4798      	blx	r3
}
 8010f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f8c:	08012ce8 	.word	0x08012ce8

08010f90 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010f90:	b368      	cbz	r0, 8010fee <UTIL_TIMER_Stop+0x5e>
{
 8010f92:	b510      	push	{r4, lr}
 8010f94:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010f9a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010f9c:	4b15      	ldr	r3, [pc, #84]	@ (8010ff4 <UTIL_TIMER_Stop+0x64>)
 8010f9e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8010fa4:	b1e1      	cbz	r1, 8010fe0 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010faa:	4288      	cmp	r0, r1
 8010fac:	d006      	beq.n	8010fbc <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010fae:	460b      	mov	r3, r1
        while( cur != NULL )
 8010fb0:	b1b3      	cbz	r3, 8010fe0 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d011      	beq.n	8010fda <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010fb6:	4619      	mov	r1, r3
            cur = cur->Next;
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	e7f9      	b.n	8010fb0 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010fbc:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010fbe:	6948      	ldr	r0, [r1, #20]
 8010fc0:	b120      	cbz	r0, 8010fcc <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8010ff4 <UTIL_TIMER_Stop+0x64>)
 8010fc4:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010fc6:	f7ff ffcb 	bl	8010f60 <TimerSetTimeout>
 8010fca:	e009      	b.n	8010fe0 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff8 <UTIL_TIMER_Stop+0x68>)
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	4798      	blx	r3
            TimerListHead = NULL;
 8010fd2:	4b08      	ldr	r3, [pc, #32]	@ (8010ff4 <UTIL_TIMER_Stop+0x64>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	601a      	str	r2, [r3, #0]
 8010fd8:	e002      	b.n	8010fe0 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010fda:	695b      	ldr	r3, [r3, #20]
 8010fdc:	b123      	cbz	r3, 8010fe8 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010fde:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fe0:	f384 8810 	msr	PRIMASK, r4
}
 8010fe4:	2000      	movs	r0, #0
}
 8010fe6:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	614b      	str	r3, [r1, #20]
 8010fec:	e7f8      	b.n	8010fe0 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010fee:	2001      	movs	r0, #1
}
 8010ff0:	4770      	bx	lr
 8010ff2:	bf00      	nop
 8010ff4:	200016b4 	.word	0x200016b4
 8010ff8:	08012ce8 	.word	0x08012ce8

08010ffc <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010ffc:	4b09      	ldr	r3, [pc, #36]	@ (8011024 <TimerInsertTimer+0x28>)
 8010ffe:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011000:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8011002:	e001      	b.n	8011008 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011004:	461a      	mov	r2, r3
        next = next->Next;
 8011006:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011008:	6951      	ldr	r1, [r2, #20]
 801100a:	b139      	cbz	r1, 801101c <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 801100c:	6819      	ldr	r1, [r3, #0]
 801100e:	f8d0 c000 	ldr.w	ip, [r0]
 8011012:	458c      	cmp	ip, r1
 8011014:	d8f6      	bhi.n	8011004 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011016:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011018:	6143      	str	r3, [r0, #20]
        return;
 801101a:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 801101c:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801101e:	2300      	movs	r3, #0
 8011020:	6143      	str	r3, [r0, #20]
}
 8011022:	4770      	bx	lr
 8011024:	200016b4 	.word	0x200016b4

08011028 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011028:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801102a:	4b05      	ldr	r3, [pc, #20]	@ (8011040 <TimerInsertNewHeadTimer+0x18>)
 801102c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801102e:	b10b      	cbz	r3, 8011034 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8011030:	2200      	movs	r2, #0
 8011032:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011034:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8011036:	4b02      	ldr	r3, [pc, #8]	@ (8011040 <TimerInsertNewHeadTimer+0x18>)
 8011038:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801103a:	f7ff ff91 	bl	8010f60 <TimerSetTimeout>
}
 801103e:	bd08      	pop	{r3, pc}
 8011040:	200016b4 	.word	0x200016b4

08011044 <UTIL_TIMER_Start>:
{
 8011044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011046:	2800      	cmp	r0, #0
 8011048:	d036      	beq.n	80110b8 <UTIL_TIMER_Start+0x74>
 801104a:	4604      	mov	r4, r0
 801104c:	f7ff ff7a 	bl	8010f44 <TimerExists>
 8011050:	2800      	cmp	r0, #0
 8011052:	d134      	bne.n	80110be <UTIL_TIMER_Start+0x7a>
 8011054:	7a65      	ldrb	r5, [r4, #9]
 8011056:	2d00      	cmp	r5, #0
 8011058:	d133      	bne.n	80110c2 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801105a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801105e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8011060:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011062:	4b19      	ldr	r3, [pc, #100]	@ (80110c8 <UTIL_TIMER_Start+0x84>)
 8011064:	6a1b      	ldr	r3, [r3, #32]
 8011066:	4798      	blx	r3
    if( ticks < minValue )
 8011068:	4287      	cmp	r7, r0
 801106a:	d300      	bcc.n	801106e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 801106c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 801106e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8011070:	2300      	movs	r3, #0
 8011072:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8011074:	2201      	movs	r2, #1
 8011076:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011078:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801107a:	4b14      	ldr	r3, [pc, #80]	@ (80110cc <UTIL_TIMER_Start+0x88>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	b183      	cbz	r3, 80110a2 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8011080:	4b11      	ldr	r3, [pc, #68]	@ (80110c8 <UTIL_TIMER_Start+0x84>)
 8011082:	699b      	ldr	r3, [r3, #24]
 8011084:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	4418      	add	r0, r3
 801108a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801108c:	4b0f      	ldr	r3, [pc, #60]	@ (80110cc <UTIL_TIMER_Start+0x88>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4298      	cmp	r0, r3
 8011094:	d20c      	bcs.n	80110b0 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8011096:	4620      	mov	r0, r4
 8011098:	f7ff ffc6 	bl	8011028 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801109c:	f386 8810 	msr	PRIMASK, r6
}
 80110a0:	e00b      	b.n	80110ba <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80110a2:	4b09      	ldr	r3, [pc, #36]	@ (80110c8 <UTIL_TIMER_Start+0x84>)
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80110a8:	4620      	mov	r0, r4
 80110aa:	f7ff ffbd 	bl	8011028 <TimerInsertNewHeadTimer>
 80110ae:	e7f5      	b.n	801109c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80110b0:	4620      	mov	r0, r4
 80110b2:	f7ff ffa3 	bl	8010ffc <TimerInsertTimer>
 80110b6:	e7f1      	b.n	801109c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80110b8:	2501      	movs	r5, #1
}
 80110ba:	4628      	mov	r0, r5
 80110bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80110be:	2501      	movs	r5, #1
 80110c0:	e7fb      	b.n	80110ba <UTIL_TIMER_Start+0x76>
 80110c2:	2501      	movs	r5, #1
 80110c4:	e7f9      	b.n	80110ba <UTIL_TIMER_Start+0x76>
 80110c6:	bf00      	nop
 80110c8:	08012ce8 	.word	0x08012ce8
 80110cc:	200016b4 	.word	0x200016b4

080110d0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80110d0:	b198      	cbz	r0, 80110fa <UTIL_TIMER_SetPeriod+0x2a>
{
 80110d2:	b510      	push	{r4, lr}
 80110d4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80110d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011100 <UTIL_TIMER_SetPeriod+0x30>)
 80110d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110da:	4608      	mov	r0, r1
 80110dc:	4798      	blx	r3
 80110de:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7ff ff2f 	bl	8010f44 <TimerExists>
 80110e6:	b908      	cbnz	r0, 80110ec <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80110e8:	2000      	movs	r0, #0
}
 80110ea:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80110ec:	4620      	mov	r0, r4
 80110ee:	f7ff ff4f 	bl	8010f90 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80110f2:	4620      	mov	r0, r4
 80110f4:	f7ff ffa6 	bl	8011044 <UTIL_TIMER_Start>
 80110f8:	e7f7      	b.n	80110ea <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80110fa:	2001      	movs	r0, #1
}
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	08012ce8 	.word	0x08012ce8

08011104 <UTIL_TIMER_IRQ_Handler>:
{
 8011104:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011106:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801110a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 801110c:	4c1e      	ldr	r4, [pc, #120]	@ (8011188 <UTIL_TIMER_IRQ_Handler+0x84>)
 801110e:	6963      	ldr	r3, [r4, #20]
 8011110:	4798      	blx	r3
 8011112:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011114:	6923      	ldr	r3, [r4, #16]
 8011116:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011118:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801111a:	4b1c      	ldr	r3, [pc, #112]	@ (801118c <UTIL_TIMER_IRQ_Handler+0x88>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	b923      	cbnz	r3, 801112a <UTIL_TIMER_IRQ_Handler+0x26>
 8011120:	e018      	b.n	8011154 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8011122:	2200      	movs	r2, #0
 8011124:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8011126:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8011128:	b1a3      	cbz	r3, 8011154 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	42a2      	cmp	r2, r4
 801112e:	d9f8      	bls.n	8011122 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8011130:	1a31      	subs	r1, r6, r0
 8011132:	440a      	add	r2, r1
 8011134:	601a      	str	r2, [r3, #0]
 8011136:	e7f6      	b.n	8011126 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8011138:	4b14      	ldr	r3, [pc, #80]	@ (801118c <UTIL_TIMER_IRQ_Handler+0x88>)
 801113a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 801113c:	6962      	ldr	r2, [r4, #20]
 801113e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8011140:	2300      	movs	r3, #0
 8011142:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8011144:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8011146:	68e3      	ldr	r3, [r4, #12]
 8011148:	6920      	ldr	r0, [r4, #16]
 801114a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801114c:	8963      	ldrh	r3, [r4, #10]
 801114e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011152:	d012      	beq.n	801117a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011154:	4b0d      	ldr	r3, [pc, #52]	@ (801118c <UTIL_TIMER_IRQ_Handler+0x88>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	b13b      	cbz	r3, 801116a <UTIL_TIMER_IRQ_Handler+0x66>
 801115a:	681c      	ldr	r4, [r3, #0]
 801115c:	2c00      	cmp	r4, #0
 801115e:	d0eb      	beq.n	8011138 <UTIL_TIMER_IRQ_Handler+0x34>
 8011160:	4b09      	ldr	r3, [pc, #36]	@ (8011188 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011162:	699b      	ldr	r3, [r3, #24]
 8011164:	4798      	blx	r3
 8011166:	4284      	cmp	r4, r0
 8011168:	d3e6      	bcc.n	8011138 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801116a:	4b08      	ldr	r3, [pc, #32]	@ (801118c <UTIL_TIMER_IRQ_Handler+0x88>)
 801116c:	6818      	ldr	r0, [r3, #0]
 801116e:	b108      	cbz	r0, 8011174 <UTIL_TIMER_IRQ_Handler+0x70>
 8011170:	7a03      	ldrb	r3, [r0, #8]
 8011172:	b133      	cbz	r3, 8011182 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011174:	f385 8810 	msr	PRIMASK, r5
}
 8011178:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801117a:	4620      	mov	r0, r4
 801117c:	f7ff ff62 	bl	8011044 <UTIL_TIMER_Start>
 8011180:	e7e8      	b.n	8011154 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8011182:	f7ff feed 	bl	8010f60 <TimerSetTimeout>
 8011186:	e7f5      	b.n	8011174 <UTIL_TIMER_IRQ_Handler+0x70>
 8011188:	08012ce8 	.word	0x08012ce8
 801118c:	200016b4 	.word	0x200016b4

08011190 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8011190:	4601      	mov	r1, r0
  int i = 0;
 8011192:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011194:	e008      	b.n	80111a8 <ee_skip_atoi+0x18>
 8011196:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801119a:	1c53      	adds	r3, r2, #1
 801119c:	600b      	str	r3, [r1, #0]
 801119e:	7813      	ldrb	r3, [r2, #0]
 80111a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80111a4:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80111a8:	680a      	ldr	r2, [r1, #0]
 80111aa:	7813      	ldrb	r3, [r2, #0]
 80111ac:	3b30      	subs	r3, #48	@ 0x30
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	2b09      	cmp	r3, #9
 80111b2:	d9f0      	bls.n	8011196 <ee_skip_atoi+0x6>
  return i;
}
 80111b4:	4770      	bx	lr
	...

080111b8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80111b8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80111bc:	b093      	sub	sp, #76	@ 0x4c
 80111be:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80111c0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80111c2:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80111c6:	d110      	bne.n	80111ea <ee_number+0x32>
  char *dig = lower_digits;
 80111c8:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 80112c4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80111cc:	1e9f      	subs	r7, r3, #2
 80111ce:	2f22      	cmp	r7, #34	@ 0x22
 80111d0:	d875      	bhi.n	80112be <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80111d2:	f016 0401 	ands.w	r4, r6, #1
 80111d6:	d00b      	beq.n	80111f0 <ee_number+0x38>
 80111d8:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 80111dc:	f016 0f02 	tst.w	r6, #2
 80111e0:	d00f      	beq.n	8011202 <ee_number+0x4a>
  {
    if (num < 0)
 80111e2:	2a00      	cmp	r2, #0
 80111e4:	db07      	blt.n	80111f6 <ee_number+0x3e>
  sign = 0;
 80111e6:	2700      	movs	r7, #0
 80111e8:	e00c      	b.n	8011204 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80111ea:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 80112c8 <ee_number+0x110>
 80111ee:	e7ed      	b.n	80111cc <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80111f0:	f04f 0e20 	mov.w	lr, #32
 80111f4:	e7f2      	b.n	80111dc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80111f6:	4252      	negs	r2, r2
      size--;
 80111f8:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80111fa:	3e01      	subs	r6, #1
 80111fc:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 80111fe:	272d      	movs	r7, #45	@ 0x2d
 8011200:	e000      	b.n	8011204 <ee_number+0x4c>
  sign = 0;
 8011202:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011204:	bb5a      	cbnz	r2, 801125e <ee_number+0xa6>
    tmp[i++] = '0';
 8011206:	2330      	movs	r3, #48	@ 0x30
 8011208:	f88d 3004 	strb.w	r3, [sp, #4]
 801120c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8011210:	45ac      	cmp	ip, r5
 8011212:	dd00      	ble.n	8011216 <ee_number+0x5e>
 8011214:	4665      	mov	r5, ip
  size -= precision;
 8011216:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011218:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801121a:	b31c      	cbz	r4, 8011264 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 801121c:	b11f      	cbz	r7, 8011226 <ee_number+0x6e>
 801121e:	f800 7b01 	strb.w	r7, [r0], #1
 8011222:	3901      	subs	r1, #1
 8011224:	d007      	beq.n	8011236 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8011226:	2b00      	cmp	r3, #0
 8011228:	f103 33ff 	add.w	r3, r3, #4294967295
 801122c:	dd24      	ble.n	8011278 <ee_number+0xc0>
 801122e:	f800 eb01 	strb.w	lr, [r0], #1
 8011232:	3901      	subs	r1, #1
 8011234:	d1f7      	bne.n	8011226 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8011236:	b013      	add	sp, #76	@ 0x4c
 8011238:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801123c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011240:	fb03 2216 	mls	r2, r3, r6, r2
 8011244:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8011248:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 801124c:	446a      	add	r2, sp
 801124e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8011252:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011254:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8011258:	2a00      	cmp	r2, #0
 801125a:	d1ef      	bne.n	801123c <ee_number+0x84>
 801125c:	e7d8      	b.n	8011210 <ee_number+0x58>
  i = 0;
 801125e:	f04f 0c00 	mov.w	ip, #0
 8011262:	e7f9      	b.n	8011258 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011264:	2b00      	cmp	r3, #0
 8011266:	f103 33ff 	add.w	r3, r3, #4294967295
 801126a:	ddd7      	ble.n	801121c <ee_number+0x64>
 801126c:	2220      	movs	r2, #32
 801126e:	f800 2b01 	strb.w	r2, [r0], #1
 8011272:	3901      	subs	r1, #1
 8011274:	d1f6      	bne.n	8011264 <ee_number+0xac>
 8011276:	e7de      	b.n	8011236 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8011278:	4565      	cmp	r5, ip
 801127a:	f105 35ff 	add.w	r5, r5, #4294967295
 801127e:	dd05      	ble.n	801128c <ee_number+0xd4>
 8011280:	2230      	movs	r2, #48	@ 0x30
 8011282:	f800 2b01 	strb.w	r2, [r0], #1
 8011286:	3901      	subs	r1, #1
 8011288:	d1f6      	bne.n	8011278 <ee_number+0xc0>
 801128a:	e7d4      	b.n	8011236 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801128c:	4662      	mov	r2, ip
 801128e:	2a00      	cmp	r2, #0
 8011290:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011294:	dd09      	ble.n	80112aa <ee_number+0xf2>
 8011296:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 801129a:	446a      	add	r2, sp
 801129c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80112a0:	f800 2b01 	strb.w	r2, [r0], #1
 80112a4:	3901      	subs	r1, #1
 80112a6:	d1f1      	bne.n	801128c <ee_number+0xd4>
 80112a8:	e7c5      	b.n	8011236 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80112b0:	ddc1      	ble.n	8011236 <ee_number+0x7e>
 80112b2:	2220      	movs	r2, #32
 80112b4:	f800 2b01 	strb.w	r2, [r0], #1
 80112b8:	3901      	subs	r1, #1
 80112ba:	d1f6      	bne.n	80112aa <ee_number+0xf2>
 80112bc:	e7bb      	b.n	8011236 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80112be:	2000      	movs	r0, #0
 80112c0:	e7b9      	b.n	8011236 <ee_number+0x7e>
 80112c2:	bf00      	nop
 80112c4:	08012c7c 	.word	0x08012c7c
 80112c8:	08012ca4 	.word	0x08012ca4

080112cc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80112cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112d0:	b087      	sub	sp, #28
 80112d2:	9205      	str	r2, [sp, #20]
 80112d4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80112d6:	1e0f      	subs	r7, r1, #0
 80112d8:	f340 80b8 	ble.w	801144c <tiny_vsnprintf_like+0x180>
 80112dc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80112de:	4604      	mov	r4, r0
 80112e0:	e004      	b.n	80112ec <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80112e2:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80112e6:	9b05      	ldr	r3, [sp, #20]
 80112e8:	3301      	adds	r3, #1
 80112ea:	9305      	str	r3, [sp, #20]
 80112ec:	9905      	ldr	r1, [sp, #20]
 80112ee:	780a      	ldrb	r2, [r1, #0]
 80112f0:	b922      	cbnz	r2, 80112fc <tiny_vsnprintf_like+0x30>
 80112f2:	1ba3      	subs	r3, r4, r6
 80112f4:	1e78      	subs	r0, r7, #1
 80112f6:	4283      	cmp	r3, r0
 80112f8:	f2c0 80a2 	blt.w	8011440 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80112fc:	1ba3      	subs	r3, r4, r6
 80112fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8011302:	4543      	cmp	r3, r8
 8011304:	f280 809c 	bge.w	8011440 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011308:	2a25      	cmp	r2, #37	@ 0x25
 801130a:	d1ea      	bne.n	80112e2 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801130c:	1c4b      	adds	r3, r1, #1
 801130e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8011310:	784b      	ldrb	r3, [r1, #1]
 8011312:	2b30      	cmp	r3, #48	@ 0x30
 8011314:	d020      	beq.n	8011358 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011316:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801131a:	3b30      	subs	r3, #48	@ 0x30
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b09      	cmp	r3, #9
 8011320:	d91d      	bls.n	801135e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8011322:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8011326:	9b05      	ldr	r3, [sp, #20]
 8011328:	781a      	ldrb	r2, [r3, #0]
 801132a:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 801132e:	2b20      	cmp	r3, #32
 8011330:	d867      	bhi.n	8011402 <tiny_vsnprintf_like+0x136>
 8011332:	e8df f003 	tbb	[pc, r3]
 8011336:	664a      	.short	0x664a
 8011338:	66666666 	.word	0x66666666
 801133c:	66666666 	.word	0x66666666
 8011340:	66621e66 	.word	0x66621e66
 8011344:	62666666 	.word	0x62666666
 8011348:	66666666 	.word	0x66666666
 801134c:	66666666 	.word	0x66666666
 8011350:	19662866 	.word	0x19662866
 8011354:	6666      	.short	0x6666
 8011356:	7c          	.byte	0x7c
 8011357:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011358:	f04f 0901 	mov.w	r9, #1
 801135c:	e7dd      	b.n	801131a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801135e:	a805      	add	r0, sp, #20
 8011360:	f7ff ff16 	bl	8011190 <ee_skip_atoi>
 8011364:	4605      	mov	r5, r0
 8011366:	e7de      	b.n	8011326 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011368:	230a      	movs	r3, #10
 801136a:	e031      	b.n	80113d0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801136c:	2320      	movs	r3, #32
 801136e:	f804 3b01 	strb.w	r3, [r4], #1
 8011372:	3d01      	subs	r5, #1
 8011374:	2d00      	cmp	r5, #0
 8011376:	dcf9      	bgt.n	801136c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011378:	9b04      	ldr	r3, [sp, #16]
 801137a:	1d1a      	adds	r2, r3, #4
 801137c:	9204      	str	r2, [sp, #16]
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011384:	e7af      	b.n	80112e6 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011386:	9b04      	ldr	r3, [sp, #16]
 8011388:	1d1a      	adds	r2, r3, #4
 801138a:	9204      	str	r2, [sp, #16]
 801138c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8011390:	f1b8 0f00 	cmp.w	r8, #0
 8011394:	d003      	beq.n	801139e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8011396:	4640      	mov	r0, r8
 8011398:	f7ee fef2 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801139c:	e006      	b.n	80113ac <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 801139e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8011450 <tiny_vsnprintf_like+0x184>
 80113a2:	e7f8      	b.n	8011396 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80113a4:	2220      	movs	r2, #32
 80113a6:	f804 2b01 	strb.w	r2, [r4], #1
 80113aa:	461d      	mov	r5, r3
 80113ac:	1e6b      	subs	r3, r5, #1
 80113ae:	4285      	cmp	r5, r0
 80113b0:	dcf8      	bgt.n	80113a4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80113b2:	2200      	movs	r2, #0
 80113b4:	e006      	b.n	80113c4 <tiny_vsnprintf_like+0xf8>
 80113b6:	4643      	mov	r3, r8
 80113b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80113bc:	f804 1b01 	strb.w	r1, [r4], #1
 80113c0:	3201      	adds	r2, #1
 80113c2:	4698      	mov	r8, r3
 80113c4:	4282      	cmp	r2, r0
 80113c6:	dbf6      	blt.n	80113b6 <tiny_vsnprintf_like+0xea>
 80113c8:	e78d      	b.n	80112e6 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80113ca:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 80113ce:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80113d0:	f019 0f02 	tst.w	r9, #2
 80113d4:	d02f      	beq.n	8011436 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80113d6:	9a04      	ldr	r2, [sp, #16]
 80113d8:	1d11      	adds	r1, r2, #4
 80113da:	9104      	str	r1, [sp, #16]
 80113dc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80113de:	1ba1      	subs	r1, r4, r6
 80113e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	9001      	str	r0, [sp, #4]
 80113ea:	9500      	str	r5, [sp, #0]
 80113ec:	eba8 0101 	sub.w	r1, r8, r1
 80113f0:	4620      	mov	r0, r4
 80113f2:	f7ff fee1 	bl	80111b8 <ee_number>
 80113f6:	4604      	mov	r4, r0
 80113f8:	e775      	b.n	80112e6 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80113fa:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80113fe:	230a      	movs	r3, #10
 8011400:	e7e6      	b.n	80113d0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8011402:	2a25      	cmp	r2, #37	@ 0x25
 8011404:	d002      	beq.n	801140c <tiny_vsnprintf_like+0x140>
 8011406:	2325      	movs	r3, #37	@ 0x25
 8011408:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801140c:	1ba3      	subs	r3, r4, r6
 801140e:	4598      	cmp	r8, r3
 8011410:	dd0f      	ble.n	8011432 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8011412:	9b05      	ldr	r3, [sp, #20]
 8011414:	781a      	ldrb	r2, [r3, #0]
 8011416:	b13a      	cbz	r2, 8011428 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8011418:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801141c:	1ba3      	subs	r3, r4, r6
 801141e:	4598      	cmp	r8, r3
 8011420:	f73f af61 	bgt.w	80112e6 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011424:	230a      	movs	r3, #10
 8011426:	e7d3      	b.n	80113d0 <tiny_vsnprintf_like+0x104>
          --fmt;
 8011428:	3b01      	subs	r3, #1
 801142a:	9305      	str	r3, [sp, #20]
 801142c:	e7f6      	b.n	801141c <tiny_vsnprintf_like+0x150>
        base = 16;
 801142e:	2310      	movs	r3, #16
 8011430:	e7ce      	b.n	80113d0 <tiny_vsnprintf_like+0x104>
    base = 10;
 8011432:	230a      	movs	r3, #10
 8011434:	e7cc      	b.n	80113d0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8011436:	9a04      	ldr	r2, [sp, #16]
 8011438:	1d11      	adds	r1, r2, #4
 801143a:	9104      	str	r1, [sp, #16]
 801143c:	6812      	ldr	r2, [r2, #0]
 801143e:	e7ce      	b.n	80113de <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8011440:	2300      	movs	r3, #0
 8011442:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8011444:	1ba0      	subs	r0, r4, r6
}
 8011446:	b007      	add	sp, #28
 8011448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 801144c:	2000      	movs	r0, #0
 801144e:	e7fa      	b.n	8011446 <tiny_vsnprintf_like+0x17a>
 8011450:	08012ccc 	.word	0x08012ccc

08011454 <std>:
 8011454:	2300      	movs	r3, #0
 8011456:	b510      	push	{r4, lr}
 8011458:	4604      	mov	r4, r0
 801145a:	e9c0 3300 	strd	r3, r3, [r0]
 801145e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011462:	6083      	str	r3, [r0, #8]
 8011464:	8181      	strh	r1, [r0, #12]
 8011466:	6643      	str	r3, [r0, #100]	@ 0x64
 8011468:	81c2      	strh	r2, [r0, #14]
 801146a:	6183      	str	r3, [r0, #24]
 801146c:	4619      	mov	r1, r3
 801146e:	2208      	movs	r2, #8
 8011470:	305c      	adds	r0, #92	@ 0x5c
 8011472:	f000 f9f9 	bl	8011868 <memset>
 8011476:	4b0d      	ldr	r3, [pc, #52]	@ (80114ac <std+0x58>)
 8011478:	6263      	str	r3, [r4, #36]	@ 0x24
 801147a:	4b0d      	ldr	r3, [pc, #52]	@ (80114b0 <std+0x5c>)
 801147c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801147e:	4b0d      	ldr	r3, [pc, #52]	@ (80114b4 <std+0x60>)
 8011480:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011482:	4b0d      	ldr	r3, [pc, #52]	@ (80114b8 <std+0x64>)
 8011484:	6323      	str	r3, [r4, #48]	@ 0x30
 8011486:	4b0d      	ldr	r3, [pc, #52]	@ (80114bc <std+0x68>)
 8011488:	6224      	str	r4, [r4, #32]
 801148a:	429c      	cmp	r4, r3
 801148c:	d006      	beq.n	801149c <std+0x48>
 801148e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011492:	4294      	cmp	r4, r2
 8011494:	d002      	beq.n	801149c <std+0x48>
 8011496:	33d0      	adds	r3, #208	@ 0xd0
 8011498:	429c      	cmp	r4, r3
 801149a:	d105      	bne.n	80114a8 <std+0x54>
 801149c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80114a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114a4:	f000 ba58 	b.w	8011958 <__retarget_lock_init_recursive>
 80114a8:	bd10      	pop	{r4, pc}
 80114aa:	bf00      	nop
 80114ac:	080116b9 	.word	0x080116b9
 80114b0:	080116db 	.word	0x080116db
 80114b4:	08011713 	.word	0x08011713
 80114b8:	08011737 	.word	0x08011737
 80114bc:	200016b8 	.word	0x200016b8

080114c0 <stdio_exit_handler>:
 80114c0:	4a02      	ldr	r2, [pc, #8]	@ (80114cc <stdio_exit_handler+0xc>)
 80114c2:	4903      	ldr	r1, [pc, #12]	@ (80114d0 <stdio_exit_handler+0x10>)
 80114c4:	4803      	ldr	r0, [pc, #12]	@ (80114d4 <stdio_exit_handler+0x14>)
 80114c6:	f000 b869 	b.w	801159c <_fwalk_sglue>
 80114ca:	bf00      	nop
 80114cc:	20000108 	.word	0x20000108
 80114d0:	080121e9 	.word	0x080121e9
 80114d4:	20000118 	.word	0x20000118

080114d8 <cleanup_stdio>:
 80114d8:	6841      	ldr	r1, [r0, #4]
 80114da:	4b0c      	ldr	r3, [pc, #48]	@ (801150c <cleanup_stdio+0x34>)
 80114dc:	4299      	cmp	r1, r3
 80114de:	b510      	push	{r4, lr}
 80114e0:	4604      	mov	r4, r0
 80114e2:	d001      	beq.n	80114e8 <cleanup_stdio+0x10>
 80114e4:	f000 fe80 	bl	80121e8 <_fflush_r>
 80114e8:	68a1      	ldr	r1, [r4, #8]
 80114ea:	4b09      	ldr	r3, [pc, #36]	@ (8011510 <cleanup_stdio+0x38>)
 80114ec:	4299      	cmp	r1, r3
 80114ee:	d002      	beq.n	80114f6 <cleanup_stdio+0x1e>
 80114f0:	4620      	mov	r0, r4
 80114f2:	f000 fe79 	bl	80121e8 <_fflush_r>
 80114f6:	68e1      	ldr	r1, [r4, #12]
 80114f8:	4b06      	ldr	r3, [pc, #24]	@ (8011514 <cleanup_stdio+0x3c>)
 80114fa:	4299      	cmp	r1, r3
 80114fc:	d004      	beq.n	8011508 <cleanup_stdio+0x30>
 80114fe:	4620      	mov	r0, r4
 8011500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011504:	f000 be70 	b.w	80121e8 <_fflush_r>
 8011508:	bd10      	pop	{r4, pc}
 801150a:	bf00      	nop
 801150c:	200016b8 	.word	0x200016b8
 8011510:	20001720 	.word	0x20001720
 8011514:	20001788 	.word	0x20001788

08011518 <global_stdio_init.part.0>:
 8011518:	b510      	push	{r4, lr}
 801151a:	4b0b      	ldr	r3, [pc, #44]	@ (8011548 <global_stdio_init.part.0+0x30>)
 801151c:	4c0b      	ldr	r4, [pc, #44]	@ (801154c <global_stdio_init.part.0+0x34>)
 801151e:	4a0c      	ldr	r2, [pc, #48]	@ (8011550 <global_stdio_init.part.0+0x38>)
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	4620      	mov	r0, r4
 8011524:	2200      	movs	r2, #0
 8011526:	2104      	movs	r1, #4
 8011528:	f7ff ff94 	bl	8011454 <std>
 801152c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011530:	2201      	movs	r2, #1
 8011532:	2109      	movs	r1, #9
 8011534:	f7ff ff8e 	bl	8011454 <std>
 8011538:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801153c:	2202      	movs	r2, #2
 801153e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011542:	2112      	movs	r1, #18
 8011544:	f7ff bf86 	b.w	8011454 <std>
 8011548:	200017f0 	.word	0x200017f0
 801154c:	200016b8 	.word	0x200016b8
 8011550:	080114c1 	.word	0x080114c1

08011554 <__sfp_lock_acquire>:
 8011554:	4801      	ldr	r0, [pc, #4]	@ (801155c <__sfp_lock_acquire+0x8>)
 8011556:	f000 ba00 	b.w	801195a <__retarget_lock_acquire_recursive>
 801155a:	bf00      	nop
 801155c:	200017f9 	.word	0x200017f9

08011560 <__sfp_lock_release>:
 8011560:	4801      	ldr	r0, [pc, #4]	@ (8011568 <__sfp_lock_release+0x8>)
 8011562:	f000 b9fb 	b.w	801195c <__retarget_lock_release_recursive>
 8011566:	bf00      	nop
 8011568:	200017f9 	.word	0x200017f9

0801156c <__sinit>:
 801156c:	b510      	push	{r4, lr}
 801156e:	4604      	mov	r4, r0
 8011570:	f7ff fff0 	bl	8011554 <__sfp_lock_acquire>
 8011574:	6a23      	ldr	r3, [r4, #32]
 8011576:	b11b      	cbz	r3, 8011580 <__sinit+0x14>
 8011578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801157c:	f7ff bff0 	b.w	8011560 <__sfp_lock_release>
 8011580:	4b04      	ldr	r3, [pc, #16]	@ (8011594 <__sinit+0x28>)
 8011582:	6223      	str	r3, [r4, #32]
 8011584:	4b04      	ldr	r3, [pc, #16]	@ (8011598 <__sinit+0x2c>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d1f5      	bne.n	8011578 <__sinit+0xc>
 801158c:	f7ff ffc4 	bl	8011518 <global_stdio_init.part.0>
 8011590:	e7f2      	b.n	8011578 <__sinit+0xc>
 8011592:	bf00      	nop
 8011594:	080114d9 	.word	0x080114d9
 8011598:	200017f0 	.word	0x200017f0

0801159c <_fwalk_sglue>:
 801159c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115a0:	4607      	mov	r7, r0
 80115a2:	4688      	mov	r8, r1
 80115a4:	4614      	mov	r4, r2
 80115a6:	2600      	movs	r6, #0
 80115a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115ac:	f1b9 0901 	subs.w	r9, r9, #1
 80115b0:	d505      	bpl.n	80115be <_fwalk_sglue+0x22>
 80115b2:	6824      	ldr	r4, [r4, #0]
 80115b4:	2c00      	cmp	r4, #0
 80115b6:	d1f7      	bne.n	80115a8 <_fwalk_sglue+0xc>
 80115b8:	4630      	mov	r0, r6
 80115ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115be:	89ab      	ldrh	r3, [r5, #12]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d907      	bls.n	80115d4 <_fwalk_sglue+0x38>
 80115c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115c8:	3301      	adds	r3, #1
 80115ca:	d003      	beq.n	80115d4 <_fwalk_sglue+0x38>
 80115cc:	4629      	mov	r1, r5
 80115ce:	4638      	mov	r0, r7
 80115d0:	47c0      	blx	r8
 80115d2:	4306      	orrs	r6, r0
 80115d4:	3568      	adds	r5, #104	@ 0x68
 80115d6:	e7e9      	b.n	80115ac <_fwalk_sglue+0x10>

080115d8 <iprintf>:
 80115d8:	b40f      	push	{r0, r1, r2, r3}
 80115da:	b507      	push	{r0, r1, r2, lr}
 80115dc:	4906      	ldr	r1, [pc, #24]	@ (80115f8 <iprintf+0x20>)
 80115de:	ab04      	add	r3, sp, #16
 80115e0:	6808      	ldr	r0, [r1, #0]
 80115e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115e6:	6881      	ldr	r1, [r0, #8]
 80115e8:	9301      	str	r3, [sp, #4]
 80115ea:	f000 fad9 	bl	8011ba0 <_vfiprintf_r>
 80115ee:	b003      	add	sp, #12
 80115f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80115f4:	b004      	add	sp, #16
 80115f6:	4770      	bx	lr
 80115f8:	20000114 	.word	0x20000114

080115fc <_puts_r>:
 80115fc:	6a03      	ldr	r3, [r0, #32]
 80115fe:	b570      	push	{r4, r5, r6, lr}
 8011600:	6884      	ldr	r4, [r0, #8]
 8011602:	4605      	mov	r5, r0
 8011604:	460e      	mov	r6, r1
 8011606:	b90b      	cbnz	r3, 801160c <_puts_r+0x10>
 8011608:	f7ff ffb0 	bl	801156c <__sinit>
 801160c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801160e:	07db      	lsls	r3, r3, #31
 8011610:	d405      	bmi.n	801161e <_puts_r+0x22>
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	0598      	lsls	r0, r3, #22
 8011616:	d402      	bmi.n	801161e <_puts_r+0x22>
 8011618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801161a:	f000 f99e 	bl	801195a <__retarget_lock_acquire_recursive>
 801161e:	89a3      	ldrh	r3, [r4, #12]
 8011620:	0719      	lsls	r1, r3, #28
 8011622:	d502      	bpl.n	801162a <_puts_r+0x2e>
 8011624:	6923      	ldr	r3, [r4, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d135      	bne.n	8011696 <_puts_r+0x9a>
 801162a:	4621      	mov	r1, r4
 801162c:	4628      	mov	r0, r5
 801162e:	f000 f8c5 	bl	80117bc <__swsetup_r>
 8011632:	b380      	cbz	r0, 8011696 <_puts_r+0x9a>
 8011634:	f04f 35ff 	mov.w	r5, #4294967295
 8011638:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801163a:	07da      	lsls	r2, r3, #31
 801163c:	d405      	bmi.n	801164a <_puts_r+0x4e>
 801163e:	89a3      	ldrh	r3, [r4, #12]
 8011640:	059b      	lsls	r3, r3, #22
 8011642:	d402      	bmi.n	801164a <_puts_r+0x4e>
 8011644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011646:	f000 f989 	bl	801195c <__retarget_lock_release_recursive>
 801164a:	4628      	mov	r0, r5
 801164c:	bd70      	pop	{r4, r5, r6, pc}
 801164e:	2b00      	cmp	r3, #0
 8011650:	da04      	bge.n	801165c <_puts_r+0x60>
 8011652:	69a2      	ldr	r2, [r4, #24]
 8011654:	429a      	cmp	r2, r3
 8011656:	dc17      	bgt.n	8011688 <_puts_r+0x8c>
 8011658:	290a      	cmp	r1, #10
 801165a:	d015      	beq.n	8011688 <_puts_r+0x8c>
 801165c:	6823      	ldr	r3, [r4, #0]
 801165e:	1c5a      	adds	r2, r3, #1
 8011660:	6022      	str	r2, [r4, #0]
 8011662:	7019      	strb	r1, [r3, #0]
 8011664:	68a3      	ldr	r3, [r4, #8]
 8011666:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801166a:	3b01      	subs	r3, #1
 801166c:	60a3      	str	r3, [r4, #8]
 801166e:	2900      	cmp	r1, #0
 8011670:	d1ed      	bne.n	801164e <_puts_r+0x52>
 8011672:	2b00      	cmp	r3, #0
 8011674:	da11      	bge.n	801169a <_puts_r+0x9e>
 8011676:	4622      	mov	r2, r4
 8011678:	210a      	movs	r1, #10
 801167a:	4628      	mov	r0, r5
 801167c:	f000 f85f 	bl	801173e <__swbuf_r>
 8011680:	3001      	adds	r0, #1
 8011682:	d0d7      	beq.n	8011634 <_puts_r+0x38>
 8011684:	250a      	movs	r5, #10
 8011686:	e7d7      	b.n	8011638 <_puts_r+0x3c>
 8011688:	4622      	mov	r2, r4
 801168a:	4628      	mov	r0, r5
 801168c:	f000 f857 	bl	801173e <__swbuf_r>
 8011690:	3001      	adds	r0, #1
 8011692:	d1e7      	bne.n	8011664 <_puts_r+0x68>
 8011694:	e7ce      	b.n	8011634 <_puts_r+0x38>
 8011696:	3e01      	subs	r6, #1
 8011698:	e7e4      	b.n	8011664 <_puts_r+0x68>
 801169a:	6823      	ldr	r3, [r4, #0]
 801169c:	1c5a      	adds	r2, r3, #1
 801169e:	6022      	str	r2, [r4, #0]
 80116a0:	220a      	movs	r2, #10
 80116a2:	701a      	strb	r2, [r3, #0]
 80116a4:	e7ee      	b.n	8011684 <_puts_r+0x88>
	...

080116a8 <puts>:
 80116a8:	4b02      	ldr	r3, [pc, #8]	@ (80116b4 <puts+0xc>)
 80116aa:	4601      	mov	r1, r0
 80116ac:	6818      	ldr	r0, [r3, #0]
 80116ae:	f7ff bfa5 	b.w	80115fc <_puts_r>
 80116b2:	bf00      	nop
 80116b4:	20000114 	.word	0x20000114

080116b8 <__sread>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	460c      	mov	r4, r1
 80116bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c0:	f000 f8fc 	bl	80118bc <_read_r>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	bfab      	itete	ge
 80116c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80116ca:	89a3      	ldrhlt	r3, [r4, #12]
 80116cc:	181b      	addge	r3, r3, r0
 80116ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80116d2:	bfac      	ite	ge
 80116d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80116d6:	81a3      	strhlt	r3, [r4, #12]
 80116d8:	bd10      	pop	{r4, pc}

080116da <__swrite>:
 80116da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116de:	461f      	mov	r7, r3
 80116e0:	898b      	ldrh	r3, [r1, #12]
 80116e2:	05db      	lsls	r3, r3, #23
 80116e4:	4605      	mov	r5, r0
 80116e6:	460c      	mov	r4, r1
 80116e8:	4616      	mov	r6, r2
 80116ea:	d505      	bpl.n	80116f8 <__swrite+0x1e>
 80116ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f0:	2302      	movs	r3, #2
 80116f2:	2200      	movs	r2, #0
 80116f4:	f000 f8d0 	bl	8011898 <_lseek_r>
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	4632      	mov	r2, r6
 8011706:	463b      	mov	r3, r7
 8011708:	4628      	mov	r0, r5
 801170a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801170e:	f000 b8e7 	b.w	80118e0 <_write_r>

08011712 <__sseek>:
 8011712:	b510      	push	{r4, lr}
 8011714:	460c      	mov	r4, r1
 8011716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801171a:	f000 f8bd 	bl	8011898 <_lseek_r>
 801171e:	1c43      	adds	r3, r0, #1
 8011720:	89a3      	ldrh	r3, [r4, #12]
 8011722:	bf15      	itete	ne
 8011724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801172a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801172e:	81a3      	strheq	r3, [r4, #12]
 8011730:	bf18      	it	ne
 8011732:	81a3      	strhne	r3, [r4, #12]
 8011734:	bd10      	pop	{r4, pc}

08011736 <__sclose>:
 8011736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173a:	f000 b89d 	b.w	8011878 <_close_r>

0801173e <__swbuf_r>:
 801173e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011740:	460e      	mov	r6, r1
 8011742:	4614      	mov	r4, r2
 8011744:	4605      	mov	r5, r0
 8011746:	b118      	cbz	r0, 8011750 <__swbuf_r+0x12>
 8011748:	6a03      	ldr	r3, [r0, #32]
 801174a:	b90b      	cbnz	r3, 8011750 <__swbuf_r+0x12>
 801174c:	f7ff ff0e 	bl	801156c <__sinit>
 8011750:	69a3      	ldr	r3, [r4, #24]
 8011752:	60a3      	str	r3, [r4, #8]
 8011754:	89a3      	ldrh	r3, [r4, #12]
 8011756:	071a      	lsls	r2, r3, #28
 8011758:	d501      	bpl.n	801175e <__swbuf_r+0x20>
 801175a:	6923      	ldr	r3, [r4, #16]
 801175c:	b943      	cbnz	r3, 8011770 <__swbuf_r+0x32>
 801175e:	4621      	mov	r1, r4
 8011760:	4628      	mov	r0, r5
 8011762:	f000 f82b 	bl	80117bc <__swsetup_r>
 8011766:	b118      	cbz	r0, 8011770 <__swbuf_r+0x32>
 8011768:	f04f 37ff 	mov.w	r7, #4294967295
 801176c:	4638      	mov	r0, r7
 801176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	6922      	ldr	r2, [r4, #16]
 8011774:	1a98      	subs	r0, r3, r2
 8011776:	6963      	ldr	r3, [r4, #20]
 8011778:	b2f6      	uxtb	r6, r6
 801177a:	4283      	cmp	r3, r0
 801177c:	4637      	mov	r7, r6
 801177e:	dc05      	bgt.n	801178c <__swbuf_r+0x4e>
 8011780:	4621      	mov	r1, r4
 8011782:	4628      	mov	r0, r5
 8011784:	f000 fd30 	bl	80121e8 <_fflush_r>
 8011788:	2800      	cmp	r0, #0
 801178a:	d1ed      	bne.n	8011768 <__swbuf_r+0x2a>
 801178c:	68a3      	ldr	r3, [r4, #8]
 801178e:	3b01      	subs	r3, #1
 8011790:	60a3      	str	r3, [r4, #8]
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	1c5a      	adds	r2, r3, #1
 8011796:	6022      	str	r2, [r4, #0]
 8011798:	701e      	strb	r6, [r3, #0]
 801179a:	6962      	ldr	r2, [r4, #20]
 801179c:	1c43      	adds	r3, r0, #1
 801179e:	429a      	cmp	r2, r3
 80117a0:	d004      	beq.n	80117ac <__swbuf_r+0x6e>
 80117a2:	89a3      	ldrh	r3, [r4, #12]
 80117a4:	07db      	lsls	r3, r3, #31
 80117a6:	d5e1      	bpl.n	801176c <__swbuf_r+0x2e>
 80117a8:	2e0a      	cmp	r6, #10
 80117aa:	d1df      	bne.n	801176c <__swbuf_r+0x2e>
 80117ac:	4621      	mov	r1, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	f000 fd1a 	bl	80121e8 <_fflush_r>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d0d9      	beq.n	801176c <__swbuf_r+0x2e>
 80117b8:	e7d6      	b.n	8011768 <__swbuf_r+0x2a>
	...

080117bc <__swsetup_r>:
 80117bc:	b538      	push	{r3, r4, r5, lr}
 80117be:	4b29      	ldr	r3, [pc, #164]	@ (8011864 <__swsetup_r+0xa8>)
 80117c0:	4605      	mov	r5, r0
 80117c2:	6818      	ldr	r0, [r3, #0]
 80117c4:	460c      	mov	r4, r1
 80117c6:	b118      	cbz	r0, 80117d0 <__swsetup_r+0x14>
 80117c8:	6a03      	ldr	r3, [r0, #32]
 80117ca:	b90b      	cbnz	r3, 80117d0 <__swsetup_r+0x14>
 80117cc:	f7ff fece 	bl	801156c <__sinit>
 80117d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117d4:	0719      	lsls	r1, r3, #28
 80117d6:	d422      	bmi.n	801181e <__swsetup_r+0x62>
 80117d8:	06da      	lsls	r2, r3, #27
 80117da:	d407      	bmi.n	80117ec <__swsetup_r+0x30>
 80117dc:	2209      	movs	r2, #9
 80117de:	602a      	str	r2, [r5, #0]
 80117e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117e4:	81a3      	strh	r3, [r4, #12]
 80117e6:	f04f 30ff 	mov.w	r0, #4294967295
 80117ea:	e033      	b.n	8011854 <__swsetup_r+0x98>
 80117ec:	0758      	lsls	r0, r3, #29
 80117ee:	d512      	bpl.n	8011816 <__swsetup_r+0x5a>
 80117f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117f2:	b141      	cbz	r1, 8011806 <__swsetup_r+0x4a>
 80117f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117f8:	4299      	cmp	r1, r3
 80117fa:	d002      	beq.n	8011802 <__swsetup_r+0x46>
 80117fc:	4628      	mov	r0, r5
 80117fe:	f000 f8af 	bl	8011960 <_free_r>
 8011802:	2300      	movs	r3, #0
 8011804:	6363      	str	r3, [r4, #52]	@ 0x34
 8011806:	89a3      	ldrh	r3, [r4, #12]
 8011808:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801180c:	81a3      	strh	r3, [r4, #12]
 801180e:	2300      	movs	r3, #0
 8011810:	6063      	str	r3, [r4, #4]
 8011812:	6923      	ldr	r3, [r4, #16]
 8011814:	6023      	str	r3, [r4, #0]
 8011816:	89a3      	ldrh	r3, [r4, #12]
 8011818:	f043 0308 	orr.w	r3, r3, #8
 801181c:	81a3      	strh	r3, [r4, #12]
 801181e:	6923      	ldr	r3, [r4, #16]
 8011820:	b94b      	cbnz	r3, 8011836 <__swsetup_r+0x7a>
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801182c:	d003      	beq.n	8011836 <__swsetup_r+0x7a>
 801182e:	4621      	mov	r1, r4
 8011830:	4628      	mov	r0, r5
 8011832:	f000 fd27 	bl	8012284 <__smakebuf_r>
 8011836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183a:	f013 0201 	ands.w	r2, r3, #1
 801183e:	d00a      	beq.n	8011856 <__swsetup_r+0x9a>
 8011840:	2200      	movs	r2, #0
 8011842:	60a2      	str	r2, [r4, #8]
 8011844:	6962      	ldr	r2, [r4, #20]
 8011846:	4252      	negs	r2, r2
 8011848:	61a2      	str	r2, [r4, #24]
 801184a:	6922      	ldr	r2, [r4, #16]
 801184c:	b942      	cbnz	r2, 8011860 <__swsetup_r+0xa4>
 801184e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011852:	d1c5      	bne.n	80117e0 <__swsetup_r+0x24>
 8011854:	bd38      	pop	{r3, r4, r5, pc}
 8011856:	0799      	lsls	r1, r3, #30
 8011858:	bf58      	it	pl
 801185a:	6962      	ldrpl	r2, [r4, #20]
 801185c:	60a2      	str	r2, [r4, #8]
 801185e:	e7f4      	b.n	801184a <__swsetup_r+0x8e>
 8011860:	2000      	movs	r0, #0
 8011862:	e7f7      	b.n	8011854 <__swsetup_r+0x98>
 8011864:	20000114 	.word	0x20000114

08011868 <memset>:
 8011868:	4402      	add	r2, r0
 801186a:	4603      	mov	r3, r0
 801186c:	4293      	cmp	r3, r2
 801186e:	d100      	bne.n	8011872 <memset+0xa>
 8011870:	4770      	bx	lr
 8011872:	f803 1b01 	strb.w	r1, [r3], #1
 8011876:	e7f9      	b.n	801186c <memset+0x4>

08011878 <_close_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d06      	ldr	r5, [pc, #24]	@ (8011894 <_close_r+0x1c>)
 801187c:	2300      	movs	r3, #0
 801187e:	4604      	mov	r4, r0
 8011880:	4608      	mov	r0, r1
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	f7f0 f99c 	bl	8001bc0 <_close>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d102      	bne.n	8011892 <_close_r+0x1a>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	b103      	cbz	r3, 8011892 <_close_r+0x1a>
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	200017f4 	.word	0x200017f4

08011898 <_lseek_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4d07      	ldr	r5, [pc, #28]	@ (80118b8 <_lseek_r+0x20>)
 801189c:	4604      	mov	r4, r0
 801189e:	4608      	mov	r0, r1
 80118a0:	4611      	mov	r1, r2
 80118a2:	2200      	movs	r2, #0
 80118a4:	602a      	str	r2, [r5, #0]
 80118a6:	461a      	mov	r2, r3
 80118a8:	f7f0 f994 	bl	8001bd4 <_lseek>
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	d102      	bne.n	80118b6 <_lseek_r+0x1e>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	b103      	cbz	r3, 80118b6 <_lseek_r+0x1e>
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	200017f4 	.word	0x200017f4

080118bc <_read_r>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	4d07      	ldr	r5, [pc, #28]	@ (80118dc <_read_r+0x20>)
 80118c0:	4604      	mov	r4, r0
 80118c2:	4608      	mov	r0, r1
 80118c4:	4611      	mov	r1, r2
 80118c6:	2200      	movs	r2, #0
 80118c8:	602a      	str	r2, [r5, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	f7f0 f95a 	bl	8001b84 <_read>
 80118d0:	1c43      	adds	r3, r0, #1
 80118d2:	d102      	bne.n	80118da <_read_r+0x1e>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	b103      	cbz	r3, 80118da <_read_r+0x1e>
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	bd38      	pop	{r3, r4, r5, pc}
 80118dc:	200017f4 	.word	0x200017f4

080118e0 <_write_r>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	4d07      	ldr	r5, [pc, #28]	@ (8011900 <_write_r+0x20>)
 80118e4:	4604      	mov	r4, r0
 80118e6:	4608      	mov	r0, r1
 80118e8:	4611      	mov	r1, r2
 80118ea:	2200      	movs	r2, #0
 80118ec:	602a      	str	r2, [r5, #0]
 80118ee:	461a      	mov	r2, r3
 80118f0:	f7f0 f958 	bl	8001ba4 <_write>
 80118f4:	1c43      	adds	r3, r0, #1
 80118f6:	d102      	bne.n	80118fe <_write_r+0x1e>
 80118f8:	682b      	ldr	r3, [r5, #0]
 80118fa:	b103      	cbz	r3, 80118fe <_write_r+0x1e>
 80118fc:	6023      	str	r3, [r4, #0]
 80118fe:	bd38      	pop	{r3, r4, r5, pc}
 8011900:	200017f4 	.word	0x200017f4

08011904 <__errno>:
 8011904:	4b01      	ldr	r3, [pc, #4]	@ (801190c <__errno+0x8>)
 8011906:	6818      	ldr	r0, [r3, #0]
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	20000114 	.word	0x20000114

08011910 <__libc_init_array>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	4d0d      	ldr	r5, [pc, #52]	@ (8011948 <__libc_init_array+0x38>)
 8011914:	4c0d      	ldr	r4, [pc, #52]	@ (801194c <__libc_init_array+0x3c>)
 8011916:	1b64      	subs	r4, r4, r5
 8011918:	10a4      	asrs	r4, r4, #2
 801191a:	2600      	movs	r6, #0
 801191c:	42a6      	cmp	r6, r4
 801191e:	d109      	bne.n	8011934 <__libc_init_array+0x24>
 8011920:	4d0b      	ldr	r5, [pc, #44]	@ (8011950 <__libc_init_array+0x40>)
 8011922:	4c0c      	ldr	r4, [pc, #48]	@ (8011954 <__libc_init_array+0x44>)
 8011924:	f000 fd9c 	bl	8012460 <_init>
 8011928:	1b64      	subs	r4, r4, r5
 801192a:	10a4      	asrs	r4, r4, #2
 801192c:	2600      	movs	r6, #0
 801192e:	42a6      	cmp	r6, r4
 8011930:	d105      	bne.n	801193e <__libc_init_array+0x2e>
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	f855 3b04 	ldr.w	r3, [r5], #4
 8011938:	4798      	blx	r3
 801193a:	3601      	adds	r6, #1
 801193c:	e7ee      	b.n	801191c <__libc_init_array+0xc>
 801193e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011942:	4798      	blx	r3
 8011944:	3601      	adds	r6, #1
 8011946:	e7f2      	b.n	801192e <__libc_init_array+0x1e>
 8011948:	08013400 	.word	0x08013400
 801194c:	08013400 	.word	0x08013400
 8011950:	08013400 	.word	0x08013400
 8011954:	08013404 	.word	0x08013404

08011958 <__retarget_lock_init_recursive>:
 8011958:	4770      	bx	lr

0801195a <__retarget_lock_acquire_recursive>:
 801195a:	4770      	bx	lr

0801195c <__retarget_lock_release_recursive>:
 801195c:	4770      	bx	lr
	...

08011960 <_free_r>:
 8011960:	b538      	push	{r3, r4, r5, lr}
 8011962:	4605      	mov	r5, r0
 8011964:	2900      	cmp	r1, #0
 8011966:	d041      	beq.n	80119ec <_free_r+0x8c>
 8011968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801196c:	1f0c      	subs	r4, r1, #4
 801196e:	2b00      	cmp	r3, #0
 8011970:	bfb8      	it	lt
 8011972:	18e4      	addlt	r4, r4, r3
 8011974:	f000 f8e0 	bl	8011b38 <__malloc_lock>
 8011978:	4a1d      	ldr	r2, [pc, #116]	@ (80119f0 <_free_r+0x90>)
 801197a:	6813      	ldr	r3, [r2, #0]
 801197c:	b933      	cbnz	r3, 801198c <_free_r+0x2c>
 801197e:	6063      	str	r3, [r4, #4]
 8011980:	6014      	str	r4, [r2, #0]
 8011982:	4628      	mov	r0, r5
 8011984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011988:	f000 b8dc 	b.w	8011b44 <__malloc_unlock>
 801198c:	42a3      	cmp	r3, r4
 801198e:	d908      	bls.n	80119a2 <_free_r+0x42>
 8011990:	6820      	ldr	r0, [r4, #0]
 8011992:	1821      	adds	r1, r4, r0
 8011994:	428b      	cmp	r3, r1
 8011996:	bf01      	itttt	eq
 8011998:	6819      	ldreq	r1, [r3, #0]
 801199a:	685b      	ldreq	r3, [r3, #4]
 801199c:	1809      	addeq	r1, r1, r0
 801199e:	6021      	streq	r1, [r4, #0]
 80119a0:	e7ed      	b.n	801197e <_free_r+0x1e>
 80119a2:	461a      	mov	r2, r3
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	b10b      	cbz	r3, 80119ac <_free_r+0x4c>
 80119a8:	42a3      	cmp	r3, r4
 80119aa:	d9fa      	bls.n	80119a2 <_free_r+0x42>
 80119ac:	6811      	ldr	r1, [r2, #0]
 80119ae:	1850      	adds	r0, r2, r1
 80119b0:	42a0      	cmp	r0, r4
 80119b2:	d10b      	bne.n	80119cc <_free_r+0x6c>
 80119b4:	6820      	ldr	r0, [r4, #0]
 80119b6:	4401      	add	r1, r0
 80119b8:	1850      	adds	r0, r2, r1
 80119ba:	4283      	cmp	r3, r0
 80119bc:	6011      	str	r1, [r2, #0]
 80119be:	d1e0      	bne.n	8011982 <_free_r+0x22>
 80119c0:	6818      	ldr	r0, [r3, #0]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	6053      	str	r3, [r2, #4]
 80119c6:	4408      	add	r0, r1
 80119c8:	6010      	str	r0, [r2, #0]
 80119ca:	e7da      	b.n	8011982 <_free_r+0x22>
 80119cc:	d902      	bls.n	80119d4 <_free_r+0x74>
 80119ce:	230c      	movs	r3, #12
 80119d0:	602b      	str	r3, [r5, #0]
 80119d2:	e7d6      	b.n	8011982 <_free_r+0x22>
 80119d4:	6820      	ldr	r0, [r4, #0]
 80119d6:	1821      	adds	r1, r4, r0
 80119d8:	428b      	cmp	r3, r1
 80119da:	bf04      	itt	eq
 80119dc:	6819      	ldreq	r1, [r3, #0]
 80119de:	685b      	ldreq	r3, [r3, #4]
 80119e0:	6063      	str	r3, [r4, #4]
 80119e2:	bf04      	itt	eq
 80119e4:	1809      	addeq	r1, r1, r0
 80119e6:	6021      	streq	r1, [r4, #0]
 80119e8:	6054      	str	r4, [r2, #4]
 80119ea:	e7ca      	b.n	8011982 <_free_r+0x22>
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	bf00      	nop
 80119f0:	20001800 	.word	0x20001800

080119f4 <sbrk_aligned>:
 80119f4:	b570      	push	{r4, r5, r6, lr}
 80119f6:	4e0f      	ldr	r6, [pc, #60]	@ (8011a34 <sbrk_aligned+0x40>)
 80119f8:	460c      	mov	r4, r1
 80119fa:	6831      	ldr	r1, [r6, #0]
 80119fc:	4605      	mov	r5, r0
 80119fe:	b911      	cbnz	r1, 8011a06 <sbrk_aligned+0x12>
 8011a00:	f000 fc9e 	bl	8012340 <_sbrk_r>
 8011a04:	6030      	str	r0, [r6, #0]
 8011a06:	4621      	mov	r1, r4
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f000 fc99 	bl	8012340 <_sbrk_r>
 8011a0e:	1c43      	adds	r3, r0, #1
 8011a10:	d103      	bne.n	8011a1a <sbrk_aligned+0x26>
 8011a12:	f04f 34ff 	mov.w	r4, #4294967295
 8011a16:	4620      	mov	r0, r4
 8011a18:	bd70      	pop	{r4, r5, r6, pc}
 8011a1a:	1cc4      	adds	r4, r0, #3
 8011a1c:	f024 0403 	bic.w	r4, r4, #3
 8011a20:	42a0      	cmp	r0, r4
 8011a22:	d0f8      	beq.n	8011a16 <sbrk_aligned+0x22>
 8011a24:	1a21      	subs	r1, r4, r0
 8011a26:	4628      	mov	r0, r5
 8011a28:	f000 fc8a 	bl	8012340 <_sbrk_r>
 8011a2c:	3001      	adds	r0, #1
 8011a2e:	d1f2      	bne.n	8011a16 <sbrk_aligned+0x22>
 8011a30:	e7ef      	b.n	8011a12 <sbrk_aligned+0x1e>
 8011a32:	bf00      	nop
 8011a34:	200017fc 	.word	0x200017fc

08011a38 <_malloc_r>:
 8011a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a3c:	1ccd      	adds	r5, r1, #3
 8011a3e:	f025 0503 	bic.w	r5, r5, #3
 8011a42:	3508      	adds	r5, #8
 8011a44:	2d0c      	cmp	r5, #12
 8011a46:	bf38      	it	cc
 8011a48:	250c      	movcc	r5, #12
 8011a4a:	2d00      	cmp	r5, #0
 8011a4c:	4606      	mov	r6, r0
 8011a4e:	db01      	blt.n	8011a54 <_malloc_r+0x1c>
 8011a50:	42a9      	cmp	r1, r5
 8011a52:	d904      	bls.n	8011a5e <_malloc_r+0x26>
 8011a54:	230c      	movs	r3, #12
 8011a56:	6033      	str	r3, [r6, #0]
 8011a58:	2000      	movs	r0, #0
 8011a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b34 <_malloc_r+0xfc>
 8011a62:	f000 f869 	bl	8011b38 <__malloc_lock>
 8011a66:	f8d8 3000 	ldr.w	r3, [r8]
 8011a6a:	461c      	mov	r4, r3
 8011a6c:	bb44      	cbnz	r4, 8011ac0 <_malloc_r+0x88>
 8011a6e:	4629      	mov	r1, r5
 8011a70:	4630      	mov	r0, r6
 8011a72:	f7ff ffbf 	bl	80119f4 <sbrk_aligned>
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	4604      	mov	r4, r0
 8011a7a:	d158      	bne.n	8011b2e <_malloc_r+0xf6>
 8011a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8011a80:	4627      	mov	r7, r4
 8011a82:	2f00      	cmp	r7, #0
 8011a84:	d143      	bne.n	8011b0e <_malloc_r+0xd6>
 8011a86:	2c00      	cmp	r4, #0
 8011a88:	d04b      	beq.n	8011b22 <_malloc_r+0xea>
 8011a8a:	6823      	ldr	r3, [r4, #0]
 8011a8c:	4639      	mov	r1, r7
 8011a8e:	4630      	mov	r0, r6
 8011a90:	eb04 0903 	add.w	r9, r4, r3
 8011a94:	f000 fc54 	bl	8012340 <_sbrk_r>
 8011a98:	4581      	cmp	r9, r0
 8011a9a:	d142      	bne.n	8011b22 <_malloc_r+0xea>
 8011a9c:	6821      	ldr	r1, [r4, #0]
 8011a9e:	1a6d      	subs	r5, r5, r1
 8011aa0:	4629      	mov	r1, r5
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f7ff ffa6 	bl	80119f4 <sbrk_aligned>
 8011aa8:	3001      	adds	r0, #1
 8011aaa:	d03a      	beq.n	8011b22 <_malloc_r+0xea>
 8011aac:	6823      	ldr	r3, [r4, #0]
 8011aae:	442b      	add	r3, r5
 8011ab0:	6023      	str	r3, [r4, #0]
 8011ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8011ab6:	685a      	ldr	r2, [r3, #4]
 8011ab8:	bb62      	cbnz	r2, 8011b14 <_malloc_r+0xdc>
 8011aba:	f8c8 7000 	str.w	r7, [r8]
 8011abe:	e00f      	b.n	8011ae0 <_malloc_r+0xa8>
 8011ac0:	6822      	ldr	r2, [r4, #0]
 8011ac2:	1b52      	subs	r2, r2, r5
 8011ac4:	d420      	bmi.n	8011b08 <_malloc_r+0xd0>
 8011ac6:	2a0b      	cmp	r2, #11
 8011ac8:	d917      	bls.n	8011afa <_malloc_r+0xc2>
 8011aca:	1961      	adds	r1, r4, r5
 8011acc:	42a3      	cmp	r3, r4
 8011ace:	6025      	str	r5, [r4, #0]
 8011ad0:	bf18      	it	ne
 8011ad2:	6059      	strne	r1, [r3, #4]
 8011ad4:	6863      	ldr	r3, [r4, #4]
 8011ad6:	bf08      	it	eq
 8011ad8:	f8c8 1000 	streq.w	r1, [r8]
 8011adc:	5162      	str	r2, [r4, r5]
 8011ade:	604b      	str	r3, [r1, #4]
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	f000 f82f 	bl	8011b44 <__malloc_unlock>
 8011ae6:	f104 000b 	add.w	r0, r4, #11
 8011aea:	1d23      	adds	r3, r4, #4
 8011aec:	f020 0007 	bic.w	r0, r0, #7
 8011af0:	1ac2      	subs	r2, r0, r3
 8011af2:	bf1c      	itt	ne
 8011af4:	1a1b      	subne	r3, r3, r0
 8011af6:	50a3      	strne	r3, [r4, r2]
 8011af8:	e7af      	b.n	8011a5a <_malloc_r+0x22>
 8011afa:	6862      	ldr	r2, [r4, #4]
 8011afc:	42a3      	cmp	r3, r4
 8011afe:	bf0c      	ite	eq
 8011b00:	f8c8 2000 	streq.w	r2, [r8]
 8011b04:	605a      	strne	r2, [r3, #4]
 8011b06:	e7eb      	b.n	8011ae0 <_malloc_r+0xa8>
 8011b08:	4623      	mov	r3, r4
 8011b0a:	6864      	ldr	r4, [r4, #4]
 8011b0c:	e7ae      	b.n	8011a6c <_malloc_r+0x34>
 8011b0e:	463c      	mov	r4, r7
 8011b10:	687f      	ldr	r7, [r7, #4]
 8011b12:	e7b6      	b.n	8011a82 <_malloc_r+0x4a>
 8011b14:	461a      	mov	r2, r3
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	42a3      	cmp	r3, r4
 8011b1a:	d1fb      	bne.n	8011b14 <_malloc_r+0xdc>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	6053      	str	r3, [r2, #4]
 8011b20:	e7de      	b.n	8011ae0 <_malloc_r+0xa8>
 8011b22:	230c      	movs	r3, #12
 8011b24:	6033      	str	r3, [r6, #0]
 8011b26:	4630      	mov	r0, r6
 8011b28:	f000 f80c 	bl	8011b44 <__malloc_unlock>
 8011b2c:	e794      	b.n	8011a58 <_malloc_r+0x20>
 8011b2e:	6005      	str	r5, [r0, #0]
 8011b30:	e7d6      	b.n	8011ae0 <_malloc_r+0xa8>
 8011b32:	bf00      	nop
 8011b34:	20001800 	.word	0x20001800

08011b38 <__malloc_lock>:
 8011b38:	4801      	ldr	r0, [pc, #4]	@ (8011b40 <__malloc_lock+0x8>)
 8011b3a:	f7ff bf0e 	b.w	801195a <__retarget_lock_acquire_recursive>
 8011b3e:	bf00      	nop
 8011b40:	200017f8 	.word	0x200017f8

08011b44 <__malloc_unlock>:
 8011b44:	4801      	ldr	r0, [pc, #4]	@ (8011b4c <__malloc_unlock+0x8>)
 8011b46:	f7ff bf09 	b.w	801195c <__retarget_lock_release_recursive>
 8011b4a:	bf00      	nop
 8011b4c:	200017f8 	.word	0x200017f8

08011b50 <__sfputc_r>:
 8011b50:	6893      	ldr	r3, [r2, #8]
 8011b52:	3b01      	subs	r3, #1
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	b410      	push	{r4}
 8011b58:	6093      	str	r3, [r2, #8]
 8011b5a:	da07      	bge.n	8011b6c <__sfputc_r+0x1c>
 8011b5c:	6994      	ldr	r4, [r2, #24]
 8011b5e:	42a3      	cmp	r3, r4
 8011b60:	db01      	blt.n	8011b66 <__sfputc_r+0x16>
 8011b62:	290a      	cmp	r1, #10
 8011b64:	d102      	bne.n	8011b6c <__sfputc_r+0x1c>
 8011b66:	bc10      	pop	{r4}
 8011b68:	f7ff bde9 	b.w	801173e <__swbuf_r>
 8011b6c:	6813      	ldr	r3, [r2, #0]
 8011b6e:	1c58      	adds	r0, r3, #1
 8011b70:	6010      	str	r0, [r2, #0]
 8011b72:	7019      	strb	r1, [r3, #0]
 8011b74:	4608      	mov	r0, r1
 8011b76:	bc10      	pop	{r4}
 8011b78:	4770      	bx	lr

08011b7a <__sfputs_r>:
 8011b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	460f      	mov	r7, r1
 8011b80:	4614      	mov	r4, r2
 8011b82:	18d5      	adds	r5, r2, r3
 8011b84:	42ac      	cmp	r4, r5
 8011b86:	d101      	bne.n	8011b8c <__sfputs_r+0x12>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	e007      	b.n	8011b9c <__sfputs_r+0x22>
 8011b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b90:	463a      	mov	r2, r7
 8011b92:	4630      	mov	r0, r6
 8011b94:	f7ff ffdc 	bl	8011b50 <__sfputc_r>
 8011b98:	1c43      	adds	r3, r0, #1
 8011b9a:	d1f3      	bne.n	8011b84 <__sfputs_r+0xa>
 8011b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ba0 <_vfiprintf_r>:
 8011ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ba4:	460d      	mov	r5, r1
 8011ba6:	b09d      	sub	sp, #116	@ 0x74
 8011ba8:	4614      	mov	r4, r2
 8011baa:	4698      	mov	r8, r3
 8011bac:	4606      	mov	r6, r0
 8011bae:	b118      	cbz	r0, 8011bb8 <_vfiprintf_r+0x18>
 8011bb0:	6a03      	ldr	r3, [r0, #32]
 8011bb2:	b90b      	cbnz	r3, 8011bb8 <_vfiprintf_r+0x18>
 8011bb4:	f7ff fcda 	bl	801156c <__sinit>
 8011bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bba:	07d9      	lsls	r1, r3, #31
 8011bbc:	d405      	bmi.n	8011bca <_vfiprintf_r+0x2a>
 8011bbe:	89ab      	ldrh	r3, [r5, #12]
 8011bc0:	059a      	lsls	r2, r3, #22
 8011bc2:	d402      	bmi.n	8011bca <_vfiprintf_r+0x2a>
 8011bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bc6:	f7ff fec8 	bl	801195a <__retarget_lock_acquire_recursive>
 8011bca:	89ab      	ldrh	r3, [r5, #12]
 8011bcc:	071b      	lsls	r3, r3, #28
 8011bce:	d501      	bpl.n	8011bd4 <_vfiprintf_r+0x34>
 8011bd0:	692b      	ldr	r3, [r5, #16]
 8011bd2:	b99b      	cbnz	r3, 8011bfc <_vfiprintf_r+0x5c>
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	f7ff fdf0 	bl	80117bc <__swsetup_r>
 8011bdc:	b170      	cbz	r0, 8011bfc <_vfiprintf_r+0x5c>
 8011bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011be0:	07dc      	lsls	r4, r3, #31
 8011be2:	d504      	bpl.n	8011bee <_vfiprintf_r+0x4e>
 8011be4:	f04f 30ff 	mov.w	r0, #4294967295
 8011be8:	b01d      	add	sp, #116	@ 0x74
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	89ab      	ldrh	r3, [r5, #12]
 8011bf0:	0598      	lsls	r0, r3, #22
 8011bf2:	d4f7      	bmi.n	8011be4 <_vfiprintf_r+0x44>
 8011bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bf6:	f7ff feb1 	bl	801195c <__retarget_lock_release_recursive>
 8011bfa:	e7f3      	b.n	8011be4 <_vfiprintf_r+0x44>
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c00:	2320      	movs	r3, #32
 8011c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c0a:	2330      	movs	r3, #48	@ 0x30
 8011c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011dbc <_vfiprintf_r+0x21c>
 8011c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c14:	f04f 0901 	mov.w	r9, #1
 8011c18:	4623      	mov	r3, r4
 8011c1a:	469a      	mov	sl, r3
 8011c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c20:	b10a      	cbz	r2, 8011c26 <_vfiprintf_r+0x86>
 8011c22:	2a25      	cmp	r2, #37	@ 0x25
 8011c24:	d1f9      	bne.n	8011c1a <_vfiprintf_r+0x7a>
 8011c26:	ebba 0b04 	subs.w	fp, sl, r4
 8011c2a:	d00b      	beq.n	8011c44 <_vfiprintf_r+0xa4>
 8011c2c:	465b      	mov	r3, fp
 8011c2e:	4622      	mov	r2, r4
 8011c30:	4629      	mov	r1, r5
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7ff ffa1 	bl	8011b7a <__sfputs_r>
 8011c38:	3001      	adds	r0, #1
 8011c3a:	f000 80a7 	beq.w	8011d8c <_vfiprintf_r+0x1ec>
 8011c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c40:	445a      	add	r2, fp
 8011c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c44:	f89a 3000 	ldrb.w	r3, [sl]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f000 809f 	beq.w	8011d8c <_vfiprintf_r+0x1ec>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	f04f 32ff 	mov.w	r2, #4294967295
 8011c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c58:	f10a 0a01 	add.w	sl, sl, #1
 8011c5c:	9304      	str	r3, [sp, #16]
 8011c5e:	9307      	str	r3, [sp, #28]
 8011c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c66:	4654      	mov	r4, sl
 8011c68:	2205      	movs	r2, #5
 8011c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c6e:	4853      	ldr	r0, [pc, #332]	@ (8011dbc <_vfiprintf_r+0x21c>)
 8011c70:	f7ee fa8e 	bl	8000190 <memchr>
 8011c74:	9a04      	ldr	r2, [sp, #16]
 8011c76:	b9d8      	cbnz	r0, 8011cb0 <_vfiprintf_r+0x110>
 8011c78:	06d1      	lsls	r1, r2, #27
 8011c7a:	bf44      	itt	mi
 8011c7c:	2320      	movmi	r3, #32
 8011c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c82:	0713      	lsls	r3, r2, #28
 8011c84:	bf44      	itt	mi
 8011c86:	232b      	movmi	r3, #43	@ 0x2b
 8011c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c92:	d015      	beq.n	8011cc0 <_vfiprintf_r+0x120>
 8011c94:	9a07      	ldr	r2, [sp, #28]
 8011c96:	4654      	mov	r4, sl
 8011c98:	2000      	movs	r0, #0
 8011c9a:	f04f 0c0a 	mov.w	ip, #10
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ca4:	3b30      	subs	r3, #48	@ 0x30
 8011ca6:	2b09      	cmp	r3, #9
 8011ca8:	d94b      	bls.n	8011d42 <_vfiprintf_r+0x1a2>
 8011caa:	b1b0      	cbz	r0, 8011cda <_vfiprintf_r+0x13a>
 8011cac:	9207      	str	r2, [sp, #28]
 8011cae:	e014      	b.n	8011cda <_vfiprintf_r+0x13a>
 8011cb0:	eba0 0308 	sub.w	r3, r0, r8
 8011cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	9304      	str	r3, [sp, #16]
 8011cbc:	46a2      	mov	sl, r4
 8011cbe:	e7d2      	b.n	8011c66 <_vfiprintf_r+0xc6>
 8011cc0:	9b03      	ldr	r3, [sp, #12]
 8011cc2:	1d19      	adds	r1, r3, #4
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	9103      	str	r1, [sp, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	bfbb      	ittet	lt
 8011ccc:	425b      	neglt	r3, r3
 8011cce:	f042 0202 	orrlt.w	r2, r2, #2
 8011cd2:	9307      	strge	r3, [sp, #28]
 8011cd4:	9307      	strlt	r3, [sp, #28]
 8011cd6:	bfb8      	it	lt
 8011cd8:	9204      	strlt	r2, [sp, #16]
 8011cda:	7823      	ldrb	r3, [r4, #0]
 8011cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cde:	d10a      	bne.n	8011cf6 <_vfiprintf_r+0x156>
 8011ce0:	7863      	ldrb	r3, [r4, #1]
 8011ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ce4:	d132      	bne.n	8011d4c <_vfiprintf_r+0x1ac>
 8011ce6:	9b03      	ldr	r3, [sp, #12]
 8011ce8:	1d1a      	adds	r2, r3, #4
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	9203      	str	r2, [sp, #12]
 8011cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011cf2:	3402      	adds	r4, #2
 8011cf4:	9305      	str	r3, [sp, #20]
 8011cf6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8011dc0 <_vfiprintf_r+0x220>
 8011cfa:	7821      	ldrb	r1, [r4, #0]
 8011cfc:	2203      	movs	r2, #3
 8011cfe:	4650      	mov	r0, sl
 8011d00:	f7ee fa46 	bl	8000190 <memchr>
 8011d04:	b138      	cbz	r0, 8011d16 <_vfiprintf_r+0x176>
 8011d06:	9b04      	ldr	r3, [sp, #16]
 8011d08:	eba0 000a 	sub.w	r0, r0, sl
 8011d0c:	2240      	movs	r2, #64	@ 0x40
 8011d0e:	4082      	lsls	r2, r0
 8011d10:	4313      	orrs	r3, r2
 8011d12:	3401      	adds	r4, #1
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d1a:	482a      	ldr	r0, [pc, #168]	@ (8011dc4 <_vfiprintf_r+0x224>)
 8011d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d20:	2206      	movs	r2, #6
 8011d22:	f7ee fa35 	bl	8000190 <memchr>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	d03f      	beq.n	8011daa <_vfiprintf_r+0x20a>
 8011d2a:	4b27      	ldr	r3, [pc, #156]	@ (8011dc8 <_vfiprintf_r+0x228>)
 8011d2c:	bb1b      	cbnz	r3, 8011d76 <_vfiprintf_r+0x1d6>
 8011d2e:	9b03      	ldr	r3, [sp, #12]
 8011d30:	3307      	adds	r3, #7
 8011d32:	f023 0307 	bic.w	r3, r3, #7
 8011d36:	3308      	adds	r3, #8
 8011d38:	9303      	str	r3, [sp, #12]
 8011d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d3c:	443b      	add	r3, r7
 8011d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d40:	e76a      	b.n	8011c18 <_vfiprintf_r+0x78>
 8011d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d46:	460c      	mov	r4, r1
 8011d48:	2001      	movs	r0, #1
 8011d4a:	e7a8      	b.n	8011c9e <_vfiprintf_r+0xfe>
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	3401      	adds	r4, #1
 8011d50:	9305      	str	r3, [sp, #20]
 8011d52:	4619      	mov	r1, r3
 8011d54:	f04f 0c0a 	mov.w	ip, #10
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d5e:	3a30      	subs	r2, #48	@ 0x30
 8011d60:	2a09      	cmp	r2, #9
 8011d62:	d903      	bls.n	8011d6c <_vfiprintf_r+0x1cc>
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d0c6      	beq.n	8011cf6 <_vfiprintf_r+0x156>
 8011d68:	9105      	str	r1, [sp, #20]
 8011d6a:	e7c4      	b.n	8011cf6 <_vfiprintf_r+0x156>
 8011d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d70:	4604      	mov	r4, r0
 8011d72:	2301      	movs	r3, #1
 8011d74:	e7f0      	b.n	8011d58 <_vfiprintf_r+0x1b8>
 8011d76:	ab03      	add	r3, sp, #12
 8011d78:	9300      	str	r3, [sp, #0]
 8011d7a:	462a      	mov	r2, r5
 8011d7c:	4b13      	ldr	r3, [pc, #76]	@ (8011dcc <_vfiprintf_r+0x22c>)
 8011d7e:	a904      	add	r1, sp, #16
 8011d80:	4630      	mov	r0, r6
 8011d82:	f3af 8000 	nop.w
 8011d86:	4607      	mov	r7, r0
 8011d88:	1c78      	adds	r0, r7, #1
 8011d8a:	d1d6      	bne.n	8011d3a <_vfiprintf_r+0x19a>
 8011d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d8e:	07d9      	lsls	r1, r3, #31
 8011d90:	d405      	bmi.n	8011d9e <_vfiprintf_r+0x1fe>
 8011d92:	89ab      	ldrh	r3, [r5, #12]
 8011d94:	059a      	lsls	r2, r3, #22
 8011d96:	d402      	bmi.n	8011d9e <_vfiprintf_r+0x1fe>
 8011d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d9a:	f7ff fddf 	bl	801195c <__retarget_lock_release_recursive>
 8011d9e:	89ab      	ldrh	r3, [r5, #12]
 8011da0:	065b      	lsls	r3, r3, #25
 8011da2:	f53f af1f 	bmi.w	8011be4 <_vfiprintf_r+0x44>
 8011da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011da8:	e71e      	b.n	8011be8 <_vfiprintf_r+0x48>
 8011daa:	ab03      	add	r3, sp, #12
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	462a      	mov	r2, r5
 8011db0:	4b06      	ldr	r3, [pc, #24]	@ (8011dcc <_vfiprintf_r+0x22c>)
 8011db2:	a904      	add	r1, sp, #16
 8011db4:	4630      	mov	r0, r6
 8011db6:	f000 f879 	bl	8011eac <_printf_i>
 8011dba:	e7e4      	b.n	8011d86 <_vfiprintf_r+0x1e6>
 8011dbc:	080133c0 	.word	0x080133c0
 8011dc0:	080133c6 	.word	0x080133c6
 8011dc4:	080133ca 	.word	0x080133ca
 8011dc8:	00000000 	.word	0x00000000
 8011dcc:	08011b7b 	.word	0x08011b7b

08011dd0 <_printf_common>:
 8011dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd4:	4616      	mov	r6, r2
 8011dd6:	4698      	mov	r8, r3
 8011dd8:	688a      	ldr	r2, [r1, #8]
 8011dda:	690b      	ldr	r3, [r1, #16]
 8011ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011de0:	4293      	cmp	r3, r2
 8011de2:	bfb8      	it	lt
 8011de4:	4613      	movlt	r3, r2
 8011de6:	6033      	str	r3, [r6, #0]
 8011de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011dec:	4607      	mov	r7, r0
 8011dee:	460c      	mov	r4, r1
 8011df0:	b10a      	cbz	r2, 8011df6 <_printf_common+0x26>
 8011df2:	3301      	adds	r3, #1
 8011df4:	6033      	str	r3, [r6, #0]
 8011df6:	6823      	ldr	r3, [r4, #0]
 8011df8:	0699      	lsls	r1, r3, #26
 8011dfa:	bf42      	ittt	mi
 8011dfc:	6833      	ldrmi	r3, [r6, #0]
 8011dfe:	3302      	addmi	r3, #2
 8011e00:	6033      	strmi	r3, [r6, #0]
 8011e02:	6825      	ldr	r5, [r4, #0]
 8011e04:	f015 0506 	ands.w	r5, r5, #6
 8011e08:	d106      	bne.n	8011e18 <_printf_common+0x48>
 8011e0a:	f104 0a19 	add.w	sl, r4, #25
 8011e0e:	68e3      	ldr	r3, [r4, #12]
 8011e10:	6832      	ldr	r2, [r6, #0]
 8011e12:	1a9b      	subs	r3, r3, r2
 8011e14:	42ab      	cmp	r3, r5
 8011e16:	dc26      	bgt.n	8011e66 <_printf_common+0x96>
 8011e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e1c:	6822      	ldr	r2, [r4, #0]
 8011e1e:	3b00      	subs	r3, #0
 8011e20:	bf18      	it	ne
 8011e22:	2301      	movne	r3, #1
 8011e24:	0692      	lsls	r2, r2, #26
 8011e26:	d42b      	bmi.n	8011e80 <_printf_common+0xb0>
 8011e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e2c:	4641      	mov	r1, r8
 8011e2e:	4638      	mov	r0, r7
 8011e30:	47c8      	blx	r9
 8011e32:	3001      	adds	r0, #1
 8011e34:	d01e      	beq.n	8011e74 <_printf_common+0xa4>
 8011e36:	6823      	ldr	r3, [r4, #0]
 8011e38:	6922      	ldr	r2, [r4, #16]
 8011e3a:	f003 0306 	and.w	r3, r3, #6
 8011e3e:	2b04      	cmp	r3, #4
 8011e40:	bf02      	ittt	eq
 8011e42:	68e5      	ldreq	r5, [r4, #12]
 8011e44:	6833      	ldreq	r3, [r6, #0]
 8011e46:	1aed      	subeq	r5, r5, r3
 8011e48:	68a3      	ldr	r3, [r4, #8]
 8011e4a:	bf0c      	ite	eq
 8011e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e50:	2500      	movne	r5, #0
 8011e52:	4293      	cmp	r3, r2
 8011e54:	bfc4      	itt	gt
 8011e56:	1a9b      	subgt	r3, r3, r2
 8011e58:	18ed      	addgt	r5, r5, r3
 8011e5a:	2600      	movs	r6, #0
 8011e5c:	341a      	adds	r4, #26
 8011e5e:	42b5      	cmp	r5, r6
 8011e60:	d11a      	bne.n	8011e98 <_printf_common+0xc8>
 8011e62:	2000      	movs	r0, #0
 8011e64:	e008      	b.n	8011e78 <_printf_common+0xa8>
 8011e66:	2301      	movs	r3, #1
 8011e68:	4652      	mov	r2, sl
 8011e6a:	4641      	mov	r1, r8
 8011e6c:	4638      	mov	r0, r7
 8011e6e:	47c8      	blx	r9
 8011e70:	3001      	adds	r0, #1
 8011e72:	d103      	bne.n	8011e7c <_printf_common+0xac>
 8011e74:	f04f 30ff 	mov.w	r0, #4294967295
 8011e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e7c:	3501      	adds	r5, #1
 8011e7e:	e7c6      	b.n	8011e0e <_printf_common+0x3e>
 8011e80:	18e1      	adds	r1, r4, r3
 8011e82:	1c5a      	adds	r2, r3, #1
 8011e84:	2030      	movs	r0, #48	@ 0x30
 8011e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e8a:	4422      	add	r2, r4
 8011e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e94:	3302      	adds	r3, #2
 8011e96:	e7c7      	b.n	8011e28 <_printf_common+0x58>
 8011e98:	2301      	movs	r3, #1
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	4641      	mov	r1, r8
 8011e9e:	4638      	mov	r0, r7
 8011ea0:	47c8      	blx	r9
 8011ea2:	3001      	adds	r0, #1
 8011ea4:	d0e6      	beq.n	8011e74 <_printf_common+0xa4>
 8011ea6:	3601      	adds	r6, #1
 8011ea8:	e7d9      	b.n	8011e5e <_printf_common+0x8e>
	...

08011eac <_printf_i>:
 8011eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb0:	7e0f      	ldrb	r7, [r1, #24]
 8011eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011eb4:	2f78      	cmp	r7, #120	@ 0x78
 8011eb6:	4691      	mov	r9, r2
 8011eb8:	4680      	mov	r8, r0
 8011eba:	460c      	mov	r4, r1
 8011ebc:	469a      	mov	sl, r3
 8011ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011ec2:	d807      	bhi.n	8011ed4 <_printf_i+0x28>
 8011ec4:	2f62      	cmp	r7, #98	@ 0x62
 8011ec6:	d80a      	bhi.n	8011ede <_printf_i+0x32>
 8011ec8:	2f00      	cmp	r7, #0
 8011eca:	f000 80d1 	beq.w	8012070 <_printf_i+0x1c4>
 8011ece:	2f58      	cmp	r7, #88	@ 0x58
 8011ed0:	f000 80b8 	beq.w	8012044 <_printf_i+0x198>
 8011ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011edc:	e03a      	b.n	8011f54 <_printf_i+0xa8>
 8011ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011ee2:	2b15      	cmp	r3, #21
 8011ee4:	d8f6      	bhi.n	8011ed4 <_printf_i+0x28>
 8011ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8011eec <_printf_i+0x40>)
 8011ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011eec:	08011f45 	.word	0x08011f45
 8011ef0:	08011f59 	.word	0x08011f59
 8011ef4:	08011ed5 	.word	0x08011ed5
 8011ef8:	08011ed5 	.word	0x08011ed5
 8011efc:	08011ed5 	.word	0x08011ed5
 8011f00:	08011ed5 	.word	0x08011ed5
 8011f04:	08011f59 	.word	0x08011f59
 8011f08:	08011ed5 	.word	0x08011ed5
 8011f0c:	08011ed5 	.word	0x08011ed5
 8011f10:	08011ed5 	.word	0x08011ed5
 8011f14:	08011ed5 	.word	0x08011ed5
 8011f18:	08012057 	.word	0x08012057
 8011f1c:	08011f83 	.word	0x08011f83
 8011f20:	08012011 	.word	0x08012011
 8011f24:	08011ed5 	.word	0x08011ed5
 8011f28:	08011ed5 	.word	0x08011ed5
 8011f2c:	08012079 	.word	0x08012079
 8011f30:	08011ed5 	.word	0x08011ed5
 8011f34:	08011f83 	.word	0x08011f83
 8011f38:	08011ed5 	.word	0x08011ed5
 8011f3c:	08011ed5 	.word	0x08011ed5
 8011f40:	08012019 	.word	0x08012019
 8011f44:	6833      	ldr	r3, [r6, #0]
 8011f46:	1d1a      	adds	r2, r3, #4
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	6032      	str	r2, [r6, #0]
 8011f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011f54:	2301      	movs	r3, #1
 8011f56:	e09c      	b.n	8012092 <_printf_i+0x1e6>
 8011f58:	6833      	ldr	r3, [r6, #0]
 8011f5a:	6820      	ldr	r0, [r4, #0]
 8011f5c:	1d19      	adds	r1, r3, #4
 8011f5e:	6031      	str	r1, [r6, #0]
 8011f60:	0606      	lsls	r6, r0, #24
 8011f62:	d501      	bpl.n	8011f68 <_printf_i+0xbc>
 8011f64:	681d      	ldr	r5, [r3, #0]
 8011f66:	e003      	b.n	8011f70 <_printf_i+0xc4>
 8011f68:	0645      	lsls	r5, r0, #25
 8011f6a:	d5fb      	bpl.n	8011f64 <_printf_i+0xb8>
 8011f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f70:	2d00      	cmp	r5, #0
 8011f72:	da03      	bge.n	8011f7c <_printf_i+0xd0>
 8011f74:	232d      	movs	r3, #45	@ 0x2d
 8011f76:	426d      	negs	r5, r5
 8011f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f7c:	4858      	ldr	r0, [pc, #352]	@ (80120e0 <_printf_i+0x234>)
 8011f7e:	230a      	movs	r3, #10
 8011f80:	e011      	b.n	8011fa6 <_printf_i+0xfa>
 8011f82:	6821      	ldr	r1, [r4, #0]
 8011f84:	6833      	ldr	r3, [r6, #0]
 8011f86:	0608      	lsls	r0, r1, #24
 8011f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f8c:	d402      	bmi.n	8011f94 <_printf_i+0xe8>
 8011f8e:	0649      	lsls	r1, r1, #25
 8011f90:	bf48      	it	mi
 8011f92:	b2ad      	uxthmi	r5, r5
 8011f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f96:	4852      	ldr	r0, [pc, #328]	@ (80120e0 <_printf_i+0x234>)
 8011f98:	6033      	str	r3, [r6, #0]
 8011f9a:	bf14      	ite	ne
 8011f9c:	230a      	movne	r3, #10
 8011f9e:	2308      	moveq	r3, #8
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011fa6:	6866      	ldr	r6, [r4, #4]
 8011fa8:	60a6      	str	r6, [r4, #8]
 8011faa:	2e00      	cmp	r6, #0
 8011fac:	db05      	blt.n	8011fba <_printf_i+0x10e>
 8011fae:	6821      	ldr	r1, [r4, #0]
 8011fb0:	432e      	orrs	r6, r5
 8011fb2:	f021 0104 	bic.w	r1, r1, #4
 8011fb6:	6021      	str	r1, [r4, #0]
 8011fb8:	d04b      	beq.n	8012052 <_printf_i+0x1a6>
 8011fba:	4616      	mov	r6, r2
 8011fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8011fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8011fc4:	5dc7      	ldrb	r7, [r0, r7]
 8011fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011fca:	462f      	mov	r7, r5
 8011fcc:	42bb      	cmp	r3, r7
 8011fce:	460d      	mov	r5, r1
 8011fd0:	d9f4      	bls.n	8011fbc <_printf_i+0x110>
 8011fd2:	2b08      	cmp	r3, #8
 8011fd4:	d10b      	bne.n	8011fee <_printf_i+0x142>
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	07df      	lsls	r7, r3, #31
 8011fda:	d508      	bpl.n	8011fee <_printf_i+0x142>
 8011fdc:	6923      	ldr	r3, [r4, #16]
 8011fde:	6861      	ldr	r1, [r4, #4]
 8011fe0:	4299      	cmp	r1, r3
 8011fe2:	bfde      	ittt	le
 8011fe4:	2330      	movle	r3, #48	@ 0x30
 8011fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011fee:	1b92      	subs	r2, r2, r6
 8011ff0:	6122      	str	r2, [r4, #16]
 8011ff2:	f8cd a000 	str.w	sl, [sp]
 8011ff6:	464b      	mov	r3, r9
 8011ff8:	aa03      	add	r2, sp, #12
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4640      	mov	r0, r8
 8011ffe:	f7ff fee7 	bl	8011dd0 <_printf_common>
 8012002:	3001      	adds	r0, #1
 8012004:	d14a      	bne.n	801209c <_printf_i+0x1f0>
 8012006:	f04f 30ff 	mov.w	r0, #4294967295
 801200a:	b004      	add	sp, #16
 801200c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012010:	6823      	ldr	r3, [r4, #0]
 8012012:	f043 0320 	orr.w	r3, r3, #32
 8012016:	6023      	str	r3, [r4, #0]
 8012018:	4832      	ldr	r0, [pc, #200]	@ (80120e4 <_printf_i+0x238>)
 801201a:	2778      	movs	r7, #120	@ 0x78
 801201c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	6831      	ldr	r1, [r6, #0]
 8012024:	061f      	lsls	r7, r3, #24
 8012026:	f851 5b04 	ldr.w	r5, [r1], #4
 801202a:	d402      	bmi.n	8012032 <_printf_i+0x186>
 801202c:	065f      	lsls	r7, r3, #25
 801202e:	bf48      	it	mi
 8012030:	b2ad      	uxthmi	r5, r5
 8012032:	6031      	str	r1, [r6, #0]
 8012034:	07d9      	lsls	r1, r3, #31
 8012036:	bf44      	itt	mi
 8012038:	f043 0320 	orrmi.w	r3, r3, #32
 801203c:	6023      	strmi	r3, [r4, #0]
 801203e:	b11d      	cbz	r5, 8012048 <_printf_i+0x19c>
 8012040:	2310      	movs	r3, #16
 8012042:	e7ad      	b.n	8011fa0 <_printf_i+0xf4>
 8012044:	4826      	ldr	r0, [pc, #152]	@ (80120e0 <_printf_i+0x234>)
 8012046:	e7e9      	b.n	801201c <_printf_i+0x170>
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	f023 0320 	bic.w	r3, r3, #32
 801204e:	6023      	str	r3, [r4, #0]
 8012050:	e7f6      	b.n	8012040 <_printf_i+0x194>
 8012052:	4616      	mov	r6, r2
 8012054:	e7bd      	b.n	8011fd2 <_printf_i+0x126>
 8012056:	6833      	ldr	r3, [r6, #0]
 8012058:	6825      	ldr	r5, [r4, #0]
 801205a:	6961      	ldr	r1, [r4, #20]
 801205c:	1d18      	adds	r0, r3, #4
 801205e:	6030      	str	r0, [r6, #0]
 8012060:	062e      	lsls	r6, r5, #24
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	d501      	bpl.n	801206a <_printf_i+0x1be>
 8012066:	6019      	str	r1, [r3, #0]
 8012068:	e002      	b.n	8012070 <_printf_i+0x1c4>
 801206a:	0668      	lsls	r0, r5, #25
 801206c:	d5fb      	bpl.n	8012066 <_printf_i+0x1ba>
 801206e:	8019      	strh	r1, [r3, #0]
 8012070:	2300      	movs	r3, #0
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	4616      	mov	r6, r2
 8012076:	e7bc      	b.n	8011ff2 <_printf_i+0x146>
 8012078:	6833      	ldr	r3, [r6, #0]
 801207a:	1d1a      	adds	r2, r3, #4
 801207c:	6032      	str	r2, [r6, #0]
 801207e:	681e      	ldr	r6, [r3, #0]
 8012080:	6862      	ldr	r2, [r4, #4]
 8012082:	2100      	movs	r1, #0
 8012084:	4630      	mov	r0, r6
 8012086:	f7ee f883 	bl	8000190 <memchr>
 801208a:	b108      	cbz	r0, 8012090 <_printf_i+0x1e4>
 801208c:	1b80      	subs	r0, r0, r6
 801208e:	6060      	str	r0, [r4, #4]
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	6123      	str	r3, [r4, #16]
 8012094:	2300      	movs	r3, #0
 8012096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801209a:	e7aa      	b.n	8011ff2 <_printf_i+0x146>
 801209c:	6923      	ldr	r3, [r4, #16]
 801209e:	4632      	mov	r2, r6
 80120a0:	4649      	mov	r1, r9
 80120a2:	4640      	mov	r0, r8
 80120a4:	47d0      	blx	sl
 80120a6:	3001      	adds	r0, #1
 80120a8:	d0ad      	beq.n	8012006 <_printf_i+0x15a>
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	079b      	lsls	r3, r3, #30
 80120ae:	d413      	bmi.n	80120d8 <_printf_i+0x22c>
 80120b0:	68e0      	ldr	r0, [r4, #12]
 80120b2:	9b03      	ldr	r3, [sp, #12]
 80120b4:	4298      	cmp	r0, r3
 80120b6:	bfb8      	it	lt
 80120b8:	4618      	movlt	r0, r3
 80120ba:	e7a6      	b.n	801200a <_printf_i+0x15e>
 80120bc:	2301      	movs	r3, #1
 80120be:	4632      	mov	r2, r6
 80120c0:	4649      	mov	r1, r9
 80120c2:	4640      	mov	r0, r8
 80120c4:	47d0      	blx	sl
 80120c6:	3001      	adds	r0, #1
 80120c8:	d09d      	beq.n	8012006 <_printf_i+0x15a>
 80120ca:	3501      	adds	r5, #1
 80120cc:	68e3      	ldr	r3, [r4, #12]
 80120ce:	9903      	ldr	r1, [sp, #12]
 80120d0:	1a5b      	subs	r3, r3, r1
 80120d2:	42ab      	cmp	r3, r5
 80120d4:	dcf2      	bgt.n	80120bc <_printf_i+0x210>
 80120d6:	e7eb      	b.n	80120b0 <_printf_i+0x204>
 80120d8:	2500      	movs	r5, #0
 80120da:	f104 0619 	add.w	r6, r4, #25
 80120de:	e7f5      	b.n	80120cc <_printf_i+0x220>
 80120e0:	080133d1 	.word	0x080133d1
 80120e4:	080133e2 	.word	0x080133e2

080120e8 <__sflush_r>:
 80120e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ee:	0716      	lsls	r6, r2, #28
 80120f0:	4605      	mov	r5, r0
 80120f2:	460c      	mov	r4, r1
 80120f4:	d454      	bmi.n	80121a0 <__sflush_r+0xb8>
 80120f6:	684b      	ldr	r3, [r1, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dc02      	bgt.n	8012102 <__sflush_r+0x1a>
 80120fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80120fe:	2b00      	cmp	r3, #0
 8012100:	dd48      	ble.n	8012194 <__sflush_r+0xac>
 8012102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012104:	2e00      	cmp	r6, #0
 8012106:	d045      	beq.n	8012194 <__sflush_r+0xac>
 8012108:	2300      	movs	r3, #0
 801210a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801210e:	682f      	ldr	r7, [r5, #0]
 8012110:	6a21      	ldr	r1, [r4, #32]
 8012112:	602b      	str	r3, [r5, #0]
 8012114:	d030      	beq.n	8012178 <__sflush_r+0x90>
 8012116:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	0759      	lsls	r1, r3, #29
 801211c:	d505      	bpl.n	801212a <__sflush_r+0x42>
 801211e:	6863      	ldr	r3, [r4, #4]
 8012120:	1ad2      	subs	r2, r2, r3
 8012122:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012124:	b10b      	cbz	r3, 801212a <__sflush_r+0x42>
 8012126:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012128:	1ad2      	subs	r2, r2, r3
 801212a:	2300      	movs	r3, #0
 801212c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801212e:	6a21      	ldr	r1, [r4, #32]
 8012130:	4628      	mov	r0, r5
 8012132:	47b0      	blx	r6
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	89a3      	ldrh	r3, [r4, #12]
 8012138:	d106      	bne.n	8012148 <__sflush_r+0x60>
 801213a:	6829      	ldr	r1, [r5, #0]
 801213c:	291d      	cmp	r1, #29
 801213e:	d82b      	bhi.n	8012198 <__sflush_r+0xb0>
 8012140:	4a28      	ldr	r2, [pc, #160]	@ (80121e4 <__sflush_r+0xfc>)
 8012142:	40ca      	lsrs	r2, r1
 8012144:	07d6      	lsls	r6, r2, #31
 8012146:	d527      	bpl.n	8012198 <__sflush_r+0xb0>
 8012148:	2200      	movs	r2, #0
 801214a:	6062      	str	r2, [r4, #4]
 801214c:	04d9      	lsls	r1, r3, #19
 801214e:	6922      	ldr	r2, [r4, #16]
 8012150:	6022      	str	r2, [r4, #0]
 8012152:	d504      	bpl.n	801215e <__sflush_r+0x76>
 8012154:	1c42      	adds	r2, r0, #1
 8012156:	d101      	bne.n	801215c <__sflush_r+0x74>
 8012158:	682b      	ldr	r3, [r5, #0]
 801215a:	b903      	cbnz	r3, 801215e <__sflush_r+0x76>
 801215c:	6560      	str	r0, [r4, #84]	@ 0x54
 801215e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012160:	602f      	str	r7, [r5, #0]
 8012162:	b1b9      	cbz	r1, 8012194 <__sflush_r+0xac>
 8012164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012168:	4299      	cmp	r1, r3
 801216a:	d002      	beq.n	8012172 <__sflush_r+0x8a>
 801216c:	4628      	mov	r0, r5
 801216e:	f7ff fbf7 	bl	8011960 <_free_r>
 8012172:	2300      	movs	r3, #0
 8012174:	6363      	str	r3, [r4, #52]	@ 0x34
 8012176:	e00d      	b.n	8012194 <__sflush_r+0xac>
 8012178:	2301      	movs	r3, #1
 801217a:	4628      	mov	r0, r5
 801217c:	47b0      	blx	r6
 801217e:	4602      	mov	r2, r0
 8012180:	1c50      	adds	r0, r2, #1
 8012182:	d1c9      	bne.n	8012118 <__sflush_r+0x30>
 8012184:	682b      	ldr	r3, [r5, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d0c6      	beq.n	8012118 <__sflush_r+0x30>
 801218a:	2b1d      	cmp	r3, #29
 801218c:	d001      	beq.n	8012192 <__sflush_r+0xaa>
 801218e:	2b16      	cmp	r3, #22
 8012190:	d11d      	bne.n	80121ce <__sflush_r+0xe6>
 8012192:	602f      	str	r7, [r5, #0]
 8012194:	2000      	movs	r0, #0
 8012196:	e021      	b.n	80121dc <__sflush_r+0xf4>
 8012198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801219c:	b21b      	sxth	r3, r3
 801219e:	e01a      	b.n	80121d6 <__sflush_r+0xee>
 80121a0:	690f      	ldr	r7, [r1, #16]
 80121a2:	2f00      	cmp	r7, #0
 80121a4:	d0f6      	beq.n	8012194 <__sflush_r+0xac>
 80121a6:	0793      	lsls	r3, r2, #30
 80121a8:	680e      	ldr	r6, [r1, #0]
 80121aa:	bf08      	it	eq
 80121ac:	694b      	ldreq	r3, [r1, #20]
 80121ae:	600f      	str	r7, [r1, #0]
 80121b0:	bf18      	it	ne
 80121b2:	2300      	movne	r3, #0
 80121b4:	1bf6      	subs	r6, r6, r7
 80121b6:	608b      	str	r3, [r1, #8]
 80121b8:	2e00      	cmp	r6, #0
 80121ba:	ddeb      	ble.n	8012194 <__sflush_r+0xac>
 80121bc:	6a21      	ldr	r1, [r4, #32]
 80121be:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80121c2:	4633      	mov	r3, r6
 80121c4:	463a      	mov	r2, r7
 80121c6:	4628      	mov	r0, r5
 80121c8:	47e0      	blx	ip
 80121ca:	2800      	cmp	r0, #0
 80121cc:	dc07      	bgt.n	80121de <__sflush_r+0xf6>
 80121ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121d6:	81a3      	strh	r3, [r4, #12]
 80121d8:	f04f 30ff 	mov.w	r0, #4294967295
 80121dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121de:	4407      	add	r7, r0
 80121e0:	1a36      	subs	r6, r6, r0
 80121e2:	e7e9      	b.n	80121b8 <__sflush_r+0xd0>
 80121e4:	20400001 	.word	0x20400001

080121e8 <_fflush_r>:
 80121e8:	b538      	push	{r3, r4, r5, lr}
 80121ea:	690b      	ldr	r3, [r1, #16]
 80121ec:	4605      	mov	r5, r0
 80121ee:	460c      	mov	r4, r1
 80121f0:	b913      	cbnz	r3, 80121f8 <_fflush_r+0x10>
 80121f2:	2500      	movs	r5, #0
 80121f4:	4628      	mov	r0, r5
 80121f6:	bd38      	pop	{r3, r4, r5, pc}
 80121f8:	b118      	cbz	r0, 8012202 <_fflush_r+0x1a>
 80121fa:	6a03      	ldr	r3, [r0, #32]
 80121fc:	b90b      	cbnz	r3, 8012202 <_fflush_r+0x1a>
 80121fe:	f7ff f9b5 	bl	801156c <__sinit>
 8012202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0f3      	beq.n	80121f2 <_fflush_r+0xa>
 801220a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801220c:	07d0      	lsls	r0, r2, #31
 801220e:	d404      	bmi.n	801221a <_fflush_r+0x32>
 8012210:	0599      	lsls	r1, r3, #22
 8012212:	d402      	bmi.n	801221a <_fflush_r+0x32>
 8012214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012216:	f7ff fba0 	bl	801195a <__retarget_lock_acquire_recursive>
 801221a:	4628      	mov	r0, r5
 801221c:	4621      	mov	r1, r4
 801221e:	f7ff ff63 	bl	80120e8 <__sflush_r>
 8012222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012224:	07da      	lsls	r2, r3, #31
 8012226:	4605      	mov	r5, r0
 8012228:	d4e4      	bmi.n	80121f4 <_fflush_r+0xc>
 801222a:	89a3      	ldrh	r3, [r4, #12]
 801222c:	059b      	lsls	r3, r3, #22
 801222e:	d4e1      	bmi.n	80121f4 <_fflush_r+0xc>
 8012230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012232:	f7ff fb93 	bl	801195c <__retarget_lock_release_recursive>
 8012236:	e7dd      	b.n	80121f4 <_fflush_r+0xc>

08012238 <__swhatbuf_r>:
 8012238:	b570      	push	{r4, r5, r6, lr}
 801223a:	460c      	mov	r4, r1
 801223c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012240:	2900      	cmp	r1, #0
 8012242:	b096      	sub	sp, #88	@ 0x58
 8012244:	4615      	mov	r5, r2
 8012246:	461e      	mov	r6, r3
 8012248:	da0d      	bge.n	8012266 <__swhatbuf_r+0x2e>
 801224a:	89a3      	ldrh	r3, [r4, #12]
 801224c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012250:	f04f 0100 	mov.w	r1, #0
 8012254:	bf14      	ite	ne
 8012256:	2340      	movne	r3, #64	@ 0x40
 8012258:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801225c:	2000      	movs	r0, #0
 801225e:	6031      	str	r1, [r6, #0]
 8012260:	602b      	str	r3, [r5, #0]
 8012262:	b016      	add	sp, #88	@ 0x58
 8012264:	bd70      	pop	{r4, r5, r6, pc}
 8012266:	466a      	mov	r2, sp
 8012268:	f000 f848 	bl	80122fc <_fstat_r>
 801226c:	2800      	cmp	r0, #0
 801226e:	dbec      	blt.n	801224a <__swhatbuf_r+0x12>
 8012270:	9901      	ldr	r1, [sp, #4]
 8012272:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012276:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801227a:	4259      	negs	r1, r3
 801227c:	4159      	adcs	r1, r3
 801227e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012282:	e7eb      	b.n	801225c <__swhatbuf_r+0x24>

08012284 <__smakebuf_r>:
 8012284:	898b      	ldrh	r3, [r1, #12]
 8012286:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012288:	079d      	lsls	r5, r3, #30
 801228a:	4606      	mov	r6, r0
 801228c:	460c      	mov	r4, r1
 801228e:	d507      	bpl.n	80122a0 <__smakebuf_r+0x1c>
 8012290:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	6123      	str	r3, [r4, #16]
 8012298:	2301      	movs	r3, #1
 801229a:	6163      	str	r3, [r4, #20]
 801229c:	b003      	add	sp, #12
 801229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a0:	ab01      	add	r3, sp, #4
 80122a2:	466a      	mov	r2, sp
 80122a4:	f7ff ffc8 	bl	8012238 <__swhatbuf_r>
 80122a8:	9f00      	ldr	r7, [sp, #0]
 80122aa:	4605      	mov	r5, r0
 80122ac:	4639      	mov	r1, r7
 80122ae:	4630      	mov	r0, r6
 80122b0:	f7ff fbc2 	bl	8011a38 <_malloc_r>
 80122b4:	b948      	cbnz	r0, 80122ca <__smakebuf_r+0x46>
 80122b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ba:	059a      	lsls	r2, r3, #22
 80122bc:	d4ee      	bmi.n	801229c <__smakebuf_r+0x18>
 80122be:	f023 0303 	bic.w	r3, r3, #3
 80122c2:	f043 0302 	orr.w	r3, r3, #2
 80122c6:	81a3      	strh	r3, [r4, #12]
 80122c8:	e7e2      	b.n	8012290 <__smakebuf_r+0xc>
 80122ca:	89a3      	ldrh	r3, [r4, #12]
 80122cc:	6020      	str	r0, [r4, #0]
 80122ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122d2:	81a3      	strh	r3, [r4, #12]
 80122d4:	9b01      	ldr	r3, [sp, #4]
 80122d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122da:	b15b      	cbz	r3, 80122f4 <__smakebuf_r+0x70>
 80122dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122e0:	4630      	mov	r0, r6
 80122e2:	f000 f81d 	bl	8012320 <_isatty_r>
 80122e6:	b128      	cbz	r0, 80122f4 <__smakebuf_r+0x70>
 80122e8:	89a3      	ldrh	r3, [r4, #12]
 80122ea:	f023 0303 	bic.w	r3, r3, #3
 80122ee:	f043 0301 	orr.w	r3, r3, #1
 80122f2:	81a3      	strh	r3, [r4, #12]
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	431d      	orrs	r5, r3
 80122f8:	81a5      	strh	r5, [r4, #12]
 80122fa:	e7cf      	b.n	801229c <__smakebuf_r+0x18>

080122fc <_fstat_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	4d07      	ldr	r5, [pc, #28]	@ (801231c <_fstat_r+0x20>)
 8012300:	2300      	movs	r3, #0
 8012302:	4604      	mov	r4, r0
 8012304:	4608      	mov	r0, r1
 8012306:	4611      	mov	r1, r2
 8012308:	602b      	str	r3, [r5, #0]
 801230a:	f7ef fc5c 	bl	8001bc6 <_fstat>
 801230e:	1c43      	adds	r3, r0, #1
 8012310:	d102      	bne.n	8012318 <_fstat_r+0x1c>
 8012312:	682b      	ldr	r3, [r5, #0]
 8012314:	b103      	cbz	r3, 8012318 <_fstat_r+0x1c>
 8012316:	6023      	str	r3, [r4, #0]
 8012318:	bd38      	pop	{r3, r4, r5, pc}
 801231a:	bf00      	nop
 801231c:	200017f4 	.word	0x200017f4

08012320 <_isatty_r>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4d06      	ldr	r5, [pc, #24]	@ (801233c <_isatty_r+0x1c>)
 8012324:	2300      	movs	r3, #0
 8012326:	4604      	mov	r4, r0
 8012328:	4608      	mov	r0, r1
 801232a:	602b      	str	r3, [r5, #0]
 801232c:	f7ef fc50 	bl	8001bd0 <_isatty>
 8012330:	1c43      	adds	r3, r0, #1
 8012332:	d102      	bne.n	801233a <_isatty_r+0x1a>
 8012334:	682b      	ldr	r3, [r5, #0]
 8012336:	b103      	cbz	r3, 801233a <_isatty_r+0x1a>
 8012338:	6023      	str	r3, [r4, #0]
 801233a:	bd38      	pop	{r3, r4, r5, pc}
 801233c:	200017f4 	.word	0x200017f4

08012340 <_sbrk_r>:
 8012340:	b538      	push	{r3, r4, r5, lr}
 8012342:	4d06      	ldr	r5, [pc, #24]	@ (801235c <_sbrk_r+0x1c>)
 8012344:	2300      	movs	r3, #0
 8012346:	4604      	mov	r4, r0
 8012348:	4608      	mov	r0, r1
 801234a:	602b      	str	r3, [r5, #0]
 801234c:	f7ef fc44 	bl	8001bd8 <_sbrk>
 8012350:	1c43      	adds	r3, r0, #1
 8012352:	d102      	bne.n	801235a <_sbrk_r+0x1a>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	b103      	cbz	r3, 801235a <_sbrk_r+0x1a>
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	bd38      	pop	{r3, r4, r5, pc}
 801235c:	200017f4 	.word	0x200017f4

08012360 <floor>:
 8012360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012364:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012368:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801236c:	2e13      	cmp	r6, #19
 801236e:	4602      	mov	r2, r0
 8012370:	460b      	mov	r3, r1
 8012372:	460c      	mov	r4, r1
 8012374:	4605      	mov	r5, r0
 8012376:	4680      	mov	r8, r0
 8012378:	dc35      	bgt.n	80123e6 <floor+0x86>
 801237a:	2e00      	cmp	r6, #0
 801237c:	da17      	bge.n	80123ae <floor+0x4e>
 801237e:	a334      	add	r3, pc, #208	@ (adr r3, 8012450 <floor+0xf0>)
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	f7ed ff5a 	bl	800023c <__adddf3>
 8012388:	2200      	movs	r2, #0
 801238a:	2300      	movs	r3, #0
 801238c:	f7ee f98a 	bl	80006a4 <__aeabi_dcmpgt>
 8012390:	b150      	cbz	r0, 80123a8 <floor+0x48>
 8012392:	2c00      	cmp	r4, #0
 8012394:	da57      	bge.n	8012446 <floor+0xe6>
 8012396:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801239a:	432c      	orrs	r4, r5
 801239c:	2500      	movs	r5, #0
 801239e:	42ac      	cmp	r4, r5
 80123a0:	4c2d      	ldr	r4, [pc, #180]	@ (8012458 <floor+0xf8>)
 80123a2:	bf08      	it	eq
 80123a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80123a8:	4623      	mov	r3, r4
 80123aa:	462a      	mov	r2, r5
 80123ac:	e024      	b.n	80123f8 <floor+0x98>
 80123ae:	4f2b      	ldr	r7, [pc, #172]	@ (801245c <floor+0xfc>)
 80123b0:	4137      	asrs	r7, r6
 80123b2:	ea01 0c07 	and.w	ip, r1, r7
 80123b6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80123ba:	d01d      	beq.n	80123f8 <floor+0x98>
 80123bc:	a324      	add	r3, pc, #144	@ (adr r3, 8012450 <floor+0xf0>)
 80123be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c2:	f7ed ff3b 	bl	800023c <__adddf3>
 80123c6:	2200      	movs	r2, #0
 80123c8:	2300      	movs	r3, #0
 80123ca:	f7ee f96b 	bl	80006a4 <__aeabi_dcmpgt>
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d0ea      	beq.n	80123a8 <floor+0x48>
 80123d2:	2c00      	cmp	r4, #0
 80123d4:	bfbe      	ittt	lt
 80123d6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80123da:	4133      	asrlt	r3, r6
 80123dc:	18e4      	addlt	r4, r4, r3
 80123de:	ea24 0407 	bic.w	r4, r4, r7
 80123e2:	2500      	movs	r5, #0
 80123e4:	e7e0      	b.n	80123a8 <floor+0x48>
 80123e6:	2e33      	cmp	r6, #51	@ 0x33
 80123e8:	dd0a      	ble.n	8012400 <floor+0xa0>
 80123ea:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80123ee:	d103      	bne.n	80123f8 <floor+0x98>
 80123f0:	f7ed ff24 	bl	800023c <__adddf3>
 80123f4:	4602      	mov	r2, r0
 80123f6:	460b      	mov	r3, r1
 80123f8:	4610      	mov	r0, r2
 80123fa:	4619      	mov	r1, r3
 80123fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012400:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8012404:	f04f 3cff 	mov.w	ip, #4294967295
 8012408:	fa2c f707 	lsr.w	r7, ip, r7
 801240c:	4207      	tst	r7, r0
 801240e:	d0f3      	beq.n	80123f8 <floor+0x98>
 8012410:	a30f      	add	r3, pc, #60	@ (adr r3, 8012450 <floor+0xf0>)
 8012412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012416:	f7ed ff11 	bl	800023c <__adddf3>
 801241a:	2200      	movs	r2, #0
 801241c:	2300      	movs	r3, #0
 801241e:	f7ee f941 	bl	80006a4 <__aeabi_dcmpgt>
 8012422:	2800      	cmp	r0, #0
 8012424:	d0c0      	beq.n	80123a8 <floor+0x48>
 8012426:	2c00      	cmp	r4, #0
 8012428:	da0a      	bge.n	8012440 <floor+0xe0>
 801242a:	2e14      	cmp	r6, #20
 801242c:	d101      	bne.n	8012432 <floor+0xd2>
 801242e:	3401      	adds	r4, #1
 8012430:	e006      	b.n	8012440 <floor+0xe0>
 8012432:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8012436:	2301      	movs	r3, #1
 8012438:	40b3      	lsls	r3, r6
 801243a:	441d      	add	r5, r3
 801243c:	4545      	cmp	r5, r8
 801243e:	d3f6      	bcc.n	801242e <floor+0xce>
 8012440:	ea25 0507 	bic.w	r5, r5, r7
 8012444:	e7b0      	b.n	80123a8 <floor+0x48>
 8012446:	2500      	movs	r5, #0
 8012448:	462c      	mov	r4, r5
 801244a:	e7ad      	b.n	80123a8 <floor+0x48>
 801244c:	f3af 8000 	nop.w
 8012450:	8800759c 	.word	0x8800759c
 8012454:	7e37e43c 	.word	0x7e37e43c
 8012458:	bff00000 	.word	0xbff00000
 801245c:	000fffff 	.word	0x000fffff

08012460 <_init>:
 8012460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012462:	bf00      	nop
 8012464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012466:	bc08      	pop	{r3}
 8012468:	469e      	mov	lr, r3
 801246a:	4770      	bx	lr

0801246c <_fini>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	bf00      	nop
 8012470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012472:	bc08      	pop	{r3}
 8012474:	469e      	mov	lr, r3
 8012476:	4770      	bx	lr
